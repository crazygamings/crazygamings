Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 16]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 16]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 16]
	FString StreamingLevelsPrefix;//[Offset: 0x98, Size: 16]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xa8, Size: 8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xb0, Size: 8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xb8, Size: 8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xc0, Size: 8]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0xc8, Size: 176]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x180, Size: 8]
	NavigationSystem* NavigationSystem;//[Offset: 0x1b0, Size: 8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x1b8, Size: 8]
	GameStateBase* GameState;//[Offset: 0x1c0, Size: 8]
	AISystemBase* AISystem;//[Offset: 0x1c8, Size: 8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x1d0, Size: 8]
	Level*[] Levels;//[Offset: 0x1d8, Size: 16]
	LevelCollection[] LevelCollections;//[Offset: 0x1e8, Size: 16]
	Level* CurrentLevel;//[Offset: 0x200, Size: 8]
	GameInstance* OwningGameInstance;//[Offset: 0x208, Size: 8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x210, Size: 16]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x220, Size: 8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x228, Size: 8]
	WorldComposition* WorldComposition;//[Offset: 0x970, Size: 8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c2, Size: 1]

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x4033584

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xc0, Size: 8]
	Model* Model;//[Offset: 0xc8, Size: 8]
	ModelComponent*[] ModelComponents;//[Offset: 0xd0, Size: 16]
	LevelActorContainer* ActorCluster;//[Offset: 0xe0, Size: 8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe8, Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xec, Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xf0, Size: 8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf8, Size: 8]
	NavigationObjectBase* NavListEnd;//[Offset: 0x100, Size: 8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x108, Size: 16]
	float LightmapTotalSize;//[Offset: 0x118, Size: 4]
	float ShadowmapTotalSize;//[Offset: 0x11c, Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x120, Size: 16]
	Guid[] StreamingTextureGuids;//[Offset: 0x130, Size: 16]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x30c, Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x320, Size: 8]
	IntVector LightBuildLevelOffset;//[Offset: 0x328, Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x334, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x334, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x334, Size: 1]
	int HighDeviceMemoryTotalSize;//[Offset: 0x348, Size: 4]
	int LowDeviceMemoryTotalSize;//[Offset: 0x34c, Size: 4]
	WorldSettings* WorldSettings;//[Offset: 0x390, Size: 8]
	AssetUserData*[] AssetUserData;//[Offset: 0x3a0, Size: 16]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x718, Size: 8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x2d8, Size: 4]
	float MinDrawDistance;//[Offset: 0x2dc, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x2e0, Size: 4]
	float MaxDrawDistanceOffset;//[Offset: 0x2e4, Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x2e8, Size: 4]
	bool UseScopeDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec, Size: 1]
	byte DepthPriorityGroup;//[Offset: 0x2ed, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x2ee, Size: 1]
	enum LightmapType;//[Offset: 0x2ef, Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f0, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f0, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f0, Size: 1]
	bool bAsyncGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f0, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f1, Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f1, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f1, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f1, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f1, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f1, Size: 1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f1, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f1, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f2, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f2, Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f2, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f2, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f2, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f2, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f2, Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f2, Size: 1]
	bool bIdeaOutlineUseNormalInVertexColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f3, Size: 1]
	bool bIdeaOutlineNew;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f3, Size: 1]
	bool bIdeaOutlineOcclusionHighlight;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f3, Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f3, Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x2f4, Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304, Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x308, Size: 4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	enum DrawDyeingMode;//[Offset: 0x30d, Size: 1]
	LinearColor VisibleDyeingColor;//[Offset: 0x310, Size: 16]
	LinearColor OccludedDyeingColor;//[Offset: 0x320, Size: 16]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bOnlyAsOccluder;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x331, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x331, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x331, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x331, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x331, Size: 1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x332, Size: 1]
	bool bNearCascade;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x332, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x332, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x332, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x332, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x332, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x332, Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x332, Size: 1]
	bool bReceiveLandscapeShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x333, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x333, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x333, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x333, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x333, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x333, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x333, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x333, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x335, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x337, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x338, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x339, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x33c, Size: 4]
	int TranslucencySortPriority;//[Offset: 0x340, Size: 4]
	int TranslucencySortGroupPriority;//[Offset: 0x344, Size: 4]
	int VisibilityId;//[Offset: 0x348, Size: 4]
	bool bUseAsyncCompilePSO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 1]
	byte PrimitiveShadingStrategy;//[Offset: 0x351, Size: 1]
	byte ShadingRate;//[Offset: 0x352, Size: 1]
	float FOVAdaptiveShadingFactor;//[Offset: 0x354, Size: 4]
	bool bUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 1]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x360, Size: 4]
	float BoundsScale;//[Offset: 0x368, Size: 4]
	float OCBoundsScale;//[Offset: 0x36c, Size: 4]
	int OCBoundsExtent;//[Offset: 0x370, Size: 4]
	float LastSubmitTime;//[Offset: 0x374, Size: 4]
	float LastRenderTime;//[Offset: 0x378, Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x37c, Size: 4]
	float ShadowLastRenderTime;//[Offset: 0x380, Size: 4]
	bool bFreezeMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 1]
	Actor*[] MoveIgnoreActors;//[Offset: 0x388, Size: 16]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x398, Size: 16]
	MaterialInterface*[] LODDefault;//[Offset: 0x3b8, Size: 16]
	BodyInstance BodyInstance;//[Offset: 0x428, Size: 384]
	delegate OnComponentHit;//[Offset: 0x5a8, Size: 16]
	delegate OnComponentBeginOverlap;//[Offset: 0x5b8, Size: 16]
	delegate OnComponentEndOverlap;//[Offset: 0x5c8, Size: 16]
	delegate OnComponentWake;//[Offset: 0x5d8, Size: 16]
	delegate OnComponentSleep;//[Offset: 0x5e8, Size: 16]
	delegate OnBeginCursorOver;//[Offset: 0x608, Size: 16]
	delegate OnEndCursorOver;//[Offset: 0x618, Size: 16]
	delegate OnClicked;//[Offset: 0x628, Size: 16]
	delegate OnReleased;//[Offset: 0x638, Size: 16]
	delegate OnInputTouchBegin;//[Offset: 0x648, Size: 16]
	delegate OnInputTouchEnd;//[Offset: 0x658, Size: 16]
	delegate OnInputTouchEnter;//[Offset: 0x668, Size: 16]
	delegate OnInputTouchLeave;//[Offset: 0x678, Size: 16]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x6a0, Size: 8]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x6a8, Size: 88]
	void WakeRigidBody(FName BoneName);// 0x5c3ed48
	void WakeAllRigidBodies();// 0x5c3ed2c
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x5c3ec98
	void SetVisibleDyeingColor(out const LinearColor InColor);// 0x5c3ec10
	void SetUnderWater(bool bNewUnderWater);// 0x5c3eb8c
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x5c3eb10
	void SetTranslucentSortGroupPriority(int NewTranslucentSortGroupPriority);// 0x5c3ea94
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x5c3ea10
	void SetSimulatePhysics(bool bSimulate);// 0x5c3e984
	void SetRenderInMono(bool bValue);// 0x5c3e900
	void SetRenderInMainPass(bool bValue);// 0x5c3e87c
	void SetRenderCustomDepth(bool bValue);// 0x5c3e7f8
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x5c3e774
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x5c3e6f0
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x5c3e5ec
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x5c3e4dc
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x5c3e3cc
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x5c3e2c8
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x5c3e1c4
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x5c3e0ac
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x5c3df94
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x5c3df10
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x5c3de8c
	void SetOccludedDyeingColor(out const LinearColor InColor);// 0x5c3de04
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x5c3dd78
	void SetMaterialByNameAsyncCallBack(FName MaterialSlotName, MaterialInterface* AssetPtr);// 0x5c3dbf4
	void SetMaterialByNameAsync(FName MaterialSlotName, FString MaterialPath);// 0x5c3da80
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x5c3d9c4
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x5c3d904
	void SetMassScale(FName BoneName, float InMassScale);// 0x5c3d844
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x5c3d740
	void SetMaskFilter(int InMaskFilter);// 0x5c3d6c4
	void SetLODDefault(int LODIndex, MaterialInterface* LODMat);// 0x5c3d60c
	void SetLockedAxis(byte LockedAxis);// 0x5c3d588
	void SetLinearDamping(float InDamping);// 0x5c3d504
	void SetIdeaOutlineUseNormalInVertexColor(bool bNewUseNormalInVertexColor);// 0x5c3d480
	void SetIdeaOutlineOcclusionHighlight(bool bOcclusionHighlight);// 0x5c3d3fc
	void SetIdeaOutlineNew(bool bNew);// 0x5c3d378
	void SetEnableGravity(bool bGravityEnabled);// 0x5c3d2ec
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x5c3d268
	void SetDrawDyeingMode(enum InDrawDyeingMode);// 0x5c3d1ec
	void SetDrawDyeing(bool bNewDrawOutline);// 0x5c3d168
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x5c3d0ec
	void SetCustomDepthStencilValue(int Value);// 0x5c3d070
	void SetCullDistance(float NewCullDistance);// 0x5c3cff4
	void SetConstraintMode(byte ConstraintMode);// 0x5c3cf70
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x5c3ceb0
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x5c3ce2c
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x5c3cda8
	void SetCollisionObjectType(byte Channel);// 0x5c3cd24
	void SetCollisionEnabled(byte NewType);// 0x5c3cca0
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x5c3cbe8
	void SetCastShadow(bool NewCastShadow);// 0x5c3cb5c
	void SetCastPhotonShadow(bool bNewCastPhotonShadow);// 0x5c3cad8
	void SetBoundsScale(float NewBoundsScale);// 0x5c3ca5c
	void SetAngularDamping(float InDamping);// 0x5c3c9d8
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x5c3c910
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x5c3c830
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x5c3c72c
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x5c3c64c
	void SetAllMassScale(float InMassScale);// 0x5c3c5c8
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x5c3c4f4
	void PutRigidBodyToSleep(FName BoneName);// 0x5c3c478
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x5c3c3b0
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x5c3c2dc
	void K2_SetMoveIgnoreMask(int InIgnoreMask);// 0x5c3c264
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x5c3bfb0
	bool K2_IsQueryCollisionEnabled();// 0x5c3bf68
	bool K2_IsPhysicsCollisionEnabled();// 0x5c3bf20
	bool K2_IsCollisionEnabled();// 0x5c3bedc
	int K2_GetMoveIgnoreMask();// 0x5c3bec0
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x5c3be30
	bool IsOverlappingActor(const Actor* Other);// 0x5c3bda0
	bool IsGravityEnabled();// 0x5c3bd60
	bool IsAnyRigidBodyAwake();// 0x5c3bd20
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x5c3bc60
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x5c3bba0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x5c3bb58
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x5c3ba8c
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x5c3b9fc
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x5c3b96c
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x5c3b8c8
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x5c3b824
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x5c3b76c
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x5c3b668
	int GetNumMaterials();// 0x5c3b62c
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x5c3b54c
	MaterialInterface* GetMaterialAsync(int ElementIndex, delegate MaterialCallback);// 0x5c3b45c
	MaterialInterface* GetMaterial(int ElementIndex);// 0x5c3b3c8
	float GetMassScale(FName BoneName);// 0x5c3b334
	float GetMass();// 0x5c3b2f8
	int GetMaskFilter();// 0x5c3b2dc
	float GetLinearDamping();// 0x5c3b2a0
	Vector GetInertiaTensor(FName BoneName);// 0x5c3b208
	byte GetCollisionResponseToChannel(byte Channel);// 0x5c3b174
	FName GetCollisionProfileName();// 0x5c3b140
	byte GetCollisionObjectType();// 0x5c3b104
	byte GetCollisionEnabled();// 0x5c3b0c8
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x5c3af9c
	Vector GetCenterOfMass(FName BoneName);// 0x5c3af0c
	float GetAngularDamping();// 0x5c3aed0
	MaterialInstanceDynamic* CreateDynamicMaterialInstanceAsync(int ElementIndex, delegate MaterialInstCallback, MaterialInterface* SourceMaterial);// 0x5c3ada4
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x5c3acd4
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterialAsync(int ElementIndex, MaterialInterface* Parent, delegate MaterialInstCallback);// 0x5c3aba8
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x5c3aad8
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicAsync(int ElementIndex, delegate MaterialInstCallback);// 0x5c3a9e8
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x5c3a954
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x5c3a8b0
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x5c3a80c
	void ClearMoveIgnoreComponents();// 0x5c3a7e0
	void ClearMoveIgnoreActors();// 0x5c3a7cc
	bool CanCharacterStepUp(Pawn* Pawn);// 0x5c3a734
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x5c3a638
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x5c3a528
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x5c3a42c
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x5c3a2b4
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x5c3a13c
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x5c3a040
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x5c39f3c
	void AddForceAtLocationLocal(Vector force, Vector Location, FName BoneName);// 0x5c39e40
	void AddForceAtLocation(Vector force, Vector Location, FName BoneName);// 0x5c39d44
	void AddForce(Vector force, FName BoneName, bool bAccelChange);// 0x5c39c40
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x5c39b3c
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x5c39a24
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x5c39920

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0x118, Size: 8]
	SceneComponent* AttachParent;//[Offset: 0x120, Size: 8]
	FName AttachSocketName;//[Offset: 0x128, Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0x130, Size: 16]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0x140, Size: 16]
	Vector RelativeLocation;//[Offset: 0x17c, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x188, Size: 12]
	Vector RelativeScale3D;//[Offset: 0x194, Size: 12]
	Vector ComponentVelocity;//[Offset: 0x200, Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	int AntiCheatRandValue0;//[Offset: 0x210, Size: 4]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	int AntiCheatRandValue1;//[Offset: 0x218, Size: 4]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21c, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21c, Size: 1]
	int AntiCheatRandValue2;//[Offset: 0x220, Size: 4]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 1]
	int AntiCheatRandValue3;//[Offset: 0x228, Size: 4]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	int AntiCheatRandValue4;//[Offset: 0x230, Size: 4]
	int AntiCheatRandValue5;//[Offset: 0x238, Size: 4]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 1]
	byte Mobility;//[Offset: 0x23d, Size: 1]
	int AntiCheatRandValue6;//[Offset: 0x240, Size: 4]
	byte DetailMode;//[Offset: 0x244, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x290, Size: 16]
	void ToggleVisibility(bool bPropagateToChildren);// 0x5c54f38
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x5c54e70
	void SetWorldScale3D(Vector NewScale);// 0x5c54df4
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x5c54d1c
	void SetSkipUpdateChildTransforms(bool EnableSkipUpdateChildTransforms);// 0x5c54c9c
	void SetRelativeScale3D(Vector NewScale3D);// 0x5c54c18
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x5c54b44
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x5c54a30
	void ResetRelativeTransform();// 0x5c54a1c
	void OnRep_Visibility(bool OldValue);// 0x5c54998
	void OnRep_Transform();// 0x5c54984
	void OnRep_AttachSocketName();// 0x5c54970
	void OnRep_AttachParent();// 0x5c5495c
	void OnRep_AttachChildren();// 0x5c54948
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c547a0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c54630
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c54484
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c54314
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c5416c
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c53ffc
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c53e50
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c53ce0
	Transform K2_GetComponentToWorld();// 0x5c53c8c
	Vector K2_GetComponentScale();// 0x5c53c54
	Rotator K2_GetComponentRotation();// 0x5c53c1c
	Vector K2_GetComponentLocation();// 0x5c53be4
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x5c53aac
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x5c538ec
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x5c537a4
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c535fc
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c5348c
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c5331c
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c531ac
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c5303c
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c52e94
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c52d24
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5c52bb4
	bool IsVisible();// 0x5c52b74
	bool IsSimulatingPhysics(FName BoneName);// 0x5c52adc
	bool IsAnySimulatingPhysics();// 0x5c52a9c
	Vector GetUpVector();// 0x5c52a64
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x5c5297c
	Rotator GetSocketRotation(FName InSocketName);// 0x5c528e4
	Quat GetSocketQuaternion(FName InSocketName);// 0x5c52848
	Vector GetSocketLocation(FName InSocketName);// 0x5c527b0
	Vector GetRightVector();// 0x5c52778
	Transform GetRelativeTransform();// 0x5c52724
	PhysicsVolume* GetPhysicsVolume();// 0x5c526f0
	void GetParentComponents(out SceneComponent*[] Parents);// 0x5c52638
	int GetNumChildrenComponents();// 0x5c52604
	Vector GetForwardVector();// 0x5c525cc
	Vector GetComponentVelocity();// 0x5c5258c
	Transform GetComponentTransformViewTranslatedBP();// 0x5c52568
	Transform GetComponentLocal(out const Transform LocalTransform);// 0x5c5249c
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x5c52394
	SceneComponent* GetChildComponent(int ChildIndex);// 0x5c52308
	FName GetAttachSocketName();// 0x5c522ec
	SceneComponent* GetAttachParent();// 0x5c522d0
	FName[] GetAllSocketNames();// 0x5c5222c
	bool DoesSocketExist(FName InSocketName);// 0x5c52194
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x5c520bc

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 88]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	FName[] ComponentTags;//[Offset: 0x90, Size: 16]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	float NetUpdateFrequency;//[Offset: 0xa4, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0xb0, Size: 16]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc2, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc2, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc2, Size: 1]
	bool bIsClientOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc3, Size: 1]
	enum CreationMethod;//[Offset: 0xc5, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0xc8, Size: 16]
	delegate OnComponentActivated;//[Offset: 0xe0, Size: 16]
	delegate OnComponentDeactivated;//[Offset: 0xf0, Size: 16]
	void ToggleActive();// 0x5aca1fc
	void SetTickGroup(byte NewTickGroup);// 0x5aca180
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x5aca0fc
	void SetIsReplicated(bool ShouldReplicate);// 0x5aca078
	void SetComponentTickInterval(float TickInterval);// 0x5ac9ffc
	void SetComponentTickEnabled(bool bEnabled);// 0x5ac9f70
	void SetAutoActivate(bool bNewAutoActivate);// 0x5ac9ee4
	void SetActive(bool bNewActive, bool bReset);// 0x5ac9e0c
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5ac9d88
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5ac9d04
	void ReceiveTick(float DeltaSeconds);// 0x4033584
	void ReceiveEndPlay(byte EndPlayReason);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void OnRep_Replicates();// 0x5ac9cf0
	void OnRep_IsActive();// 0x5ac9cdc
	void K2_DestroyComponent(Object* Object);// 0x5ac9c60
	bool IsComponentTickEnabled();// 0x5ac9c28
	bool IsBeingDestroyed();// 0x5ac9c08
	bool IsActive();// 0x5ac9bc8
	Actor* GetOwner();// 0x5ac9bac
	float GetComponentTickInterval();// 0x5ac9b78
	void ForceNetUpdate();// 0x5ac9b5c
	void Deactivate();// 0x5ac9b40
	bool ComponentHasTag(FName Tag);// 0x5ac9ab0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5ac9a2c
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5ac99a8
	void Activate(bool bReset);// 0x5ac991c

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 4]
	float G;//[Offset: 0x4, Size: 4]
	float B;//[Offset: 0x8, Size: 4]
	float A;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 1]
	byte EndTickGroup;//[Offset: 0x9, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	float TickInterval;//[Offset: 0x40, Size: 4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x400, Size: 4]
	int Priority;//[Offset: 0x404, Size: 4]
	float FluidFriction;//[Offset: 0x408, Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40c, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40c, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x3c8, Size: 1]
	Color BrushColor;//[Offset: 0x3cc, Size: 4]
	int PolyFlags;//[Offset: 0x3d0, Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d4, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d4, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d4, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d4, Size: 1]
	Model* Brush;//[Offset: 0x3d8, Size: 8]
	BrushComponent* BrushComponent;//[Offset: 0x3e0, Size: 8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e8, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x3f0, Size: 16]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 88]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	float CustomTimeDilation;//[Offset: 0x84, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x88, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x88, Size: 1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x88, Size: 1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x88, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8a, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8a, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8b, Size: 1]
	byte RemoteRole;//[Offset: 0x8c, Size: 1]
	Actor* Owner;//[Offset: 0x90, Size: 8]
	byte WorldParallelismID;//[Offset: 0x98, Size: 1]
	FName NetDriverName;//[Offset: 0xa8, Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0xb0, Size: 72]
	float InitialLifeSpan;//[Offset: 0xf8, Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0x100, Size: 64]
	byte Role;//[Offset: 0x140, Size: 1]
	byte NetDormancy;//[Offset: 0x141, Size: 1]
	byte AutoReceiveInput;//[Offset: 0x142, Size: 1]
	int InputPriority;//[Offset: 0x144, Size: 4]
	InputComponent* InputComponent;//[Offset: 0x148, Size: 8]
	float NetCullDistanceSquared;//[Offset: 0x150, Size: 4]
	int NetTag;//[Offset: 0x154, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x15c, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x160, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x164, Size: 4]
	bool bActorReplicateFreqLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 1]
	bool bActorReplicateFreqLODDistEnhancedOnBack;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x168, Size: 1]
	ActorReplicateFreqLODConfig[] ActorReplicateFreqLODConfigs;//[Offset: 0x170, Size: 16]
	int NetUpdateGroupID;//[Offset: 0x184, Size: 4]
	float NetPriority;//[Offset: 0x188, Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x190, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x190, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x190, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x190, Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x190, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x190, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x191, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x191, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x191, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x191, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x191, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x192, Size: 1]
	Pawn* Instigator;//[Offset: 0x1a0, Size: 8]
	Actor*[] Children;//[Offset: 0x1a8, Size: 16]
	SceneComponent* RootComponent;//[Offset: 0x1b8, Size: 8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x1c0, Size: 16]
	FName[] Layers;//[Offset: 0x1d8, Size: 16]
	ChildActorComponent* ParentComponent;//[Offset: 0x1e8, Size: 8]
	FName[] Tags;//[Offset: 0x1f0, Size: 16]
	uint64 HiddenEditorViews;//[Offset: 0x200, Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x208, Size: 16]
	delegate OnTakePointDamage;//[Offset: 0x218, Size: 16]
	delegate OnActorBeginOverlap;//[Offset: 0x228, Size: 16]
	delegate OnActorEndOverlap;//[Offset: 0x238, Size: 16]
	delegate OnBeginCursorOver;//[Offset: 0x248, Size: 16]
	delegate OnEndCursorOver;//[Offset: 0x258, Size: 16]
	delegate OnClicked;//[Offset: 0x268, Size: 16]
	delegate OnReleased;//[Offset: 0x278, Size: 16]
	delegate OnInputTouchBegin;//[Offset: 0x288, Size: 16]
	delegate OnInputTouchEnd;//[Offset: 0x298, Size: 16]
	delegate OnInputTouchEnter;//[Offset: 0x2a8, Size: 16]
	delegate OnInputTouchLeave;//[Offset: 0x2b8, Size: 16]
	delegate OnActorHit;//[Offset: 0x2c8, Size: 16]
	delegate OnDestroyed;//[Offset: 0x2d8, Size: 16]
	delegate OnEndPlay;//[Offset: 0x2e8, Size: 16]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x398, Size: 16]
	ActorComponent*[] InstanceComponents;//[Offset: 0x3a8, Size: 16]
	bool WasRecentlyRendered(float Tolerance);// 0x5ac69ec
	void UserConstructionScript();// 0x4033584
	void TearOff();// 0x5ac69d0
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x5ac691c
	void SetTickGroup(byte NewTickGroup);// 0x5ac68a0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x5ac681c
	void SetReplicates(bool bInReplicates);// 0x5ac6798
	void SetReplicateMovement(bool bInReplicateMovement);// 0x5ac670c
	void SetOwner(Actor* NewOwner);// 0x5ac6688
	void SetNetUpdateGroupID(int InGroupID);// 0x5ac6604
	void SetNetUpdateGroup(Actor* InConnectionActor);// 0x5ac6580
	void SetNetDormancy(byte NewDormancy);// 0x5ac6504
	void SetLifeSpan(float InLifespan);// 0x5ac6480
	void SetActorTickInterval(float TickInterval);// 0x5ac6404
	void SetActorTickEnabled(bool bEnabled);// 0x5ac6380
	void SetActorScale3D(Vector NewScale3D);// 0x5ac6304
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x5ac6288
	void SetActorHiddenInGame(bool bNewHidden);// 0x5ac61fc
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x5ac6178
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5ac60f4
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5ac6070
	void ReceiveTick(float DeltaSeconds);// 0x4033584
	void ReceiveReInitForReplay();// 0x4033584
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x4033584
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x4033584
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x4033584
	void ReceiveEndPlay(byte EndPlayReason);// 0x4033584
	void ReceiveDestroyed();// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x4033584
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x4033584
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x4033584
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x4033584
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x4033584
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x4033584
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x4033584
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x4033584
	void ReceiveActorEndCursorOver();// 0x4033584
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x4033584
	void ReceiveActorBeginCursorOver();// 0x4033584
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x5ac5f64
	void OnRep_ReplicateMovement();// 0x5ac5f48
	void OnRep_ReplicatedMovement();// 0x5ac5f2c
	void OnRep_Owner();// 0x5ac5f10
	void OnRep_Instigator();// 0x5ac5ef4
	void OnRep_AttachmentReplication();// 0x5ac5ed8
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x5ac5d6c
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x5ac5ce0
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x5ac5c14
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5ac5a58
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x5ac5984
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5ac57dc
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5ac566c
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5ac54fc
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5ac533c
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5ac51b8
	void K2_OnReset();// 0x4033584
	void K2_OnEndViewTarget(PlayerController* PC);// 0x4033584
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x4033584
	SceneComponent* K2_GetRootComponent();// 0x5ac519c
	Rotator K2_GetActorRotation();// 0x5ac50d0
	Vector K2_GetActorLocation();// 0x5ac508c
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x5ac4f98
	void K2_DestroyComponent(ActorComponent* Component);// 0x5ac4f1c
	void K2_DestroyActor();// 0x5ac4f00
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x5ac4d54
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x5ac4ba8
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x5ac4a74
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x5ac4940
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5ac4798
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5ac4628
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5ac44b8
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5ac4310
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5ac41a0
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x5ac4030
	bool IsOverlappingActor(const Actor* Other);// 0x5ac3fa0
	bool IsChildActor();// 0x5ac3f68
	bool IsActorTickEnabled();// 0x5ac3f30
	bool IsActorBeingDestroyed();// 0x5ac3f10
	bool HasAuthority();// 0x5ac3eec
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x5ac3e60
	Vector GetVelocity();// 0x5ac3e20
	Transform GetTransform();// 0x5ac3de4
	bool GetTickableWhenPaused();// 0x5ac3dac
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x5ac3d20
	byte GetRole();// 0x5ac3cec
	byte GetRemoteRole();// 0x5ac3cd0
	ChildActorComponent* GetParentComponent();// 0x5ac3c9c
	Actor* GetParentActor();// 0x5ac3c68
	Actor* GetOwner();// 0x5ac3c4c
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x5ac3b94
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x5ac3a90
	float GetLifeSpan();// 0x5ac3a54
	Controller* GetInstigatorController();// 0x5ac3a20
	Pawn* GetInstigator();// 0x5ac39ec
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x5ac379c
	float GetInputAxisValue(const FName InputAxisName);// 0x5ac3710
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x5ac34c4
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x5ac3438
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x5ac33ac
	float GetGameTimeSinceCreation();// 0x5ac3378
	float GetDotProductTo(const Actor* OtherActor);// 0x5ac32ec
	float GetDistanceTo(const Actor* OtherActor);// 0x5ac3260
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x5ac3134
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x5ac3040
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x5ac2fb4
	FName GetAttachParentSocketName();// 0x5ac2f80
	Actor* GetAttachParentActor();// 0x5ac2f4c
	void GetAttachedActors(out Actor*[] OutActors);// 0x5ac2e94
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x5ac2d88
	Vector GetActorUpVector();// 0x5ac2d34
	float GetActorTimeDilation();// 0x5ac2d00
	float GetActorTickInterval();// 0x5ac2ccc
	Vector GetActorScale3D();// 0x5ac2c94
	Vector GetActorRightVector();// 0x5ac2c40
	Vector GetActorRelativeScale3D();// 0x5ac2c08
	Vector GetActorForwardVector();// 0x5ac2bb4
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x5ac2ad0
	bool GetActorEnableCollision();// 0x5ac2ab0
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x5ac2990
	void ForceNetUpdate();// 0x5ac2974
	void ForceNetConsider();// 0x5ac2958
	void FlushNetDormancy();// 0x5ac2944
	void EnableInput(PlayerController* PlayerController);// 0x5ac28c0
	void DisableInput(PlayerController* PlayerController);// 0x5ac283c
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x5ac27b8
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x5ac2734
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x5ac26b0
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x5ac2534
	bool ActorHasTag(FName Tag);// 0x5ac24a4

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x700, Size: 8]
	BodySetup* BrushBodySetup;//[Offset: 0x708, Size: 8]
	Vector PrePivot;//[Offset: 0x710, Size: 12]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 72]
	FName BoneName;//[Offset: 0x70, Size: 8]
	byte PhysicsType;//[Offset: 0x78, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x79, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x79, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x79, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x79, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x79, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x79, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x80, Size: 8]
	bool bUsedPhysSimpleStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x90, Size: 16]
	byte CollisionReponse;//[Offset: 0xa0, Size: 1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa1, Size: 1]
	byte[] SphereCollisionEnabledList;//[Offset: 0xa8, Size: 16]
	byte[] CapsuleCollisionEnabledList;//[Offset: 0xb8, Size: 16]
	byte[] BoxCollisionEnabledList;//[Offset: 0xc8, Size: 16]
	byte[] ConvexCollisionEnabledList;//[Offset: 0xd8, Size: 16]
	byte[] TriMeshesCollisionEnabledList;//[Offset: 0xe8, Size: 16]
	byte CollisionTraceFlag;//[Offset: 0xf8, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0x100, Size: 384]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x280, Size: 16]
	float BuildScale;//[Offset: 0x290, Size: 4]
	Vector BuildScale3D;//[Offset: 0x294, Size: 12]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 16]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 16]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 16]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 16]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 64]
	Vector Center;//[Offset: 0x60, Size: 12]
	float Radius;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 16]
	Plane YPlane;//[Offset: 0x10, Size: 16]
	Plane ZPlane;//[Offset: 0x20, Size: 16]
	Plane WPlane;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 64]
	Quat Orientation;//[Offset: 0x60, Size: 16]
	Vector Center;//[Offset: 0x70, Size: 12]
	Rotator Rotation;//[Offset: 0x7c, Size: 12]
	float X;//[Offset: 0x88, Size: 4]
	float Y;//[Offset: 0x8c, Size: 4]
	float Z;//[Offset: 0x90, Size: 4]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 4]
	float Yaw;//[Offset: 0x4, Size: 4]
	float Roll;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x20, Size: 64]
	Quat Orientation;//[Offset: 0x60, Size: 16]
	Vector Center;//[Offset: 0x70, Size: 12]
	Rotator Rotation;//[Offset: 0x7c, Size: 12]
	float Radius;//[Offset: 0x88, Size: 4]
	float Length;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x20, Size: 16]
	Box ElemBox;//[Offset: 0x30, Size: 28]
	Transform Transform;//[Offset: 0x50, Size: 48]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 12]
	Vector Max;//[Offset: 0xc, Size: 12]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 16]
	Vector Translation;//[Offset: 0x10, Size: 12]
	Vector Scale3D;//[Offset: 0x20, Size: 12]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float Restitution;//[Offset: 0x30, Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	Color MaterialColor;//[Offset: 0x38, Size: 4]
	float Density;//[Offset: 0x3c, Size: 4]
	float RaiseMassToPower;//[Offset: 0x40, Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x44, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 8]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	float TireFrictionScale;//[Offset: 0x54, Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 16]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 8]
	float FrictionScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 8]

--------------------------------
Class: StaticMesh.Object
	MaterialInterface* ReplaceMaterial;//[Offset: 0x40, Size: 8]
	int MinLOD;//[Offset: 0x48, Size: 4]
	MaterialInterface*[] Materials;//[Offset: 0x50, Size: 16]
	StaticMaterial[] StaticMaterials;//[Offset: 0x60, Size: 16]
	float LightmapUVDensity;//[Offset: 0x70, Size: 4]
	int LightMapResolution;//[Offset: 0x74, Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0x78, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x7c, Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 8]
	int LODForCollision;//[Offset: 0x90, Size: 4]
	float CullingScreenSize;//[Offset: 0x94, Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bLazyLoadBulkData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x99, Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0xe0, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0x120, Size: 16]
	Vector PositiveBoundsExtension;//[Offset: 0x140, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x14c, Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x158, Size: 28]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x178, Size: 16]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x188, Size: 12]
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x198, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1a0, Size: 16]
	NavCollision* NavCollision;//[Offset: 0x1b0, Size: 8]
	int GetNumSections(int InLOD);// 0x5c7ae6c
	int GetNumLODs();// 0x5c7ae38
	int GetMaterialIndex(FName MaterialSlotName);// 0x5c7adac
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x5c7ad20
	BoxSphereBounds GetBounds();// 0x5c7acd4
	Box GetBoundingBox();// 0x5c7ac88

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x30, Size: 8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x48, Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 16]
	void SetStreamingTextureMipOffset(int NewMipOffset, bool SizeLimited);// 0x5be3310
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x5be31c0
	PhysicalMaterial* GetPhysicalMaterial();// 0x5be3184
	Material* GetBaseMaterial();// 0x5be3150

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 36]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 16]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float EmissiveBoost;//[Offset: 0x4, Size: 4]
	float DiffuseBoost;//[Offset: 0x8, Size: 4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 4]
	int UVChannelIndex;//[Offset: 0x4, Size: 4]
	FName TextureName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x78, Size: 8]
	ColorMaterialInput DiffuseColor;//[Offset: 0x80, Size: 64]
	ColorMaterialInput SpecularColor;//[Offset: 0xc0, Size: 64]
	ColorMaterialInput BaseColor;//[Offset: 0x100, Size: 64]
	ScalarMaterialInput Metallic;//[Offset: 0x140, Size: 64]
	ScalarMaterialInput Specular;//[Offset: 0x180, Size: 64]
	ScalarMaterialInput Roughness;//[Offset: 0x1c0, Size: 64]
	VectorMaterialInput Normal;//[Offset: 0x200, Size: 72]
	ColorMaterialInput EmissiveColor;//[Offset: 0x248, Size: 64]
	ScalarMaterialInput Opacity;//[Offset: 0x288, Size: 64]
	ScalarMaterialInput OpacityMask;//[Offset: 0x2c8, Size: 64]
	byte MaterialDomain;//[Offset: 0x308, Size: 1]
	byte BlendMode;//[Offset: 0x309, Size: 1]
	byte DecalBlendMode;//[Offset: 0x30a, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x30b, Size: 1]
	byte ShadingModel;//[Offset: 0x30c, Size: 1]
	byte ShadingRate;//[Offset: 0x30d, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x310, Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x314, Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	byte OITBlendMode;//[Offset: 0x319, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x320, Size: 72]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x368, Size: 72]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x3b0, Size: 64]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x3f0, Size: 64]
	ScalarMaterialInput ClearCoat;//[Offset: 0x430, Size: 64]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x470, Size: 64]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x4b0, Size: 64]
	ScalarMaterialInput Refraction;//[Offset: 0x4f0, Size: 64]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x530, Size: 72]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x770, Size: 64]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x7b0, Size: 64]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x7f0, Size: 80]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x840, Size: 80]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x890, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x890, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x890, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x890, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x890, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x890, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x890, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x890, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x894, Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x898, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x89c, Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x8a4, Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x8a8, Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x8ac, Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x8b0, Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x8b4, Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x8b8, Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x8c8, Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cc, Size: 1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cc, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cd, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cd, Size: 1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cd, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ce, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8ce, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8ce, Size: 1]
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8ce, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8ce, Size: 1]
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8ce, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8ce, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8ce, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8cf, Size: 1]
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8cf, Size: 1]
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8cf, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8cf, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8cf, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8cf, Size: 1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8cf, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8cf, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d0, Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d0, Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d0, Size: 1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d0, Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d0, Size: 1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d0, Size: 1]
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d0, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d0, Size: 1]
	bool bShadowUseTentFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d1, Size: 1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d1, Size: 1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d1, Size: 1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d1, Size: 1]
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d1, Size: 1]
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d1, Size: 1]
	bool bUsedWithLandscapeShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d1, Size: 1]
	bool bUseLandscapeMultiLayer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d1, Size: 1]
	bool bUsedWithPhotonShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d2, Size: 1]
	bool bUsedWithPhotonShadowPCSS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d2, Size: 1]
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d2, Size: 1]
	byte ShadowOverride;//[Offset: 0x8d3, Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x8d4, Size: 1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d5, Size: 1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d5, Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d5, Size: 1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d5, Size: 1]
	bool bUseAsTranslucentEarlyZ;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d5, Size: 1]
	bool bLiteRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d5, Size: 1]
	bool bUseSimpleSkyLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d5, Size: 1]
	bool bACESOff;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8d5, Size: 1]
	bool bEmissionOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d6, Size: 1]
	bool bInstL2WOnlyTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d6, Size: 1]
	bool bUseLiteFog;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8d6, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8d6, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8d6, Size: 1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8d6, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8d6, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x8d7, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8d8, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8d8, Size: 1]
	float MaxDisplacement;//[Offset: 0x8dc, Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8e0, Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8e0, Size: 1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8e0, Size: 1]
	int EditorX;//[Offset: 0x8e4, Size: 4]
	int EditorY;//[Offset: 0x8e8, Size: 4]
	int EditorPitch;//[Offset: 0x8ec, Size: 4]
	int EditorYaw;//[Offset: 0x8f0, Size: 4]
	MaterialExpression*[] Expressions;//[Offset: 0x8f8, Size: 16]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x908, Size: 16]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x918, Size: 16]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x928, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x928, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x928, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x928, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x928, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x928, Size: 1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x928, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x928, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x929, Size: 1]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x929, Size: 1]
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x929, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x92c, Size: 4]
	byte BlendableLocation;//[Offset: 0x930, Size: 1]
	int BlendablePriority;//[Offset: 0x934, Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 1]
	byte RefractionMode;//[Offset: 0x939, Size: 1]
	float RefractionDepthBias;//[Offset: 0x93c, Size: 4]
	bool bOceanFoam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x940, Size: 1]
	bool bEnableMeshClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x940, Size: 1]
	bool bEnableMeshDiscard;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x940, Size: 1]
	bool bIsEnhancedUImage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x940, Size: 1]
	Guid stateID;//[Offset: 0x944, Size: 16]
	Texture*[] ExpressionTextureReferences;//[Offset: 0xa50, Size: 16]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	Color Constant;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x8, Size: 16]
	int Mask;//[Offset: 0x18, Size: 4]
	int MaskR;//[Offset: 0x1c, Size: 4]
	int MaskG;//[Offset: 0x20, Size: 4]
	int MaskB;//[Offset: 0x24, Size: 4]
	int MaskA;//[Offset: 0x28, Size: 4]
	FName ExpressionName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	float Constant;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	Vector Constant;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	float ConstantX;//[Offset: 0x3c, Size: 4]
	float ConstantY;//[Offset: 0x40, Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x8, Size: 16]
	int Mask;//[Offset: 0x18, Size: 4]
	int MaskR;//[Offset: 0x1c, Size: 4]
	int MaskG;//[Offset: 0x20, Size: 4]
	int MaskB;//[Offset: 0x24, Size: 4]
	int MaskA;//[Offset: 0x28, Size: 4]
	FName ExpressionName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	Vector4 Constant;//[Offset: 0x40, Size: 16]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 8]
	MaterialFunction* Function;//[Offset: 0x30, Size: 8]
	FString Desc;//[Offset: 0x38, Size: 16]
	Color BorderColor;//[Offset: 0x48, Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4c, Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4c, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4c, Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d, Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d, Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4d, Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x50, Size: 16]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x28, Size: 16]
	FString Description;//[Offset: 0x38, Size: 16]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x50, Size: 16]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 4]
	int B;//[Offset: 0x4, Size: 4]
	int C;//[Offset: 0x8, Size: 4]
	int D;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0, Size: 16]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]

--------------------------------
Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialFunction* Function;//[Offset: 0x10, Size: 8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x28, Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 16]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 16]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Guid ID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x30, Size: 16]
	int LODBias;//[Offset: 0x40, Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x44, Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x48, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x48, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x48, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x60, Size: 16]
	int CachedCombinedLODBias;//[Offset: 0x70, Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	byte CompressionSettings;//[Offset: 0x75, Size: 1]
	byte Filter;//[Offset: 0x76, Size: 1]
	byte LODGroup;//[Offset: 0x77, Size: 1]
	byte CrunchSetting;//[Offset: 0x78, Size: 1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 1]
	float CrunchCompressionAmount;//[Offset: 0x7c, Size: 4]
	byte BasisSetting;//[Offset: 0x80, Size: 1]
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 1]
	float BasisCompressionAmount;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 8]
	FString SubPathString;//[Offset: 0x8, Size: 16]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 12]
	Vector RelativeScale;//[Offset: 0x48, Size: 12]
	FString Tag;//[Offset: 0x58, Size: 16]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 12]
	Vector BoxExtent;//[Offset: 0xc, Size: 12]
	float SphereRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x78, Size: 16]
	NavCollisionBox[] BoxCollision;//[Offset: 0x88, Size: 16]
	class NavArea* AreaClass;//[Offset: 0x98, Size: 8]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float Height;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 12]
	Vector Extent;//[Offset: 0xc, Size: 12]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x28, Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x2c, Size: 4]
	Color DrawColor;//[Offset: 0x30, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x34, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x38, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x39, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x39, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x39, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x39, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x39, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x19, Size: 1]
	byte DOFMode;//[Offset: 0x1a, Size: 1]
	byte CollisionEnabled;//[Offset: 0x1b, Size: 1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 48]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x5c, Size: 4]
	float MassInKgOverride;//[Offset: 0x68, Size: 4]
	float LinearDamping;//[Offset: 0x6c, Size: 4]
	float AngularDamping;//[Offset: 0x70, Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x74, Size: 12]
	Vector COMNudge;//[Offset: 0x80, Size: 12]
	float MassScale;//[Offset: 0x8c, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x90, Size: 12]
	byte ObjectType;//[Offset: 0x9c, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xb0, Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xc0, Size: 8]
	float MaxAngularVelocity;//[Offset: 0xc8, Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xcc, Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xd0, Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xd4, Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xd8, Size: 4]
	uint64 RigidActorSyncId;//[Offset: 0x108, Size: 8]
	uint64 RigidActorAsyncId;//[Offset: 0x110, Size: 8]
	int VelocitySolverIterationCount;//[Offset: 0x118, Size: 4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 16]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 8]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int SelectionIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 12]
	Vector AngularVelocity;//[Offset: 0xc, Size: 12]
	Vector Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]
	bool LocationQuantizationLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	FName LocationQuantizationLODGroup;//[Offset: 0x38, Size: 8]
	byte ForcedLocationQuantizationLOD;//[Offset: 0x40, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 12]
	Rotator RotationOffset;//[Offset: 0x20, Size: 12]
	FName AttachSocket;//[Offset: 0x30, Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x5b63a24
	bool WasControllerKeyJustPressed(Key Key);// 0x5b637d4
	bool IsControllerKeyDown(Key Key);// 0x5b63584
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x5b63414
	Vector GetControllerVectorKeyState(Key Key);// 0x5b631c4
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x5b630e0
	float GetControllerKeyTimeDown(Key Key);// 0x5b62e94
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x5b62d74
	float GetControllerAnalogKeyState(Key Key);// 0x5b62b28

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: ActorReplicateFreqLODConfig
	float DistSquared;//[Offset: 0x0, Size: 4]
	float NetUpdateFreq;//[Offset: 0x4, Size: 4]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d0, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d0, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d0, Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 1]
	float BaseEyeHeight;//[Offset: 0x3d4, Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x3d8, Size: 1]
	enum AutoPossessAI;//[Offset: 0x3d9, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x3e0, Size: 8]
	PlayerState* PlayerState;//[Offset: 0x3e8, Size: 8]
	byte RemoteViewPitch;//[Offset: 0x3f0, Size: 1]
	Controller* LastHitBy;//[Offset: 0x3f8, Size: 8]
	Controller* Controller;//[Offset: 0x400, Size: 8]
	Vector ControlInputVector;//[Offset: 0x410, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x41c, Size: 12]
	void SpawnDefaultController();// 0x5c1b3fc
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x5c1b370
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x5c1b2a0
	void ReceiveUnpossessed(Controller* OldController);// 0x4033584
	void ReceivePossessed(Controller* NewController);// 0x4033584
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x5c1b164
	void OnRep_PlayerState();// 0x5c1b148
	void OnRep_Controller();// 0x5c1b12c
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x5c1b020
	Vector K2_GetMovementInputVector();// 0x5c1afe8
	bool IsPlayerControlled();// 0x5c1afa8
	bool IsMoveInputIgnored();// 0x5c1af68
	bool IsLocallyControlled();// 0x5c1af28
	bool IsControlled();// 0x5c1aef0
	Vector GetPendingMovementInputVector();// 0x5c1aeb8
	Vector GetNavAgentLocation();// 0x5c1ae78
	PawnMovementComponent* GetMovementComponent();// 0x5c1ae3c
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x5c1adc0
	Vector GetLastMovementInputVector();// 0x5c1ad88
	Rotator GetControlRotation();// 0x5c1ad48
	Controller* GetController();// 0x5c1ad2c
	Rotator GetBaseAimRotation();// 0x5c1acec
	void DetachFromControllerPendingDestroy();// 0x5c1acd0
	Vector ConsumeMovementInputVector();// 0x5c1ac90
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x5c1ab8c
	void AddControllerYawInput(float Val);// 0x5c1ab08
	void AddControllerRollInput(float Val);// 0x5c1aa84
	void AddControllerPitchInput(float Val);// 0x5c1aa00

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x3d0, Size: 8]
	Character* Character;//[Offset: 0x3e0, Size: 8]
	PlayerState* PlayerState;//[Offset: 0x3e8, Size: 8]
	SceneComponent* TransformComponent;//[Offset: 0x3f0, Size: 8]
	Rotator ControlRotation;//[Offset: 0x3f8, Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x404, Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x404, Size: 1]
	FName StateName;//[Offset: 0x410, Size: 8]
	Actor* ObservedActor;//[Offset: 0x418, Size: 8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x420, Size: 16]
	void UnPossess();// 0x5b18930
	void StopMovement();// 0x5b18914
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x5b18830
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x5b187a4
	void SetIgnoreLookInput(bool bNewLookInput);// 0x5b18718
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x5b18610
	void ResetIgnoreMoveInput();// 0x5b185f4
	void ResetIgnoreLookInput();// 0x5b185d8
	void ResetIgnoreInputFlags();// 0x5b185bc
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x4033584
	void Possess(Pawn* InPawn);// 0x5b18538
	void OnRep_PlayerState();// 0x5b1851c
	void OnRep_Pawn();// 0x5b18500
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x5b183e8
	Pawn* K2_GetPawn();// 0x5b183b4
	bool IsPlayerController();// 0x5b18394
	bool IsMoveInputIgnored();// 0x5b18354
	bool IsLookInputIgnored();// 0x5b18314
	bool IsLocalPlayerController();// 0x5b182c4
	bool IsLocalController();// 0x5b18284
	Actor* GetViewTarget();// 0x5b18248
	Rotator GetDesiredRotation();// 0x5b18208
	Rotator GetControlRotation();// 0x5b181c8
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x5b18100
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x5b18040
	PlayerController* CastToPlayerController();// 0x5b1800c

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x428, Size: 8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x430, Size: 8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x438, Size: 8]
	BasedMovementInfo BasedMovement;//[Offset: 0x440, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x470, Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x4a0, Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x4a4, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x4b0, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x4c0, Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x4d0, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d1, Size: 1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x4d4, Size: 4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x4d8, Size: 4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x4dc, Size: 4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x4e0, Size: 4]
	float CrouchedEyeHeight;//[Offset: 0x4e8, Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4ec, Size: 1]
	byte Ping;//[Offset: 0x4ed, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4ee, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4ee, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4ee, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4ee, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4ee, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4ee, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4ee, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4ee, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x4f0, Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x4f4, Size: 4]
	int JumpMaxCount;//[Offset: 0x4f8, Size: 4]
	int JumpCurrentCount;//[Offset: 0x4fc, Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x500, Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x508, Size: 16]
	delegate MovementModeChangedDelegate;//[Offset: 0x528, Size: 16]
	delegate OnCharacterMovementUpdated;//[Offset: 0x538, Size: 16]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x548, Size: 256]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x650, Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x690, Size: 16]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x6a0, Size: 352]
	void UnCrouch(bool bClientSimulation);// 0x5b0d940
	void StopJumping();// 0x5b0d924
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x5b0d8a0
	void SetReplicateMovement(bool bInReplicateMovement);// 0x5b0d814
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x5b0d764
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x5b0d658
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x5b0d4e0
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x5b0d4cc
	void OnRep_RootMotion();// 0x5b0d4b8
	void OnRep_ReplicatedBasedMovement();// 0x5b0d49c
	void OnRep_IsCrouched();// 0x5b0d480
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4033584
	void OnLanded(out const HitResult Hit);// 0x4033584
	void OnJumped();// 0x5b0d464
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x5b0d350
	void K2_UpdateCustomMovement(float DeltaTime);// 0x4033584
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x4033584
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x4033584
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x4033584
	void Jump();// 0x5b0d334
	bool IsPlayingRootMotion();// 0x5b0d2fc
	bool IsPlayingNetworkedRootMotionMontage();// 0x5b0d2c4
	bool IsJumpProvidingForce();// 0x5b0d284
	AnimMontage* GetCurrentMontage();// 0x5b0d250
	Vector GetBaseTranslationOffset();// 0x5b0d228
	Rotator GetBaseRotationOffsetRotator();// 0x5b0d1d4
	float GetAnimRootMotionTranslationScale();// 0x5b0d1a0
	void Crouch(bool bClientSimulation);// 0x5b0d114
	void ClientCheatWalk();// 0x5b0d0f8
	void ClientCheatGhost();// 0x5b0d0dc
	void ClientCheatFly();// 0x5b0d0c0
	bool CanJumpInternal();// 0x5b0d080
	bool CanJump();// 0x5b0d048
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x5b0cf88

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x8a8, Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x8b0, Size: 8]
	class AnimInstance* AnimClass;//[Offset: 0x8b8, Size: 8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x8c0, Size: 8]
	AnimInstance*[] SubInstances;//[Offset: 0x8c8, Size: 16]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x8d8, Size: 8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x8e0, Size: 24]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x930, Size: 16]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x940, Size: 16]
	float GlobalAnimRateScale;//[Offset: 0x970, Size: 4]
	enum UseAsyncScene;//[Offset: 0x974, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x975, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x976, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x977, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x978, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x978, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x978, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x978, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x978, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x978, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x980, Size: 16]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x990, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x990, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x990, Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x990, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x990, Size: 1]
	float ClothBlendWeight;//[Offset: 0x994, Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x99c, Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9a8, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9a8, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9a8, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a9, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9aa, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x9b0, Size: 8]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b9, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9b9, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9b9, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9b9, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9b9, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9b9, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9b9, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9b9, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x9ba, Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x9bc, Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x9d0, Size: 16]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0xad0, Size: 8]
	float TeleportDistanceThreshold;//[Offset: 0xad8, Size: 4]
	float TeleportRotationThreshold;//[Offset: 0xadc, Size: 4]
	delegate OnAnimInitialized;//[Offset: 0xc18, Size: 16]
	AnimSequence* SequenceToPlay;//[Offset: 0xcf8, Size: 8]
	AnimationAsset* AnimToPlay;//[Offset: 0xd00, Size: 8]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd08, Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd08, Size: 1]
	float DefaultPosition;//[Offset: 0xd0c, Size: 4]
	float DefaultPlayRate;//[Offset: 0xd10, Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0xd14, Size: 4]
	float LastPoseTickTime;//[Offset: 0xd18, Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd52, Size: 1]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x5c5d8f8
	void SuspendClothingSimulation();// 0x5c5d8e4
	void Stop();// 0x5c5d8d0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x5c5d7e8
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x5c5d764
	void SetTeleportRotationThreshold(float Threshold);// 0x5c5d6e8
	void SetTeleportDistanceThreshold(float Threshold);// 0x5c5d66c
	void SetPosition(float InPos, bool bFireNotifies);// 0x5c5d5ac
	void SetPlayRate(float Rate);// 0x5c5d530
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x5c5d4b4
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x5c5d3a0
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x5c5d2a4
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x5c5d220
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x5c5d114
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x5c5d04c
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x5c5cfc8
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x5c5cf08
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x5c5ce10
	void SetClothMaxDistanceScale(float Scale);// 0x5c5cd94
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x5c5ccc4
	void SetAnimInstanceClass(class Object NewClass);// 0x5c5cc48
	void SetAnimationMode(byte InAnimationMode);// 0x5c5cbcc
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x5c5cb50
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x5c5ca24
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x5c5c918
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x5c5c894
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x5c5c780
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x5c5c66c
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x5c5c538
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x5c5c4b4
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x5c5c3f4
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x5c5c2d4
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x5c5c178
	void ResumeClothingSimulation();// 0x5c5c164
	void ResetClothTeleportMode();// 0x5c5c150
	void ResetAllowedAnimCurveEvaluation();// 0x5c5c13c
	void ResetAllBodiesSimulatePhysics();// 0x5c5c128
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x5c5c068
	void Play(bool bLooping);// 0x5c5bfe4
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x5c5be64
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x5c5bc80
	bool IsPlaying();// 0x5c5bc48
	bool IsClothingSimulationSuspended();// 0x5c5bc10
	bool IsBodyGravityEnabled(FName BoneName);// 0x5c5bb80
	float GetTeleportRotationThreshold();// 0x5c5bb4c
	float GetTeleportDistanceThreshold();// 0x5c5bb18
	AnimInstance*[] GetSubAnimInstances();// 0x5c5ba74
	Vector GetSkeletalCenterOfMass();// 0x5c5ba3c
	AnimInstance* GetPostProcessInstance();// 0x5c5ba08
	float GetPosition();// 0x5c5b9d4
	float GetPlayRate();// 0x5c5b9a0
	float GetMorphTarget(FName MorphTargetName);// 0x5c5b914
	bool GetDisableAnimCurves();// 0x5c5b8f0
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x5c5b780
	float GetClothMaxDistanceScale();// 0x5c5b74c
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x5c5b67c
	AnimInstance* GetAnimInstance();// 0x5c5b648
	byte GetAnimationMode();// 0x5c5b614
	bool GetAllowedAnimCurveEvaluate();// 0x5c5b5f4
	void ForceClothNextUpdateTeleportAndReset();// 0x5c5b5e0
	void ForceClothNextUpdateTeleport();// 0x5c5b5cc
	FName FindConstraintBoneName(int ConstraintIndex);// 0x5c5b540
	void ClearMorphTargets();// 0x5c5b52c
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x5c5b438
	void BindClothToMasterPoseComponent();// 0x5c5b424
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x5c5b364
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x5c5b214
	void AddForceToAllBodiesBelow(Vector force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x5c5b0c4
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x5c5afac

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x728, Size: 8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x730, Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x798, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x7c0, Size: 8]
	int ForcedLodModel;//[Offset: 0x7c8, Size: 4]
	int MinLodModel;//[Offset: 0x7cc, Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x7e0, Size: 16]
	float StreamingDistanceMultiplier;//[Offset: 0x7f0, Size: 4]
	Color WireframeColor;//[Offset: 0x7f4, Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7f8, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7f8, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7f8, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7f8, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x810, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x810, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x810, Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x811, Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x812, Size: 1]
	bool bDisableAnimOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x813, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x813, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x820, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x820, Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x821, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x822, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x822, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x824, Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x828, Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x844, Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x862, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x863, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x5c616ac
	void UnHideBoneByName(FName BoneName);// 0x5c61630
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x5c614a0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x5c61310
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x5c61218
	bool SetSkinWeightProfile(FName InProfileName);// 0x5c61188
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x5c61090
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x5c60fc8
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReinit);// 0x5c60f00
	void SetMinLOD(int InNewMinLOD);// 0x5c60e84
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x5c60e08
	void SetForcedLOD(int InNewForcedLOD);// 0x5c60d8c
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x5c60d08
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x5c60c84
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x5c60c08
	void ResetAnimUROParams(float[] DistanceFactors, int MaxEvalRateForInterpolation);// 0x5c60a98
	bool IsUsingSkinWeightProfile();// 0x5c60a78
	bool IsBoneHiddenByName(FName BoneName);// 0x5c609e8
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x5c60930
	FName GetSocketBoneName(FName InSocketName);// 0x5c608a4
	FName GetParentBone(FName BoneName);// 0x5c60818
	int GetNumLODs();// 0x5c607e4
	int GetNumBones();// 0x5c607b0
	FName GetCurrentSkinWeightProfileName();// 0x5c60794
	FName GetBoneName(int BoneIndex);// 0x5c60708
	int GetBoneIndex(FName BoneName);// 0x5c6067c
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x5c60524
	void EnableMeshClipPlane(out const Plane ClipPlane);// 0x5c6049c
	void DisableMeshClipPlane();// 0x5c60488
	void ClearVertexColorOverride(int LODIndex);// 0x5c6040c
	void ClearSkinWeightProfile();// 0x5c603f8
	void ClearSkinWeightOverride(int LODIndex);// 0x5c6037c
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x5c602b4

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x700, Size: 16]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x5be8d64
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x5be8cac
	void SetLayerVisibilityValue(byte Layer, bool Visible, bool bPropagateToChildren);// 0x5be8b98
	void SetLayerVisibilityEnable(bool Enable, bool bPropagateToChildren);// 0x5be8ac0
	void SetLayerCastShadowValue(byte Layer, bool NewCastShadow);// 0x5be89f8
	void SetLayerCastShadowEnable(bool Enable);// 0x5be896c
	void SetCastShadow(bool NewCastShadow);// 0x5be88e0
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x5be87d4
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x5be873c
	FName[] GetMaterialSlotNames();// 0x5be8690
	MaterialInterface*[] GetMaterials();// 0x5be85e4
	int GetMaterialIndex(FName MaterialSlotName);// 0x5be8550
	bool GetLayerVisibilityValue(byte Layer);// 0x5be84b8
	bool GetLayerCastShadowValue(byte Layer);// 0x5be8420

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x48, Size: 8]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x88, Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xa4, Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0xc0, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xcc, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0xd8, Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0xe8, Size: 16]
	MaterialInterface* ReplaceMaterialInterface;//[Offset: 0xf8, Size: 8]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0x100, Size: 16]
	byte SkelMirrorAxis;//[Offset: 0x110, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x111, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x118, Size: 16]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x128, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x128, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x128, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x128, Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x128, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x130, Size: 8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x138, Size: 8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x140, Size: 8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x148, Size: 16]
	MorphTarget*[] MorphTargets;//[Offset: 0x158, Size: 16]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x2d8, Size: 16]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2e8, Size: 8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x2f0, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x300, Size: 16]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x318, Size: 16]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x338, Size: 16]
	int NumSockets();// 0x5c57e84
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x5c57db0
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x5c57d24
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x5c57c98
	BoxSphereBounds GetImportedBounds();// 0x5c57c4c
	BoxSphereBounds GetBounds();// 0x5c57c00
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x5c57b28
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x5c57a9c

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x30, Size: 16]
	Transform[] RefLocalPoses;//[Offset: 0x40, Size: 16]
	Guid VirtualBoneGuid;//[Offset: 0x160, Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x170, Size: 16]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x180, Size: 16]
	SmartNameContainer SmartNames;//[Offset: 0x1e0, Size: 80]
	BlendProfile*[] BlendProfiles;//[Offset: 0x248, Size: 16]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x258, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x330, Size: 16]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 8]
	int ParentIndex;//[Offset: 0x8, Size: 4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 8]
	FName TargetBoneName;//[Offset: 0x8, Size: 8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 8]
	FName BoneName;//[Offset: 0x30, Size: 8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 12]
	Vector RelativeScale;//[Offset: 0x50, Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x5c5f394
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x5c5f304

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 16]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float BlendScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 8]
	FName[] SlotNames;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 8]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	FName MaterialSlotName;//[Offset: 0x10, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x30, Size: 24]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float LODHysteresis;//[Offset: 0x4, Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 16]
	bool[] bEnableShadowCasting;//[Offset: 0x18, Size: 16]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x28, Size: 16]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 368]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x1b0, Size: 168]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x258, Size: 576]
	FName[] RemovedBones;//[Offset: 0x498, Size: 16]
	BoneReference[] BonesToRemove;//[Offset: 0x4a8, Size: 16]
	AnimSequence* BakePose;//[Offset: 0x4b8, Size: 8]
	FString SourceImportFilename;//[Offset: 0x4c0, Size: 16]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d0, Size: 1]

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0, Size: 1]
	byte CustomLeftRightAxis;//[Offset: 0x1, Size: 1]
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 4]
	int ScreenSize;//[Offset: 0xc, Size: 4]
	float WeldingThreshold;//[Offset: 0x10, Size: 4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float NormalsThreshold;//[Offset: 0x18, Size: 4]
	byte SilhouetteImportance;//[Offset: 0x1c, Size: 1]
	byte TextureImportance;//[Offset: 0x1d, Size: 1]
	byte ShadingImportance;//[Offset: 0x1e, Size: 1]
	byte SkinningImportance;//[Offset: 0x1f, Size: 1]
	float BoneReductionRatio;//[Offset: 0x20, Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x30, Size: 16]
	int BaseLOD;//[Offset: 0x40, Size: 4]
	int LODChainLastIndex;//[Offset: 0x44, Size: 4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x50, Size: 128]
	MaterialProxySettings MaterialSettings;//[Offset: 0xd0, Size: 148]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x168, Size: 8]

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte MaterialLODType;//[Offset: 0x1, Size: 1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte TextureWidth;//[Offset: 0x3, Size: 1]
	byte TextureHeight;//[Offset: 0x4, Size: 1]
	byte SamplingQuality;//[Offset: 0x5, Size: 1]
	int GutterSpace;//[Offset: 0x8, Size: 4]
	byte TextureStrech;//[Offset: 0xc, Size: 1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 16]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x28, Size: 88]

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0, Size: 1]
	byte Caster;//[Offset: 0x1, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte ColorChannels;//[Offset: 0x3, Size: 1]
	int BitsPerChannel;//[Offset: 0x4, Size: 4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 8]
	byte TextureSizingType;//[Offset: 0x8, Size: 1]
	float GutterSpace;//[Offset: 0xc, Size: 4]
	enum SamplingQuality;//[Offset: 0x10, Size: 1]
	enum UVStrech;//[Offset: 0x11, Size: 1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	float MetallicConstant;//[Offset: 0x18, Size: 4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float RoughnessConstant;//[Offset: 0x20, Size: 4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float SpecularConstant;//[Offset: 0x28, Size: 4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float OpacityConstant;//[Offset: 0x30, Size: 4]
	float AOConstant;//[Offset: 0x34, Size: 4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 8]
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 8]
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 8]
	byte MaterialMergeType;//[Offset: 0x90, Size: 1]
	byte BlendMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa0, Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xa8, Size: 16]
	float StreamableFirstChunkSecond;//[Offset: 0xc8, Size: 4]
	float StreamableFollowingChunkSecond;//[Offset: 0xcc, Size: 4]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x16c, Size: 1]
	byte RefPoseType;//[Offset: 0x16d, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x170, Size: 8]
	int RefFrameIndex;//[Offset: 0x178, Size: 4]
	int EncodingPkgVersion;//[Offset: 0x17c, Size: 4]
	FName RetargetSource;//[Offset: 0x180, Size: 8]
	enum Interpolation;//[Offset: 0x188, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x18a, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x190, Size: 16]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x78, Size: 16]
	float SequenceLength;//[Offset: 0x88, Size: 4]
	float RateScale;//[Offset: 0x8c, Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x90, Size: 16]
	float GetPlayLength();// 0x5ae05e4

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x30, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x58, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 16]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 4]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 4]
	FName NotifyName;//[Offset: 0x40, Size: 8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 8]
	float Duration;//[Offset: 0x58, Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 48]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	byte MontageTickType;//[Offset: 0x91, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	int TrackIndex;//[Offset: 0xa4, Size: 4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 8]
	int SlotIndex;//[Offset: 0x10, Size: 4]
	int SegmentIndex;//[Offset: 0x14, Size: 4]
	byte LinkMethod;//[Offset: 0x18, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 4]
	float SegmentLength;//[Offset: 0x20, Size: 4]
	float LinkValue;//[Offset: 0x24, Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 8]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x4033584
	FString GetNotifyName();// 0x5ade6c4

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa0, Size: 56]
	float BlendInTime;//[Offset: 0xd8, Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 56]
	float BlendOutTime;//[Offset: 0x118, Size: 4]
	float BlendOutTriggerTime;//[Offset: 0x11c, Size: 4]
	FName SyncGroup;//[Offset: 0x120, Size: 8]
	int SyncSlotIndex;//[Offset: 0x128, Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0x130, Size: 32]
	CompositeSection[] CompositeSections;//[Offset: 0x150, Size: 16]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x160, Size: 16]
	BranchingPoint[] BranchingPoints;//[Offset: 0x170, Size: 16]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x182, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x188, Size: 16]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x198, Size: 16]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a8, Size: 40]
	FName TimeStretchCurveName;//[Offset: 0x1d0, Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x8, Size: 8]
	float blendTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 112]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	float GetFloatValue(float InTime);// 0x5b1ca0c

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x5b1c3e8
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x5b1c304

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x58, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x59, Size: 1]
	float DefaultValue;//[Offset: 0x5c, Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x60, Size: 16]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 80]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Value;//[Offset: 0x8, Size: 4]
	float ArriveTangent;//[Offset: 0xc, Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 4]
	float LeaveTangent;//[Offset: 0x14, Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 4]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 8]
	float StartTime;//[Offset: 0x38, Size: 4]
	FName NextSectionName;//[Offset: 0x40, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 16]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 8]
	float StartPos;//[Offset: 0x8, Size: 4]
	float AnimStartTime;//[Offset: 0xc, Size: 4]
	float AnimEndTime;//[Offset: 0x10, Size: 4]
	float AnimPlayRate;//[Offset: 0x14, Size: 4]
	int LoopingCount;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 8]
	float DisplayTime;//[Offset: 0x38, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 4]
	float TriggerTime;//[Offset: 0x4, Size: 4]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 16]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 4]
	float Alpha;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x4033584
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x4033584
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x4033584
	FString GetNotifyName();// 0x5adf24c

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 16]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x20, Size: 112]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 8]
	SmartName Name;//[Offset: 0x8, Size: 16]
	int CurveTypeFlags;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ScreenSize;//[Offset: 0x4, Size: 4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float HardAngleThreshold;//[Offset: 0xc, Size: 4]
	int MergeDistance;//[Offset: 0x10, Size: 4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float ClippingLevel;//[Offset: 0x18, Size: 4]
	int AxisIndex;//[Offset: 0x1c, Size: 4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x28, Size: 128]

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum LevelOfDetailType;//[Offset: 0x1, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x8, Size: 368]
	MeshProxySettings ProxySettings;//[Offset: 0x178, Size: 196]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 148]
	int TextureWidth;//[Offset: 0x98, Size: 4]
	int TextureHeight;//[Offset: 0x9c, Size: 4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float MergeDistance;//[Offset: 0xa8, Size: 4]
	float HardAngleThreshold;//[Offset: 0xac, Size: 4]
	int LightMapResolution;//[Offset: 0xb0, Size: 4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8, Size: 1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	int LODGroupIndex;//[Offset: 0xbc, Size: 4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	enum AggregatorMode;//[Offset: 0xc1, Size: 1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x28, Size: 16]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x38, Size: 16]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x48, Size: 16]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x100, Size: 8]
	BodySetup*[] BodySetup;//[Offset: 0x108, Size: 16]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x368, Size: 16]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 40]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 4]
	float PositionStrength;//[Offset: 0x14, Size: 4]
	float VelocityStrength;//[Offset: 0x18, Size: 4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 4]
	float MaxAngularForce;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 440]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 16]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 260]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 8]
	Vector Pos1;//[Offset: 0x30, Size: 12]
	Vector PriAxis1;//[Offset: 0x3c, Size: 12]
	Vector SecAxis1;//[Offset: 0x48, Size: 12]
	Vector Pos2;//[Offset: 0x54, Size: 12]
	Vector PriAxis2;//[Offset: 0x60, Size: 12]
	Vector SecAxis2;//[Offset: 0x6c, Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 260]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 4]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float Restitution;//[Offset: 0x8, Size: 4]
	float ContactDistance;//[Offset: 0xc, Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 4]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 12]
	Vector VelocityTarget;//[Offset: 0xc, Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float MaxForce;//[Offset: 0x8, Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 12]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 260]
	FName ProfileName;//[Offset: 0x108, Size: 8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x28, Size: 80]
	Blueprint* SourceAsset;//[Offset: 0x78, Size: 40]

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0, Size: 8]
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	class Object* ParentClass;//[Offset: 0x50, Size: 8]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x58, Size: 8]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x68, Size: 8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x70, Size: 16]
	TimelineTemplate*[] Timelines;//[Offset: 0x80, Size: 16]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x90, Size: 8]
	byte BlueprintType;//[Offset: 0x98, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x9c, Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 16]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 16]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 8]
	SCS_Node* RootNode;//[Offset: 0x50, Size: 8]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x58, Size: 16]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 80]
	FName VariableName;//[Offset: 0x88, Size: 8]
	FName AttachToName;//[Offset: 0x90, Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x98, Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0xa0, Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0xb0, Size: 16]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xc0, Size: 16]
	Guid VariableGuid;//[Offset: 0xd0, Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	FName NativeComponentName;//[Offset: 0xe8, Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	FName InternalVariableName;//[Offset: 0xf8, Size: 8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 8]
	FString DataValue;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 4]
	byte LengthMode;//[Offset: 0x2c, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 16]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 16]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 16]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 16]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 16]
	Guid TimelineGuid;//[Offset: 0x80, Size: 16]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0x10, Size: 8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x10, Size: 8]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x10, Size: 8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 112]
	Vector GetVectorValue(float InTime);// 0x5b1dca0

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 112]
	LinearColor GetLinearColorValue(float InTime);// 0x5b1ceac

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 16]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 16]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 80]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 8]
	FName SCSVariableName;//[Offset: 0x8, Size: 8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 8]
	FString ApexFileName;//[Offset: 0x8, Size: 16]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x1c, Size: 80]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 4]
	float HorizontalResistance;//[Offset: 0x4, Size: 4]
	float BendResistance;//[Offset: 0x8, Size: 4]
	float ShearResistance;//[Offset: 0xc, Size: 4]
	float Friction;//[Offset: 0x10, Size: 4]
	float Damping;//[Offset: 0x14, Size: 4]
	float TetherStiffness;//[Offset: 0x18, Size: 4]
	float TetherLimit;//[Offset: 0x1c, Size: 4]
	float Drag;//[Offset: 0x20, Size: 4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 4]
	float GravityScale;//[Offset: 0x28, Size: 4]
	float MassScale;//[Offset: 0x2c, Size: 4]
	float InertiaBlend;//[Offset: 0x30, Size: 4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 4]
	float SolverFrequency;//[Offset: 0x40, Size: 4]
	float FiberCompression;//[Offset: 0x44, Size: 4]
	float FiberExpansion;//[Offset: 0x48, Size: 4]
	float FiberResistance;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x28, Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x30, Size: 8]
	byte RootMotionMode;//[Offset: 0x38, Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x40, Size: 16]
	delegate OnMontageStarted;//[Offset: 0x50, Size: 16]
	delegate OnMontageEnded;//[Offset: 0x60, Size: 16]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x70, Size: 16]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x180, Size: 16]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x5ad6b18
	Pawn* TryGetPawnOwner();// 0x5ad6adc
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x5ad6a24
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x5ad6934
	bool SetSubAnimNodeAnimInstance(FName SubInstanceSlotName, AnimInstance* AnimInstance);// 0x5ad686c
	void SetRootMotionMode(byte Value);// 0x5ad67e8
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x5ad6730
	void SavePoseSnapshot(FName SnapshotName);// 0x5ad66ac
	bool ResetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x5ad661c
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x5ad63f8
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x5ad6248
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x5ad6190
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x5ad60d8
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x5ad6020
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x5ad5f30
	void Montage_Resume(const AnimMontage* Montage);// 0x5ad5eb4
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x5ad5d6c
	void Montage_Pause(const AnimMontage* Montage);// 0x5ad5cf0
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x5ad5c3c
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x5ad5b88
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x5ad5af8
	bool Montage_IsActive(const AnimMontage* Montage);// 0x5ad5a68
	float Montage_GetPosition(const AnimMontage* Montage);// 0x5ad59dc
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x5ad5950
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x5ad588c
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x5ad57fc
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x5ad5770
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x5ad56e4
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x5ad5614
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x5ad54cc
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x5ad5404
	bool IsAnyMontagePlaying();// 0x5ad53cc
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x5ad5304
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x5ad51f0
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x5ad5154
	AnimInstance* GetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x5ad50c8
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x5ad5004
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x5ad4f40
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x5ad4e7c
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x5ad4db8
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x5ad4cf4
	SkeletalMeshComponent* GetOwningComponent();// 0x5ad4cc0
	Actor* GetOwningActor();// 0x5ad4c8c
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x5ad4bc8
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x5ad4b04
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x5ad4a40
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x5ad497c
	float GetInstanceMachineWeight(int MachineIndex);// 0x5ad48f0
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x5ad4864
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x5ad47d8
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x5ad474c
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x5ad46c0
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x5ad4634
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x5ad45a8
	float GetCurveValue(FName CurveName);// 0x5ad451c
	FName GetCurrentStateName(int MachineIndex);// 0x5ad4490
	AnimMontage* GetCurrentActiveMontage();// 0x5ad445c
	bool DestroySubAnimInstance(AnimInstance* AnimInstance);// 0x5ad43cc
	void DestroyAllSubAnimInstances();// 0x5ad43b8
	AnimInstance* CreateSubAnimInstance(class AnimInstance InstanceClass, FName InstanceName);// 0x5ad42f4
	void ClearMorphTargets();// 0x5ad42e0
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x5ad41fc
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x4033584
	void BlueprintPostEvaluateAnimation();// 0x4033584
	void BlueprintInitializeAnimation();// 0x4033584
	void BlueprintBeginPlay();// 0x4033584

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 16]
	FName[] BoneNames;//[Offset: 0x10, Size: 16]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 8]
	FName SnapshotName;//[Offset: 0x28, Size: 8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 8]
	FName NextMarkerName;//[Offset: 0x8, Size: 8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 16]
	Guid AssetGuid;//[Offset: 0x38, Size: 16]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 8]
	bool DefaultProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 16]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 4]
	byte Weights;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float SavedPosition;//[Offset: 0xc, Size: 4]
	float SavedPlayRate;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x1a0, Size: 8]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a8, Size: 1]
	float GravityScale;//[Offset: 0x1ac, Size: 4]
	float MaxStepHeight;//[Offset: 0x1b0, Size: 4]
	float JumpZVelocity;//[Offset: 0x1b4, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x1b8, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x1bc, Size: 4]
	float WalkableFloorZ;//[Offset: 0x1c0, Size: 4]
	byte MovementMode;//[Offset: 0x1c4, Size: 1]
	byte CustomMovementMode;//[Offset: 0x1c5, Size: 1]
	float GroundFriction;//[Offset: 0x1f0, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x1f4, Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x1f8, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1fc, Size: 4]
	float MaxFlySpeed;//[Offset: 0x200, Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x204, Size: 4]
	float MaxAcceleration;//[Offset: 0x208, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x20c, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x210, Size: 4]
	float BrakingFriction;//[Offset: 0x214, Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x21c, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x220, Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x224, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x228, Size: 4]
	float AirControl;//[Offset: 0x22c, Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x230, Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x234, Size: 4]
	float FallingLateralFriction;//[Offset: 0x238, Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x23c, Size: 4]
	float Buoyancy;//[Offset: 0x240, Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x244, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x248, Size: 4]
	Rotator RotationRate;//[Offset: 0x24c, Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x258, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x258, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x258, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x258, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x259, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x259, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x259, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x259, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x259, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x259, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x260, Size: 8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x268, Size: 4]
	float OutofWaterZ;//[Offset: 0x26c, Size: 4]
	float Mass;//[Offset: 0x270, Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x27c, Size: 4]
	float InitialPushForceFactor;//[Offset: 0x280, Size: 4]
	float PushForceFactor;//[Offset: 0x284, Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x288, Size: 4]
	float TouchForceFactor;//[Offset: 0x28c, Size: 4]
	float MinTouchForce;//[Offset: 0x290, Size: 4]
	float MaxTouchForce;//[Offset: 0x294, Size: 4]
	float RepulsionForce;//[Offset: 0x298, Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x2a0, Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x2a4, Size: 4]
	Vector Acceleration;//[Offset: 0x2a8, Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x2b4, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x2c0, Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x2d0, Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x2dc, Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x2e0, Size: 12]
	Vector PendingForceToApply;//[Offset: 0x2ec, Size: 12]
	float AnalogInputModifier;//[Offset: 0x2f8, Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x304, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x308, Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x30c, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x310, Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x314, Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x318, Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x31c, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x320, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x324, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x328, Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x32c, Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x330, Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x334, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x338, Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x33d, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x340, Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x344, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x348, Size: 152]
	byte DefaultLandMovementMode;//[Offset: 0x3e0, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x3e1, Size: 1]
	byte GroundMovementMode;//[Offset: 0x3e2, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e3, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e3, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3e3, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3e3, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3e3, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3e3, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3e3, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3e3, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e4, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e4, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3e4, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3e4, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3e4, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3e4, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3e4, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3e4, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e5, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e5, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3e5, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3e5, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3e5, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3e5, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3e5, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e6, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3e6, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3e6, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3f8, Size: 4]
	Vector RequestedVelocity;//[Offset: 0x3fc, Size: 12]
	int AvoidanceUID;//[Offset: 0x408, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x40c, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x410, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x414, Size: 4]
	float AvoidanceWeight;//[Offset: 0x418, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x41c, Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x4c8, Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x4cc, Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x4d0, Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x4d4, Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x4d8, Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x4dc, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4e0, Size: 88]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x548, Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x550, Size: 256]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x6e0, Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x720, Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72d, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x5b112f0
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x5b11274
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x5b111b4
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x5b1112c
	void SetGroupsToIgnore(int GroupFlags);// 0x5b110b0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x5b11028
	void SetGroupsToAvoid(int GroupFlags);// 0x5b10fac
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x5b10f24
	void SetAvoidanceGroup(int GroupFlags);// 0x5b10ea8
	void SetAvoidanceEnabled(bool bEnable);// 0x5b10e24
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x5b10cf0
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5b10934
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5b10578
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x5b102d0
	float K2_GetWalkableFloorZ();// 0x5b1029c
	float K2_GetWalkableFloorAngle();// 0x5b10268
	float K2_GetModifiedMaxAcceleration();// 0x5b1022c
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x5b10144
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x5b0ffac
	bool IsWalking();// 0x5b0ff6c
	bool IsWalkable(out const HitResult Hit);// 0x5b0feb0
	float GetValidPerchRadius();// 0x5b0fe7c
	float GetPerchRadiusThreshold();// 0x5b0fe48
	PrimitiveComponent* GetMovementBase();// 0x5b0fe14
	float GetMinAnalogSpeed();// 0x5b0fdd8
	float GetMaxJumpHeightWithJumpTime();// 0x5b0fd9c
	float GetMaxJumpHeight();// 0x5b0fd60
	float GetMaxBrakingDeceleration();// 0x5b0fd24
	float GetMaxAcceleration();// 0x5b0fce8
	Vector GetImpartedMovementBaseVelocity();// 0x5b0fca8
	Vector GetCurrentAcceleration();// 0x5b0fc70
	Character* GetCharacterOwner();// 0x5b0fc54
	float GetAnalogInputModifier();// 0x5b0fc20
	void DisableMovement();// 0x5b0fc04
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5b0fa04
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5b0f674
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5b0f3c8
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x5b0f18c
	void ClientAckGoodMove(float TimeStamp);// 0x5b0f108
	void ClearAccumulatedForces();// 0x5b0f0ec
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x5b0ef0c
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x5b0edc8
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x5b0ed00
	void AddForce(Vector force);// 0x5b0ec7c

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x188, Size: 8]
	Vector K2_GetInputVector();// 0x5c1c0e4
	bool IsMoveInputIgnored();// 0x5c1c0a4
	Vector GetPendingInputVector();// 0x5c1c06c
	Pawn* GetPawnOwner();// 0x5c1c038
	Vector GetLastInputVector();// 0x5c1c000
	Vector ConsumeInputVector();// 0x5c1bfc0
	void AddInputVector(Vector WorldVector, bool bForce);// 0x5c1bef8

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x150, Size: 32]
	float FixedPathBrakingDistance;//[Offset: 0x170, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x174, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x174, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x174, Size: 1]
	MovementProperties MovementState;//[Offset: 0x178, Size: 4]
	void StopMovementKeepPathing();// 0x5bf8c74
	void StopActiveMovement();// 0x5bf8c58
	bool IsSwimming();// 0x5bf8c18
	bool IsMovingOnGround();// 0x5bf8bd8
	bool IsFlying();// 0x5bf8b98
	bool IsFalling();// 0x5bf8b58
	bool IsCrouching();// 0x5bf8b18

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0x110, Size: 8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0x118, Size: 8]
	Vector Velocity;//[Offset: 0x124, Size: 12]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x130, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0x131, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0x134, Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0x140, Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14c, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 1]
	void StopMovementImmediately();// 0x5beb5a4
	void SnapUpdatedComponentToPlane();// 0x5beb588
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x5beb504
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x5beb480
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x5beb3fc
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x5beb33c
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x5beb2b0
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x5beb22c
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x5beb1a8
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x5beafe8
	float K2_GetModifiedMaxSpeed();// 0x5beafac
	float K2_GetMaxSpeedModifier();// 0x5beaf70
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x5beaed8
	Vector GetPlaneConstraintOrigin();// 0x5beae98
	Vector GetPlaneConstraintNormal();// 0x5beae58
	enum GetPlaneConstraintAxisSetting();// 0x5beae3c
	PhysicsVolume* GetPhysicsVolume();// 0x5beae00
	float GetMaxSpeed();// 0x5beadc4
	float GetGravityZ();// 0x5bead88
	Vector ConstrainNormalToPlane(Vector Normal);// 0x5beacf0
	Vector ConstrainLocationToPlane(Vector Location);// 0x5beac58
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x5beabc0

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 4]
	float AgentHeight;//[Offset: 0x8, Size: 4]
	float AgentStepHeight;//[Offset: 0xc, Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x18, Size: 8]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x3c8, Size: 8]
	NavDataConfig NavDataConfig;//[Offset: 0x3d0, Size: 88]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x428, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x428, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x428, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x428, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x428, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x429, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x42c, Size: 4]
	uint32 DataVersion;//[Offset: 0x430, Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x508, Size: 16]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x20, Size: 8]
	Color Color;//[Offset: 0x28, Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x2c, Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x38, Size: 8]
	SoftClassPath NavigationDataClassName;//[Offset: 0x40, Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 16]
	int AreaID;//[Offset: 0x10, Size: 4]
	class Object* AreaClass;//[Offset: 0x18, Size: 8]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 4]
	float LineDist;//[Offset: 0x8, Size: 4]
	HitResult HitResult;//[Offset: 0x10, Size: 136]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 12]
	float PenetrationDepth;//[Offset: 0x54, Size: 4]
	int Item;//[Offset: 0x58, Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 8]
	Actor* Actor;//[Offset: 0x64, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 8]
	FName BoneName;//[Offset: 0x78, Size: 8]
	int FaceIndex;//[Offset: 0x80, Size: 4]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0xec, Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0xf9, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x720, Size: 4]
	float CapsuleRadius;//[Offset: 0x724, Size: 4]
	float CapsuleHeight;//[Offset: 0x728, Size: 4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x5b0be44
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x5b0bd80
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x5b0bcbc
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x5b0bbcc
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x5b0bae4
	float GetUnscaledCapsuleRadius();// 0x5b0bac8
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x5b0baa4
	float GetUnscaledCapsuleHalfHeight();// 0x5b0ba88
	float GetShapeScale();// 0x5b0ba28
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x5b0b8e8
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x5b0b7b0
	float GetScaledCapsuleRadius();// 0x5b0b748
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x5b0b6d8
	float GetScaledCapsuleHalfHeight();// 0x5b0b670

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x700, Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x708, Size: 8]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x710, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x710, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x710, Size: 1]
	class NavArea* AreaClass;//[Offset: 0x718, Size: 8]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 8]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 12]
	Rotator Rotation;//[Offset: 0x1c, Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 352]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 8]
	float Position;//[Offset: 0x10, Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 12]
	Rotator Rotation;//[Offset: 0x20, Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 256]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x148, Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x154, Size: 12]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x3c8, Size: 4]
	byte Ping;//[Offset: 0x3cc, Size: 1]
	FString PlayerName;//[Offset: 0x3d0, Size: 16]
	int PlayerID;//[Offset: 0x3f0, Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f4, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f4, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f4, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f4, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f4, Size: 1]
	int StartTime;//[Offset: 0x3f8, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x400, Size: 8]
	FString SavedNetworkAddress;//[Offset: 0x410, Size: 16]
	UniqueNetIdRepl UniqueId;//[Offset: 0x420, Size: 24]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x4033584
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x4033584
	void OnRep_UniqueId();// 0x5c358f0
	void OnRep_Score();// 0x5c358d4
	void OnRep_PlayerName();// 0x5c358b8
	void OnRep_bIsInactive();// 0x5c3589c

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	float DamageImpulse;//[Offset: 0x2c, Size: 4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 4]
	float DamageFalloff;//[Offset: 0x38, Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x430, Size: 8]
	Pawn* AcknowledgedPawn;//[Offset: 0x440, Size: 8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x448, Size: 8]
	HUD* MyHUD;//[Offset: 0x458, Size: 8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x460, Size: 8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x468, Size: 8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x474, Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x48c, Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x490, Size: 16]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x4a0, Size: 16]
	float LastSpectatorStateSynchTime;//[Offset: 0x4b4, Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x4b8, Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x4c4, Size: 12]
	int ClientCap;//[Offset: 0x4d0, Size: 4]
	CheatManager* CheatManager;//[Offset: 0x4d8, Size: 8]
	class CheatManager* CheatClass;//[Offset: 0x4e0, Size: 8]
	PlayerInput* PlayerInput;//[Offset: 0x4e8, Size: 8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x4f0, Size: 16]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x592, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x593, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x5d0, Size: 8]
	NetConnection* NetConnection;//[Offset: 0x5d8, Size: 8]
	float InputYawScale;//[Offset: 0x5ec, Size: 4]
	float InputPitchScale;//[Offset: 0x5f0, Size: 4]
	float InputRollScale;//[Offset: 0x5f4, Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f8, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f8, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f8, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5f8, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5f8, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5f8, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x5fc, Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x600, Size: 16]
	byte DefaultMouseCursor;//[Offset: 0x610, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x611, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x612, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x613, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x614, Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x628, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x6a0, Size: 8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6a8, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x6c0, Size: 8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x708, Size: 8]
	Vector SpawnLocation;//[Offset: 0x710, Size: 12]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x722, Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x724, Size: 2]
	bool bOpenReconnectViewPointFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x5c3039c
	bool WasInputKeyJustPressed(Key Key);// 0x5c3014c
	void ToggleSpeaking(bool bInSpeaking);// 0x5c300c0
	void SwitchLevel(FString URL);// 0x5c30010
	void StopHapticEffect(enum Hand);// 0x5c2ff94
	void StartFire(byte FireModeNum);// 0x5c2ff10
	void SetVirtualJoystickVisibility(bool bVisible);// 0x5c2fe84
	void SetViewTargetWithBlend(Actor* NewViewTarget, float blendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x5c2fd08
	void SetName(FString S);// 0x5c2fc58
	void SetMouseLocation(const int X, const int Y);// 0x5c2fba4
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x5c2faec
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x5c2f9fc
	void SetControllerLightColor(Color Color);// 0x5c2f984
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x5c2f7d8
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x5c2f6e4
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x5c2f5d0
	void ServerViewPrevPlayer();// 0x5c2f570
	void ServerViewNextPlayer();// 0x5c2f510
	void ServerVerifyViewTarget();// 0x5c2f4b0
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x5c2f3bc
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x5c2f2c8
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x5c2ef10
	void ServerToggleAILogging();// 0x5c2eeb0
	void ServerShortTimeout();// 0x5c2ee50
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x5c2ed8c
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x5c2ec94
	void ServerRestartPlayer();// 0x5c2ec34
	void ServerPause();// 0x5c2ebd4
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x5c2eb34
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x5c2e77c
	void ServerCheckClientPossessionReliable();// 0x5c2e71c
	void ServerCheckClientPossession();// 0x5c2e6bc
	void ServerChangeName(FString S);// 0x5c2e5e0
	void ServerCamera(FName NewMode);// 0x5c2e530
	void ServerAcknowledgePossession(Pawn* P);// 0x5c2e480
	void SendToConsole(FString Command);// 0x5c2e3d0
	void RestartLevel();// 0x5c2e3b4
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x5c2e294
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x5c2e15c
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x5c2deec
	void Pause();// 0x5c2ded0
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x5c2de44
	void LocalTravel(FString URL);// 0x5c2dd94
	bool IsInputKeyDown(Key Key);// 0x5c2db44
	void GetViewportSize(out int SizeX, out int SizeY);// 0x5c2da60
	SpectatorPawn* GetSpectatorPawn();// 0x5c2da44
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x5c2d954
	Vector GetInputVectorKeyState(Key Key);// 0x5c2d704
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x5c2d594
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x5c2d4b0
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x5c2d334
	float GetInputKeyTimeDown(Key Key);// 0x5c2d0e8
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x5c2cfc8
	float GetInputAnalogKeyState(Key Key);// 0x5c2cd7c
	HUD* GetHUD();// 0x5c2cd48
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x5c2cb8c
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x5c2ca1c
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x5c2c8ac
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x5c2c72c
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x5c2c5f8
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x5c2c4c4
	Vector GetFocalLocation();// 0x5c2c484
	void FOV(float NewFOV);// 0x5c2c400
	void EnableCheats();// 0x5c2c3e4
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x5c2c284
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x5c2c19c
	void ConsoleKey(Key Key);// 0x5c2bf4c
	void ClientWasKicked(const FText KickReason);// 0x5c2be00
	void ClientVoiceHandshakeComplete();// 0x5c2bde4
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x5c2bc48
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x5c2b9b8
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x5c2b840
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x5c2b6d0
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x5c2b568
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x5c2b4ac
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x5c2b3e4
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x5c2b360
	void ClientStartOnlineSession();// 0x5c2b344
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x5c2b2c0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x5c2b1b4
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x5c2b128
	void ClientSetHUD(class HUD NewHUDClass);// 0x5c2b0a4
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x5c2afa8
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x5c2ae40
	void ClientSetCameraMode(FName NewCamMode);// 0x5c2adbc
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x5c2ac38
	void ClientSetBlockOnAsyncLoading();// 0x5c2ac1c
	void ClientReturnToMainMenu(FString ReturnReason);// 0x5c2ab6c
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x5c2aae8
	void ClientRestart(Pawn* NewPawn);// 0x5c2aa64
	void ClientReset();// 0x5c2aa48
	void ClientRepObjRef(Object* Object);// 0x5c2a9c4
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x5c2a854
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x5c2a70c
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x5c2a5f8
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x5c2a4c4
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x5c2a3cc
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x5c2a27c
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x5c2a144
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x5c29ed0
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x5c29c40
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x5c29b14
	void ClientIgnoreMoveInput(bool bIgnore);// 0x5c29a88
	void ClientIgnoreLookInput(bool bIgnore);// 0x5c299fc
	void ClientGotoState(FName NewState);// 0x5c29978
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x5c298b0
	void ClientForceGarbageCollection();// 0x5c29894
	void ClientFlushLevelStreaming();// 0x5c29880
	void ClientEndOnlineSession();// 0x5c29864
	void ClientEnableNetworkVoice(bool bEnable);// 0x5c297d8
	void ClientCommitMapChange();// 0x5c297bc
	void ClientClearCameraLensEffects();// 0x5c297a0
	void ClientCapBandwidth(int Cap);// 0x5c2971c
	void ClientCancelPendingMapChange();// 0x5c29700
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x5c29604
	void ClearAudioListenerOverride();// 0x5c295f0
	void Camera(FName NewMode);// 0x5c2956c
	void AddYawInput(float Val);// 0x5c294e8
	void AddRollInput(float Val);// 0x5c29464
	void AddPitchInput(float Val);// 0x5c293e0
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x5c2935c

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 8]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x3c8, Size: 8]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d0, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d0, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d0, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d0, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d0, Size: 1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d0, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x3d8, Size: 16]
	FName[] DebugDisplay;//[Offset: 0x3f0, Size: 16]
	FName[] ToggledDebugCategories;//[Offset: 0x400, Size: 16]
	Canvas* Canvas;//[Offset: 0x410, Size: 8]
	Canvas* DebugCanvas;//[Offset: 0x418, Size: 8]
	DebugTextInfo[] DebugTextList;//[Offset: 0x420, Size: 16]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x430, Size: 8]
	Actor* ShowDebugTargetActor;//[Offset: 0x438, Size: 8]
	Actor* UpdateShowDebugTargetActor();// 0x4033584
	void ShowHUD();// 0x5b5d568
	void ShowDebugToggleSubCategory(FName Category);// 0x5b5d4ec
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x5b5d470
	void ShowDebugForMoifiedTargetActor();// 0x5b5d45c
	void ShowDebug(FName DebugType);// 0x5b5d3d8
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x5b5d318
	void RemoveAllDebugStrings();// 0x5b5d304
	void ReceiveHitBoxRelease(const FName BoxName);// 0x4033584
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x4033584
	void ReceiveHitBoxClick(const FName BoxName);// 0x4033584
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x4033584
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x4033584
	Vector Project(Vector Location);// 0x5b5d274
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x5b5d0a8
	PlayerController* GetOwningPlayerController();// 0x5b5d074
	Pawn* GetOwningPawn();// 0x5b5d040
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x5b5ce14
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x5b5cca4
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x5b5c8d0
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x5b5c6b8
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x5b5c554
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x5b5c2b4
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x5b5c0d0
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x5b5bd7c
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x5b5bbd4
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x5b5ba80
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x5b5b90c
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x5b5b5a0

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 4]
	float OrgY;//[Offset: 0x2c, Size: 4]
	float ClipX;//[Offset: 0x30, Size: 4]
	float ClipY;//[Offset: 0x34, Size: 4]
	Color DrawColor;//[Offset: 0x38, Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	int SizeX;//[Offset: 0x40, Size: 4]
	int SizeY;//[Offset: 0x44, Size: 4]
	Plane ColorModulate;//[Offset: 0x50, Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x5b0a660
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x5b0a568
	Vector K2_Project(Vector WorldLocation);// 0x5b0a4d8
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x5b0a360
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x5b0a108
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x5b09dd0
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x5b09c6c
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x5b09af4
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x5b0991c
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x5b097ec
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x5b09700
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x5b09310
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x5b091fc

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xe8, Size: 4]
	int LevelIndex;//[Offset: 0xec, Size: 4]
	int FirstResourceMemMip;//[Offset: 0xf0, Size: 4]
	IntPoint ImportedSize;//[Offset: 0xf4, Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x100, Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10a, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10a, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10a, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10a, Size: 1]
	byte AddressX;//[Offset: 0x10b, Size: 1]
	byte AddressY;//[Offset: 0x10c, Size: 1]
	int Blueprint_GetSizeY();// 0x5c82f10
	int Blueprint_GetSizeX();// 0x5c82edc

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 16]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 16]
	int IsRemapped;//[Offset: 0x58, Size: 4]
	float EmScale;//[Offset: 0x5c, Size: 4]
	float Ascent;//[Offset: 0x60, Size: 4]
	float Descent;//[Offset: 0x64, Size: 4]
	float Leading;//[Offset: 0x68, Size: 4]
	int Kerning;//[Offset: 0x6c, Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 168]
	int NumCharacters;//[Offset: 0x118, Size: 4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 16]
	float ScalingFactor;//[Offset: 0x130, Size: 4]
	int LegacyFontSize;//[Offset: 0x134, Size: 4]
	FName LegacyFontName;//[Offset: 0x138, Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 32]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 4]
	int StartV;//[Offset: 0x4, Size: 4]
	int USize;//[Offset: 0x8, Size: 4]
	int VSize;//[Offset: 0xc, Size: 4]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 16]
	float Height;//[Offset: 0x10, Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	byte CharacterSet;//[Offset: 0x15, Size: 1]
	FString Chars;//[Offset: 0x18, Size: 16]
	FString UnicodeRange;//[Offset: 0x28, Size: 16]
	FString CharsFilePath;//[Offset: 0x38, Size: 16]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 16]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	int TexturePageWidth;//[Offset: 0x70, Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 4]
	int XPadding;//[Offset: 0x78, Size: 4]
	int YPadding;//[Offset: 0x7c, Size: 4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	int Kerning;//[Offset: 0x94, Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 16]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x10, Size: 16]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 16]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 8]
	FontData Font;//[Offset: 0x8, Size: 32]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 16]
	enum Hinting;//[Offset: 0x10, Size: 1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 8]

--------------------------------
Class: CompositeSubFont
	Typeface Typeface;//[Offset: 0x0, Size: 16]
	Int32Range[] CharacterRanges;//[Offset: 0x10, Size: 16]
	float ScalingFactor;//[Offset: 0x20, Size: 4]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 16]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 16]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 16]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 8]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 12]
	FString DebugText;//[Offset: 0x20, Size: 16]
	float TimeRemaining;//[Offset: 0x30, Size: 4]
	float Duration;//[Offset: 0x34, Size: 4]
	Color TextColor;//[Offset: 0x38, Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 12]
	Font* Font;//[Offset: 0x50, Size: 8]
	float FontScale;//[Offset: 0x58, Size: 4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x3c8, Size: 8]
	SceneComponent* TransformComponent;//[Offset: 0x3d0, Size: 8]
	float DefaultFOV;//[Offset: 0x3e0, Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x3e8, Size: 4]
	float DefaultAspectRatio;//[Offset: 0x3f0, Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x440, Size: 1472]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0xa00, Size: 1472]
	TViewTarget ViewTarget;//[Offset: 0xfc0, Size: 1488]
	TViewTarget PendingViewTarget;//[Offset: 0x1590, Size: 1488]
	CameraModifier*[] ModifierList;//[Offset: 0x1b78, Size: 16]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x1b88, Size: 16]
	float FreeCamDistance;//[Offset: 0x1b98, Size: 4]
	Vector FreeCamOffset;//[Offset: 0x1b9c, Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x1ba8, Size: 12]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x1bc8, Size: 16]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1bd8, Size: 8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1be0, Size: 8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1c20, Size: 16]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1c40, Size: 16]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1c50, Size: 16]
	CameraActor* AnimCameraActor;//[Offset: 0x1c60, Size: 8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c68, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c68, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c68, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c69, Size: 1]
	float ViewPitchMin;//[Offset: 0x1c6c, Size: 4]
	float ViewPitchMax;//[Offset: 0x1c70, Size: 4]
	float ViewYawMin;//[Offset: 0x1c74, Size: 4]
	float ViewYawMax;//[Offset: 0x1c78, Size: 4]
	float ViewRollMin;//[Offset: 0x1c7c, Size: 4]
	float ViewRollMax;//[Offset: 0x1c80, Size: 4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x5c26da8
	void StopCameraFade();// 0x5c26d8c
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x5c26cc4
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x5c26bfc
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x5c26b34
	void StopAllCameraShakes(bool bImmediately);// 0x5c26aa8
	void StopAllCameraAnims(bool bImmediate);// 0x5c26a1c
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x5c26858
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x5c26754
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x5c266bc
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x5c26638
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x5c264f0
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x5c26230
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x5c260e4
	void OnPhotographySessionStart();// 0x5c260c8
	void OnPhotographySessionEnd();// 0x5c260ac
	void OnPhotographyMultiPartCaptureStart();// 0x5c26090
	void OnPhotographyMultiPartCaptureEnd();// 0x5c26074
	PlayerController* GetOwningPlayerController();// 0x5c26038
	float GetFOVAngle();// 0x5c25ffc
	Rotator GetCameraRotation();// 0x5c25fc4
	Vector GetCameraLocation();// 0x5c25f8c
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x5c25ef8
	void ClearCameraLensEffects();// 0x5c25edc
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x4033584
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x5c25e48
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x5c25db4

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1456]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	float FOV;//[Offset: 0x24, Size: 4]
	float OrthoWidth;//[Offset: 0x28, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 4]
	float AspectRatio;//[Offset: 0x34, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	byte ProjectionMode;//[Offset: 0x39, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1376]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5a0, Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_RadialBlurCenterPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 1]
	bool bOverride_SRTOcclusionContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 1]
	bool bOverride_SRTOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 1]
	bool bOverride_SRTSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_SRTSpecularMinOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_SRTOcclusionTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	float WhiteTemp;//[Offset: 0x18, Size: 4]
	float WhiteTint;//[Offset: 0x1c, Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 16]
	Vector4 ColorGain;//[Offset: 0x50, Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 4]
	float FilmSlope;//[Offset: 0x174, Size: 4]
	float FilmToe;//[Offset: 0x178, Size: 4]
	float FilmShoulder;//[Offset: 0x17c, Size: 4]
	float FilmBlackClip;//[Offset: 0x180, Size: 4]
	float FilmWhiteClip;//[Offset: 0x184, Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 4]
	float FilmSaturation;//[Offset: 0x1b0, Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 16]
	float FilmContrast;//[Offset: 0x1e4, Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8, Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec, Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204, Size: 4]
	byte BloomMethod;//[Offset: 0x208, Size: 1]
	float BloomIntensity;//[Offset: 0x20c, Size: 4]
	float BloomThreshold;//[Offset: 0x210, Size: 4]
	float BloomSizeScale;//[Offset: 0x214, Size: 4]
	float Bloom1Size;//[Offset: 0x218, Size: 4]
	float Bloom2Size;//[Offset: 0x21c, Size: 4]
	float Bloom3Size;//[Offset: 0x220, Size: 4]
	float Bloom4Size;//[Offset: 0x224, Size: 4]
	float Bloom5Size;//[Offset: 0x228, Size: 4]
	float Bloom6Size;//[Offset: 0x22c, Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 8]
	float BloomConvolutionSize;//[Offset: 0x298, Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x29c, Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a4, Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b0, Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b4, Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b8, Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2bc, Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2c0, Size: 8]
	float BloomDirtMaskIntensity;//[Offset: 0x2c8, Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2cc, Size: 16]
	Vector2D RadialBlurCenterPos;//[Offset: 0x2dc, Size: 8]
	float RadialBlurIntensity;//[Offset: 0x2e4, Size: 4]
	float RadialBlurDistance;//[Offset: 0x2e8, Size: 4]
	LinearColor AmbientCubemapTint;//[Offset: 0x2ec, Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2fc, Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x300, Size: 8]
	byte AutoExposureMethod;//[Offset: 0x308, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x30c, Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x310, Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x314, Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x318, Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x31c, Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x320, Size: 4]
	bool BlindWatermarking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool ShowFFTResult;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	bool bOverride_BlindWatermarking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x324, Size: 1]
	bool bOverride_ShowFFTResult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x324, Size: 1]
	float AutoExposureBias;//[Offset: 0x328, Size: 4]
	float HistogramLogMin;//[Offset: 0x32c, Size: 4]
	float HistogramLogMax;//[Offset: 0x330, Size: 4]
	float LensFlareIntensity;//[Offset: 0x334, Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x338, Size: 16]
	float LensFlareBokehSize;//[Offset: 0x348, Size: 4]
	int LensFlareCount;//[Offset: 0x34c, Size: 4]
	float LensFlareThreshold;//[Offset: 0x350, Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x358, Size: 8]
	LinearColor LensFlareTints;//[Offset: 0x360, Size: 16]
	float VignetteIntensity;//[Offset: 0x3e0, Size: 4]
	float GrainJitter;//[Offset: 0x3e4, Size: 4]
	float GrainIntensity;//[Offset: 0x3e8, Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3ec, Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3f0, Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3f4, Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f8, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3fc, Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x400, Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x404, Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x408, Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x40c, Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x410, Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x414, Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x418, Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x41c, Size: 4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x420, Size: 16]
	float SRTIndirectLightingIntensity;//[Offset: 0x430, Size: 4]
	float SRTMaxOcclusionDistance;//[Offset: 0x434, Size: 4]
	float SRTOcclusionContrast;//[Offset: 0x438, Size: 4]
	float SRTOcclusionExponent;//[Offset: 0x43c, Size: 4]
	float SRTMinOcclusion;//[Offset: 0x440, Size: 4]
	float SRTSpecularOcclusionExponent;//[Offset: 0x444, Size: 4]
	float SRTSpecularMinOcclusion;//[Offset: 0x448, Size: 4]
	LinearColor SRTOcclusionTint;//[Offset: 0x44c, Size: 16]
	float SRTFilterSmoothness;//[Offset: 0x45c, Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x460, Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x470, Size: 4]
	float ColorGradingIntensity;//[Offset: 0x474, Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x478, Size: 8]
	byte DepthOfFieldMethod;//[Offset: 0x480, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x481, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x484, Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x488, Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x48c, Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x490, Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x494, Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x498, Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x49c, Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x4a0, Size: 4]
	float DepthOfFieldScale;//[Offset: 0x4a4, Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x4a8, Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4ac, Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4b0, Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x4b8, Size: 8]
	float DepthOfFieldOcclusion;//[Offset: 0x4c0, Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x4c4, Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x4c8, Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4cc, Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4d0, Size: 4]
	float MotionBlurAmount;//[Offset: 0x4d4, Size: 4]
	float MotionBlurMax;//[Offset: 0x4d8, Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x4dc, Size: 4]
	float LPVIntensity;//[Offset: 0x4e0, Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x4e4, Size: 4]
	float LPVSize;//[Offset: 0x4e8, Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4ec, Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4f0, Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x4f4, Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4f8, Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4fc, Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x500, Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x504, Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x508, Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x50c, Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x510, Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x514, Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x518, Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x51c, Size: 4]
	float LPVFadeRange;//[Offset: 0x520, Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x524, Size: 4]
	float ScreenPercentage;//[Offset: 0x528, Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x530, Size: 16]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x540, Size: 4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x544, Size: 4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x548, Size: 4]
	Object*[] Blendables;//[Offset: 0x550, Size: 16]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 16]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 4]
	Object* Object;//[Offset: 0x8, Size: 8]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1456]
	PlayerState* PlayerState;//[Offset: 0x5c0, Size: 8]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	byte Priority;//[Offset: 0x29, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 8]
	float AlphaInTime;//[Offset: 0x38, Size: 4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 4]
	float Alpha;//[Offset: 0x40, Size: 4]
	bool IsDisabled();// 0x5b05100
	Actor* GetViewTarget();// 0x5b050c4
	void EnableModifier();// 0x5b050a8
	void DisableModifier(bool bImmediate);// 0x5b0501c
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x4033584
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x4033584

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x428, Size: 8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x430, Size: 8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x438, Size: 8]
	Transform RelativeTransform;//[Offset: 0x440, Size: 48]
	float BaseFOV;//[Offset: 0x470, Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x474, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x474, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x478, Size: 16]
	float DistFromCamera;//[Offset: 0x488, Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x3c8, Size: 8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d0, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d0, Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x3d8, Size: 16]
	delegate OnParticleBurst;//[Offset: 0x3e8, Size: 16]
	delegate OnParticleDeath;//[Offset: 0x3f8, Size: 16]
	delegate OnParticleCollide;//[Offset: 0x408, Size: 16]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x418, Size: 16]
	void ToggleActive();// 0x5b306b0
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x5b305f8
	void SetTemplate(ParticleSystem* NewTemplate);// 0x5b30574
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x5b304c0
	void SetFloatParameter(FName ParameterName, float Param);// 0x5b30408
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x5b30350
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x5b3029c
	void OnRep_bCurrentlyActive();// 0x5b30280
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x5b301fc
	bool IsActive();// 0x5b301c4
	void Deactivate();// 0x5b301b0
	void Activate();// 0x5b3019c

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x28, Size: 1]
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 4]
	float WarmupTime;//[Offset: 0x34, Size: 4]
	float WarmupTickRate;//[Offset: 0x38, Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 16]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 8]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x64, Size: 4]
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	byte LODMethod;//[Offset: 0x69, Size: 1]
	float[] LODDistances;//[Offset: 0x70, Size: 16]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x88, Size: 16]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x9c, Size: 28]
	float SecondsBeforeInactive;//[Offset: 0xb8, Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbc, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbc, Size: 1]
	float Delay;//[Offset: 0xc0, Size: 4]
	float DelayLow;//[Offset: 0xc4, Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xcc, Size: 4]
	enum InsignificantReaction;//[Offset: 0xd0, Size: 1]
	float InsignificanceDelay;//[Offset: 0xd4, Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xd8, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xdc, Size: 12]
	float MacroUVRadius;//[Offset: 0xe8, Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xec, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xf0, Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0x110, Size: 16]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x120, Size: 16]
	bool ContainsEmitterType(class Object TypeData);// 0x5c14d38

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x38, Size: 16]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	int PeakActiveParticles;//[Offset: 0x4c, Size: 4]
	int InitialAllocationCount;//[Offset: 0x50, Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x54, Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 4]
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x5c, Size: 4]
	byte DetailMode;//[Offset: 0x60, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 1]
	enum SignificanceLevel;//[Offset: 0x62, Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x63, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 16]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 16]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 16]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 16]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 16]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 16]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x48, Size: 8]
	MaterialInterface* MaterialPath;//[Offset: 0x50, Size: 40]
	Vector EmitterOrigin;//[Offset: 0x78, Size: 12]
	Rotator EmitterRotation;//[Offset: 0x84, Size: 12]
	byte ScreenAlignment;//[Offset: 0x90, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x94, Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x98, Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 1]
	byte SortMode;//[Offset: 0x9d, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9e, Size: 1]
	float EmitterDuration;//[Offset: 0xa0, Size: 4]
	float EmitterDurationLow;//[Offset: 0xa4, Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8, Size: 1]
	int EmitterLoops;//[Offset: 0xac, Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0xb0, Size: 56]
	byte ParticleBurstMethod;//[Offset: 0xe8, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xf0, Size: 16]
	float EmitterDelay;//[Offset: 0x100, Size: 4]
	float EmitterDelayLow;//[Offset: 0x104, Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x108, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x108, Size: 1]
	byte InterpolationMethod;//[Offset: 0x109, Size: 1]
	int SubImages_Horizontal;//[Offset: 0x10c, Size: 4]
	int SubImages_Vertical;//[Offset: 0x110, Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x114, Size: 1]
	float RandomImageTime;//[Offset: 0x118, Size: 4]
	int RandomImageChanges;//[Offset: 0x11c, Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 1]
	Vector MacroUVPosition;//[Offset: 0x124, Size: 12]
	float MacroUVRadius;//[Offset: 0x130, Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 1]
	int MaxDrawCount;//[Offset: 0x138, Size: 4]
	enum UVFlippingMode;//[Offset: 0x13c, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0x140, Size: 8]
	Texture2D* CutoutTexturePath;//[Offset: 0x148, Size: 40]
	byte BoundingMode;//[Offset: 0x170, Size: 1]
	byte OpacitySourceMode;//[Offset: 0x171, Size: 1]
	float AlphaThreshold;//[Offset: 0x174, Size: 4]
	int CutoutSubImagesX;//[Offset: 0x178, Size: 4]
	int CutoutSubImagesY;//[Offset: 0x17c, Size: 4]
	byte EmitterNormalsMode;//[Offset: 0x180, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0x184, Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0x190, Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x1a0, Size: 16]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x1b0, Size: 16]
	bool bUseComputeRaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c0, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 1]
	byte LODValidity;//[Offset: 0x2a, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 4]
	float MaxValue;//[Offset: 0x2c, Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x30, Size: 8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 40]

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 1]
	byte EntryCount;//[Offset: 0x1, Size: 1]
	byte EntryStride;//[Offset: 0x2, Size: 1]
	byte SubEntryStride;//[Offset: 0x3, Size: 1]
	float TimeScale;//[Offset: 0x4, Size: 4]
	float TimeBias;//[Offset: 0x8, Size: 4]
	float[] Values;//[Offset: 0x10, Size: 16]
	byte LockFlag;//[Offset: 0x20, Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 4]
	int CountLow;//[Offset: 0x4, Size: 4]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x50, Size: 56]
	RawDistributionFloat RateScale;//[Offset: 0x88, Size: 56]
	byte ParticleBurstMethod;//[Offset: 0xc0, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xc8, Size: 16]
	RawDistributionFloat BurstScale;//[Offset: 0xd8, Size: 56]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x48, Size: 16]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 4]
	int ParticleFrequency;//[Offset: 0x8, Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 16]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x49, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x50, Size: 80]
	OrbitOptions OffsetOptions;//[Offset: 0xa0, Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0xa8, Size: 80]
	OrbitOptions RotationOptions;//[Offset: 0xf8, Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0x100, Size: 80]
	OrbitOptions RotationRateOptions;//[Offset: 0x150, Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 4]
	float MaxValue;//[Offset: 0x2c, Size: 4]
	Vector MinValueVec;//[Offset: 0x30, Size: 12]
	Vector MaxValueVec;//[Offset: 0x3c, Size: 12]
	DistributionVector* Distribution;//[Offset: 0x48, Size: 8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x48, Size: 1]
	FName EventName;//[Offset: 0x50, Size: 8]

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x700, Size: 8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x708, Size: 16]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x718, Size: 16]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x728, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x729, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x729, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x729, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x729, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72a, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x72a, Size: 1]
	byte LODMethod;//[Offset: 0x72c, Size: 1]
	enum RequiredSignificance;//[Offset: 0x72d, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x730, Size: 16]
	delegate OnParticleSpawn;//[Offset: 0x740, Size: 16]
	delegate OnParticleBurst;//[Offset: 0x750, Size: 16]
	delegate OnParticleDeath;//[Offset: 0x760, Size: 16]
	delegate OnParticleCollide;//[Offset: 0x770, Size: 16]
	delegate OnParticleCollideMoreInfo;//[Offset: 0x780, Size: 16]
	Vector OldPosition;//[Offset: 0x790, Size: 12]
	Vector PartSysVelocity;//[Offset: 0x79c, Size: 12]
	float WarmupTime;//[Offset: 0x7a8, Size: 4]
	float WarmupTickRate;//[Offset: 0x7ac, Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x7b4, Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x7bc, Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x7e0, Size: 16]
	float CustomTimeDilation;//[Offset: 0x7f8, Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x850, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x858, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x860, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x861, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x862, Size: 1]
	delegate OnSystemFinished;//[Offset: 0x890, Size: 16]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x5c17830
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x5c17704
	void SetTemplate(ParticleSystem* NewTemplate);// 0x5c17688
	void SetSocketName(FName InSocketName);// 0x5c1760c
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x5c17558
	void SetLODLevel(int InLODLevel);// 0x5c174d4
	void SetFloatParameter(FName ParameterName, float Param);// 0x5c1741c
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x5c17354
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x5c1729c
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x5c171a0
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x5c170a4
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x5c16fa8
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x5c16eac
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x5c16db0
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x5c16cb4
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x5c16bf4
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x5c16ae4
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x5c1695c
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x5c168a8
	void OnMaterialLoaded(MaterialInterface* MaterialInstance, int ElementIndex);// 0x5c167f0
	int GetNumActiveParticles();// 0x5c167bc
	MaterialInterface* GetNamedMaterial(FName InName);// 0x5c16728
	int GetLODLevel();// 0x5c166ec
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x5c165d4
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x5c164b8
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x5c163a0
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x5c16288
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x5c1616c
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x5c16054
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x5c15f74
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x5c15e04
	void EndTrails();// 0x5c15df0
	void CreateNamedDynamicMaterialInstanceAsync(FName InName, delegate MaterialInstCallback, MaterialInterface* SourceMaterial);// 0x5c15cd4
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x5c15c08
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x5c15adc

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 8]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 4]
	float Scalar_Low;//[Offset: 0x10, Size: 4]
	Vector Vector;//[Offset: 0x14, Size: 12]
	Vector Vector_Low;//[Offset: 0x20, Size: 12]
	Color Color;//[Offset: 0x2c, Size: 4]
	Actor* Actor;//[Offset: 0x30, Size: 8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x5be295c
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x5be28a8
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x5be27f0
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x5be2700
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x5be2670
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x5be25e4
	float K2_GetScalarParameterValue(FName ParameterName);// 0x5be2558
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x5be24dc
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x5be2460
	void CopyInterpParameters(MaterialInstance* Source);// 0x5be23e4

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x78, Size: 8]
	MaterialInterface* Parent;//[Offset: 0x80, Size: 8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x90, Size: 16]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xa0, Size: 16]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0xb0, Size: 16]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xc0, Size: 16]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0xd0, Size: 80]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x124, Size: 16]
	Texture*[] PermutationTextureReferences;//[Offset: 0x158, Size: 16]

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Font* FontValue;//[Offset: 0x8, Size: 8]
	int FontPage;//[Offset: 0x10, Size: 4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 16]

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Texture* ParameterValue;//[Offset: 0x8, Size: 8]
	Guid ExpressionGUID;//[Offset: 0x10, Size: 16]

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 16]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bOverride_ShadingRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 4]
	byte BlendMode;//[Offset: 0xc, Size: 1]
	byte ShadingModel;//[Offset: 0xd, Size: 1]
	byte ShadingRate;//[Offset: 0xe, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 16]
	int ActiveTab;//[Offset: 0x38, Size: 4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 16]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 16]
	float ViewStartInput;//[Offset: 0x20, Size: 4]
	float ViewEndInput;//[Offset: 0x24, Size: 4]
	float ViewStartOutput;//[Offset: 0x28, Size: 4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 8]
	Color CurveColor;//[Offset: 0x8, Size: 4]
	FString CurveName;//[Offset: 0x10, Size: 16]
	int bHideCurve;//[Offset: 0x20, Size: 4]
	int bColorCurve;//[Offset: 0x24, Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 4]
	int bClamp;//[Offset: 0x2c, Size: 4]
	float ClampLow;//[Offset: 0x30, Size: 4]
	float ClampHigh;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 16]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 8]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x48, Size: 16]
	float SplitScreenShakeScale;//[Offset: 0x58, Size: 4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float OscillationDuration;//[Offset: 0x2c, Size: 4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 36]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 12]
	float AnimPlayRate;//[Offset: 0x8c, Size: 4]
	float AnimScale;//[Offset: 0x90, Size: 4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 4]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 8]
	float ShakeScale;//[Offset: 0x148, Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 8]
	void ReceiveStopShake(bool bImmediately);// 0x4033584
	void ReceivePlayShake(float Scale);// 0x4033584
	bool ReceiveIsFinished();// 0x5b062bc
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x4033584

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 12]
	FOscillator Yaw;//[Offset: 0xc, Size: 12]
	FOscillator Roll;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 4]
	float Frequency;//[Offset: 0x4, Size: 4]
	byte InitialOffset;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 12]
	FOscillator Y;//[Offset: 0xc, Size: 12]
	FOscillator Z;//[Offset: 0x18, Size: 12]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 8]
	float AnimLength;//[Offset: 0x30, Size: 4]
	Box BoundingBox;//[Offset: 0x34, Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	float BaseFOV;//[Offset: 0x54, Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 1376]
	float BasePostProcessBlendWeight;//[Offset: 0x5c0, Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 16]
	FName GroupName;//[Offset: 0x40, Size: 8]
	Color GroupColor;//[Offset: 0x48, Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 16]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 8]
	byte ActiveCondition;//[Offset: 0x50, Size: 1]
	FString TrackTitle;//[Offset: 0x58, Size: 16]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 8]
	float PlayRate;//[Offset: 0x50, Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 8]
	byte PlaySpace;//[Offset: 0x78, Size: 1]
	void Stop(bool bImmediate);// 0x5b03748
	void SetScale(float NewDuration);// 0x5b036cc
	void SetDuration(float NewDuration);// 0x5b03650
	void SetCurrentTime(float NewTime);// 0x5b035d4

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 8]
	Actor* GroupActor;//[Offset: 0x30, Size: 8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 16]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 24]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 24]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 16]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 8]
	float LinCurveTension;//[Offset: 0xb8, Size: 4]
	float AngCurveTension;//[Offset: 0xbc, Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 1]
	byte RotMode;//[Offset: 0xc1, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 16]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 4]
	Vector OutVal;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 16]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 12]
	Rotator ResetRotation;//[Offset: 0x34, Size: 12]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x3c8, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x3d0, Size: 8]
	SceneComponent* SceneComponent;//[Offset: 0x3d8, Size: 8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e8, Size: 1]
	float AspectRatio;//[Offset: 0x3ec, Size: 4]
	float FOVAngle;//[Offset: 0x3f0, Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x3f4, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x400, Size: 1376]
	int GetAutoActivatePlayerIndex();// 0x5b02f50

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x2cc, Size: 4]
	float OrthoWidth;//[Offset: 0x2d0, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2d4, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x2d8, Size: 4]
	float AspectRatio;//[Offset: 0x2dc, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e0, Size: 1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e0, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e0, Size: 1]
	byte ProjectionMode;//[Offset: 0x2e1, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x2e4, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2f0, Size: 1376]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a8, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x5b04540
	void SetProjectionMode(byte InProjectionMode);// 0x5b044c8
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x5b04450
	void SetOrthoWidth(float InOrthoWidth);// 0x5b043d8
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x5b04360
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x5b042e8
	void SetFieldOfView(float InFieldOfView);// 0x5b04264
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x5b041d8
	void SetAspectRatio(float InAspectRatio);// 0x5b04160
	void SetActive(bool bNewActive, bool bReset);// 0x5b04088
	void RemoveBlendable(interface classNone InBlendableObject);// 0x5b03f8c
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x5b03dec
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x5b03d70
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5b03c30

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 8]
	void Walk();// 0x5b14bd4
	void ViewSelf();// 0x5b14bb8
	void ViewPlayer(FString S);// 0x5b14b08
	void ViewClass(class Actor DesiredClass);// 0x5b14a84
	void ViewActor(FName actorName);// 0x5b14a00
	void TriggerCrash();// 0x5b149ec
	void ToggleDebugCamera();// 0x5b149d0
	void ToggleAILogging();// 0x5b149b4
	void TestCollisionDistance();// 0x5b14998
	void Teleport();// 0x5b1497c
	void Summon(FString ClassName);// 0x5b148cc
	void StreamLevelOut(FName PackageName);// 0x5b14848
	void StreamLevelIn(FName PackageName);// 0x5b147c4
	void Slomo(float NewTimeDilation);// 0x5b14740
	void SetWorldOrigin();// 0x5b1472c
	void SetNavDrawDistance(float DrawDistance);// 0x5b146b0
	void SetMouseSensitivityToDefault();// 0x5b1469c
	void ServerToggleAILogging();// 0x5b1463c
	void ReceiveInitCheatManager();// 0x4033584
	void ReceiveEndPlay();// 0x4033584
	void RebuildNavigation();// 0x5b14620
	void PlayersOnly();// 0x5b14604
	void OnlyLoadLevel(FName PackageName);// 0x5b14580
	void LogLoc();// 0x5b14564
	void InvertMouse();// 0x5b14550
	void God();// 0x5b14534
	void Ghost();// 0x5b14518
	void FreezeFrame(float Delay);// 0x5b14494
	void Fly();// 0x5b14478
	void FlushLog();// 0x5b1445c
	void EnableDebugCamera();// 0x5b14440
	void DumpVoiceMutingState();// 0x5b14424
	void DumpPartyState();// 0x5b14408
	void DumpOnlineSessionState();// 0x5b143ec
	void DumpChatState();// 0x5b143d0
	void DisableDebugCamera();// 0x5b143b4
	void DestroyTarget();// 0x5b14398
	void DestroyPawns(class Pawn aClass);// 0x5b14314
	void DestroyAllPawnsExceptTarget();// 0x5b142f8
	void DestroyAll(class Actor aClass);// 0x5b14274
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x5b141b8
	void DebugCapsuleSweepPawn();// 0x5b1419c
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x5b14110
	void DebugCapsuleSweepClear();// 0x5b140f4
	void DebugCapsuleSweepChannel(byte Channel);// 0x5b14070
	void DebugCapsuleSweepCapture();// 0x5b14054
	void DebugCapsuleSweep();// 0x5b14038
	void DamageTarget(float DamageAmount);// 0x5b13fb4
	void CheatScript(FString ScriptName);// 0x5b13e80
	void ChangeSize(float F);// 0x5b13dfc
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x5b13c40
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x5b13a98
	void BugIt(FString ScreenShotDescription);// 0x5b139e8

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72d, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x72d, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x730, Size: 8]
	float SpeedScale;//[Offset: 0x758, Size: 4]
	float InitialMaxSpeed;//[Offset: 0x75c, Size: 4]
	float InitialAccel;//[Offset: 0x760, Size: 4]
	float InitialDecel;//[Offset: 0x764, Size: 4]
	void ToggleDisplay();// 0x5b1f914
	void ShowDebugSelectedInfo();// 0x5b1f8f8
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x5b1f87c
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x4033584
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x4033584
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x4033584
	Actor* GetSelectedActor();// 0x5b1f848

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x700, Size: 4]
	float FrustumAngle;//[Offset: 0x704, Size: 4]
	float FrustumAspectRatio;//[Offset: 0x708, Size: 4]
	float FrustumStartDist;//[Offset: 0x70c, Size: 4]
	float FrustumEndDist;//[Offset: 0x710, Size: 4]
	Texture* Texture;//[Offset: 0x718, Size: 8]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	KeyBind[] DebugExecBindings;//[Offset: 0x198, Size: 16]
	FName[] InvertedAxis;//[Offset: 0x1d8, Size: 16]
	void SetMouseSensitivity(const float Sensitivity);// 0x5c34fb4
	void SetBind(FName BindName, FString Command);// 0x5c34ecc
	void InvertAxisKey(const Key AxisKey);// 0x5c34c84
	void InvertAxis(const FName AxisName);// 0x5c34c08
	void ClearSmoothing();// 0x5c34bf4

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 24]
	FString Command;//[Offset: 0x18, Size: 16]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 16]
	float Duration;//[Offset: 0x38, Size: 4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 120]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 112]
	CurveFloat* ExternalCurve;//[Offset: 0x70, Size: 8]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 16]
	NetDriver* Driver;//[Offset: 0x58, Size: 8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 16]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 16]
	Actor* ViewTarget;//[Offset: 0x90, Size: 8]
	Actor* OwningActor;//[Offset: 0x98, Size: 8]
	Actor* ObserveTarget;//[Offset: 0xa0, Size: 8]
	int MaxPacket;//[Offset: 0xa8, Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0x160, Size: 24]
	double LastReceiveTime;//[Offset: 0x1e0, Size: 8]
	bool bOpenClampBandwidthDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334e0, Size: 1]
	float MaxBandwitdhDeltaTime;//[Offset: 0x334e4, Size: 4]
	Channel*[] ChannelsToTick;//[Offset: 0x336c0, Size: 16]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x33700, Size: 8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 16]
	int MaxDownloadSize;//[Offset: 0x40, Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x48, Size: 4]
	int MaxInternetClientRate;//[Offset: 0x4c, Size: 4]
	int MaxClientRate;//[Offset: 0x50, Size: 4]
	float ServerTravelPause;//[Offset: 0x54, Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x58, Size: 4]
	float RelevantTimeout;//[Offset: 0x5c, Size: 4]
	float KeepAliveTime;//[Offset: 0x60, Size: 4]
	float InitialConnectTimeout;//[Offset: 0x64, Size: 4]
	float ConnectionTimeout;//[Offset: 0x68, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x6c, Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x78, Size: 8]
	NetConnection*[] ClientConnections;//[Offset: 0x80, Size: 16]
	World* World;//[Offset: 0xa8, Size: 8]
	class Object* NetConnectionClass;//[Offset: 0xd0, Size: 8]
	Property* RoleProperty;//[Offset: 0xd8, Size: 8]
	Property* RemoteRoleProperty;//[Offset: 0xe0, Size: 8]
	FName NetDriverName;//[Offset: 0xe8, Size: 8]
	float Time;//[Offset: 0x138, Size: 4]
	<Object*> PendingForceNetUpdateObjectSet;//[Offset: 0x520, Size: 80]

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 8]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 16]
	float ActiveOpacity;//[Offset: 0x38, Size: 4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 4]
	float TimeUntilReset;//[Offset: 0x44, Size: 4]
	float ActivationDelay;//[Offset: 0x48, Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float StartupDelay;//[Offset: 0x50, Size: 4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 8]
	Texture2D* Image2;//[Offset: 0x8, Size: 8]
	Vector2D Center;//[Offset: 0x10, Size: 8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 8]
	Vector2D InputScale;//[Offset: 0x30, Size: 8]
	Key MainInputKey;//[Offset: 0x38, Size: 24]
	Key AltInputKey;//[Offset: 0x50, Size: 24]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x428, Size: 4]
	float BaseLookUpRate;//[Offset: 0x42c, Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x430, Size: 8]
	SphereComponent* CollisionComponent;//[Offset: 0x438, Size: 8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x440, Size: 8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x448, Size: 1]
	void TurnAtRate(float Rate);// 0x5b2275c
	void MoveUp_World(float Val);// 0x5b226d8
	void MoveRight(float Val);// 0x5b22654
	void MoveForward(float Val);// 0x5b225d0
	void LookUpAtRate(float Rate);// 0x5b22554

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x720, Size: 4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x5c6ef98
	float GetUnscaledSphereRadius();// 0x5c6ef7c
	float GetShapeScale();// 0x5c6ef1c
	float GetScaledSphereRadius();// 0x5c6eeb4

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x728, Size: 4]
	int LowDeviceForcedLodModel;//[Offset: 0x72c, Size: 4]
	int PreviousLODLevel;//[Offset: 0x730, Size: 4]
	int MinLOD;//[Offset: 0x734, Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x738, Size: 8]
	byte TileLength;//[Offset: 0x740, Size: 1]
	byte TileNum;//[Offset: 0x741, Size: 1]
	Texture2D* TileTexture;//[Offset: 0x748, Size: 8]
	Vector2D TileLocalMin;//[Offset: 0x750, Size: 8]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x758, Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x758, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x758, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x758, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x758, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x758, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x758, Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x758, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x759, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x759, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x759, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x759, Size: 1]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x759, Size: 1]
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x759, Size: 1]
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x759, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x75c, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x760, Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x768, Size: 16]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x778, Size: 16]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x790, Size: 80]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x7e0, Size: 24]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x7f8, Size: 20]
	Actor*[] AffectPointLightBPActors;//[Offset: 0x810, Size: 16]
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x820, Size: 16]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x5c7bc90
	void SetOverrideCullingScreenSizeEnable(bool bEnable);// 0x5c7bc0c
	void SetOverrideCullingScreenSize(float ScreenSize);// 0x5c7bb90
	void SetLowDeviceForcedLodModel(int NewLowDeviceForcedLodModel);// 0x5c7bb14
	void SetForcedLodModel(int NewForcedLodModel);// 0x5c7ba98
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x5c7ba1c
	void SetDirty();// 0x5c7ba08
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x5c7b98c
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x5c7b8b0

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x20, Size: 16]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 12]
	PackedNormal Normal;//[Offset: 0xc, Size: 4]
	Color Color;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 1]
	byte Y;//[Offset: 0x1, Size: 1]
	byte Z;//[Offset: 0x2, Size: 1]
	byte W;//[Offset: 0x3, Size: 1]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 4]
	float TexelFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 4]
	float EmissiveBoost;//[Offset: 0xc, Size: 4]
	float DiffuseBoost;//[Offset: 0x10, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 4]
	float LightmapBoost;//[Offset: 0x4, Size: 4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 4]
	float SunIntensity;//[Offset: 0xc, Size: 4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StaticMeshPointLightVertexDataBuffer
	byte[] VertexData;//[Offset: 0x0, Size: 16]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x108, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x118, Size: 16]
	SlateColor ForegroundColor;//[Offset: 0x128, Size: 40]
	delegate ForegroundColorDelegate;//[Offset: 0x150, Size: 16]
	Margin Padding;//[Offset: 0x160, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x170, Size: 16]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x180, Size: 16]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x190, Size: 16]
	WidgetTree* WidgetTree;//[Offset: 0x1a0, Size: 8]
	int Priority;//[Offset: 0x1a8, Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ac, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ac, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ac, Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ac, Size: 1]
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1ac, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1ac, Size: 1]
	bool needAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad, Size: 1]
	bool isAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae, Size: 1]
	FName[] autoPlayNameList;//[Offset: 0x1b0, Size: 16]
	InputComponent* InputComponent;//[Offset: 0x1c0, Size: 8]
	void UnregisterInputComponent();// 0x4f5c038
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x4033584
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x4f5bf78
	void StopListeningForAllInputActions();// 0x4f5bf64
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x4f5bee8
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x4f5be2c
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x4f5bd74
	void SetPadding(Margin InPadding);// 0x4f5bcf8
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x4f5bc7c
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x4f5bc00
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x4f5bb48
	void SetInputActionPriority(int NewPriority);// 0x4f5bacc
	void SetInputActionBlocking(bool bShouldBlock);// 0x4f5ba48
	void SetForegroundColor(SlateColor InForegroundColor);// 0x4f5b7f0
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x4f5b76c
	void SetDesiredSizeInViewport(Vector2D Size);// 0x4f5b6f4
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4f5b678
	void SetAnchorsInViewport(Anchors Anchors);// 0x4f5b5fc
	void SetAlignmentInViewport(Vector2D Alignment);// 0x4f5b584
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x4f5b508
	void RemoveFromViewport();// 0x4f5b4f4
	void RegisterInputComponent();// 0x4f5b4e0
	void PreConstruct(bool IsDesignTime);// 0x4033584
	void PlaySound(SoundBase* SoundToPlay);// 0x4f5b464
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x4f5b2c0
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x4f5b154
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x4f5b0c8
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4033584
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4033584
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x4033584
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x4033584
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x4033584
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4033584
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x4033584
	void OnPaint(out PaintContext Context);// 0x4033584
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4033584
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4033584
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x4033584
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4033584
	void OnMouseCaptureLost();// 0x4033584
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4033584
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4033584
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x4033584
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x4033584
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x4033584
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x4033584
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x4033584
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x4033584
	void OnFocusLost(FocusEvent InFocusEvent);// 0x4033584
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4033584
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4033584
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4033584
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4033584
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x4033584
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x4033584
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x4f5b044
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x4f5afc0
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x4033584
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x4033584
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x4f5ae5c
	bool IsPlayingAnimation();// 0x4f5ae38
	bool IsListeningForInputAction(FName ActionName);// 0x4f5ada8
	bool IsInViewport();// 0x4f5ad70
	bool IsInteractable();// 0x4033584
	bool IsAnyAnimationPlaying();// 0x4f5ad38
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x4f5aca8
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x4f5ac18
	Widget* GetWidgetFromName(out const FName Name);// 0x4f5ab7c
	Pawn* GetOwningPlayerPawn();// 0x4f5ab48
	PlayerController* GetOwningPlayer();// 0x4f5ab0c
	LocalPlayer* GetOwningLocalPlayer();// 0x4f5aad8
	bool GetIsVisible();// 0x4f5aaa0
	bool GetDontPaintWhenChildEmpty();// 0x4f5aa68
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x4f5a9dc
	Anchors GetAnchorsInViewport();// 0x4f5a9a4
	Vector2D GetAlignmentInViewport();// 0x4f5a970
	void Destruct();// 0x4033584
	void Construct();// 0x4033584
	void AddToViewport(int ZOrder);// 0x4f5a8f4
	bool AddToPlayerScreen(int ZOrder);// 0x4f5a864

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 16]
	FText ToolTipText;//[Offset: 0x40, Size: 24]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 1]
	byte UsedLayerPolicy;//[Offset: 0xb5, Size: 1]
	byte PreservedLayerNum;//[Offset: 0xb6, Size: 1]
	byte Cursor;//[Offset: 0xb7, Size: 1]
	enum Clipping;//[Offset: 0xb8, Size: 1]
	enum Visibility;//[Offset: 0xb9, Size: 1]
	bool bVisiblePass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba, Size: 1]
	enum WidgetVisible;//[Offset: 0xbb, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xc0, Size: 8]
	PropertyBinding*[] NativeBindings;//[Offset: 0xf0, Size: 16]
	void SetWidgetRender(const enum InWidgetVisible);// 0x4f60e7c
	void SetVisibility(enum InVisibility);// 0x4f60df8
	void SetUserFocus(PlayerController* PlayerController);// 0x4f60d7c
	void SetToolTipText(out const FText InToolTipText);// 0x4f60c28
	void SetToolTip(Widget* Widget);// 0x4f60bac
	void SetRenderTranslation(Vector2D Translation);// 0x4f60b34
	void SetRenderTransformPivot(Vector2D Pivot);// 0x4f60abc
	void SetRenderTransform(WidgetTransform InTransform);// 0x4f60a10
	void SetRenderShear(Vector2D Shear);// 0x4f60998
	void SetRenderScale(Vector2D Scale);// 0x4f60920
	void SetRenderAngle(float Angle);// 0x4f608a4
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x4f607b0
	void SetKeyboardFocus();// 0x4f6079c
	void SetIsEnabled(bool bInIsEnabled);// 0x4f60710
	void SetCursor(byte InCursor);// 0x4f60694
	void SetClipping(enum InClipping);// 0x4f60618
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x4f60560
	void ResetCursor();// 0x4f6054c
	void RemoveFromParent();// 0x4f60530
	EventReply OnReply__DelegateSignature();// 0x4033584
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x4033584
	bool IsVisible();// 0x4f604f8
	bool IsHovered();// 0x4f604c0
	void InvalidateLayoutAndVolatility();// 0x4f604ac
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x4f6041c
	bool HasUserFocus(PlayerController* PlayerController);// 0x4f6038c
	bool HasMouseCapture();// 0x4f60354
	bool HasKeyboardFocus();// 0x4f6031c
	bool HasFocusedDescendants();// 0x4f602e4
	bool HasAnyUserFocus();// 0x4f602ac
	enum GetWidgetRender();// 0x4f60278
	Widget* GetWidget__DelegateSignature();// 0x4033584
	enum GetVisibility();// 0x4f60244
	Widget* GetTheTemplate();// 0x4f60210
	FText GetText__DelegateSignature();// 0x4033584
	enum GetSlateVisibility__DelegateSignature();// 0x4033584
	SlateColor GetSlateColor__DelegateSignature();// 0x4033584
	SlateBrush GetSlateBrush__DelegateSignature();// 0x4033584
	PanelWidget* GetParent();// 0x4f601dc
	PlayerController* GetOwningPlayer();// 0x4f601a0
	byte GetMouseCursor__DelegateSignature();// 0x4033584
	LinearColor GetLinearColor__DelegateSignature();// 0x4033584
	bool GetIsEnabled();// 0x4f60168
	int GetInt32__DelegateSignature();// 0x4033584
	float GetFloat__DelegateSignature();// 0x4033584
	Vector2D GetDesiredSize();// 0x4f60134
	enum GetClipping();// 0x4f60100
	enum GetCheckBoxState__DelegateSignature();// 0x4033584
	Geometry GetCachedGeometry();// 0x4f600c8
	Geometry GetCachedAllottedGeometry();// 0x4f60090
	bool GetBool__DelegateSignature();// 0x4033584
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x4033584
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x4033584
	void ForceVolatile(bool bForce);// 0x4f6000c
	void ForceLayoutPrepass();// 0x4f5fff8
	void AdaptationWidgetSlot(out const Margin InOffset);// 0x4f5ff70

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 16]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 4]
	float Top;//[Offset: 0x4, Size: 4]
	float Right;//[Offset: 0x8, Size: 4]
	float Bottom;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x370, Size: 8]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x2e0, Size: 16]
	delegate OnAnimationFinished;//[Offset: 0x2f0, Size: 16]
	MovieScene* MovieScene;//[Offset: 0x300, Size: 8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x308, Size: 16]
	float GetStartTime();// 0x4f61cbc
	float GetEndTime();// 0x4f61c88

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x50, Size: 544]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x270, Size: 2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x278, Size: 80]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 80]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 48]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 160]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x170, Size: 168]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneSegment[] Segments;//[Offset: 0x18, Size: 16]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x28, Size: 16]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x38, Size: 56]
	FName EvaluationGroup;//[Offset: 0x70, Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78, Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0, Size: 16]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 16]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 16]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 16]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 4]
	int NumInitPtrs;//[Offset: 0x4, Size: 4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 16]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 12]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 80]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 80]

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 8]
	Object* SequenceKeyObject;//[Offset: 0x8, Size: 8]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x10, Size: 8]
	Guid SourceSequenceSignature;//[Offset: 0x18, Size: 16]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x28, Size: 4]
	FloatRange PreRollRange;//[Offset: 0x2c, Size: 16]
	FloatRange PostRollRange;//[Offset: 0x3c, Size: 16]
	int HierarchicalBias;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 16]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x8, Size: 80]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x58, Size: 80]

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 16]

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 16]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 16]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 16]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x80, Size: 16]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x90, Size: 8]
	FloatRange SelectionRange;//[Offset: 0x98, Size: 16]
	FloatRange PlaybackRange;//[Offset: 0xa8, Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	float FixedFrameInterval;//[Offset: 0xbc, Size: 4]
	float InTime;//[Offset: 0xc0, Size: 4]
	float OutTime;//[Offset: 0xc4, Size: 4]
	float StartTime;//[Offset: 0xc8, Size: 4]
	float EndTime;//[Offset: 0xcc, Size: 4]

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 16]
	Object* ObjectTemplate;//[Offset: 0x20, Size: 8]
	Guid[] ChildPossessables;//[Offset: 0x28, Size: 16]
	enum Ownership;//[Offset: 0x38, Size: 1]
	enum DeviceLevel;//[Offset: 0x39, Size: 1]

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 16]
	class Object* PossessedObjectClass;//[Offset: 0x20, Size: 8]
	Guid ParentGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 16]
	FString BindingName;//[Offset: 0x10, Size: 16]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 8]
	Widget* Content;//[Offset: 0x8, Size: 8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 8]
	Widget*[] AllWidgets;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Geometry

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x58, Size: 8]
	byte AspectRatioAxisConstraint;//[Offset: 0x7c, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x80, Size: 8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]
	int ControllerId;//[Offset: 0x108, Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x38, Size: 8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x40, Size: 16]
	World* World;//[Offset: 0x78, Size: 8]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 8]
	void SSSwapControllers();// 0x5b5a080
	void ShowTitleSafeArea();// 0x5b5a064
	void SetConsoleTarget(int PlayerIndex);// 0x5b59fe0

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 16]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 8]
	class Object* WithinClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x38, Size: 16]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x48, Size: 16]
	OnlineSession* OnlineSession;//[Offset: 0x58, Size: 8]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	void ReceiveShutdown();// 0x4033584
	void ReceiveInit();// 0x4033584
	void HandleTravelError(byte FailureType);// 0x4033584
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x4033584
	int GetDeviceLevel();// 0x5b43620
	void DebugRemovePlayer(int ControllerId);// 0x5b4359c
	void DebugCreatePlayer(int ControllerId);// 0x5b43518

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 8]
	Vector2D Maximum;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 8]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x38, Size: 8]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x40, Size: 12]
	byte MaxConcurrentResolutionRule;//[Offset: 0x4c, Size: 1]
	int MaxConcurrentPlayCount;//[Offset: 0x50, Size: 4]
	float Duration;//[Offset: 0x54, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x58, Size: 8]
	float Priority;//[Offset: 0x60, Size: 4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x68, Size: 8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x70, Size: 16]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x80, Size: 8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x88, Size: 16]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 40]
	SoundClass*[] ChildClasses;//[Offset: 0x50, Size: 16]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x60, Size: 16]
	SoundClass* ParentClass;//[Offset: 0x70, Size: 8]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 4]
	float Pitch;//[Offset: 0x4, Size: 4]
	float StereoBleed;//[Offset: 0x8, Size: 4]
	float LFEBleed;//[Offset: 0xc, Size: 4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	byte OutputTarget;//[Offset: 0x25, Size: 1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float EQPriority;//[Offset: 0x2c, Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 56]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x68, Size: 16]
	float InitialDelay;//[Offset: 0x78, Size: 4]
	float FadeInTime;//[Offset: 0x7c, Size: 4]
	float Duration;//[Offset: 0x80, Size: 4]
	float FadeOutTime;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 4]
	float Gain0;//[Offset: 0xc, Size: 4]
	float Bandwidth0;//[Offset: 0x10, Size: 4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 4]
	float Gain1;//[Offset: 0x18, Size: 4]
	float Bandwidth1;//[Offset: 0x1c, Size: 4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 4]
	float Gain2;//[Offset: 0x24, Size: 4]
	float Bandwidth2;//[Offset: 0x28, Size: 4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 4]
	float Gain3;//[Offset: 0x30, Size: 4]
	float Bandwidth3;//[Offset: 0x34, Size: 4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 4]
	float PitchAdjuster;//[Offset: 0xc, Size: 4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 12]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x5, Size: 1]
	float VolumeScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 696]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa4, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa4, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa4, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa4, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa4, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa4, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5, Size: 1]
	byte DistanceType;//[Offset: 0xa6, Size: 1]
	float OmniRadius;//[Offset: 0xa8, Size: 4]
	float StereoSpread;//[Offset: 0xac, Size: 4]
	byte SpatializationAlgorithm;//[Offset: 0xb0, Size: 1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0xb8, Size: 8]
	float RadiusMin;//[Offset: 0xc0, Size: 4]
	float RadiusMax;//[Offset: 0xc4, Size: 4]
	float LPFRadiusMin;//[Offset: 0xc8, Size: 4]
	float LPFRadiusMax;//[Offset: 0xcc, Size: 4]
	enum AbsorptionMethod;//[Offset: 0xd0, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd8, Size: 120]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x150, Size: 120]
	float LPFFrequencyAtMin;//[Offset: 0x1c8, Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x1cc, Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x1d0, Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x1d4, Size: 4]
	float FocusAzimuth;//[Offset: 0x1d8, Size: 4]
	float NonFocusAzimuth;//[Offset: 0x1dc, Size: 4]
	float FocusDistanceScale;//[Offset: 0x1e0, Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x1e4, Size: 4]
	float FocusPriorityScale;//[Offset: 0x1e8, Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x1ec, Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x1f0, Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x1f4, Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x1f8, Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x1fc, Size: 4]
	byte OcclusionTraceChannel;//[Offset: 0x200, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x204, Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x208, Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x20c, Size: 4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x210, Size: 8]
	enum ReverbSendMethod;//[Offset: 0x218, Size: 1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x220, Size: 8]
	float ReverbWetLevelMin;//[Offset: 0x228, Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x22c, Size: 4]
	float ReverbDistanceMin;//[Offset: 0x230, Size: 4]
	float ReverbDistanceMax;//[Offset: 0x234, Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 120]
	float ManualReverbSendLevel;//[Offset: 0x2b0, Size: 4]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x10, Size: 120]
	byte AttenuationShape;//[Offset: 0x88, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0x8c, Size: 4]
	Vector AttenuationShapeExtents;//[Offset: 0x90, Size: 12]
	float ConeOffset;//[Offset: 0x9c, Size: 4]
	float FalloffDistance;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x28, Size: 16]
	SoundSubmix* ParentSubmix;//[Offset: 0x38, Size: 8]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x40, Size: 16]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSubmix* SoundSubmix;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 16]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 8]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x274, Size: 1]
	float SourceBusDuration;//[Offset: 0x278, Size: 4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 1]

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x9c, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 1]
	int StreamingPriority;//[Offset: 0xa4, Size: 4]
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa8, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa8, Size: 1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa8, Size: 1]
	byte SoundGroup;//[Offset: 0xaa, Size: 1]
	FString SpokenText;//[Offset: 0xb0, Size: 16]
	float SubtitlePriority;//[Offset: 0xc0, Size: 4]
	float Volume;//[Offset: 0xc4, Size: 4]
	float Pitch;//[Offset: 0xc8, Size: 4]
	int NumChannels;//[Offset: 0xcc, Size: 4]
	int SampleRate;//[Offset: 0xd0, Size: 4]
	int RawPCMDataSize;//[Offset: 0xd4, Size: 4]
	SubtitleCue[] Subtitles;//[Offset: 0xd8, Size: 16]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xe8, Size: 16]
	CurveTable* Curves;//[Offset: 0xf8, Size: 8]
	CurveTable* InternalCurves;//[Offset: 0x100, Size: 8]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 24]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 16]
	SubtitleCue[] Subtitles;//[Offset: 0x10, Size: 16]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 16]
	Object* Payload;//[Offset: 0x38, Size: 8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 8]
	enum Pivot;//[Offset: 0x48, Size: 1]
	Vector2D Offset;//[Offset: 0x4c, Size: 8]
	delegate OnDrop;//[Offset: 0x58, Size: 16]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 16]
	delegate OnDragged;//[Offset: 0x78, Size: 16]
	void Drop(out const PointerEvent PointerEvent);// 0x4f3bf8c
	void Dragged(out const PointerEvent PointerEvent);// 0x4f3bdd4
	void DragCancelled(out const PointerEvent PointerEvent);// 0x4f3bc1c

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 8]
	Widget* Content;//[Offset: 0x30, Size: 8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x100, Size: 16]
	bool RemoveChildAt(int Index);// 0x4f468cc
	bool RemoveChild(Widget* Content);// 0x4f4683c
	bool HasChild(Widget* Content);// 0x4f467ac
	bool HasAnyChildren();// 0x4f46774
	int GetChildrenCount();// 0x4f46740
	int GetChildIndex(Widget* Content);// 0x4f466b4
	Widget* GetChildAt(int Index);// 0x4f46628
	void ClearChildren();// 0x4f46614
	PanelSlot* AddChild(Widget* Content);// 0x4f46588

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 8]
	Vector2D Scale;//[Offset: 0x8, Size: 8]
	Vector2D Shear;//[Offset: 0x10, Size: 8]
	float Angle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 24]
	WidgetNavigationData Down;//[Offset: 0x40, Size: 24]
	WidgetNavigationData Left;//[Offset: 0x58, Size: 24]
	WidgetNavigationData Right;//[Offset: 0x70, Size: 24]
	WidgetNavigationData Next;//[Offset: 0x88, Size: 24]
	WidgetNavigationData Previous;//[Offset: 0xa0, Size: 24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 8]
	Widget* Widget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 16]
	FName DestinationProperty;//[Offset: 0x40, Size: 8]

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 16]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* Struct;//[Offset: 0x10, Size: 8]
	Field* Field;//[Offset: 0x18, Size: 8]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 8]
	Margin Margin;//[Offset: 0x10, Size: 16]
	SlateColor TintColor;//[Offset: 0x20, Size: 40]
	bool bAsyncEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	Object* ResourceObject;//[Offset: 0x50, Size: 8]
	Object* SoftResourceObject;//[Offset: 0x58, Size: 40]
	FName ResourceName;//[Offset: 0x80, Size: 8]
	Box2D UVRegion;//[Offset: 0x88, Size: 20]
	byte DrawAs;//[Offset: 0x9c, Size: 1]
	byte Tiling;//[Offset: 0x9d, Size: 1]
	byte Mirroring;//[Offset: 0x9e, Size: 1]
	byte ImageType;//[Offset: 0x9f, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 8]
	Vector2D Max;//[Offset: 0x8, Size: 8]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ViewTargetTransitionParams
	float blendTime;//[Offset: 0x0, Size: 4]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 4]
	int UUID;//[Offset: 0x4, Size: 4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x3c8, Size: 8]
	FName MatineeControllerName;//[Offset: 0x3d0, Size: 8]
	float PlayRate;//[Offset: 0x3d8, Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3dc, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3dc, Size: 1]
	float ForceStartPosition;//[Offset: 0x3e0, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e4, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e4, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3e4, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3e4, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3e4, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3e4, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3e4, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3e4, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x3e8, Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ec, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ec, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3ec, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3ec, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x3f0, Size: 16]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x408, Size: 16]
	CameraCutInfo[] CameraCuts;//[Offset: 0x418, Size: 16]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x428, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x428, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x428, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x428, Size: 1]
	float InterpPosition;//[Offset: 0x42c, Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x434, Size: 1]
	delegate OnPlay;//[Offset: 0x438, Size: 16]
	delegate OnStop;//[Offset: 0x448, Size: 16]
	delegate OnPause;//[Offset: 0x458, Size: 16]
	void Stop();// 0x5be4e4c
	void SetPosition(float NewPosition, bool bJump);// 0x5be4d8c
	void SetLoopingState(bool bNewLooping);// 0x5be4d00
	void Reverse();// 0x5be4ce4
	void Play();// 0x5be4cc8
	void Pause();// 0x5be4cac
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x5be4b34
	void ChangePlaybackDirection();// 0x5be4b18

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 4]
	float PathBuildTime;//[Offset: 0x2c, Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 16]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 8]
	float EdSectionStart;//[Offset: 0x48, Size: 4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 16]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 8]
	Actor*[] Actors;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	float TimeStamp;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x2d0, Size: 8]
	Actor* ChildActor;//[Offset: 0x2d8, Size: 8]
	Actor* ChildActorTemplate;//[Offset: 0x2e0, Size: 8]
	void SetChildActorClass(class Actor InClass);// 0x5b15d3c

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 8]
	FName MemberName;//[Offset: 0x8, Size: 8]
	Guid MemberGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 16]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c8, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x4033584
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x5bc2d90
	bool RemoteEvent(FName EventName);// 0x5bc2cf8
	void LevelReset();// 0x4033584

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x3d0, Size: 8]
	BillboardComponent* GoodSprite;//[Offset: 0x3d8, Size: 8]
	BillboardComponent* BadSprite;//[Offset: 0x3e0, Size: 8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e8, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x700, Size: 8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x708, Size: 1]
	float ScreenSize;//[Offset: 0x70c, Size: 4]
	float U;//[Offset: 0x710, Size: 4]
	float UL;//[Offset: 0x714, Size: 4]
	float V;//[Offset: 0x718, Size: 4]
	float VL;//[Offset: 0x71c, Size: 4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x5af3b04
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x5af3998
	void SetSprite(Texture2D* NewSprite);// 0x5af3914

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x3d8, Size: 16]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e8, Size: 1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e8, Size: 1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3e8, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3e8, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3e8, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3e8, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3e8, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3e8, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e9, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e9, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3e9, Size: 1]
	float KillZ;//[Offset: 0x3ec, Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x3f0, Size: 8]
	float WorldGravityZ;//[Offset: 0x3f8, Size: 4]
	float GlobalGravityZ;//[Offset: 0x3fc, Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x400, Size: 8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x408, Size: 8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x410, Size: 8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x418, Size: 8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x420, Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x428, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x434, Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x438, Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c, Size: 1]
	float MaxWorldSize;//[Offset: 0x440, Size: 4]
	int RegionSizeNear;//[Offset: 0x444, Size: 4]
	int RegionSizeFar;//[Offset: 0x448, Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 1]
	int Graduation;//[Offset: 0x450, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x454, Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 1]
	int VisibilityCellSize;//[Offset: 0x45c, Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x460, Size: 1]
	bool bDSPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x461, Size: 1]
	bool bUsePrecomputedVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x461, Size: 1]
	bool bCompressDSPVSData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x461, Size: 1]
	int DSVisibilityCellSize;//[Offset: 0x464, Size: 4]
	int[] DSDebugGroups;//[Offset: 0x468, Size: 16]
	byte DSVisibilityAggressiveness;//[Offset: 0x478, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x479, Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x47c, Size: 80]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x4cc, Size: 100]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x530, Size: 24]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x548, Size: 36]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x570, Size: 8]
	float WorldToMeters;//[Offset: 0x578, Size: 4]
	float MonoCullingDistance;//[Offset: 0x57c, Size: 4]
	BookMark* BookMarks;//[Offset: 0x580, Size: 8]
	float TimeDilation;//[Offset: 0x5d0, Size: 4]
	float MatineeTimeDilation;//[Offset: 0x5d4, Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x5d8, Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x5dc, Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x5e0, Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x5e4, Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x5e8, Size: 4]
	PlayerState* Pauser;//[Offset: 0x5f0, Size: 8]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5f8, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5f8, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x600, Size: 16]
	AssetUserData*[] AssetUserData;//[Offset: 0x610, Size: 16]
	bool bEnableUnLoadLevelGCMemoryOptimitize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	float[] LODRelativeDistances;//[Offset: 0x628, Size: 16]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	int WorldCompositionNums;//[Offset: 0x63c, Size: 4]
	int CompositionBlockLength;//[Offset: 0x640, Size: 4]
	void OnRep_WorldGravityZ();// 0x5c93fd0

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x3c8, Size: 16]
	class GameSession* GameSessionClass;//[Offset: 0x3d8, Size: 8]
	class GameStateBase* GameStateClass;//[Offset: 0x3e0, Size: 8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x3e8, Size: 8]
	class PlayerState* PlayerStateClass;//[Offset: 0x3f0, Size: 8]
	class HUD* HUDClass;//[Offset: 0x3f8, Size: 8]
	class Pawn* DefaultPawnClass;//[Offset: 0x400, Size: 8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x408, Size: 8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x410, Size: 8]
	GameSession* GameSession;//[Offset: 0x418, Size: 8]
	GameStateBase* GameState;//[Offset: 0x420, Size: 8]
	FText DefaultPlayerName;//[Offset: 0x428, Size: 24]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x440, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x440, Size: 1]
	void StartPlay();// 0x5b45a50
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x5b45984
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x5b4588c
	bool ShouldReset(Actor* ActorToReset);// 0x5b457f4
	void ReturnToMainMenuHost();// 0x5b457d8
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x5b456f0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x5b45634
	void RestartPlayer(Controller* NewPlayer);// 0x5b455b0
	void ResetLevel();// 0x5b45594
	bool PlayerCanRestart(PlayerController* Player);// 0x5b454fc
	bool MustSpectate(PlayerController* NewPlayerController);// 0x5b45464
	void K2_PostLogin(PlayerController* NewPlayer);// 0x4033584
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x4033584
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x4033584
	void K2_OnLogout(Controller* ExitingController);// 0x4033584
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x4033584
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x5b4536c
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x5b452b0
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x5b4522c
	bool HasMatchStarted();// 0x5b451ec
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x5b45168
	int GetNumSpectators();// 0x5b4512c
	int GetNumPlayers();// 0x5b450f0
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x5b4505c
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x5b44f5c
	Actor* ChoosePlayerStart(Controller* Player);// 0x5b44ec8
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x5b44d94
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x5b44cc4

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x3c8, Size: 4]
	int MaxPlayers;//[Offset: 0x3cc, Size: 4]
	int MaxPartySize;//[Offset: 0x3d0, Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x3d4, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	FName SessionName;//[Offset: 0x3d8, Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x3c8, Size: 8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x3d0, Size: 8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x3d8, Size: 8]
	PlayerState*[] PlayerArray;//[Offset: 0x3e0, Size: 16]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x3f4, Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x3f8, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x3fc, Size: 4]
	void OnRep_SpectatorClass();// 0x5b571e0
	void OnRep_ReplicatedWorldTimeSeconds();// 0x5b571c4
	void OnRep_ReplicatedHasBegunPlay();// 0x5b571a8
	void OnRep_GameModeClass();// 0x5b5718c
	bool HasMatchStarted();// 0x5b5714c
	bool HasBegunPlay();// 0x5b5710c
	float GetServerWorldTimeSeconds();// 0x5b570d0
	float GetPlayerStartTime(Controller* Controller);// 0x5b5703c
	float GetPlayerRespawnDelay(Controller* Controller);// 0x5b56fa8

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x3c8, Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x3cc, Size: 4]
	int TotalNetBandwidth;//[Offset: 0x3d0, Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x3d4, Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x3d8, Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3dc, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3dc, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x3e0, Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x3e4, Size: 4]
	int BadPingThreshold;//[Offset: 0x3e8, Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x3ec, Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x3f0, Size: 4]
	float PercentForBadPing;//[Offset: 0x3f4, Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x3f8, Size: 4]
	float MoveRepSize;//[Offset: 0x3fc, Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x400, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x404, Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x408, Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x40c, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x410, Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x414, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x418, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x41c, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x420, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x424, Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x42c, Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x434, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x438, Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x43c, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x440, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x445, Size: 1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 4]
	float DiffuseBoost;//[Offset: 0x20, Size: 4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 4]
	float OcclusionExponent;//[Offset: 0x40, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]

--------------------------------
Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 4]
	int NumSamples;//[Offset: 0x8, Size: 4]
	int NumLightingBounces;//[Offset: 0xc, Size: 4]
	float LightmapBoost;//[Offset: 0x10, Size: 4]
	float SunHardness;//[Offset: 0x14, Size: 4]
	enum BakingMode;//[Offset: 0x18, Size: 1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	float LocalOcclusionRadius;//[Offset: 0x1c, Size: 4]
	float LocalOcclusionFallOff;//[Offset: 0x20, Size: 4]
	float LocalOcclusionDistribution;//[Offset: 0x24, Size: 4]
	float LocalOcclusionFadeRatio;//[Offset: 0x28, Size: 4]
	int LocalOcclusionRes;//[Offset: 0x2c, Size: 4]
	int LocalOcclusionMultiple;//[Offset: 0x30, Size: 4]
	float LocalOcclusionPower;//[Offset: 0x34, Size: 4]
	int LocalOcclusionDenoising;//[Offset: 0x38, Size: 4]
	int LocalOcclusionDilation;//[Offset: 0x3c, Size: 4]
	int NumDenoisingIterators;//[Offset: 0x40, Size: 4]
	int NumDilationIterators;//[Offset: 0x44, Size: 4]
	int DirectLightDenoising;//[Offset: 0x48, Size: 4]
	float RayTraceMaxDistance;//[Offset: 0x4c, Size: 4]
	float RayTraceBias;//[Offset: 0x50, Size: 4]
	float RetraceDistance;//[Offset: 0x54, Size: 4]
	float SmallestTexelRadius;//[Offset: 0x58, Size: 4]
	uint32 AreaLightSampleCount;//[Offset: 0x5c, Size: 4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bWithGrayDiffuse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	byte ReverbType;//[Offset: 0x1, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 8]
	float Volume;//[Offset: 0x10, Size: 4]
	float FadeTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 4]
	float Diffusion;//[Offset: 0x2c, Size: 4]
	float Gain;//[Offset: 0x30, Size: 4]
	float GainHF;//[Offset: 0x34, Size: 4]
	float DecayTime;//[Offset: 0x38, Size: 4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 4]
	float ReflectionsGain;//[Offset: 0x40, Size: 4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 4]
	float LateGain;//[Offset: 0x48, Size: 4]
	float LateDelay;//[Offset: 0x4c, Size: 4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 4]
	float ExteriorTime;//[Offset: 0x8, Size: 4]
	float ExteriorLPF;//[Offset: 0xc, Size: 4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 4]
	float InteriorVolume;//[Offset: 0x14, Size: 4]
	float InteriorTime;//[Offset: 0x18, Size: 4]
	float InteriorLPF;//[Offset: 0x1c, Size: 4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	FString[] HiddenLevels;//[Offset: 0x40, Size: 16]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 8]
	Actor* InViewer;//[Offset: 0x8, Size: 8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 8]
	Vector ViewLocation;//[Offset: 0x18, Size: 12]
	Vector ViewDir;//[Offset: 0x24, Size: 12]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x28, Size: 8]
	World* WorldAsset;//[Offset: 0x30, Size: 40]
	FName PackageNameToLoad;//[Offset: 0x58, Size: 8]
	FName[] LODPackageNames;//[Offset: 0x60, Size: 16]
	Transform LevelTransform;//[Offset: 0x80, Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb1, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb1, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb1, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb2, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb2, Size: 1]
	int LevelLODIndex;//[Offset: 0xb4, Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 1]
	Color DrawColor;//[Offset: 0xbc, Size: 4]
	LinearColor LevelColor;//[Offset: 0xc0, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 16]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 4]
	FString[] Keywords;//[Offset: 0xe8, Size: 16]
	delegate OnLevelLoaded;//[Offset: 0xf8, Size: 16]
	delegate OnLevelUnloaded;//[Offset: 0x108, Size: 16]
	delegate OnLevelShown;//[Offset: 0x118, Size: 16]
	delegate OnLevelHidden;//[Offset: 0x128, Size: 16]
	delegate OnStatusChanged;//[Offset: 0x138, Size: 16]
	Level* LoadedLevel;//[Offset: 0x148, Size: 8]
	Level* PendingUnloadLevel;//[Offset: 0x150, Size: 8]
	Level*[] UnloadingLevels;//[Offset: 0x158, Size: 16]
	bool IsStreamingStatePending();// 0x5bc3788
	bool IsLevelVisible();// 0x5bc3750
	bool IsLevelLoaded();// 0x5bc372c
	FName GetWorldAssetPackageFName();// 0x5bc36f8
	Level* GetLoadedLevel();// 0x5bc36dc
	LevelScriptActor* GetLevelScriptActor();// 0x5bc36a8
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x5bc356c

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x400, Size: 16]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x410, Size: 1]
	byte StreamingUsage;//[Offset: 0x411, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x6a0, Size: 80]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x9ec, Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0a, Size: 1]
	bool bAllowForceNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0b, Size: 1]
	GameInstance* GameInstance;//[Offset: 0xa38, Size: 8]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 8]
	Level* Level;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: ObjectPoolManager
	bool bUseGMCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	<class Object,ObjectPool> Pools;//[Offset: 0x8, Size: 80]
	<FName,ObjectPoolClassConfig> mapClassConfigs;//[Offset: 0x58, Size: 80]

--------------------------------
Class: ObjectPool
	class Object* ObjectClass;//[Offset: 0x0, Size: 8]
	int ObjectLifePeriodTime;//[Offset: 0x8, Size: 4]
	Object*[] Pool;//[Offset: 0x10, Size: 16]
	<Object*,uint32> RecycleTime;//[Offset: 0x20, Size: 80]
	int Size;//[Offset: 0x70, Size: 4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]

--------------------------------
Class: ObjectPoolClassConfig
	FName ObjectClassName;//[Offset: 0x0, Size: 8]
	bool ObjectPoolEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int PoolSize;//[Offset: 0xc, Size: 4]
	int LifePeriodTime;//[Offset: 0x10, Size: 4]
	bool UseOldPoolLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x28, Size: 8]
	NavigationData* AbstractNavData;//[Offset: 0x30, Size: 8]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x38, Size: 8]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 1]
	enum DataGatheringMode;//[Offset: 0x41, Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42, Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x44, Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x48, Size: 16]
	float UpdateInterval;//[Offset: 0x58, Size: 4]
	float DirtyAreasUpdateFreq;//[Offset: 0x5c, Size: 4]
	NavigationData*[] NavDataSet;//[Offset: 0x60, Size: 16]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x70, Size: 16]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xe0, Size: 16]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xf0, Size: 16]
	enum OperationMode;//[Offset: 0x1cc, Size: 1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x5bf35cc
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x5bf3550
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x5bf3494
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x5bf33e8
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x5bf336c
	void SetGeometryGatheringMode(enum NewMode);// 0x5bf32f0
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x5bf32dc
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x5bf31ec
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x5bf3068
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x5bf2fec
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x5bf2e04
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x5bf2c34
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x5bf2a64
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x5bf2894
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x5bf2814
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x5bf2794
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x5bf2610
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x5bf248c
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x5bf22a4
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x5bf20bc
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x5bf2040
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector PathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x5bf1eb0
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x5bf1cf4

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0, Size: 12]
	float GenerateRadiusMin;//[Offset: 0xc, Size: 4]
	float GenerateRadiusMax;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 16]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 8]
	float TravelCostOverride;//[Offset: 0x8, Size: 4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x400, Size: 4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x28, Size: 16]
	Vector[] PathPoints;//[Offset: 0x38, Size: 16]
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 1]
	bool IsValid();// 0x5bf11cc
	bool IsStringPulled();// 0x5bf1194
	bool IsPartial();// 0x5bf115c
	float GetPathLength();// 0x5bf1128
	float GetPathCost();// 0x5bf10f4
	FString GetDebugString();// 0x5bf1050
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x5bf0fcc
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x5bf0f04

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 24]
	FName AISystemModuleName;//[Offset: 0x40, Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 4]
	float TestHeightDifference;//[Offset: 0x44, Size: 4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x5af3440
	int GetObjectCount();// 0x5af340c
	int GetNewAvoidanceUID();// 0x5af33d8
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x5af3348

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 8]
	<Level*> Levels;//[Offset: 0x28, Size: 80]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 8]
	World* World;//[Offset: 0x38, Size: 8]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0xd0, Size: 16]
	double TilesStreamingTimeThreshold;//[Offset: 0xe0, Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xec, Size: 4]
	FString PVEBordersName;//[Offset: 0xf0, Size: 16]
	FString[] UnloadTileOnServer;//[Offset: 0x100, Size: 16]
	<FString> UnloadTileSet;//[Offset: 0x110, Size: 80]
	bool bClientUseInitViewpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	Vector ClientInitViewPoint;//[Offset: 0x174, Size: 12]
	bool SetStreamingDistanceScalePerLevel(out const FName LevelName, float Scale);// 0x5c8f998
	bool SetStreamingDistanceScaleByLayer(FString LayerName, float Scale);// 0x5c8f89c
	bool SetStreamingDistanceScaleAllLevel(float Scale);// 0x5c8f80c
	bool RemoveDynamicTile(FString TilePackageNameStr);// 0x5c8f750
	LevelStreaming* GetDynamicTile(FString TilePackageNameStr);// 0x5c8f698
	LevelStreaming* AddDynamicTile(FString TilePackageNameStr, int X, int Y, bool bAllowCopy, bool bDisableDistanceStreaming);// 0x5c8f4e0

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x3c8, Size: 8]
	Guid LandscapeGuid;//[Offset: 0x3d0, Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x3e0, Size: 8]
	int MaxLODLevel;//[Offset: 0x3e8, Size: 4]
	float LODDistanceFactor;//[Offset: 0x3ec, Size: 4]
	byte LODFalloff;//[Offset: 0x3f0, Size: 1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x3f4, Size: 4]
	float LODDistributionSetting;//[Offset: 0x3f8, Size: 4]
	byte NearMaxLOD_Baked;//[Offset: 0x3fc, Size: 1]
	float NearFactor_Baked;//[Offset: 0x400, Size: 4]
	float NearExtent_Baked;//[Offset: 0x404, Size: 4]
	float FarFactor_Baked;//[Offset: 0x408, Size: 4]
	float LandscapeRoughness;//[Offset: 0x40c, Size: 4]
	bool EnableImproveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	float[] ImproveLODValues;//[Offset: 0x418, Size: 16]
	byte NearMaxLOD;//[Offset: 0x428, Size: 1]
	float NearFactor;//[Offset: 0x42c, Size: 4]
	float NearExtent;//[Offset: 0x430, Size: 4]
	float FarFactor;//[Offset: 0x434, Size: 4]
	int StaticLightingLOD;//[Offset: 0x438, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x440, Size: 8]
	float StreamingDistanceMultiplier;//[Offset: 0x448, Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44c, Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x450, Size: 8]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x458, Size: 8]
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x460, Size: 80]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b0, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x4b8, Size: 16]
	float MinGrassWeightThreshold;//[Offset: 0x4c8, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x4cc, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x4d0, Size: 4]
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x4d8, Size: 8]
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x4e0, Size: 8]
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x4e8, Size: 8]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x4f0, Size: 16]
	LandscapeAOTextureDataAsset* LandscapeAOTextureDataAsset;//[Offset: 0x500, Size: 8]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x508, Size: 16]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x518, Size: 16]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	float StaticLightingResolution;//[Offset: 0x58c, Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x590, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x590, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x590, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x591, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x592, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x592, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x594, Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x598, Size: 24]
	int CollisionMipLevel;//[Offset: 0x5b0, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x5b4, Size: 4]
	float CollisionThickness;//[Offset: 0x5b8, Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x5c0, Size: 384]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x740, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x740, Size: 1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x740, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x744, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x748, Size: 4]
	int NumSubsections;//[Offset: 0x74c, Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x750, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x751, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x752, Size: 1]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x4ced6f4
	void ChangeLODDistributionSettingConsoleVariable();// 0x4ced6d8
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x4ced654
	void ChangeLOD0DistributionSettingConsoleVariable();// 0x4ced638
	void ChangebUseScreenSizeLOD(bool InbUseScreenSizeLOD);// 0x4ced5ac

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x700, Size: 16]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x710, Size: 16]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x720, Size: 16]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	float Width;//[Offset: 0x40, Size: 4]
	float SideFalloff;//[Offset: 0x44, Size: 4]
	float EndFalloff;//[Offset: 0x48, Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x50, Size: 16]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x60, Size: 16]
	Box Bounds;//[Offset: 0x70, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x90, Size: 8]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 8]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 24]
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 24]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 16]
	Box Bounds;//[Offset: 0x80, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 16]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 8]
	float TangentLen;//[Offset: 0x8, Size: 4]
	FName SocketName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 12]
	Vector Left;//[Offset: 0xc, Size: 12]
	Vector Right;//[Offset: 0x18, Size: 12]
	Vector FalloffLeft;//[Offset: 0x24, Size: 12]
	Vector FalloffRight;//[Offset: 0x30, Size: 12]
	float StartEndFalloff;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x838, Size: 88]
	Vector SplineUpDir;//[Offset: 0x890, Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89c, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89c, Size: 1]
	byte ForwardAxis;//[Offset: 0x89d, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x8a0, Size: 4]
	float SplineBoundaryMax;//[Offset: 0x8a4, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x8a8, Size: 8]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x8b0, Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c0, Size: 1]
	void UpdateMesh();// 0x5c78c20
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x5c78b60
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x5c78aa4
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x5c789e4
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x5c78924
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x5c78868
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x5c786e4
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x5c7860c
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x5c7854c
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x5c7848c
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x5c783d0
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x5c78310
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x5c78250
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x5c78194
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x5c780d4
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x5c78014
	Vector GetStartTangent();// 0x5c77fdc
	Vector2D GetStartScale();// 0x5c77fa8
	float GetStartRoll();// 0x5c77f74
	Vector GetStartPosition();// 0x5c77f3c
	Vector2D GetStartOffset();// 0x5c77f08
	Vector GetSplineUpDir();// 0x5c77ed0
	byte GetForwardAxis();// 0x5c77e9c
	Vector GetEndTangent();// 0x5c77e64
	Vector2D GetEndScale();// 0x5c77e30
	float GetEndRoll();// 0x5c77dfc
	Vector GetEndPosition();// 0x5c77dc4
	Vector2D GetEndOffset();// 0x5c77d90
	float GetBoundaryMin();// 0x5c77d5c
	float GetBoundaryMax();// 0x5c77d28

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 12]
	Vector StartTangent;//[Offset: 0xc, Size: 12]
	Vector2D StartScale;//[Offset: 0x18, Size: 8]
	float StartRoll;//[Offset: 0x20, Size: 4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 8]
	Vector EndPos;//[Offset: 0x2c, Size: 12]
	Vector EndTangent;//[Offset: 0x38, Size: 12]
	Vector2D EndScale;//[Offset: 0x44, Size: 8]
	float EndRoll;//[Offset: 0x4c, Size: 4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 8]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 16]
	StaticMesh* GrassMesh;//[Offset: 0x38, Size: 8]
	float GrassDensity;//[Offset: 0x40, Size: 4]
	float PlacementJitter;//[Offset: 0x44, Size: 4]
	int StartCullDistance;//[Offset: 0x48, Size: 4]
	int EndCullDistance;//[Offset: 0x4c, Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 8]
	float GrassDensity;//[Offset: 0x8, Size: 4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float PlacementJitter;//[Offset: 0x10, Size: 4]
	int StartCullDistance;//[Offset: 0x14, Size: 4]
	int EndCullDistance;//[Offset: 0x18, Size: 4]
	int MinLOD;//[Offset: 0x1c, Size: 4]
	enum Scaling;//[Offset: 0x20, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 8]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 4]
	float Max;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x700, Size: 4]
	int SectionBaseY;//[Offset: 0x704, Size: 4]
	int ComponentSizeQuads;//[Offset: 0x708, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x70c, Size: 4]
	int NumSubsections;//[Offset: 0x710, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x718, Size: 8]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x720, Size: 8]
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x728, Size: 80]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x778, Size: 32]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x798, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x7a0, Size: 16]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x7b0, Size: 16]
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x7c0, Size: 80]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x810, Size: 16]
	Texture2D*[] WeightmapTextures;//[Offset: 0x820, Size: 16]
	int VisibilityLayerChannel;//[Offset: 0x830, Size: 4]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x838, Size: 8]
	Vector4 WeightmapScaleBias;//[Offset: 0x840, Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x850, Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x860, Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x870, Size: 8]
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x878, Size: 80]
	FString VisibleVisibilityLayer;//[Offset: 0x8c8, Size: 16]
	Box CachedLocalBox;//[Offset: 0x8d8, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x8f4, Size: 28]
	Guid MapBuildDataId;//[Offset: 0x910, Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x920, Size: 16]
	int CollisionMipLevel;//[Offset: 0x930, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x934, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x938, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x93c, Size: 4]
	float StaticLightingResolution;//[Offset: 0x940, Size: 4]
	int ForcedLOD;//[Offset: 0x944, Size: 4]
	int LODBias;//[Offset: 0x948, Size: 4]
	int MobileVertexHoleMaxLOD;//[Offset: 0x94c, Size: 4]
	float[] LODDeltaVertex;//[Offset: 0x960, Size: 16]
	float MaxDeltaVertex;//[Offset: 0x970, Size: 4]
	Guid stateID;//[Offset: 0x974, Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x984, Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x998, Size: 8]
	StaticMesh* OccluderMesh;//[Offset: 0x9a0, Size: 8]
	byte MobileBlendableLayerMask;//[Offset: 0x9a8, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x9b0, Size: 8]
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0x9b8, Size: 80]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0xa08, Size: 16]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0xa18, Size: 8]
	uint16[] CachedHeightData;//[Offset: 0xa20, Size: 16]
	FName UsedOtherMaterialName;//[Offset: 0xaa8, Size: 8]

--------------------------------
Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 16]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 8]
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 8]
	float Hardness;//[Offset: 0x38, Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 16]

--------------------------------
Class: VisibilityData
	byte[] VisibilityData;//[Offset: 0x0, Size: 16]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x700, Size: 16]
	int SectionBaseX;//[Offset: 0x710, Size: 4]
	int SectionBaseY;//[Offset: 0x714, Size: 4]
	int CollisionSizeQuads;//[Offset: 0x718, Size: 4]
	float CollisionScale;//[Offset: 0x71c, Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x720, Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x728, Size: 16]
	Guid HeightfieldGuid;//[Offset: 0x738, Size: 16]
	Box CachedLocalBox;//[Offset: 0x748, Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x764, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x790, Size: 16]

--------------------------------
Class: LandscapeAOTextureDataAsset.DataAsset.Object
	uint32 DataSize;//[Offset: 0x30, Size: 4]
	byte[] LandscapeAOPlatformData;//[Offset: 0x38, Size: 16]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x990, Size: 16]
	int NumBuiltInstances;//[Offset: 0x9a0, Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x9a8, Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x9c4, Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x9e0, Size: 16]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x9f0, Size: 16]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa00, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0xa28, Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0xa2c, Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4d, Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0xa50, Size: 4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x5b5ae54

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x830, Size: 16]
	int InstancingRandomSeed;//[Offset: 0x840, Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x844, Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x848, Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x850, Size: 16]
	int[] RemovedInstances;//[Offset: 0x860, Size: 16]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x871, Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x900, Size: 8]
	<int,Matrix> StashInstanceTransform;//[Offset: 0x908, Size: 80]
	int NumPendingLightmaps;//[Offset: 0x960, Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x968, Size: 16]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x5b66848
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x5b66794
	bool RemoveInstance(int InstanceIndex);// 0x5b666fc
	bool HideInstance(out const int[] InstanceIndices);// 0x5b66628
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x5b664ec
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x5b66360
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x5b661e8
	int GetInstanceCount();// 0x5b661b4
	void ClearInstances();// 0x5b66198
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x5b660e8
	int AddInstance(out const Transform InstanceTransform);// 0x5b66030

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 64]

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x700, Size: 96]
	InterpCurveVector SplineInfo;//[Offset: 0x760, Size: 24]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x778, Size: 24]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x790, Size: 24]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x7a8, Size: 24]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c0, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x7c4, Size: 4]
	float Duration;//[Offset: 0x7c8, Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cd, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ce, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cf, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d1, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d2, Size: 1]
	float LoopPosition;//[Offset: 0x7d4, Size: 4]
	Vector DefaultUpVector;//[Offset: 0x7d8, Size: 12]
	bool bUseConfigRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 1]
	void UpdateSpline();// 0x5c740d4
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x5c74008
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x5c73eb8
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x5c73e30
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x5c73c94
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x5c73b44
	void SetSplineWorldPoints(out const Vector[] Points);// 0x5c73a84
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x5c73988
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x5c73840
	void SetSplineLocalPoints(out const Vector[] Points);// 0x5c73780
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x5c736f8
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x5c735a8
	void SetDrawDebug(bool bShow);// 0x5c73524
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x5c73454
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x5c73348
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x5c73278
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x5c731b8
	bool IsClosedLoop();// 0x5c73180
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x5c730ec
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x5c73014
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x5c72f80
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x5c72ea8
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x5c72e14
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x5c72d80
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x5c72ca8
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x5c72c14
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x5c72b04
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x5c72a38
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x5c7296c
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x5c72804
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x5c726e0
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x5c725bc
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x5c724ac
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x5c723e0
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x5c72314
	byte GetSplinePointType(int PointIndex);// 0x5c72288
	float GetSplineLength();// 0x5c72254
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x5c72180
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x5c720f0
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x5c72060
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x5c71f50
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x5c71e84
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x5c71db8
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x5c71cac
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x5c71be4
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x5c71b1c
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x5c71a0c
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x5c71940
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x5c71874
	int GetNumberOfSplinePoints();// 0x5c71840
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x5c71730
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x5c71664
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x5c71598
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x5c71440
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x5c71324
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x5c71258
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x5c711cc
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x5c71140
	float GetDistanceAlongSplineAtSplineInputKey(float InKey);// 0x5c710b4
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x5c70fa4
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x5c70ed8
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x5c70e0c
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x5c70d7c
	float GetCurvatureAtSplinePoint(int PointIndex);// 0x5c70cf0
	float GetCurvatureAtDistance(float Distance);// 0x5c70c64
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x5c70b98
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x5c70abc
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x5c70988
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x5c708ac
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x5c70810
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x5c70734
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x5c7065c
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x5c70580
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x5c704a4
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x5c7040c
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x5c70330
	void ClearSplinePoints(bool bUpdateSpline);// 0x5c702ac
	void AddSplineWorldPoint(out const Vector Position);// 0x5c7021c
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x5c700cc
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x5c6ffb8
	void AddSplineLocalPoint(out const Vector Position);// 0x5c6ff28
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x5c6fe1c
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x5c6fd24

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 24]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 24]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 24]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 24]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 16]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 4]
	Quat OutVal;//[Offset: 0x10, Size: 16]
	Quat ArriveTangent;//[Offset: 0x20, Size: 16]
	Quat LeaveTangent;//[Offset: 0x30, Size: 16]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 16]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 4]
	float OutVal;//[Offset: 0x4, Size: 4]
	float ArriveTangent;//[Offset: 0x8, Size: 4]
	float LeaveTangent;//[Offset: 0xc, Size: 4]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 4]
	Vector Position;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	Vector Scale;//[Offset: 0x34, Size: 12]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x400, Size: 16]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 1]
	bool bEnabledDeviceScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x410, Size: 1]
	float VeryLowScale;//[Offset: 0x414, Size: 4]
	float LowScale;//[Offset: 0x418, Size: 4]
	float MidScale;//[Offset: 0x41c, Size: 4]
	float HighScale;//[Offset: 0x420, Size: 4]
	bool bEnableStaticMeshMovable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	bool bEnableCullDistanceOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x425, Size: 1]

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 4]
	float CullDistance;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x3c8, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	void OnRep_bEnabled();// 0x5b3f2c0

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x2cc, Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x2d0, Size: 16]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x2e4, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x2e8, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x2ec, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x2fc, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x300, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x304, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x314, Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x328, Size: 8]
	float InscatteringColorCubemapAngle;//[Offset: 0x330, Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x334, Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x344, Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x348, Size: 4]
	float DirectionalInscatteringGapControl;//[Offset: 0x34c, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x350, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x354, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x358, Size: 16]
	float FogHeightFalloff;//[Offset: 0x368, Size: 4]
	float FogMaxOpacity;//[Offset: 0x36c, Size: 4]
	float StartDistance;//[Offset: 0x370, Size: 4]
	float FogCutoffDistance;//[Offset: 0x374, Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x37c, Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x380, Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x384, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x394, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x398, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x39c, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	float VolumetricFogStartDistance;//[Offset: 0x3a4, Size: 4]
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x3a8, Size: 8]
	Transform VolumetricFogNoiseTransform;//[Offset: 0x3b0, Size: 48]
	void SetVolumetricFogStartDistance(float NewValue);// 0x5b4045c
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x5b403e0
	void SetVolumetricFogNoiseTransform(Transform Transform);// 0x5b4033c
	void SetVolumetricFogNoiseTexture(Texture2D* NewValue);// 0x5b402c0
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x5b40244
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x5b401c8
	void SetVolumetricFogDistance(float NewValue);// 0x5b4014c
	void SetVolumetricFogAlbedo(Color NewValue);// 0x5b400d4
	void SetVolumetricFog(bool bNewValue);// 0x5b40050
	void SetStartDistance(float Value);// 0x5b3ffd4
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x5b3ff58
	void SetInscatteringTextureTint(LinearColor Value);// 0x5b3fedc
	void SetInscatteringColorCubemapAngle(float Value);// 0x5b3fe60
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x5b3fde4
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x5b3fd68
	void SetFogMaxOpacity(float Value);// 0x5b3fcec
	void SetFogInscatteringColor(LinearColor Value);// 0x5b3fc70
	void SetFogHeightFalloff(float Value);// 0x5b3fbf4
	void SetFogDensity(float Value);// 0x5b3fb78
	void SetFogCutoffDistance(float Value);// 0x5b3fafc
	void SetDirectionalInscatteringStartDistance(float Value);// 0x5b3fa80
	void SetDirectionalInscatteringGapControl(float Value);// 0x5b3fa04
	void SetDirectionalInscatteringExponent(float Value);// 0x5b3f988
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x5b3f90c
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x5b3f854
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x5b3f79c

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0, Size: 4]
	float DensityCoefficient;//[Offset: 0x4, Size: 4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 16]

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x3c8, Size: 8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x3d1, Size: 1]

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x3d0, Size: 8]

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x3c8, Size: 8]

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x2d0, Size: 8]
	enum ReflectionSourceType;//[Offset: 0x2d8, Size: 1]
	float Brightness;//[Offset: 0x2dc, Size: 4]
	float RealtimeBrightness;//[Offset: 0x2e0, Size: 4]
	float RealtimeAngle;//[Offset: 0x2e4, Size: 4]
	Vector RealtimeColor;//[Offset: 0x2e8, Size: 12]
	Vector CaptureOffset;//[Offset: 0x2f4, Size: 12]
	bool bUseHighPrecisionNormalize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	float DesaturatedNormalizeRatio;//[Offset: 0x30c, Size: 4]
	Vector4 IrradianceMap;//[Offset: 0x310, Size: 16]
	Guid stateID;//[Offset: 0x398, Size: 16]
	void SetRealtimeColor(Vector InColor);// 0x5c45f84
	void SetRealtimeBrightness(float InBrightness);// 0x5c45f08
	void SetRealtimeAngle(float InAngle);// 0x5c45e8c

--------------------------------
Class: BP_radiation_C.RadiationCircle.Actor.Object
	void UserConstructionScript(float OriginalRadius);// 0x4033584
	StaticMeshComponent* Cylinder_Base;//[Offset: 0x400, Size: 8]
	StaticMeshComponent* Cylinder;//[Offset: 0x408, Size: 8]
	SceneComponent* Scene;//[Offset: 0x410, Size: 8]

--------------------------------
Class: RadiationCircle.Actor.Object
	StaticMeshComponent* CylinderMesh;//[Offset: 0x3c8, Size: 8]
	StaticMeshComponent* CylinderMeshBase;//[Offset: 0x3d0, Size: 8]
	STExtraGameStateBase* SGameStatNew;//[Offset: 0x3d8, Size: 8]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x3f0, Size: 8]
	MaterialInstanceDynamic* DynamicMatBase;//[Offset: 0x3f8, Size: 8]
	void PostInitRadiationCircle();// 0x4033584
	void InitRadiationCircle();// 0x34b5f0c
	void HandleOnSafeZoneTips(float Val);// 0x34b5e90
	void CloseCircle();// 0x34b5e7c

--------------------------------
Class: STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	AirDropPathData3D AirDropPathData;//[Offset: 0x588, Size: 72]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 1]
	Vector BlueCircle;//[Offset: 0x5d4, Size: 12]
	Vector WhiteCircle;//[Offset: 0x5e0, Size: 12]
	float CirclePain;//[Offset: 0x5ec, Size: 4]
	bool bIsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	Vector AirAttackArea;//[Offset: 0x5f4, Size: 12]
	delegate OnSafeZoneTips;//[Offset: 0x600, Size: 16]
	delegate OnHideCircle;//[Offset: 0x610, Size: 16]
	delegate OnBlueCirclePreWarning;//[Offset: 0x620, Size: 16]
	delegate OnBlueCircleRun;//[Offset: 0x630, Size: 16]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x640, Size: 16]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x650, Size: 16]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x660, Size: 16]
	delegate VehicleDestroyedDelegate;//[Offset: 0x670, Size: 16]
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x680, Size: 16]
	delegate STExtraCharacterDestroyed;//[Offset: 0x690, Size: 16]
	int PlayerNum;//[Offset: 0x6b0, Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x6b8, Size: 16]
	delegate OnBeKilledNumChange;//[Offset: 0x6c8, Size: 16]
	delegate OnGameEnd;//[Offset: 0x6d8, Size: 16]
	bool bIsRevivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	bool bIngoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e9, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ea, Size: 1]
	bool bIsOpenDuelMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6eb, Size: 1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 1]
	bool bHasSignalBarReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ed, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ee, Size: 1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ef, Size: 1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f1, Size: 1]
	bool bForbidDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f2, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f3, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f4, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f5, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f6, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f7, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x700, Size: 16]
	int TrainingCountdownTimer;//[Offset: 0x710, Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714, Size: 1]
	FString GrenadeEffectPath;//[Offset: 0x718, Size: 16]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72b, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x730, Size: 16]
	delegate OnDSSwitchChanged;//[Offset: 0x790, Size: 16]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a1, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a2, Size: 1]
	int nSignalGunEffectId;//[Offset: 0x7a4, Size: 4]
	byte nServerZoneId;//[Offset: 0x7a8, Size: 1]
	bool bRegisterPickUpsOnEnterFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x801, Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x802, Size: 1]
	bool bEnableUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x803, Size: 1]
	bool bPlayVehicleMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x804, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x808, Size: 4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x80c, Size: 4]
	float PickUpColdCountDownMinTime;//[Offset: 0x810, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x814, Size: 4]
	bool bReportAllPickUpFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 1]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x819, Size: 1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81a, Size: 1]
	delegate OnAirAttack;//[Offset: 0x820, Size: 16]
	delegate OnInfectedAreaWarn;//[Offset: 0x830, Size: 16]
	delegate OnSkillManagerInitFinishDelegate;//[Offset: 0x840, Size: 16]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	bool IsCanSwitchFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x851, Size: 1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x852, Size: 1]
	FName[] EnableMapPackages;//[Offset: 0x858, Size: 16]
	FName[] EnableMapLayers;//[Offset: 0x868, Size: 16]
	class ViewMaskManager* ViewMaskManagerClass;//[Offset: 0x878, Size: 8]
	ViewMaskManager* ViewMaskManager;//[Offset: 0x880, Size: 8]
	class ModAdapter* ModAdapterClass;//[Offset: 0x888, Size: 8]
	ModAdapter* ModAdapter;//[Offset: 0x890, Size: 8]
	bool bEnableSignalSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 1]
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x899, Size: 1]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x89c, Size: 4]
	int PveZombieGrenadeCount;//[Offset: 0x8a0, Size: 4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a4, Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x8a8, Size: 64]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x8e8, Size: 8]
	bool bIsShowCircleWarningTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 1]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f1, Size: 1]
	int ReadyStateTime;//[Offset: 0x900, Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x908, Size: 16]
	bool IsCircleShowSafeZoneTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x920, Size: 16]
	int CurCircleWave;//[Offset: 0x930, Size: 4]
	bool bNoAliveHumanPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x934, Size: 1]
	bool EnableControllVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x935, Size: 1]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x938, Size: 4]
	FName GameModeState;//[Offset: 0x950, Size: 8]
	bool bLessening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x958, Size: 1]
	float timeFromLessen;//[Offset: 0x95c, Size: 4]
	Vector CircleLessenFrom;//[Offset: 0x960, Size: 12]
	Vector CircleLessenTo;//[Offset: 0x96c, Size: 12]
	float timeForLessen;//[Offset: 0x978, Size: 4]
	byte CurCircleStatusInfo;//[Offset: 0x988, Size: 1]
	float CurCircleStateStartServerWorldSecond;//[Offset: 0x98c, Size: 4]
	float CurCircleStatusElapsedTime;//[Offset: 0x990, Size: 4]
	float CurCircleStatusLastTime;//[Offset: 0x994, Size: 4]
	byte CurAirAttackType;//[Offset: 0x998, Size: 1]
	int CurAirAttackWave;//[Offset: 0x99c, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a0, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x9a4, Size: 4]
	float ExtraRadius;//[Offset: 0x9a8, Size: 4]
	int AlivePlayerNum;//[Offset: 0x9ac, Size: 4]
	int AliveTeamNum;//[Offset: 0x9b0, Size: 4]
	int NoneAIGameTime;//[Offset: 0x9b4, Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x9b8, Size: 16]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x9c8, Size: 16]
	delegate OnGetPlayerLandAreaList;//[Offset: 0x9d8, Size: 16]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0x9e8, Size: 2]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0x9f0, Size: 16]
	GameModePlayerShowUpassInfo RepUpassInfoList;//[Offset: 0xa00, Size: 160]
	enum GameModeType;//[Offset: 0xd20, Size: 1]
	enum GameModeConfigType;//[Offset: 0xd21, Size: 1]
	enum GameModeConfigSubType;//[Offset: 0xd22, Size: 1]
	enum GameModeSubType;//[Offset: 0xd23, Size: 1]
	int PlayerNumPerTeam;//[Offset: 0xd24, Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0xd28, Size: 16]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd38, Size: 1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd39, Size: 1]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3a, Size: 1]
	float FPVEWeatherPlaySpeed;//[Offset: 0xd50, Size: 4]
	float WeatherPhaseIndex;//[Offset: 0xd54, Size: 4]
	enum[] WeatherProcessArray;//[Offset: 0xd58, Size: 16]
	delegate OnWeatherStateChange;//[Offset: 0xd68, Size: 16]
	delegate OnWeatherSpeedChange;//[Offset: 0xd78, Size: 16]
	enum CurDynamicWeatherState;//[Offset: 0xd88, Size: 1]
	<FString,float> BeInvitedPlayers;//[Offset: 0xd90, Size: 80]
	float InviteCountDownTime;//[Offset: 0xde0, Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0xde8, Size: 16]
	Vector[] CircleArray;//[Offset: 0xdf8, Size: 16]
	GameDataMining GameDataMining;//[Offset: 0xe08, Size: 72]
	uint64 GameID;//[Offset: 0xe50, Size: 8]
	FString GameModeID;//[Offset: 0xe58, Size: 16]
	FString[] ModeUIManagerArrayCached;//[Offset: 0xe68, Size: 16]
	FString ModLogicSwitchTag;//[Offset: 0xe78, Size: 16]
	delegate OnValidDynamicLevelChanged;//[Offset: 0xe88, Size: 16]
	LevelEventCenter* LevelEventCenter;//[Offset: 0xe98, Size: 8]
	Character* CurCastActorMsgOwner;//[Offset: 0xea0, Size: 8]
	float StartFlyTime;//[Offset: 0xea8, Size: 4]
	int64 StartReadyUnixTimestamp;//[Offset: 0xeb0, Size: 8]
	int64 StartFightingUnixTimestamp;//[Offset: 0xeb8, Size: 8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0xec0, Size: 8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed9, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeda, Size: 1]
	int EnableNewStateMachine;//[Offset: 0xedc, Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0xee4, Size: 4]
	float BroadcastClientDistance;//[Offset: 0xee8, Size: 4]
	int[] FinalWinTeams;//[Offset: 0xf10, Size: 16]
	uint32[] FinalWinPlayers;//[Offset: 0xf20, Size: 16]
	uint32 GameTerminatorPlayerKey;//[Offset: 0xf30, Size: 4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf34, Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf35, Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0xf38, Size: 16]
	int[] ImprisonmentTeammateGameType;//[Offset: 0xf48, Size: 16]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf58, Size: 1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf59, Size: 1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5a, Size: 1]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5b, Size: 1]
	FString GuideImageName;//[Offset: 0xf60, Size: 16]
	FString GuideLuaTableName;//[Offset: 0xf70, Size: 16]
	FString GuideLuaFunctionName;//[Offset: 0xf80, Size: 16]
	bool IsDisableTeamPanelPlayerStateInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf90, Size: 1]
	float PlayerNoOperationTime;//[Offset: 0xf94, Size: 4]
	float PlayerNoConfirmRetToGameTime;//[Offset: 0xf98, Size: 4]
	bool IsEnableHealthNumberText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9c, Size: 1]
	Vector2D SelfHealthOffset;//[Offset: 0xfa0, Size: 8]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa8, Size: 1]
	bool bOpenVehicleOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa9, Size: 1]
	UAELevelDirector* UAELevelDirector;//[Offset: 0xfb0, Size: 8]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0xfb8, Size: 8]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xfc0, Size: 16]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xfd0, Size: 16]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xfe0, Size: 16]
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0xff0, Size: 16]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0x1000, Size: 8]
	class Actor* PreloadPoolActorClass;//[Offset: 0x1008, Size: 40]
	class Actor* CommonPreloadPoolActorClass;//[Offset: 0x1030, Size: 40]
	FString CommonPrePoolActorPath;//[Offset: 0x1058, Size: 16]
	<FString,ActorExtraComponents> ActorExtraComponents;//[Offset: 0x1068, Size: 80]
	XTriggerLuaRemoteComponent* LuaRemoteComponent;//[Offset: 0x10b8, Size: 8]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0x10c0, Size: 8]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c8, Size: 1]
	bool bAIUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c9, Size: 1]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x10d0, Size: 16]
	bool IgnoreWhenAttackNotInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e0, Size: 1]
	bool bEnableVehicleWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e1, Size: 1]
	bool bEnableVehicleDSWeakTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e2, Size: 1]
	delegate OnVeteranOrRecruitListUpdate;//[Offset: 0x10e8, Size: 16]
	bool bNewForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f8, Size: 1]
	FString FServerStartTime;//[Offset: 0x1100, Size: 16]
	bool bIsLowMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1110, Size: 1]
	uint32 ServerStartTimestamp;//[Offset: 0x1114, Size: 4]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0x1118, Size: 16]
	FString MainWeaponTableName;//[Offset: 0x1128, Size: 16]
	class Object[] PlaneAvatarClassArray;//[Offset: 0x1138, Size: 16]
	<uint32,bool> SendStartFlowRecord;//[Offset: 0x1158, Size: 80]
	<uint32,bool> SendEndFlowRecord;//[Offset: 0x11a8, Size: 80]
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0x11f8, Size: 8]
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0x1200, Size: 8]
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1208, Size: 1]
	bool bEnablePlayerEventSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1209, Size: 1]
	bool bEnableAttrMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120a, Size: 1]
	bool bAvatarDownloadInBattleClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120b, Size: 1]
	bool bEnableDeathPlaybackRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120c, Size: 1]
	bool bEnableDisplayPlayerAddonCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120d, Size: 1]
	int PlayerAddonCount;//[Offset: 0x1210, Size: 4]
	STExtraBaseCharacter*[] DyingCharacters;//[Offset: 0x1220, Size: 16]
	bool bEnableCarryAllCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1230, Size: 1]
	MapUIMarkManager* MarkMgr;//[Offset: 0x1238, Size: 8]
	FString RenderTargetMgrClassPath;//[Offset: 0x1240, Size: 16]
	WidgetToRenderTarget* RenderTargetMgr;//[Offset: 0x1250, Size: 8]
	GameStateWeaponRule WeaponRule;//[Offset: 0x1258, Size: 40]
	bool bHasUnderEarthWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1280, Size: 1]
	void WeatherStateChangeDelegate__DelegateSignature();// 0x4033584
	void WeatherSpeedChangeDelegate__DelegateSignature();// 0x4033584
	void UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x35ba12c
	void UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x35b9f7c
	void UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x35b9c90
	void UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x35b9b1c
	STExtraBaseCharacter* TryGetCharacterByPlayerKey(FString PlayerKey);// 0x35b99e0
	void SyncAirplaneAndAirDrops(out AirDropPathData3D InAirDropPathData);// 0x35b990c
	void SimulateAirAttackOver(int waveIndex);// 0x35b985c
	void ShowGameTips(int PlayerKey, int TipsID, FString Params);// 0x35b9738
	void SetTagCulling(bool IsUse);// 0x35b96b4
	void SetServerStartTime(uint32 nServerStartTime);// 0x35b9638
	void SetSendStartFlow(uint32 PlayerKey);// 0x35b95bc
	void SetSendEndFlow(uint32 PlayerKey);// 0x35b9540
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x35b9440
	static void SetOnGameStateEndPlay(delegate InOnGameStateEndPlay);// 0x35b93ac
	static void SetOnGameStateBeginPlay(delegate InOnGameStateBeginPlay);// 0x35b9318
	void SetIsLowMatch(int nClientType);// 0x35b929c
	void SetCustomRoute(out const Vector2D StartPoint, out const Vector2D EndPoint);// 0x35b91c0
	void SetCurAirAttackWave(int AirAttackWave);// 0x35b9144
	void SetCurAirAttackType(byte airattacktype);// 0x35b90c8
	void SetCircleInfo(GetCircleInfo ReConnectInfo);// 0x35b8ff0
	void SetAvatarDownloadInBattleClientSwitch(bool bOpen);// 0x35b8f6c
	void SetAlivePlayerNum(int InAlivePlayerNum);// 0x35b8ef0
	void ServerRemoteDestroyAllActor();// 0x35b8edc
	void ServerRemoteDestroyActor(int SingleId);// 0x35b8e60
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x35b8d20
	void RPC_Client_RemoteDestroyAllActor();// 0x35b8d04
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x35b8c80
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x35b8b10
	void PlayPawnActive(FString PlayerKey, Actor* PlayerCharacter);// 0x35b8998
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x4033584
	void OnRep_WeatherStateChanged();// 0x35b8984
	void OnRep_VisualFieldFeatureParam();// 0x35b8970
	void OnRep_VeteranRecruitListUpdate();// 0x35b895c
	void OnRep_UpassInfoList();// 0x35b8948
	void OnRep_StartFlyTime();// 0x35b8934
	void OnRep_ResetWeatherPlaySpeed();// 0x35b8920
	void OnRep_ReadyStateTime();// 0x35b8904
	void OnRep_ReadyStateCountingDown();// 0x35b88f0
	void OnRep_PlayerNumChange();// 0x35b88dc
	void OnRep_PlayerAddonCount();// 0x35b88c0
	void OnRep_MarkSyncData();// 0x35b88ac
	void OnRep_IsTrainingMode();// 0x35b8898
	void OnRep_IsShowDeadBox();// 0x35b8884
	void OnRep_IsOpenDuelMode();// 0x35b8870
	void OnRep_IsFPPMode();// 0x35b885c
	void OnRep_IsDark();// 0x35b8848
	void OnRep_GameTerminatorPlayerKey();// 0x35b8834
	void OnRep_GameModeType();// 0x35b8820
	void OnRep_GameModeSubType();// 0x35b880c
	void OnRep_GameModeState();// 0x35b87f0
	void OnRep_GameModeFeatureSet();// 0x35b87dc
	void OnRep_FinalWinTeams();// 0x35b87c8
	void OnRep_FinalWinPlayers();// 0x35b87b4
	void OnRep_EnableSignalSystem();// 0x35b87a0
	void OnRep_DynamicWeatherState();// 0x35b878c
	void OnRep_DSSwitch();// 0x35b8778
	void OnRep_CircleArray();// 0x35b8764
	void OnRep_AliveTeamNum();// 0x35b8750
	void OnRep_AlivePlayerNum();// 0x35b873c
	void OnRep_AirDropPathData();// 0x35b8728
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x35b8668
	void OnPlaneAvatarAsyncLoadComplete(out class Object[] ClassArrays);// 0x35b85b0
	void OnGameStateEndPlay__DelegateSignature(byte EndPlayReason);// 0x4033584
	void OnGameStateBeginPlay__DelegateSignature(GameState* GameState);// 0x4033584
	void OnGameModeDisplayNameChange();// 0x35b859c
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x35b84e0
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage);// 0x35b83e8
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x35b8330
	void ModifyEnableSignalSystemOnServer(bool bEnable);// 0x35b82ac
	bool IsSendStartFlow(uint32 PlayerKey);// 0x35b821c
	bool IsSendEndFlow(uint32 PlayerKey);// 0x35b818c
	bool IsRevivalGame();// 0x35b8154
	bool IsPVEMode();// 0x35b811c
	bool IsNoCircleInfo();// 0x35b80e4
	bool IsMapUseTeamPattern();// 0x35b80a4
	bool IsInWhiteCircle(out const Vector pos);// 0x35b8008
	bool IsInNight();// 0x35b7fc8
	bool IsInBlueCircleByCircleMgr(Actor* _actor);// 0x35b7f38
	bool IsInBlueCircle(out const Vector pos);// 0x35b7e9c
	bool IsFeatureSupported(enum SubSystemType);// 0x35b7e04
	bool IsEnableObjectPool();// 0x35b7dcc
	bool IsEnableDamageInfo();// 0x35b7d8c
	TslSimpleCollisionManager* GetSimpleCollisionManager();// 0x35b7d58
	int GetServerStartUnixTimestamp();// 0x35b7d24
	FString GetServerStartTime();// 0x35b7c80
	float GetRepServerWorldTimeSeconds();// 0x35b7c4c
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x35b7bd0
	int GetPVEWeatherPhaseIndex();// 0x35b7b9c
	STExtraPlayerState* GetPlayerStateByUID(uint64 PlayerUID);// 0x35b7b10
	STExtraPlayerState* GetPlayerStateByPlayerName(FString PlayerName);// 0x35b7a58
	STExtraPlayerState* GetPlayerStateByPlayerKey(uint32 PlayerKey);// 0x35b79cc
	XTriggerLuaRemoteComponent* GetLuaRemoteComponent();// 0x35b7998
	bool GetIsReadyStateReport();// 0x35b7958
	FName GetGameModeState();// 0x35b7924
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x35b78f0
	FString GetDSSwitchValueFastWithCache(const int InSwitchId);// 0x35b77fc
	FString GetDSSwitchValue(const int InSwitchId);// 0x35b7708
	DestructibleSurfaceManager* GetDestructibleSurfaceManager();// 0x35b76d4
	enum GetCurWeatherState();// 0x35b76a0
	enum GetCurDynamicWeatherState();// 0x35b766c
	int GetCurCircleWave();// 0x35b7650
	byte GetCurCircleState();// 0x35b760c
	int GetCurCircleIndex();// 0x35b75d8
	GetCircleInfo GetCircleStateInfo();// 0x35b756c
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x35b74b8
	MarkSyncData[] GetAllMarkLocalData(byte _TYPE);// 0x35b7404
	int GetAlivePlayerNum();// 0x35b73d0
	AirDropPathData3D GetAirDropPathData();// 0x35b7258
	STExtraBaseCharacter* FindCharacterByPlayerKey(FString PlayerKey);// 0x35b711c
	void ExecuteCVarConfig();// 0x35b7108
	void EnableObjectPool(bool bEnable);// 0x35b7084
	void DSSwitchChangeDelegate__DelegateSignature();// 0x4033584
	Widget* DeepFindWidgetInUserWidget(UserWidget* SourceWidget, FName WidgetName);// 0x35b6fc0
	void ClearAirDropPathData();// 0x35b6fac
	bool CheckIsLowMatch();// 0x35b6f74
	void CheckInitLuaRemoteEvent();// 0x35b6f60
	bool CheckDSSwitchOpen(const int SwitchId);// 0x35b6ec8
	bool CheckDamage(STExtraBaseCharacter* AttackCharacter, STExtraBaseCharacter* TargetBaseCharacter);// 0x35b6df8
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x35b6d7c
	void ChangeDynamicWeatherState(enum DayState);// 0x35b6d00
	void BroadcastUISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x35b6c10
	void BroadcastUISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x35b6a58
	void BroadcastUIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x35b68dc
	void BroadcastUICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x35b6760
	void BroadcastTemporaryMessage(FString Message);// 0x35b66b0
	void BroadcastShowGameTips(int TipsID, FString Params);// 0x35b65c0
	void BroadcastLuaTipsBehaviorWithTime(FString BehaviorTag, int ID, FString Params1, FString Params2, float ControlTime);// 0x35b63cc
	void BroadcastLuaTipsBehavior(FString BehaviorTag, int ID, FString Params1, FString Params2);// 0x35b6214
	void BroadcastEndCircle();// 0x35b61b4
	void BroadcastCircleWaveOver(int Index);// 0x35b6104
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index, bool InbActiveScreenSize, float InScreenSizeFactor, float InExtraRadius, float Pain, bool IsCustomCircle);// 0x35b5e6c
	void BroadcastCircleInfo(byte circleInfo, float Time, const Vector BlueCircleSync, const Vector WhiteCircleSync, int CircleInvertedIndex, enum State);// 0x35b5c84
	void BroadcastAirAttackWarning(const Vector AirAttackAreaSrc, int waveIndex);// 0x35b5bc8
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, const Vector AirAttackAreaSrc, int waveIndex);// 0x35b5a48
	void AsyncLoadResFinishCallback();// 0x35b5a34
	void AsyncLoadCommonResFinishCallback();// 0x35b5a20
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x35b5964
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x35b58a8
	void AddPveZombieGrenadeCount(int Value);// 0x35b582c
	void AddPvePoliceOfficeTriggerCount(int Value);// 0x35b57b0
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x35b55b4

--------------------------------
Class: UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	UAEGameSubsystem* GameBridge;//[Offset: 0x4e8, Size: 8]
	bool bTeamIDChgDeactivePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f5, Size: 1]
	FString WeaponAttrReloadTableName;//[Offset: 0x548, Size: 16]
	FString DamageSearchTableName;//[Offset: 0x558, Size: 16]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x3c51ea8
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x3c51d88
	static WeaponAttrReloadTableStruct GetWeaponAttrReloadTableRow(int ID);// 0x3c51d04
	UAEGameSubsystem* GetGameBridge();// 0x3c51ce8
	bool CheckDSSwitchOpen(const int SwitchId);// 0x3c51c50

--------------------------------
Class: LuaGameState.GameState.GameStateBase.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x488, Size: 80]
	FString LuaFilePath;//[Offset: 0x4d8, Size: 16]

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x408, Size: 8]
	FName PreviousMatchState;//[Offset: 0x410, Size: 8]
	int ElapsedTime;//[Offset: 0x418, Size: 4]
	void OnRep_MatchState();// 0x5b56bc8
	void OnRep_ElapsedTime();// 0x5b56bac

--------------------------------
Class: LuaNetSerialization

--------------------------------
Class: AirDropPathData3D
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector StartLoc3D;//[Offset: 0x4, Size: 12]
	Vector TargetLoc3D;//[Offset: 0x10, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x20, Size: 16]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	Vector MapCenter;//[Offset: 0x34, Size: 12]
	float Radius;//[Offset: 0x40, Size: 4]

--------------------------------
Class: DSSwitchInfo
	int KeyNum;//[Offset: 0x0, Size: 4]
	FString SValue;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ViewMaskManager.Object
	enum ViewMaskTypeSetting;//[Offset: 0x28, Size: 1]
	class Actor[] FilterActorClassList;//[Offset: 0x30, Size: 16]
	void SetViewMaskType(enum NewMaskType);// 0x372f018
	bool IsPlayerViewMaskValid(STExtraBaseCharacter* BaseCharacter);// 0x372ef88
	void Init();// 0x372ef74
	int ClearViewMaskForActor(Actor* MaskActor);// 0x372eee8
	int ApplyViewMaskForPlayer(STExtraBaseCharacter* BaseCharacter);// 0x372ee5c
	int ApplyViewMaskForActorWithOwnerPlayer(Actor* MaskActor, STExtraBaseCharacter* BaseCharacter);// 0x372ed98

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0x10b0, Size: 16]
	delegate OnDeath;//[Offset: 0x10c0, Size: 16]
	delegate OnBulletChange;//[Offset: 0x10d0, Size: 16]
	delegate OnPlayerPoseChange;//[Offset: 0x10e0, Size: 16]
	delegate OnAnimAssetSkeletonMatch;//[Offset: 0x10f0, Size: 16]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x1100, Size: 16]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0x1110, Size: 16]
	delegate OnPlayerPickUp;//[Offset: 0x1120, Size: 16]
	delegate OnPlayerWeaponChangeState;//[Offset: 0x1130, Size: 16]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0x1140, Size: 16]
	delegate OnWeaponShootIntervalModeChangeDelegate;//[Offset: 0x1150, Size: 16]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0x1160, Size: 16]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0x1170, Size: 16]
	delegate IsEnterNearDeathDelegate;//[Offset: 0x1180, Size: 16]
	delegate OnFollowStateChanged;//[Offset: 0x1190, Size: 16]
	delegate OnCharacterAimModeChanged;//[Offset: 0x11e0, Size: 16]
	delegate OnPerspectiveChanged;//[Offset: 0x11f0, Size: 16]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0x1200, Size: 16]
	delegate OnDeathDelegate;//[Offset: 0x1210, Size: 16]
	delegate OnPostTakeDamage;//[Offset: 0x1220, Size: 16]
	delegate OnReconnectNotifyDelegate;//[Offset: 0x1230, Size: 16]
	delegate OnStartInitDelegate;//[Offset: 0x1240, Size: 16]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0x1250, Size: 16]
	delegate OnUpdateForSleepComponent;//[Offset: 0x1260, Size: 16]
	delegate AnimMontagePlayDelegate;//[Offset: 0x12b0, Size: 16]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0x12c0, Size: 16]
	delegate OnCharacterStartFillGasDelegate;//[Offset: 0x12d0, Size: 16]
	delegate OnCharacterStartFireDelegate;//[Offset: 0x12e0, Size: 16]
	delegate OnCharacterStopFireDelegate;//[Offset: 0x12f0, Size: 16]
	delegate OnCharacterShootDelegate;//[Offset: 0x1300, Size: 16]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0x1310, Size: 16]
	delegate OnCharacterEndViewTarget;//[Offset: 0x1320, Size: 16]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0x1330, Size: 16]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0x1340, Size: 16]
	delegate OnPawnChangeFinishDelegate;//[Offset: 0x1350, Size: 16]
	delegate OnPawnRespawnDelegate;//[Offset: 0x1360, Size: 16]
	delegate OnRequestPaintDecalDelegate;//[Offset: 0x1370, Size: 16]
	delegate OnPawnExitParachute;//[Offset: 0x1380, Size: 16]
	delegate SetClimbAnimationDelegate;//[Offset: 0x1390, Size: 16]
	delegate OnCanVaultFlagChangeDelegate;//[Offset: 0x13a0, Size: 16]
	delegate OnPreRepAttachment;//[Offset: 0x13b0, Size: 16]
	delegate OnPostRepAttachment;//[Offset: 0x13c0, Size: 16]
	delegate OnCalcPickUpItemFlow;//[Offset: 0x13d0, Size: 16]
	delegate OnCalcUseItemFlow;//[Offset: 0x13e0, Size: 16]
	AkAudioEvent* DeathSound;//[Offset: 0x13f0, Size: 8]
	AkAudioEvent* PickupSound;//[Offset: 0x13f8, Size: 8]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0x1400, Size: 8]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0x1408, Size: 8]
	AkAudioEvent* SwitchSightSound;//[Offset: 0x1410, Size: 8]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0x1418, Size: 8]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1420, Size: 1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1420, Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1420, Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0x1424, Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1428, Size: 1]
	float Money;//[Offset: 0x142c, Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1430, Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1431, Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1431, Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1432, Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1433, Size: 1]
	bool bShootSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1434, Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0x1438, Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x143c, Size: 1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143d, Size: 1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143e, Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143f, Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0x1444, Size: 4]
	float PreviousValueToSetForHealthPredict;//[Offset: 0x144c, Size: 4]
	float PreviousValueToSetForEnergyPredict;//[Offset: 0x1450, Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0x1454, Size: 4]
	float ValueLimitForSignalHPPredict;//[Offset: 0x1458, Size: 4]
	float ValueForSignalHPPredict;//[Offset: 0x145c, Size: 4]
	FName HeadSocketName;//[Offset: 0x1460, Size: 8]
	FName LFootSocketName;//[Offset: 0x1468, Size: 8]
	FName RFootSocketName;//[Offset: 0x1470, Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0x1478, Size: 8]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0x1480, Size: 8]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0x1488, Size: 8]
	EffectComponent* NewEffectComponent;//[Offset: 0x1490, Size: 8]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0x1498, Size: 8]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0x14a0, Size: 8]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0x14a8, Size: 8]
	GroupPhysicsComponent* GroupPhysics;//[Offset: 0x14b0, Size: 8]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b8, Size: 1]
	Rotator ServerControlRotation;//[Offset: 0x14bc, Size: 12]
	byte PoseState;//[Offset: 0x14c8, Size: 1]
	float LastChangeCapsuleSizeTime;//[Offset: 0x14cc, Size: 4]
	Actor* ThePlane;//[Offset: 0x14d0, Size: 8]
	float ReplicatedNowShovelingSpeed;//[Offset: 0x14d8, Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0x14dc, Size: 12]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e8, Size: 1]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e9, Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ea, Size: 1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f8, Size: 1]
	float VaultCheckBroadcastInterval;//[Offset: 0x14fc, Size: 4]
	float RadialDamageScale;//[Offset: 0x1504, Size: 4]
	float MoveOptimizeChangeCD;//[Offset: 0x15f4, Size: 4]
	byte LastPoseState;//[Offset: 0x15fc, Size: 1]
	float LastSwitchCharPoseTime;//[Offset: 0x1600, Size: 4]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1604, Size: 1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0x1608, Size: 4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1610, Size: 1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1611, Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1612, Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0x1614, Size: 4]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1618, Size: 1]
	bool bRespawnResetAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1619, Size: 1]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0x1620, Size: 8]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x1628, Size: 16]
	Actor*[] PlayerSlotData;//[Offset: 0x1638, Size: 16]
	Actor*[] InventoryData;//[Offset: 0x1648, Size: 16]
	AkComponent* SoundComp;//[Offset: 0x16b0, Size: 8]
	AkComponent* AmbientSoundComp;//[Offset: 0x16b8, Size: 8]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c0, Size: 1]
	bool bEnableFootSoundOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c1, Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0x16c8, Size: 8]
	AkAudioEvent* AmbientSound;//[Offset: 0x16d0, Size: 8]
	AkAudioEvent* AkHitHeadWithHelmet;//[Offset: 0x16d8, Size: 8]
	AkAudioEvent* AkHitHeadWithoutHelmet;//[Offset: 0x16e0, Size: 8]
	enum[] ModesIgnoreHitHead;//[Offset: 0x16e8, Size: 16]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0x16f8, Size: 80]
	SceneComponent* MeshContainer;//[Offset: 0x1748, Size: 8]
	Vector2D MeshContainerDefaultOffsetXY;//[Offset: 0x1750, Size: 8]
	int CurrentTaskTriggerAreaID;//[Offset: 0x1758, Size: 4]
	float SignalHPBeforeEnterBreath;//[Offset: 0x175c, Size: 4]
	float ProduceSoundInterval;//[Offset: 0x1760, Size: 4]
	float ProduceSoundVelocitySquared;//[Offset: 0x1764, Size: 4]
	float HearRadius;//[Offset: 0x1768, Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1770, Size: 1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1771, Size: 1]
	Actor* WaterObj;//[Offset: 0x1778, Size: 8]
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1780, Size: 1]
	byte DSHitPartJudgment;//[Offset: 0x1782, Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0x1788, Size: 8]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0x1790, Size: 8]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0x1798, Size: 8]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a0, Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0x17a4, Size: 4]
	float NearDeathBreath;//[Offset: 0x17a8, Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ac, Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0x17b0, Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b8, Size: 1]
	float DistSquaredInterruptRevival;//[Offset: 0x17bc, Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x17c0, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x17c8, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x17d0, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x17d8, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x17e0, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x17e8, Size: 80]
	Vector ScopeNewIdleLoc;//[Offset: 0x1838, Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0x1844, Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0x1850, Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0x1854, Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0x1860, Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x1864, Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x1868, Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x1870, Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x187c, Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x1880, Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x1884, Size: 4]
	float ScopeLagScale;//[Offset: 0x188c, Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0x1890, Size: 4]
	float ScopeFov;//[Offset: 0x1894, Size: 4]
	bool bIsUseDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1898, Size: 1]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x18a0, Size: 8]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0x18a8, Size: 8]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x18b0, Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0x18b4, Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0x18b8, Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x18bc, Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0x18c8, Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d4, Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x18d8, Size: 8]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0x18e0, Size: 8]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x18e8, Size: 8]
	CameraComponent* FPPCameraComp;//[Offset: 0x18f0, Size: 8]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x18f8, Size: 8]
	CameraComponent* ScopeCameraComp;//[Offset: 0x1900, Size: 8]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x1908, Size: 8]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1910, Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0x1914, Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x1928, Size: 16]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x1938, Size: 16]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x1948, Size: 16]
	delegate OnMovementBaseChanged;//[Offset: 0x1958, Size: 16]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1968, Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1969, Size: 1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x196a, Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0x1970, Size: 8]
	Vector ProneBoxRelativeLocation;//[Offset: 0x1978, Size: 12]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x1988, Size: 16]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x1998, Size: 16]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x19a8, Size: 8]
	bool AttackerNeedReceiveDamageRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b0, Size: 1]
	float PickUpRadius;//[Offset: 0x19b4, Size: 4]
	SimLocalViewData SimulateViewData;//[Offset: 0x19b8, Size: 16]
	SimViewData NetSimulateViewData;//[Offset: 0x19c8, Size: 6]
	bool IsFakeOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19dc, Size: 1]
	AnchorPlatData AnchorPlat;//[Offset: 0x19e0, Size: 8]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x1a00, Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x1a28, Size: 8]
	delegate OnMoveBlockDelegate;//[Offset: 0x1a40, Size: 16]
	PickUpItemData[] CacheDropItemDataList;//[Offset: 0x1a50, Size: 16]
	float MaxDispalyFootprintDistance;//[Offset: 0x1a64, Size: 4]
	Rotator DefaultMeshRot;//[Offset: 0x1a68, Size: 12]
	InteractiveMoveActor* CurrentInteractiveMoveActor;//[Offset: 0x1a78, Size: 8]
	class AnimInstance* MainCharAnimClass;//[Offset: 0x1a80, Size: 8]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x1a88, Size: 8]
	class AnimInstance* MainCharTPPAnimClass;//[Offset: 0x1a90, Size: 8]
	class AnimInstance* AvatarAnimClassCache;//[Offset: 0x1aa0, Size: 8]
	bool IsNetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa8, Size: 1]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa9, Size: 1]
	int CurrentEmoteIndex;//[Offset: 0x1aac, Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x1ab8, Size: 16]
	delegate OnLoadAndStartPlayEmoteAnimEvent;//[Offset: 0x1ac8, Size: 16]
	delegate ReadyToPlayEmoteMontageFailedDelegate;//[Offset: 0x1ad8, Size: 16]
	AnimationAsset* TempEmoteResource;//[Offset: 0x1ae8, Size: 40]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x1b10, Size: 8]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x1b18, Size: 4]
	bool bEnablePlayerPickUpAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b48, Size: 1]
	bool bEnablePlayerDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b49, Size: 1]
	bool bRecordKillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4a, Size: 1]
	float AIThrowPitch;//[Offset: 0x1b4c, Size: 4]
	Vector2D AISpeedScale;//[Offset: 0x1b50, Size: 8]
	bool bValidCalculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b58, Size: 1]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0x1b60, Size: 80]
	int[] ToRemoveBuffSkillIdListWhenOnPlane;//[Offset: 0x1bb0, Size: 16]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc0, Size: 1]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc1, Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x1bc8, Size: 8]
	float[] HealthChangeHistoryPerFrame;//[Offset: 0x1bd0, Size: 16]
	float LastSyncHealthChange;//[Offset: 0x1be0, Size: 4]
	Vector CurInputVector;//[Offset: 0x1be4, Size: 12]
	StaticMeshComponent* ScopComp;//[Offset: 0x1bf0, Size: 8]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x1c08, Size: 8]
	float voiceCheckCD;//[Offset: 0x1c10, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x1c14, Size: 4]
	float VoiceCheckDis;//[Offset: 0x1c18, Size: 4]
	float voiceCheckDisInParachute;//[Offset: 0x1c1c, Size: 4]
	bool voiceCheckInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c20, Size: 1]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x1c24, Size: 4]
	<byte> DanyinCompletedIDSet;//[Offset: 0x1c40, Size: 80]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x1c90, Size: 8]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x1ca8, Size: 8]
	byte MovementModeBeforeNearDeath;//[Offset: 0x1cb0, Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0x1cb4, Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x1cb8, Size: 8]
	int HandFolderRatio;//[Offset: 0x1cc0, Size: 4]
	float SwimUpRate;//[Offset: 0x1cc4, Size: 4]
	PlayerSwimComponent* swimComponet;//[Offset: 0x1cc8, Size: 8]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd1, Size: 1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd2, Size: 1]
	bool SkipCirclePain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd9, Size: 1]
	PickUpItemData[] CacheDropList;//[Offset: 0x1ce0, Size: 16]
	bool bForbidAiPronePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf0, Size: 1]
	bool bUpdateContainerLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf1, Size: 1]
	Vector MoveInputState;//[Offset: 0x1d2c, Size: 12]
	byte MovementInputReplication;//[Offset: 0x1d38, Size: 1]
	float SwitchPoseCD;//[Offset: 0x1d5c, Size: 4]
	bool hHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d80, Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0x1d98, Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x1da0, Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x1db0, Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x1de0, Size: 48]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x1e28, Size: 8]
	PickupManagerComponent* PickupManagerComponent;//[Offset: 0x1e30, Size: 8]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x1e38, Size: 8]
	float DelayHideDuration;//[Offset: 0x1e40, Size: 4]
	float DelayResetStandDuration;//[Offset: 0x1e44, Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x1e48, Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4c, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x1e50, Size: 4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6c, Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x1e70, Size: 328]
	AnimParamList CurAnimParamList;//[Offset: 0x1fb8, Size: 308]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x20f0, Size: 232]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x21d8, Size: 48]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x2208, Size: 40]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x2230, Size: 40]
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x2258, Size: 16]
	byte ThrowGrenadeMode;//[Offset: 0x2268, Size: 1]
	byte PrevThrowGrenadeMode;//[Offset: 0x2269, Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2278, Size: 1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2279, Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x227c, Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2284, Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x2288, Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x228c, Size: 4]
	float HighWalkSpeed;//[Offset: 0x22a0, Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x22a4, Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x22a8, Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x22ac, Size: 4]
	float MaxProneSpeed;//[Offset: 0x22b0, Size: 4]
	float MaxSprintSpeed;//[Offset: 0x22b4, Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x22b8, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x22bc, Size: 4]
	float HealthPredict;//[Offset: 0x22c0, Size: 4]
	float BreathAmount;//[Offset: 0x22c4, Size: 4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c8, Size: 1]
	int PoisonSmogStage;//[Offset: 0x22cc, Size: 4]
	float PoisonSmogProgress;//[Offset: 0x22d0, Size: 4]
	float AntidoteExeTime;//[Offset: 0x22d4, Size: 4]
	float AntidoteMaxTime;//[Offset: 0x22d8, Size: 4]
	float SpeedDynamicScale;//[Offset: 0x22dc, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x22e0, Size: 4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x22e8, Size: 16]
	byte HealthStatus;//[Offset: 0x22f8, Size: 1]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x2300, Size: 80]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2350, Size: 1]
	float SpeedRate;//[Offset: 0x2354, Size: 4]
	float EnergySpeedScale;//[Offset: 0x2358, Size: 4]
	float RecoveryScale;//[Offset: 0x235c, Size: 4]
	float DefaultSpeedValue;//[Offset: 0x2360, Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x2364, Size: 4]
	float SwitchWeaponSpeedScale;//[Offset: 0x2368, Size: 4]
	CharacterEnergyData Energy;//[Offset: 0x2370, Size: 56]
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x23a8, Size: 16]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23b8, Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x23bc, Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x23c0, Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x23c4, Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x23c8, Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x23d0, Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x23d4, Size: 4]
	float PrachuteLandedFallingDamageMax;//[Offset: 0x23dc, Size: 4]
	bool EnablePrachuteLandedFallingDamageMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e0, Size: 1]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x23e4, Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x23e8, Size: 8]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x23f0, Size: 8]
	float StandHalfHeight;//[Offset: 0x23f8, Size: 4]
	float CrouchHalfHeight;//[Offset: 0x23fc, Size: 4]
	float ProneHalfHeight;//[Offset: 0x2400, Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x2404, Size: 4]
	float StandRadius;//[Offset: 0x2408, Size: 4]
	float DyingRadius;//[Offset: 0x240c, Size: 4]
	float DyingBeCarriedRadius;//[Offset: 0x2410, Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x2418, Size: 16]
	HealthPredictShowData[] EnergyPredictShowDataList;//[Offset: 0x2428, Size: 16]
	HealthPredictShowData[] SignalHPPredictShowDataList;//[Offset: 0x2438, Size: 16]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x2448, Size: 8]
	bool bInAssistantState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2460, Size: 1]
	delegate InAssistantStateDelegate;//[Offset: 0x2468, Size: 16]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2478, Size: 1]
	RepVehicleAttachment VehicleReplication;//[Offset: 0x2480, Size: 16]
	RepVehicleAttachment CurrentVehicleAttachment;//[Offset: 0x2490, Size: 16]
	STExtraVehicleBase* LastAttachedVehicle;//[Offset: 0x24a8, Size: 8]
	float LastVehicleDamageCD;//[Offset: 0x24b0, Size: 4]
	float LastLeaveVehicleTime;//[Offset: 0x24b4, Size: 4]
	int VehicleSeatIdx;//[Offset: 0x24b8, Size: 4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c2, Size: 1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x24c4, Size: 4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e0, Size: 1]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x24e8, Size: 8]
	STExtraUnderWaterEffectComp* UnderWaterEffectComponent;//[Offset: 0x24f0, Size: 8]
	<enum,int> AvatarRectifyData;//[Offset: 0x24f8, Size: 80]
	HalloweenVampireCloth HalloweenVampireCloth;//[Offset: 0x2548, Size: 8]
	delegate OnAttachedToVehicle;//[Offset: 0x2550, Size: 16]
	delegate OnDetachedFromVehicle;//[Offset: 0x2560, Size: 16]
	delegate OnChangedVehicleSeat;//[Offset: 0x2570, Size: 16]
	delegate OnPlayerStateUpdated;//[Offset: 0x2580, Size: 16]
	float MaxLeaveVehicleVelocity;//[Offset: 0x259c, Size: 4]
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x25b0, Size: 16]
	Rotator AngledSightRotOffset;//[Offset: 0x25c0, Size: 12]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x2730, Size: 8]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2738, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x273c, Size: 4]
	int DamageMagnifierIdx;//[Offset: 0x2740, Size: 4]
	<FName,class ActorComponent> DynamicComponentMap;//[Offset: 0x2750, Size: 80]
	STParachuteState STReplicateParchuteState;//[Offset: 0x27a0, Size: 24]
	STParachuteState LastReplicateParchuteState;//[Offset: 0x27b8, Size: 24]
	STParachuteState STParachuteStateData;//[Offset: 0x27d0, Size: 24]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x27e8, Size: 8]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x27f0, Size: 32]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2810, Size: 1]
	float MoveForwardInputValue;//[Offset: 0x2814, Size: 4]
	float MoveRightInputValue;//[Offset: 0x2818, Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281c, Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x2820, Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2824, Size: 1]
	bool bEnableAutoFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2825, Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x2828, Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x282c, Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x2838, Size: 8]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x2840, Size: 16]
	STExtraBaseCharacter* Leader;//[Offset: 0x2850, Size: 8]
	enum FollowState;//[Offset: 0x2858, Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x2860, Size: 16]
	STExtraBaseCharacter*[] Inviters;//[Offset: 0x2870, Size: 16]
	STExtraPlayerState*[] InviterStateArr;//[Offset: 0x2880, Size: 16]
	FString LatestInviter;//[Offset: 0x2890, Size: 16]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a0, Size: 1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x28fc, Size: 4]
	float maxShowAlpha;//[Offset: 0x2904, Size: 4]
	float MoveMaxShowDis;//[Offset: 0x2908, Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x290c, Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x2910, Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x2940, Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x2944, Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x2948, Size: 4]
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298c, Size: 1]
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x299c, Size: 12]
	float CollectPlayerRouteInterval;//[Offset: 0x29ac, Size: 4]
	int IsEnableReportRoute;//[Offset: 0x2a44, Size: 4]
	Vector EmoteColBox;//[Offset: 0x2a88, Size: 12]
	int IsEnableLogAIPlayerPos;//[Offset: 0x2a9c, Size: 4]
	float CompVisionOpDis;//[Offset: 0x2aa0, Size: 4]
	float CompVisionOpDelay;//[Offset: 0x2aa4, Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aa8, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x2ab8, Size: 80]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b08, Size: 1]
	float MaxRelavantDistance;//[Offset: 0x2b10, Size: 4]
	float MaxRelavantDistanceSquared;//[Offset: 0x2b14, Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x2b18, Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x2b1c, Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x2b20, Size: 4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x2b24, Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x2b28, Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x2b2c, Size: 4]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b30, Size: 1]
	BaseFPPComponent* FPPComp;//[Offset: 0x2b38, Size: 8]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x2b40, Size: 8]
	float ClientSwitchWeaponDeltaTime;//[Offset: 0x2b50, Size: 4]
	float ClientCallSwitchWeaponDur;//[Offset: 0x2b54, Size: 4]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b58, Size: 1]
	float EquipingScopeDelay;//[Offset: 0x2b5c, Size: 4]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b61, Size: 1]
	delegate OnEquipZoomScope;//[Offset: 0x2b68, Size: 16]
	WeaponOverrideAttrs WeaponOverrideAttrs;//[Offset: 0x2b7c, Size: 24]
	CharacterOverrideAttrs CharacterOverrideAttrs;//[Offset: 0x2b94, Size: 16]
	float CharacterFallingVelocityZFactor;//[Offset: 0x2ba4, Size: 4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd8, Size: 1]
	bool IsOpenCommonShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd9, Size: 1]
	int AloneDistance;//[Offset: 0x2be0, Size: 4]
	int NearTeamPlayerDistance;//[Offset: 0x2be4, Size: 4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x2bf0, Size: 40]
	float ChangeWearingLastTime;//[Offset: 0x2c18, Size: 4]
	int ChangeWearingPromptTextID;//[Offset: 0x2c1c, Size: 4]
	FString ChangeWearingPromptText;//[Offset: 0x2c20, Size: 16]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x2c30, Size: 8]
	delegate WearingMontageFinishedEvent;//[Offset: 0x2c38, Size: 16]
	SoftObjectPath ChangeWearingIconPath;//[Offset: 0x2c90, Size: 24]
	Vector ChangeWearingColBox;//[Offset: 0x2ca8, Size: 12]
	float PaintDecalMaxDistance;//[Offset: 0x2cb4, Size: 4]
	float PuzzlePaintDecalMaxDistance;//[Offset: 0x2cb8, Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cbc, Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cbd, Size: 1]
	float RequestPaintDecalCD;//[Offset: 0x2cc0, Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0x2cc4, Size: 4]
	ChildActorComponent* DecalComponent;//[Offset: 0x2cc8, Size: 8]
	Actor* DecalActor;//[Offset: 0x2cd0, Size: 8]
	ChildActorComponent* PuzzleLineTraceComponent;//[Offset: 0x2cd8, Size: 8]
	Actor* PuzzleTraceLineActor;//[Offset: 0x2ce0, Size: 8]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce8, Size: 1]
	float OutBattleStateTime;//[Offset: 0x2cec, Size: 4]
	delegate OnBattleStateChange;//[Offset: 0x2cf8, Size: 16]
	BonfireActor* CurBonfire;//[Offset: 0x2d08, Size: 8]
	BonfireActor* BuiltBonfire;//[Offset: 0x2d10, Size: 8]
	class STCharacterBonfireLinkComp* BonfireLinkComponentTemplate;//[Offset: 0x2d18, Size: 40]
	delegate OnCharacterPlayEmote;//[Offset: 0x2d40, Size: 16]
	delegate OnCharacterWin;//[Offset: 0x2d50, Size: 16]
	delegate OnCharacterFallingModeChange;//[Offset: 0x2d60, Size: 16]
	Vector LastServerHitImpactPoint;//[Offset: 0x2d70, Size: 12]
	byte RemainUseSupplySpotTimes;//[Offset: 0x2d7c, Size: 1]
	byte RemainUseEnhancerSpotTimes;//[Offset: 0x2d7d, Size: 1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7e, Size: 1]
	int[] UseEnhanceSpotTip;//[Offset: 0x2d80, Size: 16]
	int MonsterDamageReduceSkillID;//[Offset: 0x2d90, Size: 4]
	<int,InteractionEmoteConfig> InteractionEmoteConfig;//[Offset: 0x2d98, Size: 80]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x2de8, Size: 8]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e02, Size: 1]
	FString CharacterSkillTableName;//[Offset: 0x2e08, Size: 16]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x2e18, Size: 8]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x2e20, Size: 8]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x2e30, Size: 272]
	byte MeleeAutoAimType;//[Offset: 0x2f40, Size: 1]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f54, Size: 1]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x2f58, Size: 32]
	bool bRespawnQuitSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f78, Size: 1]
	bool bCharacterHideIngame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f79, Size: 1]
	float CharacterShowWeaponTime;//[Offset: 0x2f7c, Size: 4]
	enum CharacterMainType;//[Offset: 0x2f81, Size: 1]
	enum CharacterSubType;//[Offset: 0x2f82, Size: 1]
	delegate ZombieModePropSkillUIShowDelegate;//[Offset: 0x2f88, Size: 16]
	int ZombieModeCurrentSkillPropLevel;//[Offset: 0x2f98, Size: 4]
	int ZombieModeCurrentSkillPropID;//[Offset: 0x2f9c, Size: 4]
	delegate BulletTrackShowDelegate;//[Offset: 0x2fa0, Size: 16]
	delegate OnClientHoldGrenadeStateChange;//[Offset: 0x2fb0, Size: 16]
	delegate MarkPlayerPosDelegate;//[Offset: 0x2fc0, Size: 16]
	float Config_PlayerHurt_ResetTime;//[Offset: 0x2fd0, Size: 4]
	BaseVaultComponent* VaultControllerComp;//[Offset: 0x2fd8, Size: 8]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe0, Size: 1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe1, Size: 1]
	bool bEnableSetMeshUpdateFlagInBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fe2, Size: 1]
	delegate OnUseSpringJump;//[Offset: 0x2fe8, Size: 16]
	float LastSprintTriggerTime;//[Offset: 0x2ff8, Size: 4]
	float FallingTime;//[Offset: 0x3000, Size: 4]
	bool bInteractWithActivityActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3004, Size: 1]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3005, Size: 1]
	float SignalHPRemainingTime;//[Offset: 0x3008, Size: 4]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300c, Size: 1]
	Actor* MyConstActor;//[Offset: 0x3010, Size: 8]
	bool EnterSnowArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3018, Size: 1]
	byte[] ShowSnowAreaTypes;//[Offset: 0x3020, Size: 16]
	float TickCanDriveSnowBoardInterval;//[Offset: 0x3030, Size: 4]
	float ClientAttachToVehicleKeepTime;//[Offset: 0x3038, Size: 4]
	float RefreshAnimListTimerMaxTime;//[Offset: 0x3044, Size: 4]
	float RealtimeVerifyInterval;//[Offset: 0x3048, Size: 4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x304c, Size: 4]
	float FirstGuide_SafeZoneCountDownTime;//[Offset: 0x3060, Size: 4]
	bool isUsingEnergyPoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3064, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3065, Size: 1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3066, Size: 1]
	float FixMovementOnVehicleInterval;//[Offset: 0x3068, Size: 4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x3070, Size: 4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x3080, Size: 48]
	byte DefaultParticleAttachLocationType;//[Offset: 0x30b0, Size: 1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x30b8, Size: 16]
	float ParticleShowingInterval;//[Offset: 0x30c8, Size: 4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d0, Size: 1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d1, Size: 1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x30d8, Size: 40]
	Vector MoveAdditionalSpeed;//[Offset: 0x3100, Size: 12]
	int CharacterMovementReplicatID;//[Offset: 0x310c, Size: 4]
	int CharacterReplicatID;//[Offset: 0x3110, Size: 4]
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x3118, Size: 8]
	float RTNoDamageTime;//[Offset: 0x3120, Size: 4]
	bool IsCanEnableWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3124, Size: 1]
	bool IsWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312c, Size: 1]
	float MinWingUpControlTime;//[Offset: 0x3138, Size: 4]
	WidgetComponent* PlayerInfoWidgetComp;//[Offset: 0x3140, Size: 8]
	FString DebugInfoWidgetPath;//[Offset: 0x3148, Size: 16]
	FString DebugInfoWidgetRefreshFunName;//[Offset: 0x3158, Size: 16]
	Vector DebugInfoLocation;//[Offset: 0x3168, Size: 12]
	Actor* ACurrentFloor;//[Offset: 0x3174, Size: 8]
	bool IsMotifyAutoUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317c, Size: 1]
	bool IsMotifyAttackerByState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317d, Size: 1]
	float WaitRefreshShootDetailInfoTime;//[Offset: 0x3180, Size: 4]
	float CurWaitRefreshShootDetailInfoTime;//[Offset: 0x3184, Size: 4]
	float[] AIHotValueDebugInfo;//[Offset: 0x3188, Size: 16]
	Actor*[] OverlapDarkAreas;//[Offset: 0x3198, Size: 16]
	float SwimmingSwitchMovementModeCD;//[Offset: 0x31a8, Size: 4]
	int PrepareEmoteId;//[Offset: 0x31b0, Size: 4]
	FString EmoteSouceEventName;//[Offset: 0x31b8, Size: 16]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x31c8, Size: 8]
	bool bIsInUnderGroundArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d0, Size: 1]
	bool bIsAroundUndergroundEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d1, Size: 1]
	bool bIsSkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d2, Size: 1]
	uint32 SightVisionMask;//[Offset: 0x31d4, Size: 4]
	bool bUnderWaterPoseCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d9, Size: 1]
	bool bReviseIgnoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31da, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31db, Size: 1]
	bool bRepShoulderState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31dc, Size: 1]
	bool bForceChangePersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31dd, Size: 1]
	float SimulateFootstepQueryInternal;//[Offset: 0x3268, Size: 4]
	bool bDisableAttachRepInBeCarried;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3271, Size: 1]
	NetCarryBackState NetCarryBackState;//[Offset: 0x3278, Size: 24]
	STCharacterCarryBackComp* CarryBackComponent;//[Offset: 0x3290, Size: 8]
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x3573200
	void VaultFailPawnCPP(const FString Content);// 0x3573150
	void VaultFailPawnBluePrint(out const FString Content);// 0x3573090
	bool ValidCalculate();// 0x3573058
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x3572fa4
	void UseSpringJump(int SpringID);// 0x3572f28
	void UserCancelRescue();// 0x3572f14
	void UpdateUnderGroundArea(bool bEnterUnderGroundArea);// 0x3572e90
	bool UpdateShovelingState();// 0x3572e58
	void UpdateShovelingHoldStateRelease();// 0x3572e44
	void UpdateShovelingHoldStatePressed();// 0x3572e30
	void UpdatePoseCollisionCpp(byte CurState, byte PreState);// 0x3572d78
	void UpdateFallingTime(float Delta);// 0x3572cfc
	void UpdateDynamicHoldGunOption();// 0x3572ce8
	void UpdateCurrentShootWeaponTick();// 0x3572cd4
	void UpdateAttrValue(FString AttrName, float Val, int Reason, bool bSet);// 0x3572b6c
	void UpdateAllInstanceBodyTransform(int Type);// 0x3572af0
	void UnequipWeaponFinish();// 0x3572adc
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x3572a1c
	void TryToBroadcastFatalDamageEvent(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x3572878
	void TryPeek(bool IsLeft, bool ButtonDown);// 0x35727a8
	void TryFollowInitialParachuteLeader(FString Name);// 0x3572674
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x3572598
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x3572500
	void ThrowGrenadeModeChangedDelegate__DelegateSignature(byte NewMode, byte PrevMode);// 0x4033584
	void TakeDamageWhenThrowedDelegate__DelegateSignature();// 0x4033584
	void SyncVoiceCellInfo(STExtraBaseCharacter* Char, int InVoice1, int InVoice2, int InVoice3);// 0x35723cc
	void SyncVisibilityFor(STExtraBaseCharacter* Char, bool bVisible);// 0x3572304
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x35721c8
	void SyncFootVoice(STExtraBaseCharacter* Char, byte FootStepState, Vector_NetQuantize VoiceCheckVector);// 0x35720cc
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x3572048
	bool SwitchWeaponCheck(byte Slot, bool bIgnoreState);// 0x3571f6c
	bool SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x3571e08
	void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x3571d38
	void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);// 0x3571c68
	void SwitchShoulderStateServer(bool bShoulder);// 0x3571ba4
	void SwitchShoulderStateLocal(bool bShoulder);// 0x3571b18
	void SwitchShoulderState(bool bShoulder);// 0x3571a94
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x35718ec
	void SwapMainWeapon();// 0x35718d8
	void STServerUpdateStateDirectly(float InThrottleInput, float InSteeringInput);// 0x35717f0
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator CameraRotation);// 0x3571684
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float blendTime);// 0x3571584
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x35714f4
	void StopMove();// 0x35714e0
	bool StopFireFilter();// 0x35714a0
	void StopFire();// 0x357148c
	void StopFillGas();// 0x3571478
	bool StopChangeWearingAnim();// 0x3571440
	void StopCarryBack(enum InDetachMethod);// 0x35713c4
	void StopAnimMontageOriginal(AnimMontage* AnimMontage);// 0x3571348
	void StartWaitRefreshShootDetailInfo();// 0x3571334
	bool StartPlayEmoteAnim(int EmoteIndex);// 0x35712a4
	void StartFireSimple(byte ShootMode);// 0x3571220
	bool StartFireFilter(STExtraShootWeapon* ExtraWeapon);// 0x3571188
	void StartFire(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget, bool DoCheck, STExtraShootWeapon* ExtraWeapon);// 0x3570fc8
	void StartFillGas();// 0x3570fb4
	bool StartChangeWearingAnim();// 0x3570f7c
	void SpawnFootprint(enum FootprintType);// 0x3570f00
	void SpawnAndSwithToGrenadeServerCall(int InGrenadeID);// 0x3570e50
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(FName SpesificLogicGrenadeSlot);// 0x3570dc4
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(FName SpesificLogicGrenadeSlot);// 0x3570d38
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bResetBulletNum);// 0x3570b88
	void ShowPlayerDebugInfo(bool bShow);// 0x3570b04
	void ShowNightVisionFrame();// 0x3570ae8
	void ShowInjuryScreenEffect();// 0x3570ad4
	void ShowDebugRole();// 0x3570ac0
	void ShowDebugRecordData();// 0x3570aac
	void ShowDebugPickUpFlow();// 0x3570a98
	void ShowDebugEquipOrUnequipFlow();// 0x3570a84
	void ShowDebugBornLandFlow();// 0x3570a70
	void ShowConfirmDialogOfMisKill();// 0x3570a54
	bool ShouldUpdateHPOnUI();// 0x3570a14
	bool ShouldShowCorp();// 0x35709dc
	bool ShouldShowAnchor();// 0x35709a4
	bool ShouldAutoScopeWhenPeek();// 0x3570964
	enum ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x357084c
	void SetWeaponShootType(byte ShootType);// 0x35707d0
	void SetViewTargetAgainForOB();// 0x35707bc
	void SetThrowGrenadeMode(byte ThrowMode);// 0x3570740
	void SetTargetPlayer(STExtraBaseCharacter* InTargetPlayer);// 0x35706c4
	void SetSightVision(bool Enable, enum Flag);// 0x35705fc
	void SetSightCondition(bool Enable, enum Flag);// 0x3570534
	void SetRTNoDamageTimer(float Timer);// 0x35704b8
	void SetReloadMethod(byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x35703f8
	void SetPrepareEmoteId(int InEmoteID);// 0x357037c
	void SetPawnReloadWeaponFinished(bool IsFinished);// 0x35702f0
	void SetMeshForceAnimLOD(int InNewForceAnimLOD);// 0x3570274
	void SetMeshContainerOffsetZ(float Z);// 0x35701f8
	void SetMeshContainerOffsetY(float Y);// 0x357017c
	void SetMeshContainerOffsetX(float X);// 0x3570100
	void SetIsDuringTransferLeader(bool isTransfer);// 0x357007c
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x356ffb4
	void SetInsectCameraEnable(bool bEnable);// 0x356ff30
	void SetHighWalkSpeed(float WalkSpeed);// 0x356feb4
	void SetHealthSafety(float NewHealth, byte Reason);// 0x356fdfc
	void SetHandFoldRatio(int Ratio);// 0x356fd80
	static void SetExpandDataContent(out const byte[] Content);// 0x356fcd0
	void SetExitingParachute(bool ExitParachute);// 0x356fc4c
	void SetEnterSnowArea(bool IsEnterSnowArea);// 0x356fbc8
	void SetEmoteSouceEventName(FString EventName);// 0x356fa94
	void SetDelayStateSwitchTime(float DelayTime);// 0x356fa1c
	void SetCurScopeFov(float InFov);// 0x356f9a0
	void SetCurrentVehicle(STExtraVehicleBase* InVehicle);// 0x356f928
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x356f84c
	void SetCurrentFloor(Actor* floor);// 0x356f7d0
	void SetCurBonfire(BonfireActor* newBonfire);// 0x356f754
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x356f68c
	void SetCheatSpeedModifier(float NewModifier);// 0x356f608
	void SetCharacterHideInGame(bool bHide);// 0x356f584
	void SetChangeWearingPromptEnable(bool bShow);// 0x356f500
	void SetAttachment(Actor* InAttachParent, SceneComponent* InAttachComponent, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D, FName AttachSocket);// 0x356f354
	void SetAntidoteMaxTime(float MaxTime);// 0x356f2dc
	void SetAntidoteExeTime(float ExeTime);// 0x356f264
	void SetAnimParamIsRescueing(bool Val);// 0x356f1e0
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x356f15c
	void SetAnimParamClimbAnimTime(float ExplicitTime, bool bFlag);// 0x356f09c
	void SetAnimParamClimbAnimSwitch(bool bFlag, float TransTime);// 0x356efd4
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x356ef50
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x356ee98
	void SetAmbientRTPC(FString RTPC, float Value);// 0x356ed28
	void SetAIActive(bool bActive);// 0x356eca4
	void SetActorLocationServerAndClient(Vector Location);// 0x356ec28
	void ServerUpdateShovelingHoldState(bool ishold);// 0x356eb64
	void ServerTriggerJump();// 0x356eb04
	void ServerSetPoisonSmogStage(int SmogStage);// 0x356ea88
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);// 0x356e978
	void ServerSetPeekCollision(bool HasCollision);// 0x356e8b4
	void ServerSetMovementStateNew(byte Input);// 0x356e804
	void ServerSetMovementState(Vector Input);// 0x356e750
	void ServerSendToLobbyServerUseItem(int ItemId, int Count);// 0x356e69c
	void ServerResponseInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x356e4e8
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x356e37c
	void ServerInviteTeammate(FString Name, enum InvitationType);// 0x356e25c
	void ServerHandleBulletHitData(STExtraWeapon* OwnerWeapon, out BulletHitInfoUploadData Data);// 0x356e158
	void ServerFollowTeammate(FString Name);// 0x356e07c
	void ServerEndZombieModePropSkill();// 0x356e068
	void ServerDropCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x356dfb8
	void ServerChangeThrowGrenadeMode(byte ThrowMode);// 0x356df08
	void ServerCancelFollow();// 0x356dea8
	void SendServerMoveToClientUnreliabyNew(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x356dd7c
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x356dc50
	void SendClientMoveToServerUnreliabyNew(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x356daec
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x356d988
	void SendClientMoveToServerReliabyNew(float TimeStamp, const Vector_NetQuantize Position, const Rotator Rotation, const Vector_NetQuantize100 Velocity);// 0x356d824
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x356d6c0
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x356d59c
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x356d49c
	void Scoping(byte NewType);// 0x356d420
	void ScopeOut(byte NewType);// 0x356d3a4
	void ScopeInterrupt(byte NewType);// 0x356d328
	void ScopeIn(byte NewType);// 0x356d2ac
	void SaveMeshUpdateFlag();// 0x356d28c
	void RspSetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x356d1dc
	void RspPlayInteractionEmote(int EmoteId);// 0x356d12c
	void RspClientSureLeaveVehicle(bool bCanLeave);// 0x356d0a0
	void RPC_Server_UseZombieModeSkill();// 0x356d040
	void RPC_Server_TriggerEntryEventByID(int SkillID, bool bEnable);// 0x356cf3c
	void RPC_Server_TriggerEntryEvent(enum EntryEvent);// 0x356ce8c
	void RPC_Server_SwitchWeaponShootInterval(STExtraShootWeapon* Weapon, enum Mode);// 0x356cd9c
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x356cbf8
	void RPC_Server_SwitchSkillProp(int SkillPropID);// 0x356cb48
	void RPC_Server_SwapMainWeapon();// 0x356cae8
	void RPC_Server_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x356ca38
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x356c988
	void RPC_Server_SetCurScopeFov(float InFov);// 0x356c8d8
	void RPC_Server_ReportSimulateCharacterLocation(STExtraBaseCharacter* MoveCharacter, const Vector Location, float TargetTime, int MoveType);// 0x356c76c
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x356c70c
	void RPC_Server_ChangeToShootGrenade();// 0x356c6ac
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x356c5fc
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x356c54c
	void RPC_Client_TeleportToFinish(bool bSuccess, Vector DestLocation, Rotator DestRotation);// 0x356c400
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x356c25c
	void RPC_Client_SwapMainWeapon();// 0x356c1fc
	void RPC_Client_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot);// 0x356c14c
	void RPC_Client_ShowZombieModeSkillCD(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x356c024
	void RPC_Client_ShootVertifyRes(const enum VertifyRes, const BulletHitInfoUploadData HistoryShootData, const CharacterHistoryData HistoryChData, const Vector ServerVictmPos);// 0x356be54
	void RPC_Client_ShootVertifyFailAlarm(const enum VertifyRes, FString Tips);// 0x356bd34
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x356bc84
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x356bbd4
	void RPC_Client_OnSkillPropCountChanged(int SkillPropID);// 0x356bb24
	void RPC_Client_OnNearDeathRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x356ba14
	void RPC_Client_OnNearDeathRecordingNotify(FString SpectatorName, bool bSpectatorIsAI);// 0x356b8e0
	void RPC_Client_OnDeathStopRecordingNotify_New(const DeathReplayData DeathReplayData);// 0x356b7d0
	void RPC_Client_OnDeathStopRecordingNotify(FString SpectatorName, bool bSpectatorIsAI, bool bForce);// 0x356b650
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x356b40c
	void RPC_Client_NoticeSimulateMoveErrorRange(STExtraBaseCharacter* MoveCharacter, float ErrorRange);// 0x356b31c
	void RPC_Client_MarkPlayersOnUI(const PlayerPosMarkerParam[] PlayerMarkersParam);// 0x356b240
	void RPC_Client_DrawDebugSphere(Vector Center, float Radius, int Segments, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x356b010
	void RPC_Client_DrawDebugLine(Vector LineStart, Vector LineEnd, Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x356ae18
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x356adb8
	void RPC_Client_ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x356ac74
	void RestoreMeshUpdateFlag();// 0x356ac54
	void ResponceInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x356aaec
	void ResetValueLimitForHealthPredict();// 0x356aad8
	void ResetSignalOnServer(bool bRescued);// 0x356aa54
	void ResetCharacterEnergy();// 0x356aa40
	void ResetCharacter();// 0x356aa24
	void ResetCamera();// 0x356aa10
	void ResetAnimInstanceClass();// 0x356a9fc
	void RequestWeaponStopFire(STExtraShootWeapon* ShootWeapon);// 0x356a980
	void RequestUserCancleRescue();// 0x356a920
	void RequestServerSureLeaveVehicle();// 0x356a8c0
	void RequestServerAssistantTrackVehicle(bool bEnterAssistant);// 0x356a7fc
	void RequestPutOnHalloweenVampireCloth(int ClothItemID, bool bWear);// 0x356a6f8
	bool RequestPaintDecal(int DecalId);// 0x356a668
	void ReqStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x356a580
	void ReqStartChangeWearing();// 0x356a520
	void ReqSetIsWingUpControl(bool IsUpControl);// 0x356a45c
	void ReqSetInteractionEmoteReceiver(STExtraBaseCharacter* Receiver);// 0x356a3ac
	void ReqPlayInteractionEmote(STExtraBaseCharacter* OtherCharacter, int SelfEmoteId, int OtherEmoteId);// 0x356a284
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x356a1d4
	void ReqInteruptChangeWearing();// 0x356a174
	void ReqEmotePlayFinished(int EmoteIndex);// 0x356a0c4
	void ReqChangeWearingFinished(int Index);// 0x356a014
	void ReqAcceptInteractionEmote();// 0x3569fb4
	void ReportPVSException(Vector OwnPos, Vector OtherPos, Vector Vel);// 0x3569e68
	void ReportAntiCheatInfo();// 0x3569e54
	void RemoveClientLeaveStateCheck(enum State);// 0x3569dd8
	void RemoveBuffWhenGotoPlane();// 0x3569dc4
	bool ReloadWeaponFilter();// 0x3569d84
	bool ReloadCurrentWeapon();// 0x3569d4c
	void RegisterPlayerPickUpList();// 0x3569d38
	void RefreshPersonPerspective();// 0x3569d24
	void RefreshPawnVaultTypeServer();// 0x3569cc4
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x3569c38
	void RefreshMoveAttrModifier();// 0x3569c24
	void RefreshAvatar(enum SlotType, bool IsEquipped, int ItemId);// 0x3569b20
	void RecordFinalParachuteLeader();// 0x3569b0c
	void PrintAIPolicyDecisionData();// 0x3569af8
	bool PreSwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x3569994
	void PreDoDrop(STExtraBaseCharacter* DamageCauser);// 0x3569918
	void PostGetPlayerAnimation();// 0x4033584
	void PostCollectDropWrapperList();// 0x4033584
	bool PoseOnGround(byte InPoseState);// 0x3569880
	void PlayWeaponSound(AkAudioEvent* WeaponSound, STExtraWeapon* Weapon);// 0x35697cc
	void PlaySwitchSightSound(bool IsScopeIn);// 0x3569748
	void PlaySwitchFireModeSound();// 0x3569734
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x35696b8
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float blendTime);// 0x3569580
	void PlaySelfThrowAwayWeaponSound();// 0x356956c
	void PlayPullBoltSound();// 0x3569558
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x3569348
	void PlayMountAccessoriesSound();// 0x3569334
	void PlayMagOUTSound();// 0x3569320
	void PlayMagINSound();// 0x356930c
	void PlayLocalShellDropFX();// 0x35692f8
	void PlayLoadBulletSound();// 0x35692e4
	void PlayFootstepSound(byte FootStepState);// 0x3569260
	bool PlayerConfirmToRescue();// 0x3569228
	void PlayChangeMagazineSound();// 0x3569214
	void PlayAmbientSound();// 0x3569200
	void PickUpWrapperAttachmentItem(Actor* Target, out const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x3569000
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount, int BattleItemClientPickupType);// 0x3568e1c
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x3568cf0
	void PawnVaultStopCPP();// 0x3568cd4
	void PawnVaultStopBluePrint();// 0x3568cb8
	void PawnVaultServerStopCheckCPP();// 0x3568c58
	void PawnVaultServerStopCheckBluePrint();// 0x3568c3c
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x35688b8
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x3568588
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x35682b0
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x3567fbc
	void PawnLeaveState(enum State);// 0x3567f38
	bool PawnHasState(enum PawnState);// 0x3567ea0
	bool PawnEnterState(enum State);// 0x3567e08
	bool PawnAllowState(enum State, bool withLog);// 0x3567d2c
	void OnWeaponEquipmentUpdateHandled();// 0x3567d10
	void OnWeaponEquipmentUpdate();// 0x3567cf4
	void OnWeaponDropStart(STExtraShootWeapon* ShootWeapon);// 0x3567c78
	void OnWeaponDropFinished(STExtraShootWeapon* ShootWeapon);// 0x3567bfc
	void OnUnEquipWeaponWithParams(STExtraShootWeapon* ShootWeapon, enum Reason);// 0x3567b3c
	void OnUnEquipWeapon();// 0x4033584
	void OnUIZombieModeSkillCDShowDelegate(int InCDType, float InSkillInUseCD, float InNextUseCD);// 0x3567a4c
	void OnStateLeave(enum EnteredState);// 0x35679c8
	void OnStateEnter(enum EnteredState);// 0x3567944
	void OnShowName(bool _IsShow, FString _Name);// 0x4033584
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x35678c0
	void OnScopeNotHandFold();// 0x35678ac
	void OnScopeHandFold();// 0x3567898
	void OnRep_ZombieModeSkillPropLevel();// 0x3567884
	void OnRep_ZombieModeSkillPropChanged();// 0x3567870
	void OnRep_WaterObj();// 0x356785c
	void OnRep_VehicleSeatIdx();// 0x3567848
	void OnRep_VehicleReplication();// 0x3567834
	void OnRep_UnmannedVehicleSyncData();// 0x3567818
	void OnRep_ThrowGrenadeMode(byte PrevMode);// 0x356779c
	void OnRep_Temperature(float LastValue);// 0x3567718
	void OnRep_SwitchWeaponSpeedScale();// 0x3567704
	void OnRep_StatusChanged(byte prevStatus);// 0x3567680
	void OnRep_SignalHPRemainingTime();// 0x356766c
	void OnRep_SignalHP(float PrevVal);// 0x35675e8
	void OnRep_SightVisionMask();// 0x35675d4
	void OnRep_ShowRevivalPointIcon();// 0x35675b8
	void OnRep_ShoulderStateChanged();// 0x356759c
	void OnRep_ServerLastTransformUpdateTimeStamp();// 0x3567588
	void OnRep_ScopeFov();// 0x3567574
	void OnRep_ResetDataOnRespawn();// 0x3567560
	void OnRep_ReplicatedParachuteState();// 0x356754c
	void OnRep_ReplicatedMoveState();// 0x3567538
	void OnRep_ReplicatedMovement();// 0x356751c
	void OnRep_ReplicatedIsStartParachute();// 0x3567508
	void OnRep_RemainUseSupplySpotTimes();// 0x35674f4
	void OnRep_RemainUseEnhancerSpotTimes();// 0x35674e0
	void OnRep_PoseStateNotify(byte LastState);// 0x3567464
	void OnRep_PoisonFogStageChange();// 0x3567450
	void OnRep_PlayerKey();// 0x3567434
	void OnRep_PeekHasCollision();// 0x3567420
	void OnRep_NetSimulateViewData();// 0x356740c
	void OnRep_MovementInputReplication();// 0x35673f8
	void OnRep_MoneyNotify();// 0x35673e4
	void OnRep_IsWingUpControl();// 0x35673d0
	void OnRep_IsRescueingOtherStatusChange();// 0x35673bc
	void OnRep_IsInvincible();// 0x35673a0
	void OnRep_IsFPPChanged();// 0x3567384
	void OnRep_IsFakeOnVehicle();// 0x3567368
	void OnRep_IsBeingRescuedStatusChange();// 0x3567354
	void OnRep_InAssistantState();// 0x3567340
	void OnRep_HealthPredict();// 0x356732c
	void OnRep_HealthMax();// 0x3567310
	void OnRep_Health(float PrevHealth);// 0x356728c
	void OnRep_HandFolderRatio();// 0x3567278
	void OnRep_FollowState();// 0x3567264
	void OnRep_EnergyChange();// 0x3567250
	void OnRep_DamageMagnifierIdx();// 0x356723c
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x35671c0
	void OnRep_CurrentStates(uint64 prevStates);// 0x356713c
	void OnRep_CurBonFire();// 0x3567128
	void OnRep_CharacterHideInGame();// 0x3567114
	void OnRep_CharacterFallingVelocityZFactor();// 0x3567100
	void OnRep_ChangeHalloweenVampireCloth();// 0x35670ec
	void OnRep_CarryBackStateChanged();// 0x35670d0
	void OnRep_BreathAmmountChange();// 0x35670bc
	void OnRep_bIsCallingForRevival();// 0x35670a8
	void OnRep_AntidoteMaxTimeSync();// 0x3567094
	void OnRep_AntidoteExeTimeSync();// 0x3567080
	void OnRep_AngleSightRotOffsetChanged();// 0x356706c
	void OnRep_AnchorPlat();// 0x3567058
	void OnRep_AKEventNotify();// 0x3567044
	void OnPreRepAttachmentDelegate__DelegateSignature(Actor* AttachParent, SceneComponent* AttachComponent, FName AttachSocket, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D);// 0x4033584
	void OnPostRepAttachmentDelegate__DelegateSignature(Actor* AttachParent, SceneComponent* AttachComponent, FName AttachSocket, Vector RelativeLocation, Rotator RelativeRotation, Vector RelativeScale3D);// 0x4033584
	void OnPostFlushHealthChangeHistoryOnServer();// 0x3567028
	void OnPoseStateChange(byte LastState, byte CurState);// 0x4033584
	void OnPlayEmoteStop(int EmoteIndex);// 0x3566fac
	void OnPlayEmoteEnd(int EmoteIndex);// 0x3566f30
	bool OnPlayEmote(int EmoteId);// 0x3566ea0
	void OnOverlapDarkArea(bool bIsBegin, Actor* DarkAreaActor);// 0x3566dd8
	void OnOpenDoor(PUBGDoor* door, int DoorState);// 0x3566d18
	void OnNotifyHurt();// 0x4033584
	void OnLoadEmoteAssetEnd(BackpackEmoteHandle* Handle, int EmoteIndex);// 0x3566c60
	void OnLoadEmoteAssetBegin(BackpackEmoteHandle* Handle, int EmoteIndex, out SoftObjectPath[] OutAssetRefListToLoad);// 0x3566acc
	void OnLeaveStateInChangeWearing(enum HasLeavedState);// 0x3566a50
	void OnInterruptCurrentEmote();// 0x3566a3c
	void OnInterruptChangeWearing();// 0x3566a28
	void OnHealthChangeFromRPC(float PrevHealth, float InHealth);// 0x3566974
	void OnFollowStateChangedDelegate__DelegateSignature(enum LastFollowState, enum NewFollowState);// 0x4033584
	void OnFollowStateChange();// 0x3566960
	void OnFlushHealthChangeHistoryOnClient(out const float[] ChangeHistory);// 0x35668a0
	void OnEquipWeapon(byte Slot);// 0x4033584
	void OnEnterStateInChangeWearing(enum HasEnteredState);// 0x3566824
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x3566770
	void OnEndChangeWearing(int StopReason);// 0x35666f4
	void OnDetectPaintDecalTarget(bool bStart);// 0x4033584
	void OnCurEquipedShootWeaponChangeState(byte LastState, byte State);// 0x356663c
	void OnClientRemoveBuff(int BuffID, int SkillID, int InstID);// 0x356654c
	void OnClientAddBuff(int BuffID, int SkillID, int InstID);// 0x356645c
	void OnChangeWearingAnimFinishedEvent(int Reason);// 0x35663e0
	bool OnChangeWearing(int Index);// 0x3566350
	void OnBPMoneyChange();// 0x4033584
	void OnBPIsInvincibleChange();// 0x4033584
	void OnBPHealthChange();// 0x4033584
	void OnBeforeGetUp();// 0x4033584
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim, BackpackEmoteHandle* Handle, int EmoteIndex);// 0x3566198
	void OnAsyncLoadChangeWearingAnim();// 0x3566184
	void OnActorHitHandle(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3566034
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x3565f5c
	void MulticastStartPlayEmoteWithRand(int EmoteIndex, int Rand);// 0x3565e74
	void MulticastStartChangeWearing();// 0x3565e14
	void MulticastPlayerSoundByID(int SoundID);// 0x3565d64
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x3565cb4
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x3565c04
	void MulticastInteruptChangeWearingOnServer();// 0x3565ba4
	void MulticastInteruptChangeWearing();// 0x3565b44
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x3565ab4
	void MeleeServer();// 0x3565a54
	void MeleeReleased();// 0x3565a40
	void MeleeLocal();// 0x4033584
	void MeleeBroadcastOtherClients();// 0x35659e0
	void Melee(bool IsForCE);// 0x356595c
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x3565948
	void LocalUnEquipWeapon(STExtraWeapon* Weapon);// 0x35658cc
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x35657a4
	bool LocalStartPlayEmote(int EmoteIndex);// 0x3565714
	bool LocalStartChangeWearing();// 0x35656dc
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x356564c
	bool LocalInteruptChangeWearing();// 0x3565614
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x356555c
	void LevaveFire(STExtraShootWeapon* OwnerShootWeapon);// 0x35654d8
	void LeaveState(enum State);// 0x3565454
	void LeaveServerState(enum State);// 0x35653a4
	void LeaveBattleState();// 0x3565390
	bool IsWeaponOwnerLocallyControlled();// 0x3565350
	bool IsValidPuzzleElementTarget(out HitResult OutHitResult, out Vector OutStart, out Vector OutEnd);// 0x35651fc
	bool IsValidPaintDecalTarget_Simple();// 0x35651dc
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x356509c
	bool IsUsingGrenade();// 0x3565064
	bool IsThermalImagingValid();// 0x356502c
	bool IsSwimOnWaterSuface();// 0x3564ff4
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x3564f64
	bool IsSameTeamWithLocal();// 0x3564f2c
	bool IsSameTeam(Pawn* Other);// 0x3564e94
	bool IsReplayViewTarget();// 0x3564e5c
	bool IsProneMove();// 0x3564e24
	bool IsOnVehicleNotUAV();// 0x3564de8
	bool IsOnVehicle();// 0x3564dc4
	bool IsOnFireBalloon();// 0x3564d8c
	bool IsNowUpWater();// 0x3564d54
	bool IsNightVisionValid();// 0x3564d1c
	bool IsNearDeath();// 0x3564ce4
	bool IsLocalViewed();// 0x3564ca4
	bool IsLocalControlorView();// 0x3564c6c
	bool IsInteractiveMoveComponentTakeOverJump();// 0x3564c34
	bool IsInInteractiveMoveComponentState();// 0x3564bfc
	bool IsInFlyingTeam();// 0x3564bc4
	bool IsInExtreme();// 0x3564b8c
	bool IsInEditor();// 0x3564b54
	bool IsInCarryBackState();// 0x3564b1c
	bool IsInBeCarriedBackState();// 0x3564ae4
	bool IsHealthyAlive();// 0x3564aac
	bool IsHealthAlive();// 0x3564a74
	bool IsHandleInFold();// 0x3564a3c
	bool IsGunADS();// 0x35649fc
	bool IsFirstPerson();// 0x35649c4
	bool IsExitingParachute();// 0x356498c
	bool IsEnableDamage(STExtraBaseCharacter* TargetBaseCharacter);// 0x35648fc
	bool IsEnableBulletFlySound();// 0x35648bc
	bool IsDropAvatar();// 0x356487c
	bool IsDetectingPaintDecalTarget();// 0x356485c
	bool IsDefaultCharType();// 0x356481c
	bool IsClientCarryBackViewTarget();// 0x35647e4
	bool IsClient_WeaponOwner();// 0x35647a4
	bool IsCharacterSprinting();// 0x356476c
	bool IsChangeWearingState();// 0x3564734
	bool IsCarryBackEnable();// 0x35646fc
	bool IsCanDriveSnowBoard();// 0x35646c4
	bool IsBattleState();// 0x356468c
	bool IsAttackerIgnoreDamage(int DamageEventType);// 0x35645f4
	bool IsAngledSight();// 0x35645bc
	bool IsAllowScopeIn();// 0x3564584
	bool IsAlive();// 0x3564544
	void InviteTeammate(FString Name, enum InvitationType);// 0x356445c
	void InteractiveMoveComponentHandleJumpInput();// 0x3564448
	void InteractiveMoveComponentHandleEnterInput();// 0x3564434
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x356437c
	void InitCharacterSkillList();// 0x3564368
	bool InDarkArea();// 0x3564330
	void InClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x356427c
	void HidePlayerMagOnGunReload();// 0x3564268
	void HideNightVisionFrame();// 0x356424c
	bool HaveAngledSight();// 0x3564214
	bool HasState(enum State);// 0x356417c
	bool HasSightCondition(enum Flags);// 0x35640ec
	bool HasCarryBackState(enum InState);// 0x356405c
	bool HasAnyStates(enum[] States);// 0x3563f1c
	bool HasAnySightVision(enum Flags);// 0x3563e8c
	bool HasAllStates(enum[] States);// 0x3563d4c
	void HandleWeaponShootLost();// 0x3563d30
	void HandleWeaponOnShoot();// 0x3563d1c
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x3563c28
	void HandleStartFireDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x3563ba4
	void HandleStartFillGasDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x3563b20
	void HandleShootDelegate(STExtraShootWeapon* OwnerShootWeapon);// 0x3563a9c
	void HandlePlayOperateItemSoundOnServer(int ItemSoundID, enum ItemOperation);// 0x35639e4
	void HandlePlayerWeaponChangeState(byte WeaponStateType);// 0x3563960
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x35638a8
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x35637f0
	void HandlePlayEmoteCloseWeapon(byte TargetChangeSlot);// 0x3563774
	void HandleOpenPickUpBoxAction();// 0x3563760
	void HandleOnCharAnimLoadingFinished();// 0x3563744
	void HandleMoveAntiShootVerifyMiss();// 0x3563728
	void HandleConsumeItemSkillBreak();// 0x3563714
	void HandleBulletHitEvent(out const HitResult InImpactResult);// 0x356366c
	void HandleAutoSwitchWeaponDelay();// 0x3563658
	void GrenadeBackToWeaponServerCall();// 0x35635f8
	void GMTestZengzuo();// 0x35635e4
	void GMShowName();// 0x35635d0
	Actor* GetWeaponUserConst();// 0x3563594
	float GetWeaponOwnerPawnHealth();// 0x3563558
	WeaponManagerComponent* GetWeaponManager();// 0x356351c
	Rotator GetViewRotation();// 0x35634dc
	BaseVaultComponent* GetVaultComponent();// 0x35634a8
	float GetValueLimitForHealthPredict();// 0x3563474
	STExtraUnderWaterEffectComp* getUnderWaterEffectComponent();// 0x3563440
	Vector GetUIHelmetPosition();// 0x3563400
	enum GetUAVState();// 0x35633e4
	byte GetThrowGrenadeMode();// 0x35633c4
	int GetTeamMateIndex(STExtraBaseCharacter* Teammate);// 0x3563338
	STExtraBaseCharacter* GetTargetPlayer();// 0x356331c
	SkeletalMeshComponent* GetSpecialWeaponAttachMesh();// 0x35632e0
	AkComponent* GetSoundComponent();// 0x35632ac
	int[] GetSkillIdListByCharaSkillID(int[] CharSkillTableIDList);// 0x3563110
	float GetSimpleCollisionHalfHeightInStandPose();// 0x35630dc
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0x4033584
	Vector GetShootVertifyHitBoxScale(out const CharacterHistoryData CharacterHistotyData, out const MovementRecordData MovementRecordData);// 0x3562fa0
	SecuryInfoComponent* GetSecuryComponent();// 0x3562f6c
	STCharacterRescueOtherComp* GetRescueOtherComponent();// 0x3562f50
	STExtraVehicleBase* GetRelevantVehicleInReady();// 0x3562f34
	int GetRedClothIDByEmote(int EmoteIndex);// 0x3562ea0
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x3562e08
	BoxComponent* GetProneShapeComponent();// 0x3562dec
	byte GetPlayerWeaponFireMode();// 0x3562db8
	byte GetPlayerWeaponEquipSlot();// 0x3562d84
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x3562cbc
	PlayerVehAnimList GetPlayerVehAnimation();// 0x3562c80
	int GetPlayerTeamIndex();// 0x3562c4c
	STExtraPlayerState* GetPlayerStateSafety();// 0x3562c18
	STExtraPlayerState* GetPlayerState();// 0x3562bdc
	FString GetPlayerNameSafety();// 0x3562b30
	Vector GetPlayerMovementDir();// 0x3562af0
	FString GetPlayerDetailInfo();// 0x3562a4c
	STExtraPlayerController* GetPlayerControllerSafety();// 0x3562a10
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x35629dc
	AnimParamList GetPlayerAnimParam(float DeltaTime);// 0x3562888
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType);// 0x35627f8
	PlayerAnimList GetPlayerAnimation();// 0x35626d0
	PickupManagerComponent* GetPickupManager();// 0x356269c
	Vector GetOwnerShootStartLocation();// 0x356265c
	int GetNearTeamPlayerNum();// 0x3562628
	Vector GetMoveInputLocalDir();// 0x35625f0
	MoveAntiCheatComponent* GetMoveAntiCheatComponentInterface();// 0x35625b4
	int GetMeshAnimLOD();// 0x3562580
	FString GetLatestInviter();// 0x35624dc
	STExtraPlayerState* GetLastInviterPlayerState();// 0x35624a8
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x356246c
	float GetKdValue();// 0x3562438
	bool GetIsPlayingEmote();// 0x3562418
	bool GetIsFPP();// 0x35623d8
	bool GetIsChangeWearing();// 0x35623b8
	float GetInjuryFreeRate(int BodyPart);// 0x3562324
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x35621c0
	Vector GetHeadLocation(bool bUseHeadBone);// 0x3562128
	int GetHandFolderRatio();// 0x35620ec
	Vector GetGunOwnerHeadLocation();// 0x35620ac
	GroupPhysicsComponent* GetGroupPhysicsComponent();// 0x3562090
	FString GetGrenadeNameByGrenadeID(int InGrenadeID);// 0x4033584
	enum GetGender();// 0x3562074
	bool GetFuzzyPosition(out Vector FuzzyPostion);// 0x3561fd8
	BaseFPPComponent* GetFPPComp();// 0x3561fa4
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x3561f14
	Vector GetFollowerLoc(STExtraBaseCharacter* follower);// 0x3561e84
	float GetExtraDamageBySignalHP(float InDamge);// 0x3561df8
	FString GetEmoteHandlePath(int ItemId);// 0x4033584
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x4033584
	FString GetEmote(int ItemDefineID);// 0x4033584
	STExtraWeapon* GetCurrentWeapon();// 0x3561dc4
	int GetCurrentVehicleAnimVehicleType();// 0x3561d90
	STExtraVehicleBase* GetCurrentVehicle();// 0x3561d54
	uint64 GetCurrentStatesInterface();// 0x3561d18
	STExtraShootWeapon* GetCurrentShootWeapon();// 0x3561ce4
	STExtraWeapon* GetCurrentShieldWeapon();// 0x3561cb0
	InteractiveActorMoveComponent* GetCurrentInteractiveMoveComponent();// 0x3561c7c
	int GetCurrentFloorType();// 0x3561c48
	FString GetCorpName();// 0x3561ba4
	Controller* GetControllerSafety();// 0x3561b68
	UAEChaParachuteAnimListComponent* GetCharParachuteAnimListComponent();// 0x3561b34
	float GetCharacterXYPlaneVelocity();// 0x3561b00
	enum GetCharacterSubType();// 0x3561acc
	enum GetCharacterMainType();// 0x3561a98
	CharacterEnergyData GetCharacterEnergy();// 0x3561900
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x35618c4
	STCharacterCarryBackComp* GetCarryBackComp();// 0x3561890
	STExtraBaseCharacter* GetCarryBackCharacter();// 0x356185c
	CapsuleComponent* GetCapsuleComponentInterface();// 0x3561820
	Rotator GetCachedControlRotation();// 0x35617e8
	STCharacterBonfireLinkComp* GetBonfireLinkComp();// 0x35617b4
	STExtraBaseCharacter* GetBeCarriedBackCharacter();// 0x3561780
	CharacterAvatarComponent2* getAvatarComponent2();// 0x356174c
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x35616c0
	float GetAdjustDurabilityReduce(float DurabilityReduce, enum HitPos);// 0x35615f8
	PickUpItemData[] GetAdditionalTombBoxItemBP(int InstanceIDCnt);// 0x356153c
	SpringArmComponent* GetActiveSpringArm();// 0x3561500
	void GeneratePlayerBackpackWrappersToGround();// 0x35614e4
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x3561284
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x3561080
	void ForceWeaponFireInMuzzleDirection(bool bUseMuzzleDirection);// 0x3560ffc
	void ForceSyncPosistion(STExtraBaseCharacter* Char, RepMovement RepMovement);// 0x3560f1c
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x3560e54
	void ForceRepFPPChange(bool bSetSelf);// 0x3560dc8
	void ForcePlayerUpdateAnimation();// 0x3560db4
	void ForceDestroyWeaponInventoryAndClearData();// 0x3560da0
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x3560cb0
	void FollowTeammate(FString Name);// 0x3560b7c
	enum FindBuffRelatedPawnState(FName _buffName);// 0x3560af0
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x3560954
	bool FillGasWeaponFilter();// 0x356091c
	void FaceRotation(Rotator NewControlRotation, float DeltaTime);// 0x356085c
	void ExitClimbingActor(InteractiveMoveActor* ClimbingActor);// 0x35607e0
	void ExecFollowTeammate(FString Name);// 0x35606ac
	void EquipZoomScope(int WeaponId, int ScopeID);// 0x35605f8
	void EquipWeaponFinish();// 0x35605e4
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x3560524
	bool EnterState(enum State);// 0x356048c
	void EnterServerState(enum State);// 0x35603dc
	void EnterFire();// 0x35603c0
	void EnterClimbingActor(InteractiveMoveActor* ClimbingActor);// 0x3560344
	void EnterBattleState();// 0x3560330
	void EnterAssistantOnTrackVehicle(bool bEnter);// 0x35602ac
	void EnableStanbyAnim(bool bIsEnable);// 0x3560228
	bool EmoteAnimFinishedSuccessfully();// 0x35601f0
	void DoPuzzleActorTickable(bool bStart);// 0x356016c
	void DoDetectPaintDecalTarget(bool bStart);// 0x35600e8
	void DoAutoDropWeapon(STExtraShootWeapon* ShootWeapon);// 0x356006c
	void DisappearOnDeath();// 0x3560058
	void DettachWeapon();// 0x3560044
	bool DestroyWeaponOnServerByPropSlot(byte Slot, bool bEnableBroadcast);// 0x355ff70
	bool DestroyWeaponOnServer(FName LogicSocket, bool bEnableBroadcast);// 0x355fe9c
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x355fe88
	void DelayResetStandState();// 0x355fe74
	void DelayMoveEnd();// 0x355fe60
	void DelayMove(float Time);// 0x355fde4
	void DelayHidden();// 0x355fdc8
	void DelayCustomDepth(float Time);// 0x355fd4c
	void DelayChangeRectiftAvatar(float InDelayTime, enum InSlotType, int InItemID, bool bWear);// 0x355fc14
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x355fb80
	byte ConvertWeaponSlotToCharacterAnimType(byte WeaponSlot);// 0x355faf4
	byte ConvertWeaponFireModeToWeaponAnimType(byte FireMode);// 0x355fa68
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x355f9dc
	void CollectPlayerTombBoxIDCard(out PickUpItemData[] OutItemDataList, out int InstanceIDCnt);// 0x355f8d4
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x355f78c
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res, enum InivationType);// 0x355f660
	void ClientSomeOneInviteMe(FString SomeOne, enum InvitationType);// 0x355f570
	void ClientShowVeteranRecruitParachuteTeamTip(const int TipsID, FString param1, FString param2);// 0x355f41c
	void ClientShowAutoGroupParachuteTeamTips(bool bDoGroupSuccessfully, FString LeaderName);// 0x355f31c
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x355f298
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x355f1dc
	void ClientSetActorLocation(Vector Location, bool bDeactiveMov);// 0x355f114
	void ClientResponseFeedback(enum res);// 0x355f090
	void ClientPlayVehicleOverlapCameraShake();// 0x355f030
	void ClientPlayInteractEmote(int EmoteId);// 0x355efac
	void ClientOnPossessBy(Controller* NewController);// 0x355eefc
	void ClientFeedbackZombiePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x355ed4c
	void ClientFeedbackZombieMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x355eb88
	void ClientFeedbackVehiclePointDamage(float Damage, const STPointDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShot);// 0x355e9d8
	void ClientChangeCharacterMesh(int MeshID);// 0x355e954
	void ClientBulletLineTrace(Vector_NetQuantize BornPos, Vector_NetQuantize EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x355e81c
	void ClientAttackerHandleShootDamageTips(const ShootDamageTipsStr ShootDamageTipsStr);// 0x355e768
	void ClientAIHotValueDebugInfo(const float[] Info);// 0x355e6b8
	void ClearOnDeath(Controller* EventInstigater, Actor* DamageCauser);// 0x355e5fc
	void ClearHPUI();// 0x355e5e0
	void ClearClientJump();// 0x355e5cc
	bool CheckWeaponIsCurUsingWeapon(STExtraWeapon* CurWeapon);// 0x355e534
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x355e48c
	bool CheckPickWeaponCanAutoUse();// 0x355e44c
	bool CheckOnMoveablePlatform();// 0x355e414
	void CheckNeedReload(STExtraShootWeapon* OwnerShootWeapon, Actor* WeaponOwnerActor);// 0x355e358
	bool CheckIsWearingThoseClothes(out const int[] InClothIDList);// 0x355e28c
	bool CheckIsWearingThisCloth(int InClothID);// 0x355e1fc
	bool CheckIsValidEmoteIDBP(int EmoteIndex);// 0x355e164
	void CheckCharacterDelayHide();// 0x355e150
	bool CheckCanShovelInSpringState();// 0x355e110
	bool CheckCanAutoUseWeapon(STExtraWeapon* Weapon);// 0x355e078
	bool CheckBuffTarget(STBuff* Buff);// 0x355dfe0
	bool CheckBaseIsMoving();// 0x355dfa8
	bool CheckBaseIsMoveable();// 0x355df70
	void CharacterStateReset();// 0x355df5c
	static byte CharacterPoseStateToPoseType(byte InPoseState);// 0x355dee0
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x355ddec
	bool ChangeWearingAnimFinishedSuccessfully();// 0x355ddb4
	void ChangeVehWeaponCameraData(bool Enable);// 0x355dd30
	void ChangeRectiftAvatar(enum InSlotType, int InItemID, bool bWear);// 0x355dc34
	bool CanRegisterToPickUpList(Actor* Actor);// 0x355db9c
	bool CanPlayHitAnim();// 0x355db5c
	bool CanPaintDecal(int DecalId);// 0x355dacc
	bool CanHearWeaponLockSound();// 0x355da8c
	bool CanEnterWaterArea(enum[] disallowedState);// 0x355d94c
	bool CanEnterState(enum NewState);// 0x355d8bc
	bool CanChangeThrowMode();// 0x355d884
	void CancelFollow();// 0x355d870
	bool CanAutoUseWeaopon(int WeaponId);// 0x355d7d8
	void CalculateUseBuffFlow(int InBuffID);// 0x355d75c
	void CalculateTakeItemFlow(int SpesificID, int Count);// 0x355d6a8
	float CalculateTakeDamageFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x355d54c
	void CalculateShootPlayerHeadNum(int AddShootTimes, bool IsAI);// 0x355d484
	void CalculatePickUpItemFlowInstance(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam, uint64 InstanceID);// 0x355d2e4
	void CalculatePickUpItemFlow(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam);// 0x355d17c
	void CalculateHeathRecoverVal(float RecoverVal);// 0x355d0f8
	void CalculateHeathRecoverTimes();// 0x355d0dc
	void CalculateBuildingEnterFlow(int InBuildingID, int InCount);// 0x355d028
	void CalculateBornLandThrowGrenade(int ID);// 0x355cfac
	void CalculateBornLandGrenadeBattle(int ID, bool bHitOthers);// 0x355ceec
	void CalculateAreaUseItemFlow(int SpesificID, int Count);// 0x355ce38
	void CalculateActivityEventFlow(TLog_ActivityEventType InEventID, int InCount);// 0x355cd74
	void CalcKillDataDeferred(out const DamageCauserRecordData Record);// 0x355ccd8
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* MeshComp, Actor* BulletActor);// 0x355cbac
	void BulletChange();// 0x355cb4c
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x355c928
	void BroadcastFatalDamageInfoWrapper(UAECharacter* Causer, UAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadShot, int ResultHealthStatus, int PreviousHealthStatus, UAECharacter* WhoKillMe, int KillerKillCount);// 0x355c6bc
	void BroadcastFatalDamageInfo(UAECharacter* Causer, UAECharacter* Victim, ClientFatalDamageRecordData Data);// 0x355c524
	void BroadcastClientsSimulateVehicleDamageDie(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x355c29c
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x355c058
	void BroadcastClientsSimulateSTRadialDamage(float BaseDamage, const STRadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x355bd04
	void BroadcastClientsSimulateRadialDamageDie(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x355ba4c
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x355b7d4
	void BroadcastClientsSimulatePoisonDamageDie(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x355b54c
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x355b308
	void BroadcastClientsSimulatePointDamageDie(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x355b080
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x355ae3c
	void BroadcastClientsSimulateMeleeDamageDie(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x355aba0
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x355a948
	void BroadcastClientsSimulateFallingDamageDie(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x355a6c0
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x355a47c
	void BroadcastClientsSimulateDrowningDamageDie(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x355a1f4
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3559fb0
	void BroadcastClientsSimulateDotDamageDie(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x3559d24
	void BroadcastClientsSimulateDotDamage(float BaseDamage, const DotDamageEvent DotDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3559adc
	void BroadcastClientsSimulateBurningDamageDie(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x3559848
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x35595f8
	void BroadcastClientsSimulateAirAttackDamageDie(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte RespawnCount);// 0x355933c
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x35590c0
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x3558f60
	void BPResetCharacter();// 0x4033584
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x4033584
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x4033584
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x4033584
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x4033584
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4033584
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4033584
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x3558e10
	float BPCalFinalDamage(Controller* Killer, float FinalDamage, bool bHeadShoot, bool bBreathing);// 0x3558cb8
	void BP_SetInteractionEmoteSender(STExtraBaseCharacter* Sender);// 0x4033584
	void BP_ResetDataOnRespawn();// 0x3558c9c
	int BP_GetWeaponSyncTicket();// 0x3558c60
	enum BP_CheckWeaponSyncTicket(int InTicket);// 0x3558bcc
	void AutoScopeWhenPeek();// 0x3558bb8
	void AttachWeapon();// 0x3558ba4
	void AsyncAnimOpenDoorCallback(AnimationAsset* RetAsset);// 0x3558b28
	void AsyncAnimListOpenDoorCallback(AnimationAsset*[] RetAssetList);// 0x35589f4
	void ApplyLeaveVehicleVelocity(Vector InLeaveVelocity);// 0x3558978
	bool AllowState(enum State, bool withLog);// 0x355889c
	void AIStartFireOnServer(int BurstShootBulletsLimit, float BurstShootTimeLimit, byte ShootMode, Vector SimpleShootTarget);// 0x3558764
	void AddOneDamageCauserRecord(Controller* Causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x35585c8
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x35584d8
	void AddDamageRecord(Controller* Causer, float Damage, int HSChangeMargin, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x3558344
	void AddClientLeaveStateCheck(enum State, float Duration);// 0x355828c
	void ActivateParachuteFreeFallingShake(float FreeFallingShakeTime);// 0x3558210

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bForceOpenPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 1]
	delegate CharacterAnimEventDelegate;//[Offset: 0xba8, Size: 16]
	delegate CharacterCommonEventDelegate;//[Offset: 0xbb8, Size: 16]
	delegate OnPushDamageDynamicDelegate;//[Offset: 0xbf8, Size: 16]
	delegate OnTakeDamageDynamicDelegate;//[Offset: 0xc08, Size: 16]
	delegate OnClientPushDamageEvent;//[Offset: 0xc18, Size: 16]
	float Health;//[Offset: 0xcb8, Size: 4]
	float HealthMax;//[Offset: 0xcbc, Size: 4]
	float SignalHP;//[Offset: 0xcc0, Size: 4]
	float PreSignalHP;//[Offset: 0xcc4, Size: 4]
	float PreviousSignalHP;//[Offset: 0xcc8, Size: 4]
	float SignalHPMax;//[Offset: 0xccc, Size: 4]
	FString EnergyBuffListName;//[Offset: 0xcd0, Size: 16]
	float ResetSignalHP_FatalDamage;//[Offset: 0xce0, Size: 4]
	float ResetSignalHP_Rescued;//[Offset: 0xce4, Size: 4]
	int[] TypeIds;//[Offset: 0xce8, Size: 16]
	float SwimSpeedDynamicScale;//[Offset: 0xcf8, Size: 4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcfc, Size: 1]
	float threatenValue;//[Offset: 0xd00, Size: 4]
	float HurtParticleOffset;//[Offset: 0xd04, Size: 4]
	delegate DoOnNextFrameEnsureSpawnActorTriggerSuccess;//[Offset: 0xd18, Size: 16]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0xd28, Size: 8]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0xd30, Size: 16]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0xd40, Size: 16]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0xd50, Size: 8]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xd58, Size: 8]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 1]
	FString CharacterStateType;//[Offset: 0xd70, Size: 16]
	bool bEnableDebugServiceInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd80, Size: 1]
	delegate OnHandleSkillStartDelegate;//[Offset: 0xde8, Size: 16]
	delegate OnHandleSkillEndDelegate;//[Offset: 0xdf8, Size: 16]
	float SkillPromptStartTime;//[Offset: 0xe0c, Size: 4]
	float SkillPromptDuration;//[Offset: 0xe10, Size: 4]
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0xe28, Size: 8]
	STBuffSystemComponent* BuffSystem;//[Offset: 0xe30, Size: 8]
	UTSkillManagerComponent* SkillManager;//[Offset: 0xe38, Size: 8]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xe40, Size: 8]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0xe48, Size: 8]
	delegate StateEnterHandler;//[Offset: 0xe50, Size: 16]
	delegate StateLeaveHandler;//[Offset: 0xe60, Size: 16]
	delegate StateInterruptedHandlerBP;//[Offset: 0xe70, Size: 16]
	delegate OnSimulateCharacterStatesChange;//[Offset: 0xe80, Size: 16]
	uint64 CurrentStates;//[Offset: 0xea8, Size: 8]
	uint64 DisabledStates;//[Offset: 0xeb0, Size: 8]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0xeb8, Size: 16]
	float RencentStatesValidRange;//[Offset: 0xec8, Size: 4]
	<float,uint64> RencentStatesMap;//[Offset: 0xed0, Size: 80]
	delegate OnPawnStateDisabled;//[Offset: 0xf20, Size: 16]
	delegate OnPawnStateEnabled;//[Offset: 0xf30, Size: 16]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xf40, Size: 16]
	PartHitComponent* PartHitComponent;//[Offset: 0xf50, Size: 8]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf59, Size: 1]
	byte TeamNum;//[Offset: 0xf70, Size: 1]
	TickControlComponent* TickControlComp;//[Offset: 0xf78, Size: 8]
	float SpeedScale;//[Offset: 0xf88, Size: 4]
	float SpeedValue;//[Offset: 0xf8c, Size: 4]
	float Temperature;//[Offset: 0xf90, Size: 4]
	float TemperatureMax;//[Offset: 0xf94, Size: 4]
	float TemperatureMin;//[Offset: 0xf98, Size: 4]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb0, Size: 1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb1, Size: 1]
	CharacterMaterialComponent* CharacterMaterialComponent;//[Offset: 0xfc0, Size: 8]
	float VehicleDetailedTraceDist;//[Offset: 0xfc8, Size: 4]
	float SpringArmTraceDist;//[Offset: 0xfcc, Size: 4]
	<byte,CharacterBodyOffset> BodyRelativeOffsetConfig;//[Offset: 0xfd0, Size: 80]
	ActivitySyncData ActicitySyncData;//[Offset: 0x1020, Size: 28]
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1048, Size: 1]
	bool TriggerSkillEvent(class UTSkill SkillClass, byte SkillEventType);// 0x359df3c
	bool TriggerSkillCustomEvent(int SkillIndex, byte EventType);// 0x359de68
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x359dd8c
	bool TriggerEntryEventWithID_Implementation(int SkillID, byte SkillEventType);// 0x359dcb8
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x359dc20
	void TriggerCustomEvent_Implementation(byte EventType);// 0x359db9c
	bool SetSubAnimNodeAnimInstance(FName SubInstanceSlotName, AnimInstance* AnimInstance);// 0x359dad4
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x359da14
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x359d940
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x359d884
	void RPC_Client_SetServiceDebugInfo(FString Info);// 0x359d7d4
	bool ResetSubAnimNodeAnimInstance(FName SubInstanceSlotName);// 0x359d744
	void ResetPawnStateDisabled(enum State);// 0x359d6c8
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x359d5bc
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x359d474
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x359d35c
	void RemoveBaseBuffSystemComponent();// 0x359d348
	float PlayAnimMontageWithStartPos(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName, float StartPos);// 0x359d200
	void OnRep_UnmannedVehicleSyncData();// 0x359d1e4
	void OnRep_Temperature(float LastValue);// 0x359d160
	void OnRep_SignalHP(float PrevVal);// 0x359d0dc
	void OnRep_HealthMax();// 0x359d0c0
	void OnRep_Health(float PrevHealth);// 0x359d03c
	void OnRep_DisabledStates(uint64 prevStates);// 0x359cfb8
	void OnRep_CurrentStates(uint64 prevStates);// 0x359cf34
	void OnRep_ActivitySyncData();// 0x359cf20
	void OnLeaveStateForBp(enum State);// 0x4033584
	void OnHandleSkillStart__DelegateSignature(Character* OwnerCharacter, int SkillID);// 0x4033584
	void OnHandleSkillEnd__DelegateSignature(Character* OwnerCharacter, enum StopReason, int SkillID);// 0x4033584
	void OnEnterStateForBp(enum State);// 0x4033584
	void LeaveState(enum State);// 0x359ce9c
	bool IsPawnStateDisabledByWeapon(STExtraWeapon* Weapon, enum State);// 0x359cdc8
	bool IsPawnStateDisabled(enum State);// 0x359cd38
	bool IsCanDamageTeammate(out const DamageEvent DamageEvent);// 0x359cc90
	bool IsCanDamageSelf(out const DamageEvent DamageEvent);// 0x359cbe8
	bool IsAlive();// 0x359cba8
	bool HasState(enum State);// 0x359cb10
	bool HasBuffID(int BuffID);// 0x359ca78
	bool HasBuff(FName BuffName);// 0x359c9e0
	STExtraVehicleBase* GetUnmannedVehicle();// 0x359c9c4
	UTSkillManagerComponent* GetSkillManager();// 0x359c988
	float GetScaledSpeed();// 0x359c94c
	FString GetPlayerNameSafety();// 0x359c8a0
	STExtraPlayerController* GetPlayerControllerSafety();// 0x359c864
	enum GetObserverType();// 0x359c828
	enum[] GetDamageableGameObjectType();// 0x359c77c
	UTSkill* GetCurSkill();// 0x359c740
	STExtraVehicleBase* GetCurrentVehicle();// 0x359c704
	float GetBuffExpiry(FName BuffName);// 0x359c670
	float GetBuffDuration(int BuffID, int CauseSkillID);// 0x359c5a4
	UAEBlackboard* GetBuffBlackboard(int BuffID);// 0x359c518
	void FillBuffBlackboard(int BuffID, UAEBlackboardParameter[] ParamList);// 0x359c398
	int ExtractDamageParams(out const DamageEvent DamageEvent, Actor* DamagetCauser, out int DamagetType);// 0x359c264
	int ExtractDamageAdditionType(out const DamageEvent DamageEvent, Actor* DamagetCauser);// 0x359c17c
	bool EnterState(enum State);// 0x359c0e4
	bool DestroySubAnimInstance(AnimInstance* AnimInstance);// 0x359c054
	void DelayHidden();// 0x359c038
	AnimInstance* CreateSubAnimInstance(class AnimInstance InstanceClass, FName InstanceName);// 0x359bf74
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x359bdd4
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x359bca0
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x359bb6c
	void Client_ShowDebugCone(Vector InLocation, float InRadius, Color InColor, float InTime, Vector forwardDir, float ang);// 0x359b9c0
	void Client_ShowDebugCapsule(Vector InLocation, float InRadius, float Length, Color InColor, float InTime, Rotator Rot, float ang);// 0x359b7d0
	void Client_ShowDebugBox(Vector Center, Color InColor, float InTime, Vector Extent, Quat Rot);// 0x359b64c
	void ClearBuff();// 0x359b630
	void CheckSignalHP();// 0x359b61c
	bool CanBeAttackedByWeapon(int WeaponId);// 0x359b584
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x4033584
	void BPOnRespawned();// 0x4033584
	void BPOnRecycled();// 0x4033584
	bool AllowState(enum State, bool withLog);// 0x359b4a8
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x359b39c
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x359b254
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x359b0d8

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x868, Size: 4]
	FName PlayerType;//[Offset: 0x870, Size: 8]
	FString PlayerName;//[Offset: 0x878, Size: 16]
	FString Nation;//[Offset: 0x888, Size: 16]
	uint32 PlayerKey;//[Offset: 0x898, Size: 4]
	FString PlayerUID;//[Offset: 0x8a0, Size: 16]
	FString MLAIPlayerUID;//[Offset: 0x8b0, Size: 16]
	int TeamID;//[Offset: 0x8c0, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	int CampID;//[Offset: 0x8c8, Size: 4]
	int resID;//[Offset: 0x8cc, Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x8d0, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x8d8, Size: 16]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x8e8, Size: 48]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x918, Size: 32]
	int planeAvatarId;//[Offset: 0x938, Size: 4]
	int DyeDebugFlag;//[Offset: 0x93c, Size: 4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x940, Size: 16]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 1]
	bool bIsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951, Size: 1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x952, Size: 1]
	float RatingScore;//[Offset: 0x964, Size: 4]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x969, Size: 1]
	FString LuaFilePath;//[Offset: 0x978, Size: 16]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x988, Size: 80]
	void SetNetCullDistanceSquared(float fNetCullDistanceSquared);// 0x3c3f5f8
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x3c3f500
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x3c3f3e0
	void OnRep_UseWholeModel();// 0x3c3f3cc
	void OnRep_TeamID();// 0x3c3f3b8
	void OnRep_PlayerUID();// 0x3c3f3a4
	void OnRep_PlayerKey();// 0x3c3f388
	void OnRep_MLAIPlayerUID();// 0x3c3f374
	void OnRep_CampID();// 0x3c3f360
	bool IsDefaultCharType();// 0x3c3f320
	int GetTeamId();// 0x3c3f304
	FString GetPlayerKey();// 0x3c3f260
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x3c3f1b4
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x3c3f108
	ActorComponent*[] GetNonSimulatedComponents();// 0x3c3f05c
	ActorComponent*[] GetNonDedicatedComponents();// 0x3c3efb0
	int GetCampId();// 0x3c3ef7c
	void ClientAcknowledgeReconnection(uint32 Token);// 0x3c3eef8

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int[] AdditionIntData;//[Offset: 0x8, Size: 16]

--------------------------------
Class: GameModePlayerUpassInfo
	int updateTime;//[Offset: 0x0, Size: 4]
	int upassLevel;//[Offset: 0x4, Size: 4]
	int upassScore;//[Offset: 0x8, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	FString iconUrl;//[Offset: 0x10, Size: 16]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	int upassKeepBuy;//[Offset: 0x24, Size: 4]
	int upassCurValue;//[Offset: 0x28, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: GameModePlayerPetInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]
	int PetCfgId;//[Offset: 0x8, Size: 4]
	int[] PetAvatarList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0, Size: 4]
	int process;//[Offset: 0x4, Size: 4]
	FString ext_info;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 8]
	float MaxAttenuationRadius;//[Offset: 0x30, Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	float MinimumDuration;//[Offset: 0x38, Size: 4]
	float MaximumDuration;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x598, Size: 4]
	bool MeshAlwaysTickPoseAndRefreshBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59d, Size: 1]
	enum VehicleType;//[Offset: 0x59e, Size: 1]
	enum VehicleShapeType;//[Offset: 0x59f, Size: 1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x5a0, Size: 24]
	ItemDefineID AvatarDefaultCfgLOD;//[Offset: 0x5b8, Size: 24]
	MaterialInterface* BrokenMat;//[Offset: 0x5d0, Size: 8]
	ParticleSystem* AssetParticleExplosion;//[Offset: 0x5d8, Size: 40]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x600, Size: 8]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x608, Size: 80]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x658, Size: 80]
	Texture2D* VehicleIcon;//[Offset: 0x6a8, Size: 8]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x6b4, Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x6b8, Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bd, Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x6c0, Size: 4]
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	float FuelConsumptionModifierBoost;//[Offset: 0x6c8, Size: 4]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cd, Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ce, Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x6d0, Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d4, Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x6d8, Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dc, Size: 1]
	bool bRespawnNeedAdjustLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6dd, Size: 1]
	int MainMaterialIndex;//[Offset: 0x6e0, Size: 4]
	FText VehicleDisplayName;//[Offset: 0x6e8, Size: 24]
	bool ShowVehicleEnterButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	bool AdvanceVehicleShowAsStandardVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x701, Size: 1]
	Vector AirDropVelocity;//[Offset: 0x704, Size: 12]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x710, Size: 8]
	FName AirDropParachuteSocketName;//[Offset: 0x718, Size: 8]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 1]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x721, Size: 1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x722, Size: 1]
	float BackpackCapacity;//[Offset: 0x724, Size: 4]
	FName BackpackName;//[Offset: 0x728, Size: 8]
	FString[] BackpackSupportModeIDList;//[Offset: 0x730, Size: 16]
	int[] marr_MidIndexes;//[Offset: 0x740, Size: 16]
	float EnterVehicleCameraBlendTime;//[Offset: 0x750, Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x754, Size: 4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x758, Size: 4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75c, Size: 1]
	float StaticForceFixInterval;//[Offset: 0x760, Size: 4]
	float voiceCheckCD;//[Offset: 0x764, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x768, Size: 4]
	float VoiceCheckDis;//[Offset: 0x76c, Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x770, Size: 4]
	float voiceCheckSpeed;//[Offset: 0x774, Size: 4]
	bool EnableMapMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x794, Size: 1]
	Vector[] RouteList;//[Offset: 0x798, Size: 16]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x7a8, Size: 16]
	int AutoDrive_CurrentTargetWaypointIdx;//[Offset: 0x7b8, Size: 4]
	Vector AutoDriverTargetPosition;//[Offset: 0x7bc, Size: 12]
	Vector AutoDriverStartPosition;//[Offset: 0x7c8, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x7d8, Size: 16]
	delegate OnSeatDetached;//[Offset: 0x7e8, Size: 16]
	delegate OnSeatChange;//[Offset: 0x7f8, Size: 16]
	delegate OnStartResolveStuck;//[Offset: 0x808, Size: 16]
	delegate OnEndResolveStuck;//[Offset: 0x818, Size: 16]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	FString LuaFilePath;//[Offset: 0x830, Size: 16]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x844, Size: 4]
	bool IsCanVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	bool CanPushUpCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x849, Size: 1]
	bool CanSimulatePhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84a, Size: 1]
	uint16 ReplicatedFuelRatio;//[Offset: 0x84c, Size: 2]
	ParticleSystem* ParticleExplosion;//[Offset: 0x888, Size: 8]
	enum VehicleHealthState;//[Offset: 0x890, Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891, Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x892, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x893, Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 1]
	Vector BloodEffectScale;//[Offset: 0x898, Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x8a8, Size: 8]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x8b0, Size: 8]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x8b8, Size: 8]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x8c0, Size: 8]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x8c8, Size: 8]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x8d0, Size: 8]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x8d8, Size: 8]
	VehicleComponent*[] TickedComponents;//[Offset: 0x8e0, Size: 16]
	VehicleComponent*[] WeakTickedComponents;//[Offset: 0x8f0, Size: 16]
	bool bClearComponentTickWhenDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x900, Size: 1]
	float EnActiveTimeThreshold;//[Offset: 0x908, Size: 4]
	bool bFreezeNeedChangeVehiclePhysx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x914, Size: 1]
	float VehicleHitThreshold;//[Offset: 0x924, Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x928, Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x938, Size: 4]
	int EnableTickEffectsDevciveLevel;//[Offset: 0x93c, Size: 4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x948, Size: 16]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x959, Size: 1]
	bool bServerClearLinearVelocityZEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95a, Size: 1]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95b, Size: 1]
	float lastForwardSpeed;//[Offset: 0x95c, Size: 4]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x960, Size: 16]
	delegate OnClientExitVehicleEvent;//[Offset: 0x970, Size: 16]
	delegate OnClientChangeVehicleSeatEvent;//[Offset: 0x980, Size: 16]
	bool NeedCheckMovetoVehicleStraight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990, Size: 1]
	float VehicleEnterDistance;//[Offset: 0x994, Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x998, Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x99c, Size: 4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a9, Size: 1]
	float AsyncLoadResDistance;//[Offset: 0x9ac, Size: 4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x9b0, Size: 4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b9, Size: 1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x9bc, Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x9c0, Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x9c4, Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x9d0, Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x9dc, Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x9e0, Size: 4]
	float PeneTerrainProtectionInterval;//[Offset: 0x9ec, Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x9f0, Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x9f4, Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0xa30, Size: 8]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0xa38, Size: 8]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0xa40, Size: 8]
	AkAudioEvent* Sfx_Boost;//[Offset: 0xa48, Size: 8]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0xa50, Size: 8]
	AkAudioEvent* Sfx_Landing;//[Offset: 0xa58, Size: 8]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0xa60, Size: 8]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0xa68, Size: 8]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0xa70, Size: 8]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0xa78, Size: 8]
	AkAudioEvent* Sfx_Horn;//[Offset: 0xa80, Size: 8]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0xa88, Size: 8]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0xa90, Size: 8]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0xa98, Size: 8]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0xaa0, Size: 8]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0xaa8, Size: 8]
	AkAudioEvent* Sfx_EngineStart;//[Offset: 0xab0, Size: 8]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0xab8, Size: 8]
	AkAudioEvent*[] SfxArr_MusicLoops;//[Offset: 0xac0, Size: 16]
	float EngineSfxEndDelayTime;//[Offset: 0xad0, Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad4, Size: 1]
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0xad8, Size: 120]
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0xb50, Size: 120]
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0xbc8, Size: 120]
	STExtraVehicleSfxLoop MusicSfxLoop;//[Offset: 0xc40, Size: 120]
	AkComponent* SoundComponent;//[Offset: 0xcb8, Size: 8]
	float RPMSfxScale;//[Offset: 0xcec, Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0xcf0, Size: 4]
	float PlayMusicChance;//[Offset: 0xcfc, Size: 4]
	enum VehicleSyncTag;//[Offset: 0xd19, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xd1c, Size: 4]
	VehicleSimViewData SimulateViewData;//[Offset: 0xd30, Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0xd34, Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0xd38, Size: 8]
	bool bAddVehicleRotationChangeOnPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd40, Size: 1]
	delegate OnVehicleHealthStateChanged;//[Offset: 0xd80, Size: 16]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd90, Size: 1]
	float MinRideAngleDgree;//[Offset: 0xd94, Size: 4]
	bool bServerDetachApplyVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd98, Size: 1]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda4, Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda5, Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0xda8, Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0xdac, Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd0, Size: 1]
	float StuckMinImpulse;//[Offset: 0xdd4, Size: 4]
	float ContinuousStuckInterval;//[Offset: 0xdd8, Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0xddc, Size: 4]
	float StuckResovingTime;//[Offset: 0xde0, Size: 4]
	float ContinuousStuckTimer;//[Offset: 0xde8, Size: 4]
	float StuckResovingTimer;//[Offset: 0xdec, Size: 4]
	float PenePercent;//[Offset: 0xdf0, Size: 4]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe40, Size: 1]
	float RespawnWaitingTime;//[Offset: 0xe44, Size: 4]
	float RespawnTickInterval;//[Offset: 0xe48, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4c, Size: 1]
	bool bServerDetachEveryoneWhenRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xee8, Size: 16]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xef8, Size: 16]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xf08, Size: 16]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf48, Size: 1]
	bool EnableServerRecordWhenEnterCheatPunishMentNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf50, Size: 1]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0xf68, Size: 8]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0xf70, Size: 8]
	SkeletalMesh* MeshAssetRef;//[Offset: 0xf78, Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0xfa0, Size: 8]
	bool bOnPlayerActiveRegionsChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1078, Size: 1]
	bool bInActiveRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1079, Size: 1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x107a, Size: 1]
	Vector SeekLockOffset;//[Offset: 0x107c, Size: 12]
	FName SeekLockSocket;//[Offset: 0x1088, Size: 8]
	float ProduceSoundInterval;//[Offset: 0x1090, Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0x1098, Size: 16]
	BattleItemHandleBase* BindingHandle;//[Offset: 0x10a8, Size: 8]
	delegate OnEnterVehicle;//[Offset: 0x10b0, Size: 16]
	float OverlapCameraShakeInterval;//[Offset: 0x10d0, Size: 4]
	float OverlapDamageRate;//[Offset: 0x10d8, Size: 4]
	float OverlapImpulseRate;//[Offset: 0x10dc, Size: 4]
	float OverlapImpulseRateZ;//[Offset: 0x10e0, Size: 4]
	float MaxOverlapImpulse;//[Offset: 0x10e4, Size: 4]
	float MinOverlapSpeed;//[Offset: 0x10e8, Size: 4]
	float OverlapSimpleCharacterInterval;//[Offset: 0x10ec, Size: 4]
	float OverlapVehicleDamageRate;//[Offset: 0x10f4, Size: 4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0x10f8, Size: 4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0x1100, Size: 16]
	float EngineSoundCheckInterval;//[Offset: 0x1110, Size: 4]
	float EngineSoundMinCheckSpeed;//[Offset: 0x1118, Size: 4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0x111c, Size: 16]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112d, Size: 1]
	class AttrModifyComponent* AttrModifyCompClass;//[Offset: 0x1130, Size: 8]
	class STBuffSystemComponent* BuffSystemCompClass;//[Offset: 0x1138, Size: 8]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0x1140, Size: 8]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0x1148, Size: 8]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x1150, Size: 16]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0x1160, Size: 16]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0x1170, Size: 8]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0x1178, Size: 8]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1180, Size: 1]
	bool ForcePlayerUpdateAnimEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1181, Size: 1]
	int CandidateAvatarID;//[Offset: 0x1184, Size: 4]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1188, Size: 1]
	bool bEnableWeakTickComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1190, Size: 1]
	float WeakTickDoSomethingDuration;//[Offset: 0x1194, Size: 4]
	bool bSpawnedInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1198, Size: 1]
	IdeaDecalActor*[] AttachedDecalActors;//[Offset: 0x11a0, Size: 16]
	float MaxLinearVelocity;//[Offset: 0x11b0, Size: 4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b4, Size: 1]
	int TeamID;//[Offset: 0x11b8, Size: 4]
	int CampID;//[Offset: 0x11bc, Size: 4]
	float VehicleGoStraight;//[Offset: 0x11c0, Size: 4]
	bool DamageIgnoreWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c4, Size: 1]
	STExtraPlayerCharacter* ReqExchangeCharacter;//[Offset: 0x11c8, Size: 8]
	float ExchangeVehicleSeatInterval;//[Offset: 0x11d0, Size: 4]
	delegate OnHitSpecialEffectDelegate;//[Offset: 0x11d8, Size: 16]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0x11e8, Size: 8]
	EffectComponent* NewEffectComponent;//[Offset: 0x11f0, Size: 8]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f8, Size: 1]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f9, Size: 1]
	int WeaponReconnectIdx;//[Offset: 0x11fc, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x1200, Size: 8]
	enum UAVOperateState;//[Offset: 0x120c, Size: 1]
	float SingleMoveRate;//[Offset: 0x1210, Size: 4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0x1218, Size: 24]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0x1230, Size: 24]
	int CurrentVehicleStatesData;//[Offset: 0x1248, Size: 4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0x1260, Size: 16]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0x1270, Size: 16]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1280, Size: 1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0x1288, Size: 8]
	float TombBoxTraceLength;//[Offset: 0x1290, Size: 4]
	float PlayerOutAngleCosin;//[Offset: 0x1294, Size: 4]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1298, Size: 1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1299, Size: 1]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129a, Size: 1]
	float SleepVehicleTolerance;//[Offset: 0x129c, Size: 4]
	float StaticFixAngel;//[Offset: 0x12a0, Size: 4]
	float ClientAwakeVehicleTolerance;//[Offset: 0x12a4, Size: 4]
	float SleepVehicleTickTime;//[Offset: 0x12a8, Size: 4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0x12b0, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0x12b4, Size: 4]
	int CannotEnterTips;//[Offset: 0x12c0, Size: 4]
	bool CanLeaveVehicleVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c4, Size: 1]
	float LeaveVehicleVelocity;//[Offset: 0x12c8, Size: 4]
	int CannotLeaveTips_HighSpeed;//[Offset: 0x12cc, Size: 4]
	int CannotDriveTips;//[Offset: 0x12d0, Size: 4]
	delegate VehicleBeforeWheelDestroy;//[Offset: 0x12d8, Size: 16]
	Vector AttachedRelLoc;//[Offset: 0x12e8, Size: 12]
	Actor* AttachedActor;//[Offset: 0x12f8, Size: 8]
	int HasAttachedActorTips;//[Offset: 0x1300, Size: 4]
	bool bEnableTickSafeSpawnInternalNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130c, Size: 1]
	VehicleAIComponent* VehicleAIComponent;//[Offset: 0x1310, Size: 8]
	float LandTraceMaxHeight;//[Offset: 0x1318, Size: 4]
	FName ChassisBoneName;//[Offset: 0x1320, Size: 8]
	byte CameraDataType;//[Offset: 0x1328, Size: 1]
	bool ShowUpDownGUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1329, Size: 1]
	bool ShowHeightUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132a, Size: 1]
	bool ShowFuelCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132b, Size: 1]
	bool ShowSeatUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132c, Size: 1]
	bool bEnableMoveForwardInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132d, Size: 1]
	void WeakTick(float DeltaTime);// 0x3650ca4
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x3650c28
	void UpdateHeightToLand();// 0x3650c14
	void UnregisterComponentWeakTick(VehicleComponent* InComponent);// 0x3650b98
	void UnregisterComponentTick(VehicleComponent* InComponent);// 0x3650b1c
	void TickVehicleHealthState();// 0x3650b00
	void TickEnableAvatarOutline();// 0x3650aec
	void StopEngine();// 0x3650ad0
	void StopAutoDriving();// 0x3650abc
	void StartFireSimple(byte ShootMode);// 0x3650a40
	void StartEngine();// 0x3650a24
	void StartAirDrop();// 0x3650a10
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x365096c
	void ShowBoostingEffect(bool bShow);// 0x4033584
	bool ShouldUseSpecialHitEffect();// 0x365092c
	enum ShootCharacterVertify(out const BulletHitInfoUploadData ShootData, STExtraShootWeapon* Weapon);// 0x3650814
	void SetWeaponReconnectIdx(int ReconnectOpIndex);// 0x3650790
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x365068c
	void SetVehicleReplicatedFuelRatio(float InFuel);// 0x3650610
	void SetUsingHorn(bool bUse);// 0x365058c
	void SetUAVOperateState(enum NewState);// 0x3650510
	void SetSpawnedInReady(bool bFlag);// 0x365048c
	void SetSimulatePhysics(bool bSimulate);// 0x3650408
	void SetRegionBasedNetConsideration(bool bUseRegion);// 0x3650384
	void SetPhysActive(bool bActive, float Delay);// 0x36502bc
	void SetJoystickMoveVelocity(Vector2D moveVelocity);// 0x3650244
	void SetHandBrake(float Rate);// 0x36501c0
	void SetDefaultMusic(out const FString[] InMusic);// 0x36500ac
	void SetBoosting(bool bEnalbed);// 0x3650020
	void SetAirControlF(float Rate);// 0x364ff9c
	void SetAirControlB(float Rate);// 0x364ff18
	void ServerSetUsingHorn(bool bUse);// 0x364fe54
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x364fd90
	void ServerSetBoosting(bool bEnalbed);// 0x364fccc
	void ServerSetAttachedActor(Actor* InAttachTarget);// 0x364fc50
	void ServerSetAirControlF(float Rate);// 0x364fba0
	void ServerSetAirControlB(float Rate);// 0x364faf0
	void ServerResetToPosition(Vector NewLocation, Rotator NewRotation);// 0x364fa30
	void ServerDetachEveryoneFromSeat(bool bMustExit, bool bApplyVehicleVelocity);// 0x364f960
	void SendVehicleInAirChangedTimeToServer();// 0x364f900
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x364f850
	void SendCreateDamage(STExtraSimpleCharacter* Target);// 0x364f7a0
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x364f784
	void SafeSleepVehicle();// 0x364f770
	void RestartAntiCheat();// 0x364f75c
	void ResetJoystickMove();// 0x364f748
	void RequestChangeVehicleAvatar();// 0x364f6e8
	bool RemoveBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x364f5dc
	bool RemoveBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x364f494
	void RemoveAntiStuckBox();// 0x364f480
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x364f404
	void RegisterComponentWeakTick(VehicleComponent* InComponent);// 0x364f388
	void RegisterComponentTick(VehicleComponent* InComponent);// 0x364f30c
	void RecordValidTransform();// 0x364f2f8
	void RecordInAirTime();// 0x364f2e4
	void ProcessAvatarOutline();// 0x364f2c8
	void PrintStats();// 0x364f2ac
	bool PreChangeVehicleFPPAvatar();// 0x364f274
	bool PreChangeVehicleBrokenAvatar();// 0x364f23c
	bool PreChangeVehicleAvatar(int InAvatarID, int InAdvanceAvatarID);// 0x364f174
	void PostLoadFPPMesh();// 0x364f158
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x364f0dc
	bool PawnHasState(enum PawnState);// 0x364f044
	void OnUserSwitchWeapon(STExtraBaseCharacter* InUser, byte Slot);// 0x364ef84
	void OnUpdateEffects();// 0x4033584
	void OnStopFire();// 0x4033584
	void OnSkeletalMeshSleep(PrimitiveComponent* WakingComponent, FName BoneName);// 0x364eed0
	void OnSkeletalMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x364ee1c
	void OnSetTailLightValue(float LightValue);// 0x4033584
	void OnServerPlayerChangeVehicleSeat(enum LastSeatType, enum NewSeatType);// 0x4033584
	void OnRep_VehicleSyncFlag();// 0x364ee08
	void OnRep_VehicleHealthState();// 0x364edf4
	void OnRep_TeamID();// 0x364edd8
	void OnRep_SimulateViewData();// 0x364edc4
	void OnRep_SimulateFreeCameraViewData();// 0x364edb0
	void OnRep_ServerLastReplicatedServer();// 0x364ed9c
	void OnRep_ReplicatedFuelRatio();// 0x364ed88
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x364ed74
	void OnRep_IsForbidNightVehicle();// 0x364ed60
	void OnRep_IsEngineStarted();// 0x364ed4c
	void OnRep_IsBoosting();// 0x364ed38
	void OnRep_IsAirdroppingVehicle();// 0x364ed24
	void OnRep_FrozenStatic();// 0x364ed10
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x364ec94
	void OnRep_CandidateAvatar();// 0x4033584
	void OnRep_CampID();// 0x364ec80
	void OnRep_AttachedRelLoc();// 0x364ec6c
	void OnRep_AttachedActor();// 0x364ec58
	void OnPlayerReqExitVehicle(STExtraPlayerCharacter* Player);// 0x364ebd4
	void OnPlayerExitVehicle(bool IsDriver, const STExtraPlayerCharacter* Character);// 0x4033584
	void OnPlayerEnterVehicle(bool IsSuccess, enum SeatType);// 0x4033584
	void OnMeshLoaded(SoftObjectPath AssetRef);// 0x364ea98
	void OnFireBeginOverlapEvent(Actor* OtherActor);// 0x364ea1c
	void OnEngineStop();// 0x4033584
	void OnEngineStart();// 0x4033584
	void OnBoostingChanged();// 0x4033584
	void NotifyServerProjectileBulletImpact(out const ExplosionProjectileHitInfo InExpProjectileInfo, ProjectileBulletBase* Bullet);// 0x364e944
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x364e850
	void LoadFPPVehicleModel();// 0x364e83c
	bool IsVehicleWarVehicle();// 0x364e7fc
	bool IsValidYawInput(float YawInput, VehicleSpringArmComponent* SpringArm);// 0x364e728
	bool IsUsingFPPModel();// 0x364e6f0
	bool IsUCAV();// 0x364e6cc
	bool IsUAV();// 0x364e6a4
	bool IsSpawnedInReady();// 0x364e684
	bool IsSimulatePhysics();// 0x364e64c
	bool IsNotInWater();// 0x364e60c
	bool IsMotorbike();// 0x364e5d4
	bool IsInMidAir();// 0x364e594
	bool IsInBuffSpeedState();// 0x364e574
	bool IsHelicopter();// 0x364e53c
	bool IsEntirelyUnderWater();// 0x364e504
	bool IsElectronic_Failure();// 0x364e4cc
	bool IsClient_WeaponOwner();// 0x364e48c
	bool IsCanEnter();// 0x364e44c
	bool IsAutoDriving();// 0x364e414
	bool IsArmedVehicle();// 0x364e3dc
	bool IsAmphibiousVehicle();// 0x364e3a4
	bool IsAlive();// 0x364e364
	bool IsAirVehicle();// 0x364e324
	bool IsAI();// 0x364e2e4
	bool IsActiveEffect(FName EffectName);// 0x364e254
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse);// 0x364e140
	SkeletalMeshComponent* InitSkeletalMesh(FName SubobjectName);// 0x364e0b4
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x364dfec
	bool HasSkillID(int SkillID);// 0x364df5c
	bool HasBuffID(int BuffID);// 0x364dec4
	bool HasAutoDriveTarget();// 0x364de8c
	void HandlePlayerAttachedToVehcicle(STExtraBaseCharacter* Player);// 0x364de08
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x364dd84
	void HandleOnVehicleAvatarDataCopied();// 0x364dd70
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x364dc74
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x364db00
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x364da04
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x364d870
	void HandleMoveAntiShootVerifyMiss();// 0x364d854
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x364d7d0
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x364d74c
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x364d6d0
	Actor* GetWeaponUserConst();// 0x364d694
	Actor* GetWeaponUser();// 0x364d658
	int GetWeaponReconnectIdx();// 0x364d61c
	WeaponOwnerProxy* GetWeaponOwnerProxy();// 0x364d5e0
	uint32 GetWeaponOwnerPlayerKey();// 0x364d5a4
	float GetWeaponOwnerPawnHealth();// 0x364d568
	WeaponManagerBaseComponent* GetWeaponManagerBase();// 0x364d52c
	WeaponManagerComponent* GetWeaponManager();// 0x364d4f0
	SkeletalMeshComponent* GetVehicleWheelMesh();// 0x364d4bc
	VehicleShootWeapon* GetVehicleWeapon(int SeatId, int WeaponListID);// 0x364d3f8
	VehicleSyncComponent* GetVehicleSync();// 0x364d3dc
	VehicleSpringArmComponent* GetVehicleSpringArm();// 0x364d3a8
	int GetVehicleSkinItemID();// 0x364d374
	VehicleSeatComponent* GetVehicleSeats();// 0x364d358
	float GetVehicleReplicatedFuelRatio();// 0x364d324
	VehicleDamageComponent* GetVehicleDamage();// 0x364d308
	VehicleCommonComponent* GetVehicleCommon();// 0x364d2ec
	Vector GetVehicleCenter();// 0x364d2b4
	VehicleAvatarComponent* GetVehicleAvatar();// 0x364d280
	VehicleAIComponent* GetVehicleAIComponent();// 0x364d264
	VehicleAdvanceAvatarComponent* GetVehicleAdvanceAvatar();// 0x364d230
	bool GetUsingHorn();// 0x364d1f8
	int GetTeamId();// 0x364d1c4
	MaterialInstanceDynamic* GetTailLightDIM();// 0x364d190
	AkComponent* GetSoundComponent();// 0x364d174
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x364d0a4
	Vector GetRotationInputDir();// 0x364d064
	float GetReloadAllWeaponTime();// 0x364d030
	Actor*[] GetQueryIgnoreActors();// 0x364cf84
	SkeletalMeshComponent* GetMesh();// 0x364cf68
	LagCompensationComponentBase* GetLagCompensationComponent();// 0x364cf2c
	BattleItemHandleBase* GetItemHandle();// 0x364cf10
	bool GetIsPhysSleep();// 0x364ced0
	bool GetIsOpenVertify();// 0x364ceb0
	Vector GetGunOwnerHeadLocation();// 0x364ce70
	MaterialInstanceDynamic* GetFrontLightDIM();// 0x364ce3c
	float GetForwardSpeed();// 0x364ce00
	STExtraPlayerCharacter* GetFirstPassenger();// 0x364cdcc
	MaterialInstanceDynamic* GetFFPLightDIM();// 0x364cd98
	SkeletalMeshComponent* GetEquipWeaponAttachMesh();// 0x364cd5c
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x364cd40
	STExtraPlayerCharacter* GetDriver();// 0x364cd0c
	uint64 GetCurrentStatesInterface();// 0x364ccd0
	void GetCurrentOverlapActors(out STExtraSimpleCharacter*[] Result);// 0x364cc18
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x364ca94
	int GetCampId();// 0x364ca60
	BuoyancyForceComponent* GetBuoyancyForce();// 0x364ca44
	Vector GetBoxExtent();// 0x364ca0c
	int GetAvatarId();// 0x364c9d8
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x364c920
	void GetAllSkeletalMeshList(out SkeletalMeshComponent*[] OutList);// 0x364c868
	void ExitFPPVehicle();// 0x364c854
	void EnterFPPVehicle();// 0x364c840
	void EnableWeakTick(bool Enabled);// 0x364c7b4
	void EnablePlayMusic(bool InEnable);// 0x364c734
	void EnableMoveForwardInput(bool InEnable);// 0x364c6b0
	void EnableAvatarOutline(enum OutlineType);// 0x364c634
	void DestroyAndRespawnSelf();// 0x364c620
	void DeactiveEffect(FName EffectName);// 0x364c5a4
	void CreateAntiStuckBox();// 0x364c590
	void ClientPlayVehicleCameraShake();// 0x364c530
	void ClientFeedbackPointDamage(Actor* DamageCauser);// 0x364c480
	void ClearInputs();// 0x364c46c
	void ClearDecals();// 0x364c458
	void ClearBuff();// 0x364c43c
	void ClearAllInputState();// 0x364c420
	void ClearAllComponentWeakTick();// 0x364c40c
	void ClearAllComponentTick();// 0x364c3f8
	bool CheckHaveSpecialAttachActor();// 0x364c3b8
	void CheckEnableAvatarOutline();// 0x4033584
	bool CheckAllWeaponIsReadyForFire();// 0x364c380
	void ChangeVehicleAvatar(STExtraPlayerController* MainPlayerController);// 0x364c2fc
	void ChangeAssetBy(BackpackVehicleAvatarHandle* InAvatarHandle);// 0x364c280
	bool CanVehicleJump();// 0x364c248
	bool CanPushUpCharacterWhenPenetrating();// 0x364c22c
	bool CanLeaveVehicle();// 0x364c1ec
	bool CanDrive(STExtraPlayerCharacter* Character);// 0x364c154
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x364c0bc
	bool CanAutoDrivingNoDriver();// 0x364c084
	bool CanAutoDriving();// 0x364c04c
	void CallbackLoadedParticleExplosion();// 0x364c038
	void BroadCastEnterVehicleEvent(bool IsSucc, enum SeatType);// 0x364bf70
	void BroadcastClientVehicleExplosionEffect();// 0x364bf54
	void BPPostLoadFPPMesh();// 0x4033584
	void BPPlayOverlapDamageCameraShake();// 0x4033584
	void BPOnSetAttachedActor(Actor* InAttachTarget);// 0x364bed0
	void AutoLoadEffect();// 0x364bebc
	bool ApplyAnimation();// 0x364be84
	void AfterBeginPlay();// 0x4033584
	void AddHealthSafety(float AddVal);// 0x364be00
	bool AddBuffBySkill(int SkillID, int LayerCount, Actor* Causer);// 0x364bcf4
	bool AddBuffByID(int BuffID, Actor* Causer, int LayerCount, int CauserSkillID);// 0x364bbac
	void ActiveEffectAsync(FName EffectName);// 0x364bb30
	void ActiveEffect(FName EffectName);// 0x364bab4

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 4]
	int TypeSpecificID;//[Offset: 0x4, Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	uint64 InstanceID;//[Offset: 0x10, Size: 8]

--------------------------------
Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0, Size: 40]
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	Vector Scale;//[Offset: 0x40, Size: 12]
	FName AttachSocketName;//[Offset: 0x50, Size: 8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ValidDeviceLevel;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 8]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	float VaildExitVehicleHeight;//[Offset: 0x1d4, Size: 4]
	STExtraVehicleSeat[] Seats;//[Offset: 0x1d8, Size: 16]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0x1e8, Size: 16]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0x1f8, Size: 16]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0x208, Size: 16]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0x218, Size: 16]
	delegate OnSeatOccupiersChanged;//[Offset: 0x228, Size: 16]
	delegate OnSeatSocketChanged;//[Offset: 0x238, Size: 16]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x248, Size: 16]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x258, Size: 16]
	float LeaveVehicleVelocityScale;//[Offset: 0x268, Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	byte[] SeatGUITypes;//[Offset: 0x278, Size: 16]
	delegate OnSeatAttached;//[Offset: 0x288, Size: 16]
	delegate OnSeatDetached;//[Offset: 0x298, Size: 16]
	delegate OnSeatChanged;//[Offset: 0x2a8, Size: 16]
	delegate OnUpdateSeatGUI;//[Offset: 0x2b8, Size: 16]
	FString LatestDriverPlayerName;//[Offset: 0x2c8, Size: 16]
	delegate OnDriverChange;//[Offset: 0x2d8, Size: 16]
	FString LatestDriverPlayerUID;//[Offset: 0x2e8, Size: 16]
	int MaxInUseSeatGUIIndex;//[Offset: 0x2fc, Size: 4]
	STExtraPlayerController* RemoteController;//[Offset: 0x308, Size: 8]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x318, Size: 8]
	void TestReleaseSeatAnim();// 0x3714ed8
	void SeatOccupiersChangedDelegate__DelegateSignature();// 0x4033584
	void ReAttachCharacterOnSeat(STExtraBaseCharacter* InCharacter);// 0x3714e5c
	void ReAttachAllCharacters();// 0x3714e48
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x3714d94
	void OnSeatSocketChanged__DelegateSignature();// 0x4033584
	void OnRep_VehicleWeapons();// 0x3714d80
	void OnRep_Occupiers();// 0x3714d6c
	void OnRep_Attachments();// 0x3714d58
	bool IsSeatIndexAvailable(int SeatIndex);// 0x3714cc8
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x3714c38
	bool IsSeatAvailable(enum SeatType);// 0x3714ba8
	bool IsDriver(STExtraBaseCharacter* InCharacter);// 0x3714b18
	bool HasCharacter(const STExtraBaseCharacter* Character);// 0x3714a88
	int GetSeatNum();// 0x3714a6c
	int GetSeatIndexBySocket(out const FName AttachSocket);// 0x37149d0
	bool GetPlayerSeatInfo(STExtraPlayerCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x371481c
	STExtraBaseCharacter* GetPassenger(int SeatIndex);// 0x3714790
	int GetInUseSeatNum();// 0x371475c
	STExtraBaseCharacter* GetFirstSeatCharacterBySeatType(enum SeatType);// 0x37146d0
	STExtraPlayerCharacter* GetFirstPassenger();// 0x371469c
	int GetDriverSeatIndex();// 0x3714668
	STExtraPlayerCharacter* GetDriver();// 0x3714634
	int GetChracterSeatIndex(STExtraBaseCharacter* Character);// 0x37145a8
	int GetAvailableSeatIndex(enum SeatType);// 0x371451c
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x3714434
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x3714374
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int NewIndex);// 0x371424c
	void ChangeCharacterSeatSocket(out const FName[] InSeatSockets);// 0x3714194

--------------------------------
Class: VehicleComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: LuaActorComponent.ActorComponent.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x170, Size: 80]
	FString LuaFilePath;//[Offset: 0x1c0, Size: 16]
	void UnRegistLuaTick();// 0x6a07fd8
	void RegistLuaTick(float TickInterval);// 0x6a07f5c

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0, Size: 1]
	FName AnimCompTagName;//[Offset: 0x8, Size: 8]
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 8]
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 8]
	byte OccupyMovementMode;//[Offset: 0x20, Size: 1]
	byte HoldWeaponType;//[Offset: 0x21, Size: 1]
	byte SeatSpecialType;//[Offset: 0x22, Size: 1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool NarrowSeatNeedUseCommomAimAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int GUIDisplayIndex;//[Offset: 0x28, Size: 4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x30, Size: 8]
	Rotator CharRotVsVehiRot;//[Offset: 0x38, Size: 12]
	byte SeatSideType;//[Offset: 0x44, Size: 1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x48, Size: 16]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x60, Size: 8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	float Radius;//[Offset: 0x6c, Size: 4]
	float HalfHeight;//[Offset: 0x70, Size: 4]
	Transform CollisionOffset;//[Offset: 0x80, Size: 48]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]

--------------------------------
Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 8]
	Vector2D ViewYawLimit;//[Offset: 0x10, Size: 8]
	Vector2D ViewPitchLimit;//[Offset: 0x18, Size: 8]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	float MuzzleDirTor;//[Offset: 0x24, Size: 4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float MuzzleVehicleTore;//[Offset: 0x2c, Size: 4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	Box MuzzleRangeBox;//[Offset: 0x34, Size: 28]
	float DistTorSquared;//[Offset: 0x50, Size: 4]

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.Actor.Object
	float RotateSpeedOnVehicle;//[Offset: 0x1128, Size: 4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112c, Size: 1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112d, Size: 1]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112e, Size: 1]
	FName VehWeaponBindSocket;//[Offset: 0x1130, Size: 8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0x1138, Size: 28]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1154, Size: 1]
	FName OnBlockMuzzleSocket;//[Offset: 0x1158, Size: 8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0x1160, Size: 8]
	AnimSequence* VehicleWeaponReload;//[Offset: 0x1168, Size: 8]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0x1170, Size: 8]
	float VehicleWeaponReloadRate;//[Offset: 0x1178, Size: 4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0x1180, Size: 8]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1188, Size: 1]
	FName VehicleWeaponGripSocketR;//[Offset: 0x1190, Size: 8]
	FName VehicleWeaponGripSocketL;//[Offset: 0x1198, Size: 8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a0, Size: 1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a1, Size: 1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a2, Size: 1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a3, Size: 1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a4, Size: 1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b4, Size: 1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b5, Size: 1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b6, Size: 1]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b9, Size: 1]
	FName CharacterSocket;//[Offset: 0x11c0, Size: 8]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c8, Size: 1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c9, Size: 1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ca, Size: 1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11cb, Size: 1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11cc, Size: 1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11cd, Size: 1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0x11d0, Size: 8]
	FName GrenadePredictLineSocket;//[Offset: 0x11d8, Size: 8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0x11e0, Size: 8]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e8, Size: 1]
	float FuelConsumptionRate;//[Offset: 0x11ec, Size: 4]
	float StartReloadDelayTime;//[Offset: 0x1208, Size: 4]
	float EndReloadDelayTime;//[Offset: 0x1218, Size: 4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0x1220, Size: 8]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1228, Size: 1]
	Actor* OwnerActor;//[Offset: 0x1230, Size: 8]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x1238, Size: 8]
	int BulletTypeTipMsgID;//[Offset: 0x1244, Size: 4]
	int NotEnoughEnergyTipMsgID;//[Offset: 0x1248, Size: 4]
	int CantUseFireWeaponTipMsgID;//[Offset: 0x124c, Size: 4]
	void StartReloadAnim();// 0x3718204
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x37180f8
	void OnVehicleExplode();// 0x37180dc
	void OnRep_OwnerActor();// 0x37180c8
	void NetMulticastReturnBullets();// 0x3718068
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x3717f24
	void K2_SetSpecialMeshHide(bool isHide);// 0x4033584
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x4033584
	void K2_OnReturnBullets();// 0x4033584
	MeshComponent* K2_GetWeaponMeshComp();// 0x4033584
	void HnadleScopeInAfterReload();// 0x3717f10
	void HandleWeaponStateChanged(byte LastState, byte NewState);// 0x3717e58
	void HandleWeaponStartReload();// 0x3717e44
	void HandleWeaponEndReload();// 0x3717e30
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x3717dac
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x3717d24
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x3717cf0
	STExtraVehicleBase* GetOwnerVehicle();// 0x3717cbc
	Rotator GetOwnerCameraRotator();// 0x3717c84
	Transform GetCharacterSocketTransform();// 0x3717c30
	void DoAutoReloadVehicleWeapon(STExtraShootWeapon* ShootWeapon);// 0x3717bb4
	bool CheckIsAutonomousOrObTarget();// 0x3717b7c
	void AfterReloadEnd();// 0x3717b68

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad0, Size: 1]
	bool bUseAdjusetImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad1, Size: 1]
	float voiceCheckCD;//[Offset: 0xad4, Size: 4]
	float voiceCheckShowCD;//[Offset: 0xad8, Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc, Size: 1]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0xaf8, Size: 60]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb35, Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0xb38, Size: 16]
	delegate OnCurBulletChange;//[Offset: 0xb48, Size: 16]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0xb58, Size: 16]
	delegate OnStartFireDelegate;//[Offset: 0xb68, Size: 16]
	delegate OnStopFireDelegate;//[Offset: 0xb78, Size: 16]
	delegate OnWeaponShootDelegate;//[Offset: 0xb88, Size: 16]
	delegate OnWeaponShootHitDelegate;//[Offset: 0xb98, Size: 16]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xba8, Size: 16]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xbb8, Size: 16]
	delegate OnWeaponEquipDelegate;//[Offset: 0xbc8, Size: 16]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0xbd8, Size: 16]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0xbe8, Size: 16]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0xbf8, Size: 16]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0xc08, Size: 16]
	delegate OnBulletNumChangeDelegate;//[Offset: 0xc18, Size: 16]
	delegate OnShootIntervalModeChangeDelegate;//[Offset: 0xc28, Size: 16]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0xc48, Size: 16]
	delegate OnWeaponDurabilityChangedDelegate;//[Offset: 0xc58, Size: 16]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0xc68, Size: 16]
	delegate OnShootWeaponAutoDrop;//[Offset: 0xc78, Size: 16]
	delegate OnWeaponDropStart;//[Offset: 0xc88, Size: 16]
	delegate OnWeaponDropFinished;//[Offset: 0xc98, Size: 16]
	delegate OnBulletLaunch;//[Offset: 0xca8, Size: 16]
	delegate OnBulletImpact;//[Offset: 0xcb8, Size: 16]
	delegate OnBulletImpactFX;//[Offset: 0xcc8, Size: 16]
	delegate OnSpawnBulletImpactFX;//[Offset: 0xcd8, Size: 16]
	delegate OnChangeShootType;//[Offset: 0xce8, Size: 16]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0xcf8, Size: 8]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0xd00, Size: 8]
	BulletTrackComponent* CachedBulletTrackComponent;//[Offset: 0xd08, Size: 8]
	delegate OnScopeIn;//[Offset: 0xd10, Size: 16]
	delegate OnScopeOut;//[Offset: 0xd20, Size: 16]
	delegate OnScopeInContinue;//[Offset: 0xd30, Size: 16]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0xd40, Size: 8]
	MultiBulletComponent* MultiBulletComponent;//[Offset: 0xd48, Size: 8]
	GrenadeLaunchComponent* GrenadeLaunchComponent;//[Offset: 0xd50, Size: 8]
	FillGasComponent* FillGasComponent;//[Offset: 0xd58, Size: 8]
	int CurBulletNumInClip;//[Offset: 0xd60, Size: 4]
	BulletInClip CurBulletInClip;//[Offset: 0xd68, Size: 24]
	int CurMaxBulletNumInOneClip;//[Offset: 0xd80, Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0xd84, Size: 4]
	byte ShootMode;//[Offset: 0xd88, Size: 1]
	byte CurShootType;//[Offset: 0xd89, Size: 1]
	int CurShootTotalType;//[Offset: 0xd8c, Size: 4]
	float VoiceCheckDis;//[Offset: 0xd90, Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0xd94, Size: 4]
	float nowVoiceCheckDis;//[Offset: 0xd98, Size: 4]
	Vector ShootTargetLoc;//[Offset: 0xd9c, Size: 12]
	int AngledSightID;//[Offset: 0xdb4, Size: 4]
	byte TraceChannel;//[Offset: 0xdb8, Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0xdbc, Size: 12]
	float LastImpactEffectTime;//[Offset: 0xdc8, Size: 4]
	int CurBurstShootIndex;//[Offset: 0xdd0, Size: 4]
	Transform BoltActionTransform;//[Offset: 0xde0, Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe10, Size: 1]
	int ClientShootTimes;//[Offset: 0xe14, Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0xe18, Size: 8]
	AkAudioEvent* LoadBulletSound;//[Offset: 0xe20, Size: 8]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xe28, Size: 8]
	AkAudioEvent* MagazineINSound;//[Offset: 0xe30, Size: 8]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xe38, Size: 8]
	AkAudioEvent* PullBoltSound;//[Offset: 0xe40, Size: 8]
	Vector BulletDecalScale;//[Offset: 0xe48, Size: 12]
	BulletInClip CurBulletInClipOnSimulatedClients;//[Offset: 0xe58, Size: 24]
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe71, Size: 1]
	float DropDuration;//[Offset: 0xe74, Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xe78, Size: 8]
	float AIShootLoudness;//[Offset: 0xe80, Size: 4]
	float AIShootStartAttenuationDis;//[Offset: 0xe84, Size: 4]
	float AIShootMaxDis;//[Offset: 0xe88, Size: 4]
	float AISilenceShootLoudness;//[Offset: 0xe8c, Size: 4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0xe90, Size: 4]
	float AISilenceShootMaxDis;//[Offset: 0xe94, Size: 4]
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe98, Size: 1]
	byte CurShootWeaponState;//[Offset: 0xe99, Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0xea8, Size: 8]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0xeb0, Size: 8]
	ShootWeaponAutoTestHandle* AutoTestHandle;//[Offset: 0xeb8, Size: 8]
	int md_MaxBulletArraySize;//[Offset: 0xec0, Size: 4]
	enum CurShootIntervalMode;//[Offset: 0xec4, Size: 1]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec5, Size: 1]
	bool IsEquipACCore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec6, Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec7, Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0xecc, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0xed8, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0xee4, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0xef0, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0xefc, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0xf08, Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0xf14, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0xf20, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xf2c, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xf38, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xf44, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xf50, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xf5c, Size: 12]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0xf68, Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf74, Size: 1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0xf80, Size: 16]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0xf90, Size: 8]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0xf98, Size: 16]
	int[] AttachedAttachmentID;//[Offset: 0xfa8, Size: 16]
	int[] DefaultAttachedAttachmentID;//[Offset: 0xfb8, Size: 16]
	uint32 ShootID;//[Offset: 0xfc8, Size: 4]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0xfd0, Size: 8]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0xfd8, Size: 16]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfec, Size: 1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfed, Size: 1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1090, Size: 1]
	bool bUnlimitBulletWhenStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e8, Size: 1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f0, Size: 1]
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f1, Size: 1]
	delegate OnSetRearSightIndexDelegate;//[Offset: 0x10f8, Size: 16]
	int WeaponDurability;//[Offset: 0x1108, Size: 4]
	int8 CurRearSightIndex;//[Offset: 0x110c, Size: 1]
	bool bEquipmentModifierOnlyRepOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1114, Size: 1]
	int UpgradeInfoID;//[Offset: 0x1118, Size: 4]
	bool bUseNewUploadData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111c, Size: 1]
	void UpdateComponentTick();// 0x3628498
	bool StopFireFilter();// 0x3628458
	void StopFire(byte ToState);// 0x36283d4
	void StopFillGas();// 0x36283c0
	int StartReload();// 0x3628384
	bool StartFireFilter();// 0x3628344
	void StartFire();// 0x3628328
	void StartFillGas();// 0x3628314
	void StartDoPreBarrel(float HandledTime);// 0x3628290
	void StartDoBarrel();// 0x3628274
	void ShowDefaultScope(bool bShow);// 0x36281f0
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x3628130
	void ShootIDIsNotValid();// 0x3628114
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable, bool ClientSimulate);// 0x3627fd8
	void SetUpgradeInfoID(int ID);// 0x3627f5c
	void SetReloadWithNoCostFromEntity(bool bReloadWithNoCost);// 0x3627ed8
	void SetRearSightIndex(int Index);// 0x3627e5c
	void SetCurShootType(byte ShootType);// 0x3627de0
	void SetCurrentBulletNumInClipOnServer(BulletInClip InBulletInClip);// 0x3627ca0
	void SetCurrentBulletNumInClipOnClient(BulletInClip InBulletInClip);// 0x3627b60
	void SetCurReloadMethod(byte method);// 0x3627ae4
	void SetBulletInClip(out BulletInWeapon[] InCurBulletList, int Count);// 0x36279e0
	void SetBaseImpactDamageEntity(float Damage);// 0x3627964
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x3627864
	bool ScopeOut();// 0x3627824
	void ScopeInContinue();// 0x3627810
	bool ScopeIn();// 0x36277d0
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x362774c
	void RPC_ServerStopReload(int InterruptState);// 0x362769c
	void RPC_ServerSetMaxBulletNum();// 0x362763c
	void RPC_ServerSetBaseImpactDamageEntity(float Damage);// 0x362758c
	void RPC_Server_SetRearSightIndex(int Index);// 0x36274dc
	void RPC_ClientSetCurShootType(byte ShootType);// 0x362742c
	void RPC_ClientSetCurReloadMethod(byte method);// 0x362737c
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainBulletNumToReload);// 0x36272f8
	void RPC_ClientChangeFreshWeaponState_WithParams(byte State, byte Parameter);// 0x3627208
	void RPC_Client_SetBulletNumInClip(BulletInClip InBulletInClip);// 0x3627000
	void RotateCrossHair(Rotator Rot);// 0x3626f84
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x3626f00
	void ReSetBulletInClip(BulletInClip NewBulletInClip);// 0x3626dc0
	void RemoveGrenadeLaunchBullet(int RemoveNum);// 0x3626d44
	void RemoveBulletInClip(int RemoveNum, bool IsRevert);// 0x3626c84
	void RefreshBulletInClip(int Count);// 0x3626c08
	void ReduceWeaponDurability(int ReduceAmount);// 0x3626b8c
	void PreSetBulletListInClip(BulletInClip NewBulletInClip);// 0x3626a4c
	byte PopNextSpecialBulletID();// 0x3626a10
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x4033584
	void OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x4033584
	void OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x4033584
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x4033584
	void OnWeaponShootDelegate__DelegateSignature();// 0x4033584
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x4033584
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x4033584
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x4033584
	void OnWeaponEquipDelegate__DelegateSignature();// 0x4033584
	void OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x4033584
	void OnWeaponDurabilityChangeDelegate__DelegateSignature();// 0x4033584
	void OnStopFireDelegate__DelegateSignature();// 0x4033584
	void OnStartFireDelegate__DelegateSignature();// 0x4033584
	void OnSpawnBulletImpactFX__DelegateSignature(out const BulletHitInfoUploadData ImpactResult, STEShootWeaponBulletImpactEffect* ImpactEffect);// 0x4033584
	void OnShootWeaponDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x4033584
	void OnShootWeaponAutoReloadDelegate__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x4033584
	void OnShootWeaponAutoDrop__DelegateSignature(STExtraShootWeapon* ShootWeapon);// 0x4033584
	void OnShootIntervalModeChangeDelegate__DelegateSignature();// 0x4033584
	void OnSetRearSightIndexDelegate__DelegateSignature(int PrevIndex, int PostIndex);// 0x4033584
	void OnScopeInContinue__DelegateSignature();// 0x4033584
	void OnRep_WeaponDurability();// 0x36269fc
	void OnRep_UpgradeInfoID();// 0x36269e8
	void OnRep_SimulateHitDataArray();// 0x36269d4
	void OnRep_IsEquipACCore();// 0x36269c0
	void OnRep_CurRearSightIndex(int8 PrevIndex);// 0x3626944
	void OnRep_CurMaxBulletNumChange();// 0x3626930
	void OnRep_CurCurShootIntervalMode();// 0x362691c
	void OnRep_CurBulletInClipOnSimulatedClients();// 0x3626908
	void OnMaxBulletChange__DelegateSignature();// 0x4033584
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0x4033584
	void OnCurBulletChange__DelegateSignature();// 0x4033584
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x4033584
	void OnChangeShootType__DelegateSignature(STExtraShootWeapon* ShootWeapon, byte ShootType);// 0x4033584
	void OnBulletNumChangeDelegate__DelegateSignature();// 0x4033584
	void OnBulletLaunch__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0x4033584
	void OnBulletImpactFX__DelegateSignature(out const BulletHitInfoUploadData ImpactResult, STEShootWeaponBulletImpactEffect* ImpactEffect);// 0x4033584
	void OnBulletImpact__DelegateSignature(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, out const HitResult HitRet);// 0x4033584
	void NotifyServerNoneShootAction();// 0x36268a8
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainBulletNumToReload);// 0x362682c
	void NotifyClientNoneShootAction();// 0x36267cc
	void LocalSetBulletNumInClip(BulletInClip InBulletInClip);// 0x362668c
	bool IsWeaponDurabilityLoss();// 0x3626654
	bool IsWeaponAttachmentFullEquiped();// 0x362661c
	bool IsVehicleWeapon();// 0x36265e4
	bool IsUsingGrenadeLaunch();// 0x36265ac
	bool IsUseNewUploadData();// 0x3626574
	bool IsSwallowBulletTarget(Actor* TargetActor);// 0x36264dc
	bool IsSupportBolt();// 0x362649c
	bool IsSupportAutoAim();// 0x3626464
	bool IsInPreFire();// 0x362642c
	static bool IsGHasInfiniteBullets();// 0x36263f4
	bool IsForbidShootTarget(Actor* TargetActor);// 0x362635c
	bool IsEnableReloadADS();// 0x362633c
	bool IsEnableDropBullet();// 0x3626304
	bool IsDriverVehicleWeapon();// 0x36262cc
	bool IsAutoDrop();// 0x3626294
	void InitWeaponDurability(int NewVal);// 0x3626218
	bool HasUpgrade();// 0x36261e0
	bool HasMultiBullet();// 0x36261a8
	void HandleWeaponScopeUnEquiped(enum Type);// 0x362612c
	void HandleWeaponScopeEquiped(enum Type);// 0x36260b0
	void HandleWeaponAvatarPutOnSlot(int SlotID);// 0x3626034
	void HandleWeaponAvatarLoaded(int SlotID, ItemDefineID DefineID);// 0x3625f68
	void HandleWeaponAvatarClearSlot(int SlotID);// 0x3625eec
	void HandleScopeOut(bool bIsBegin);// 0x3625e68
	void HandleScopeIn(bool bIsBegin);// 0x3625de4
	void HandlePartsEquipped(int WeaponSlotID, bool IsEquipped);// 0x3625d24
	void HandleAllWeaponAvatarLoaded();// 0x3625d10
	byte GetWeaponReloadType();// 0x3625cdc
	int GetWeaponIDFromEntity();// 0x3625ca8
	int GetWeaponID();// 0x3625c6c
	int GetWeaponDurability();// 0x3625c38
	float GetWeaponBodyLength();// 0x3625c04
	Vector GetVolleyShootDirection(Vector TargetLoc, Vector OldStartLoc, Vector NewStartLoc, Vector BulletDir);// 0x3625aa8
	ParticleSystem* GetVisualBulletTrackFX();// 0x3625a74
	bool GetVisualBulletTrackEnabled();// 0x3625a3c
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x3625a08
	FName GetVerifyScopeSocketNameFromEntity();// 0x36259d4
	bool GetUseSpecificBulletNumOnReloadFromEntity();// 0x362599c
	float GetTraceDistanceFromEntity();// 0x3625968
	FName GetSilencerSocketNameFromEntity();// 0x3625934
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x3625900
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x36258cc
	byte GetShootTypeFromEntity();// 0x3625898
	int GetShootReduceDurabilityAmount();// 0x3625864
	int GetShootIntervalShowNumberFromEntity();// 0x3625830
	float GetShootIntervalFromEntity(int BulletIndex);// 0x36257a4
	FName GetShellDropSocketNameFromEntity();// 0x3625770
	MeshComponent* GetScopeMeshByType(FName SocketName, enum Type, int SocketIndex);// 0x362566c
	int GetScopeID(bool bIsAngledOpticalSight);// 0x36255d0
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x36254bc
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x36253b0
	bool GetReloadWithNoCostFromEntity();// 0x3625378
	float GetReloadTimeMagOutFromEntity();// 0x3625344
	float GetReloadTimeMagInFromEntity();// 0x3625310
	float GetReloadTimeFromEntity();// 0x36252dc
	FName GetReloadTIDName(byte method);// 0x3625248
	float GetReloadTacticalTimeFromEntity();// 0x3625214
	int GetReloadSpecificBulletNumFromEntity();// 0x36251e0
	float GetReloadRateFromEntity();// 0x36251ac
	float GetReloadDurationStartFromEntity();// 0x3625178
	float GetReloadDurationLoopFromEntity();// 0x3625144
	Transform GetRelativeMuzzleTransform();// 0x36250e8
	float GetReferenceDistance();// 0x36250b4
	FName GetRearSightSocket(int Index);// 0x3625028
	Rotator GetRearSightRot();// 0x3624ff0
	int GetRearSightIndex();// 0x3624fbc
	Rotator GetRearSightHandRotOffset();// 0x3624f84
	float GetRangeModifier();// 0x3624f50
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x3624eac
	float GetPreFireTimeFromEntity();// 0x3624e78
	float GetPreFireAnimScaleFromEntity();// 0x3624e44
	float GetPostReloadTimeFromEntity();// 0x3624e10
	float GetPostFireTimeFromEntity();// 0x3624ddc
	float GetPostFillGasTime();// 0x3624da8
	FName GetOverrideScopeAimSocketName();// 0x3624d74
	Transform GetMuzzleTransform();// 0x3624d18
	FName GetMuzzleSocketNameFromEntity();// 0x3624cdc
	float GetMinShootIntervalFromEntity();// 0x3624ca8
	float GetMaxVelocityOffsetAddRateFromEntity();// 0x3624c74
	float GetMaxValidHitTimeFromEntity();// 0x3624c40
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x3624c0c
	int GetMaxBulletNumInOneClipFromEntity();// 0x3624bd8
	int GetMaxBulletNumInBarrelFromEntity();// 0x3624ba4
	bool GetIsNeedOffsetVelocityFromEntity();// 0x3624b6c
	bool GetIsEnableScopeInFromEntity();// 0x3624b34
	float GetImpactEffectSkipDistanceFromEntity();// 0x3624b00
	float GetIgnoreRangeAttenuatDis();// 0x3624acc
	WeaponHitPartCoff GetHitPartCoff(Actor* Victim);// 0x3624a30
	AkAudioEvent* GetGrenadeLaunchShootSound();// 0x36249fc
	WeaponCrossHairPerformData[] GetGrenadeLaunchCrossHairData();// 0x36248cc
	float GetGasAddDamageRate();// 0x3624898
	float GetGameDeviationFactor();// 0x3624864
	FName GetFiringSuppressorSocketNameFromEntity();// 0x3624830
	float GetFireSensitiveYawRate();// 0x36247fc
	float GetFireSensitivePitchRate();// 0x36247c8
	int GetExtraShootIntervalShowNumberFromEntity();// 0x3624794
	float GetExtraShootIntervalFromEntity();// 0x3624760
	<int,bool> GetEquipAttachSlotMap();// 0x36245e4
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x3624558
	byte GetCurSightVisionType();// 0x3624524
	byte GetCurSightType();// 0x36244e8
	enum GetCurShootIntervalMode();// 0x36244cc
	int GetCurrentBulletNumInClip();// 0x36244b0
	float GetCurReloadTime();// 0x362447c
	byte GetCurReloadMethod();// 0x3624448
	float GetCurGasRate();// 0x3624414
	float GetCurGasAngle();// 0x36243e0
	int GetCurBulletNumInClip();// 0x36243ac
	float GetCrossHairInitSize();// 0x3624378
	float GetCrossHairBurstSpeed();// 0x3624344
	float GetCrossHairBurstIncreaseSpeed();// 0x3624310
	byte GetControllerRole();// 0x36242dc
	int GetConstantWeaponDurabilityFromEntity();// 0x36242a8
	bool GetClipHasInfiniteBulletsFromEntity();// 0x3624270
	MeshComponent* GetChildMeshComp(FName compTag);// 0x36241e4
	bool GetCanRecordHitDetailFromEntity();// 0x36241ac
	float GetBurstShootIntervalFromEntity();// 0x3624178
	float GetBurstShootCDFromEntity();// 0x3624144
	int GetBurstShootBulletsNumFromEntity();// 0x3624110
	ItemDefineID GetBulletTypeFromEntity();// 0x36240c4
	BulletTrackComponent* GetBulletTrackComponent();// 0x3624090
	float GetBulletRangeEntity();// 0x362405c
	float GetBulletNumSingleShotFromEntity();// 0x3624028
	float GetBulletMomentumFromEntity();// 0x3623ff4
	float GetBulletFireSpeedFromEntity();// 0x3623fc0
	float GetBaseReloadTime(bool bTactical);// 0x3623f2c
	float GetBaseImpactDamageEntity();// 0x3623ef8
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x3623df8
	float GetAutoShootCDFromEntity();// 0x3623dc4
	bool GetAutoReloadFromEntity();// 0x3623d8c
	bool GetADSManualStop();// 0x3623d54
	float GetAccessoriesVRecoilFactor();// 0x3623d20
	float GetAccessoriesRecoveryFactor();// 0x3623cec
	float GetAccessoriesHRecoilFactor();// 0x3623cb8
	float GetAccessoriesDeviationFactor();// 0x3623c84
	void ForceSyncAllClientsBulletsNumOnServer();// 0x3623c70
	void FixBulletNumWithValideData();// 0x3623c5c
	void EnableInfiniteBullets(bool bEnableInfiniteBullets);// 0x3623bd8
	void DoGrenadeLaunchStartReload();// 0x3623bc4
	byte CostSpecialBulletID(byte SpecialBulletID);// 0x3623b30
	void CostGasByOneShoot();// 0x3623b1c
	bool ConditionForbidShootTarget();// 0x3623adc
	void ClearWeaponAttrModifier();// 0x3623ac8
	void ClampBulletInClip(int MinCount, int MaxCount);// 0x3623a14
	void CheckReloadAttr();// 0x3623a00
	bool CheckNeedClientSetMaxBulletNum();// 0x36239c8
	bool CanSwitchToGrenade();// 0x36239ac
	void BP_OnSyncSimulatedClientsCurBullets();// 0x4033584
	void AddWeaponDurability(int AddAmount);// 0x3623930
	bool AddWeaponAttrModifierConfig(FString ConfigId, out const WeaponAttrModifyData[] AttrModifiers, int UnquieID);// 0x3623768
	void AddOwnerOffsetVelocity(out Vector OrginalVelocity);// 0x36236e0
	void AddFillGas(float AddTime);// 0x3623664
	void AddBulletInClip(BulletInWeapon[] InCurBulletList, int Count);// 0x36234f4

--------------------------------
Class: STExtraWeapon.Actor.Object
	int iRegionWeapon;//[Offset: 0x498, Size: 4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x49c, Size: 4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a2, Size: 1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a3, Size: 1]
	bool GM_EnableCheckReInitSimWeaponOwnerProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x4a8, Size: 24]
	Transform WeaponAttachMeshOffset;//[Offset: 0x4c0, Size: 48]
	Transform FPPWeaponOffset;//[Offset: 0x4f0, Size: 48]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x520, Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x550, Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x580, Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x5b0, Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x5e0, Size: 48]
	int CrossHairType;//[Offset: 0x610, Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x614, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x618, Size: 8]
	PredictLineComponent* PredictLine;//[Offset: 0x620, Size: 8]
	FName WeaponStaticMeshCompTag;//[Offset: 0x628, Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x630, Size: 8]
	delegate WeaponEffectActionDelegate;//[Offset: 0x638, Size: 16]
	delegate FireOneShotEffectDelegate;//[Offset: 0x648, Size: 16]
	delegate OnShootWeaponChangeState;//[Offset: 0x658, Size: 16]
	delegate OnWeaponChangeStateCommon;//[Offset: 0x668, Size: 16]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x678, Size: 16]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x688, Size: 16]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x698, Size: 16]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x6a8, Size: 16]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x6b8, Size: 16]
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x6c8, Size: 16]
	delegate OnWeaponBaseEquipDelegate;//[Offset: 0x6d8, Size: 16]
	delegate OnWeaponBaseUnEquipDelegate;//[Offset: 0x6e8, Size: 16]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x6f8, Size: 8]
	WeaponSpecificHandler* WeaponSpecHandler;//[Offset: 0x700, Size: 8]
	byte CurFreshWeaponState;//[Offset: 0x708, Size: 1]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x710, Size: 16]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x720, Size: 1]
	FName WeaponAttachSocketName;//[Offset: 0x728, Size: 8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x731, Size: 1]
	bool GM_CloseMaxWeaponReconnetTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x732, Size: 1]
	float MaxReconnectTime;//[Offset: 0x734, Size: 4]
	float StartReconnectTime;//[Offset: 0x738, Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x740, Size: 128]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x7c8, Size: 16]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x7e0, Size: 96]
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x848, Size: 8]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x858, Size: 8]
	byte CurWeaponState;//[Offset: 0x860, Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x868, Size: 8]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x870, Size: 8]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x880, Size: 80]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x8e0, Size: 8]
	MeshSynData[] synData;//[Offset: 0x8f0, Size: 16]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x900, Size: 1]
	float MaxWaitMeshInitTime;//[Offset: 0x904, Size: 4]
	float WaitMeshInitTime;//[Offset: 0x908, Size: 4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90c, Size: 1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90d, Size: 1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x910, Size: 16]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x930, Size: 8]
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938, Size: 1]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x939, Size: 1]
	delegate ForceHideWeaponWidget;//[Offset: 0x940, Size: 16]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 1]
	ActorComponent*[] CrossHairComps;//[Offset: 0x958, Size: 16]
	byte WeaponUIType;//[Offset: 0x968, Size: 1]
	Transform DefaultRelativeTransform;//[Offset: 0x970, Size: 48]
	Rotator RotForSimulate;//[Offset: 0x9a0, Size: 12]
	int FuncFlag;//[Offset: 0x9ac, Size: 4]
	bool bTriggerWeaponEffectWhenAppActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 1]
	byte AppActiveWeaponAction;//[Offset: 0x9b9, Size: 1]
	<SceneComponent*,CharacterCompOutOfVisionOptimizationItem> WeaponCompOutOfVisionOptimizationDataMap;//[Offset: 0x9c0, Size: 80]
	FString LuaFilePath;//[Offset: 0xa10, Size: 16]
	FString[] ComponentTickWhiteList;//[Offset: 0xa20, Size: 16]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x4033584
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x4033584
	void UpdateWeaponAvatar(float DeltaTime);// 0x4033584
	void TriggerWeaponEvent(enum Event);// 0x365b39c
	void SpecialResetForWeaponCrosshair();// 0x4033584
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x365b2ec
	void RPC_ClientChangeFreshWeaponState(byte State);// 0x365b23c
	void RespawnData();// 0x4033584
	void ResetData();// 0x4033584
	void PlayLocalShellDropFX();// 0x4033584
	void OnWeaponTriggerEventDelegate__DelegateSignature(enum Event);// 0x4033584
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x4033584
	void OnWeaponBaseUnEquipDelegate__DelegateSignature();// 0x4033584
	void OnWeaponBaseEquipDelegate__DelegateSignature();// 0x4033584
	void OnWeaponAttachToBackDelegate__DelegateSignature(FName SocketName);// 0x4033584
	void OnShootWeaponChangeStateDelegate__DelegateSignature(byte LastState, byte NewState);// 0x4033584
	void OnRep_WeaponReconnectReplicateData();// 0x365b228
	void OnRep_WeaponAttachSocketName();// 0x365b214
	void OnRep_SimulatedOwnerPawn();// 0x365b200
	void OnRep_OwnerClientCreateWeaponData();// 0x365b1ec
	void OnRep_bPlayBackpackToIdleAnimWhenGet();// 0x365b1d8
	void OnRep_AvatarMeshChanged();// 0x365b1c4
	void OnRep_AttachmentReplication();// 0x365b1a8
	void OnReleaseTrigger();// 0x365b18c
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x4033584
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x4033584
	void OnPushTrigger();// 0x365b170
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0x4033584
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x4033584
	void NewInitWeapon();// 0x365b15c
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x365b0cc
	bool IsUseAttrModify();// 0x365b08c
	bool IsSimulated();// 0x365b054
	bool IsLocalOrSpectorPlayer();// 0x365b01c
	bool IsAutonomous();// 0x365afe4
	void InitWeapon();// 0x365afd0
	bool HasComponentSlot(byte Slot);// 0x365af40
	void HandleReconnectNew(Actor* WeaponOwner);// 0x365aec4
	byte GetWeaponTypeNew();// 0x365ae90
	byte GetWeaponType();// 0x365ae5c
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x365ae28
	byte GetWeaponStateType();// 0x365adf4
	byte GetWeaponSlot();// 0x365adc0
	int GetWeaponSkillID();// 0x365ad8c
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x365ad58
	enum GetWeaponOwnerObserverType();// 0x365ad24
	FString GetWeaponName();// 0x365ac80
	MeshComponent* GetWeaponMeshComponent();// 0x365ac44
	int GetWeaponID();// 0x365ac08
	byte GetWeaponHoldType();// 0x365abd4
	byte GetWeaponFireMode();// 0x365ab98
	WeaponEntity* GetWeaponEntityComponent();// 0x365ab64
	FString GetWeaponDetailInfo();// 0x365aac0
	FName GetWeaponAttachSocket();// 0x365aa84
	WeaponSpecificHandler* GetSpecificHandler();// 0x365aa50
	float GetSpecialScopeFov();// 0x365aa14
	int GetScopeID(bool bIsAngledOpticalSight);// 0x365a978
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x365a864
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x365a758
	FString GetOwnerPlayerName();// 0x365a6b4
	PlayerController* GetOwnerPlayerController();// 0x365a678
	Pawn* GetOwnerPawn();// 0x365a644
	FString GetOwnerName();// 0x365a5a0
	Controller* GetOwnerController();// 0x365a564
	Actor* GetOwnerActor();// 0x365a528
	ItemDefineID GetItemDefineID();// 0x365a4dc
	GrenadeAvatarComponent* GetGrenadeAvatar();// 0x365a4a8
	byte GetCurSightType();// 0x365a46c
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x365a33c
	LinearColor GetColorByTeamID(int TeamID);// 0x4033584
	ItemHandleBase* GetBackpackItemHandle();// 0x365a308
	void ForceHideWeaponWidget__DelegateSignature(bool bIsBegin);// 0x4033584
	void DelayHandleAvatarMeshChanged();// 0x365a2f4
	void CreateWeaponHandleCallback(ItemDefineID DefineID, BattleItemHandleBase* BattleItemHandle);// 0x365a22c
	void ClientLoadDefaultMesh();// 0x365a218
	void CheckNeedReInitWeaponOwnerData(Actor* OwnerActor);// 0x365a19c
	bool CheckHasFuncByInt(int Func);// 0x365a10c
	bool CheckHasFunc(enum Func);// 0x365a07c
	void ChangeSequenceState(byte StateType);// 0x3659ff8
	void CallForceHideWeaponWidgetDel();// 0x3659fe4

--------------------------------
Class: MainWeaponTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	int[] SkillIDList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0, Size: 4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 4]
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 4]
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 4]
	float MaxGunRoot;//[Offset: 0x20, Size: 4]
	float MaxMuzzleGun;//[Offset: 0x24, Size: 4]
	float DistMuzzleGun;//[Offset: 0x28, Size: 4]
	float MuzzleHighCD;//[Offset: 0x2c, Size: 4]
	float AimFlyCD;//[Offset: 0x30, Size: 4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float MaxBackTraceSize;//[Offset: 0x38, Size: 4]

--------------------------------
Class: CameraOffsetData
	Vector SocketOffset;//[Offset: 0x0, Size: 12]
	Vector TargetOffset;//[Offset: 0xc, Size: 12]
	float SpringArmLength;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WeaponAvatarComponent.WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 1]
	bool SetAutonomousLoadRes();// 0x37405f8
	void SelectWeaponGunOnePart(int WeaponGunPart);// 0x374057c
	void EnableDIYPatternMirro(bool bMirro, bool bLeftToRight);// 0x37404ac

--------------------------------
Class: WeaponAvatarDIYComponent.AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0x5c8, Size: 8]
	delegate OnScopeEquipDelegate;//[Offset: 0x5d8, Size: 16]
	delegate OnScopeUnequipDelegate;//[Offset: 0x5e8, Size: 16]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x5f8, Size: 16]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x608, Size: 16]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x618, Size: 16]
	delegate OnWeaponAvatarPutOnSlot;//[Offset: 0x628, Size: 16]
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	delegate OnWeaponPartsEquipped;//[Offset: 0x640, Size: 16]
	delegate OnWeaponPartsRender;//[Offset: 0x650, Size: 16]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x678, Size: 80]
	<int,HandleMeshPack> DefaultAttachmentMeshOverride;//[Offset: 0x6c8, Size: 80]
	MeshSynData[] DefaultSynData;//[Offset: 0x718, Size: 16]
	WeaponDIYData WeaponDIYData;//[Offset: 0x748, Size: 80]
	DIYEnableLevel[] EnableLevelMap;//[Offset: 0x7a8, Size: 16]
	bool bShouldFindItemSkipInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 1]
	ItemDefineID WeaponDefineID;//[Offset: 0x7c0, Size: 24]
	bool ShouldDisplayByQuality(int SlotID);// 0x374301c
	void SetPendantSocketType(enum SocketType);// 0x3742fa0
	bool SetAutonomousLoadRes();// 0x3742f60
	void ResponWeaponDIYData(FString InPlayerUID, int WeaponAvatarID);// 0x3742df0
	void ResetAttachmentSocket();// 0x3742ddc
	void ResetAttachmentParent();// 0x3742dc8
	void RequestWeaponDIYData(FString InPlayerUID, int WeaponAvatarID, int InDIYPlanID);// 0x3742ca8
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x3742be8
	void RemoveDefaultAttachmentOverride(int SlotID);// 0x3742b6c
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* InHandle);// 0x3742ae0
	void RefreshAvatarStateChanged();// 0x3742ac4
	void RecreateMeshByHandle(BattleItemHandleBase* PendingRecreateHandle);// 0x3742a48
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* WeaponHandle);// 0x37429b8
	void PutOnEquipmentDIYData(int WeaponAvatarID, int InDIYPlanID);// 0x3742904
	bool PutOnEquipmentByResID(int resID);// 0x374286c
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle);// 0x37427dc
	bool PutOffEquimentByResID(int resID);// 0x3742744
	void ProcessWeaponDIYDataAction(out const WeaponDIYData InWeaponDIYData);// 0x3742690
	void ProcessLoadAllMesh();// 0x3742674
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData OutSyncData);// 0x3742594
	void OnWeaponPartsRenderEvent__DelegateSignature(int WeaponSlotID);// 0x4033584
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool IsEquipped);// 0x4033584
	void OnWeaponAvatarPutOnSlot__DelegateSignature(int SlotID);// 0x4033584
	void OnWeaponAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x4033584
	void OnWeaponAvatarClearSlot__DelegateSignature(int SlotID);// 0x4033584
	void OnWeaponAttachAvatarLoaded__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x4033584
	void OnScopeUnequipDelegate__DelegateSignature(enum AttachmentSocketType);// 0x4033584
	void OnScopeEquipDelegate__DelegateSignature(enum AttachmentSocketTypeD);// 0x4033584
	void OnRespawned();// 0x3742578
	void OnRep_NetAvatarDataChanged(out const MeshSynData[] InSyncData);// 0x37424c0
	void OnRecycled();// 0x37424a4
	void OnAsyncLoadBattleHandlesDone(int AsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles);// 0x37423a4
	void NetSyncData(int InSlotID, enum InOperationType, BattleItemHandleBase* InHandle);// 0x37422a8
	bool LoadMeshListAsync(out BattleItemHandleBase*[] InHandleList, bool bNeedDirectLoad);// 0x3742188
	bool IsTeammate();// 0x3742148
	bool IsSelf();// 0x3742108
	void InitMasterComponent();// 0x37420f4
	void InitialAvatarParam();// 0x37420e0
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x3742064
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x3741fe8
	void InitDefaultAttachment(BattleItemHandleBase* WeaponHandle);// 0x3741f6c
	int GetWeaponParentID(int InSlotID, out const ItemDefineID InItemDefineID);// 0x3741e90
	Controller* GetWeaponController();// 0x3741e5c
	STExtraWeapon* GetOwnerWeapon();// 0x3741e28
	STExtraBaseCharacter* GetOwnerCharacter();// 0x3741df4
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x3741d58
	BattleItemHandleBase* GetEquippedHandle(int InSlotID);// 0x3741ccc
	bool GetEquipmentMeshBySlot(int InSlotID, out MeshData OutMeshPack);// 0x3741bd0
	AvatarDIYEntityFactory* GetEntityFactory();// 0x3741b94
	MeshComponent* GetAttachmentSocketTransform(int InSlotID);// 0x3741b08
	AnimationAsset* GetAttachmentAnim(enum InSlotType, int AnimIdx);// 0x3741a40
	WeaponAvatarDIYEntity* FindAvatarEntityByMesh(MeshComponent* InMeshComp);// 0x37419b4
	void DestroyWeapon();// 0x37419a0
	void ClearMeshBySlot(int SlotID, bool putDefault, bool bClearMesh);// 0x374188c
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x3741808
	bool CheckSlotIsEquipped(int InSlotID, bool bIncludingDefault);// 0x3741734
	bool CheckIsAlreadyEquipped(ItemDefineID InDefineID);// 0x3741694
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs);// 0x37415dc
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x37413c4
	void ApplyAttachmentOverride(BattleItemHandleBase* InAttachHandle);// 0x3741348
	void ApplyAttachment(BattleItemHandleBase* InAttachHandle);// 0x37412cc
	void AddUnlockWeaponAttachmentAvatarList(int WeaponBPID, out <int,int> OutAttachmentSkinIDList);// 0x37411a8
	void AddDefaultAttachmentOverride(int AttchmentID);// 0x374112c
	int AddAction_ParticleByName(int SlotID, out const FName ParticleName);// 0x3741054
	int AddAction_MatParamModify(int SlotID, int CfgIndex);// 0x3740f90

--------------------------------
Class: AvatarDIYComponent.AvatarComponentBase.ActorComponent.Object
	AvatarDIYEntity*[] EntityTickList;//[Offset: 0x298, Size: 16]
	<int,AvatarDIYEntity*> AvatarEntityMap;//[Offset: 0x2a8, Size: 80]
	int[] PendingDeleteSlotID;//[Offset: 0x2f8, Size: 16]
	AvatarDIYEntityFactory* EntityFactory;//[Offset: 0x308, Size: 8]
	<int,FName> SlotToSocket;//[Offset: 0x310, Size: 80]
	int StepCount;//[Offset: 0x360, Size: 4]
	delegate AsyncLoadAvatarAllMeshDone;//[Offset: 0x368, Size: 16]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x378, Size: 16]
	int AsyncLoadReqID;//[Offset: 0x458, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x45c, Size: 4]
	bool bSyncDIYDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	enum DisplayQuality;//[Offset: 0x471, Size: 1]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x478, Size: 80]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	<int,bool> OutlineEnableList;//[Offset: 0x4f8, Size: 80]
	bool NeedUpdateTransformOption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	<int,TextureRenderTarget2D*> DIYRTCacheMap;//[Offset: 0x550, Size: 80]
	int CurrentDecalBakingRequestID;//[Offset: 0x5a0, Size: 4]
	delegate OnAvatarDIYDecalBakingFinished;//[Offset: 0x5a8, Size: 16]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x5b8, Size: 16]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x3270350
	void Streamable_RequestAsyncLoadHandles(out ItemDefineID[] InHandleList);// 0x3270290
	bool SetMeshVisibleByID(int InSlotID, bool bIsVisible, bool bForceShow);// 0x3270170
	void SetMaster(MeshComponent* InComponent, FName InName, enum InType);// 0x3270080
	void SetDisplayQuality(enum Quality);// 0x3270008
	bool SetAutonomousLoadRes();// 0x326ffc8
	void RequestSyncLoadMeshes();// 0x326ffb4
	void RequestSyncLoadHandles();// 0x326ffa0
	void RequestAsyncLoadMeshes();// 0x326ff84
	void RequestAsyncLoadHandles();// 0x326ff68
	void RemoveDIYRTCacheInBattle(int InSlotID);// 0x326feec
	void RemoveAllDIYRTCacheInBattle();// 0x326fed8
	void RemoveActionByType(int SlotID, enum InActionType, bool bDelayClear);// 0x326fddc
	void RemoveAction(int SlotID, int ActionInstanceID, bool bDelayClear);// 0x326fce4
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x326fc60
	void RefreshAvatarStateChanged();// 0x326fc44
	void ProcessLoadAllMesh();// 0x326fc28
	void PreProcessBeforeLoadMesh();// 0x326fc0c
	void PostProcessAfterLoadMesh();// 0x326fbf0
	void OnRespawned();// 0x326fbd4
	void OnRecycled();// 0x326fbb8
	void OnEngineDecalBakingFinished(out const DecalBakingRequest InRequestStruct);// 0x326faec
	void OnAvatarDIYDecalBakingFinished__DelegateSignature(int RequestID, TextureRenderTarget2D* RenderTarget);// 0x4033584
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x4033584
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x326fa68
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x326f9a8
	void OnAllAvatarHandleLoadedDone();// 0x326f98c
	void NetSyncData(int SlotID, enum OperationType, BattleItemHandleBase* Handle);// 0x326f890
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x326f7bc
	bool IsAutonomousAvatar();// 0x326f784
	AvatarDIYEntity* GetOrCreateAvatarEntity(int SlotID, int SubSlotID);// 0x326f6c0
	<int,MeshComponent*> GetMeshComponentList();// 0x326f578
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x326f4ec
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x326f460
	AvatarDIYEntityFactory* GetEntityFactory();// 0x326f424
	TextureRenderTarget2D* GetDIYRTCacheInLobby(int InSlotID);// 0x326f398
	enum GetDisplayQuality();// 0x326f37c
	void GetCurMeshComponents(out MeshComponent*[] OutMeshComponets);// 0x326f2bc
	AvatarDIYEntity* GetAvatarEntity(int SlotID, int SubSlotID);// 0x326f1f8
	void EnableSyncLoadDIYDecal(bool bInSyncDIYDecal, int InMaxDecalProcessPreFrame);// 0x326f130
	void EnableSyncLoadAvatar(bool bInSyncAvatar);// 0x326f0ac
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x326efdc
	AvatarDIYEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x326ef18
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x326ee58
	void AsyncLoadAvatarAllMeshDone__DelegateSignature(AvatarDIYComponent* AvatarDIYComponent);// 0x4033584
	void AddDIYRTCacheInBattle(int InSlotID, TextureRenderTarget2D* InTexture2D);// 0x326eda0
	int AddAction_Modle(int SlotID, int ModleID);// 0x326ecdc
	int AddAction_Material(int SlotID, int MaterialID);// 0x326ec18
	int AddAction_DIYSlotMatParam(out const int[] InSlotMatParam);// 0x326eb50
	int AddAction_DIYPattern(int SlotID, out const DIYMergedTexData[] InDIYMergeData);// 0x326e9f4
	int AddAction_DIYMirroParam(int SlotID, out const int[] InMirroParam);// 0x326e8ec
	int AddAction_DIYMatParam(int SlotID, out const int[] InMatIDList);// 0x326e7e4
	int AddAction(int SlotID, out const AvatarActionBase InActionBase);// 0x326e6f8

--------------------------------
Class: AvatarComponentBase.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x1e8, Size: 8]
	bool bIsLobbyAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool bIsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	bool bForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 1]
	FName LightVectorName;//[Offset: 0x1f8, Size: 8]
	DirectionalLight* DirectionalLight;//[Offset: 0x200, Size: 8]
	delegate OnItemDownloadDelegate;//[Offset: 0x208, Size: 16]
	delegate OnBatchItemDownloadDelegate;//[Offset: 0x218, Size: 16]
	<int,int> ItemsRequestDownloadTimes;//[Offset: 0x228, Size: 80]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	FString LuaFilePath;//[Offset: 0x280, Size: 16]
	void RequestDownloadItemInBattle(int InItemID);// 0x326d6cc
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x326d60c
	void OnRespawned();// 0x326d5f0
	void OnRecycled();// 0x326d5d4
	bool IsTeammate();// 0x326d594
	bool IsServerMode();// 0x326d55c
	bool IsSelf();// 0x326d51c
	bool IsLogicRunningMode();// 0x326d4e4
	bool IsLobbyAvatar();// 0x326d4c8
	bool IsLobbyActor();// 0x326d4ac
	bool IsForceClientMode();// 0x326d490
	uint32 GetPlayerKey();// 0x326d454
	GameInstance* GetGameInstance();// 0x326d418
	void DownloadItemInBattleCallBack(uint32 ItemId, uint32 ErrorCode);// 0x326d35c
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x326d144

--------------------------------
Class: HandleMeshPack
	BattleItemHandleBase* Handle;//[Offset: 0x0, Size: 8]
	WeaponMeshCfg MeshCfg;//[Offset: 0x8, Size: 336]

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	FString LuaFilePath;//[Offset: 0x108, Size: 16]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	enum ItemStoreArea;//[Offset: 0x119, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x120, Size: 16]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	float UnitWeight;//[Offset: 0x134, Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 1]
	int ItemAttrsFlag;//[Offset: 0x13c, Size: 4]
	void UpdateAttributeModify(bool bEnable);// 0x3832808
	bool UnEquip();// 0x38327d0
	bool HanldePickupAssociationData(out const BattleItemAdditionalData[] PickupAdditionalData);// 0x38326a4
	bool HanldeDropAssociationData();// 0x3832664
	bool HanldeCleared();// 0x3832624
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x3832528
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x3832274
	bool HandleEnable(bool bEnable);// 0x38321d4
	bool HandleDrop(int InCount, enum Reason);// 0x3832100
	bool HandleDisuse(enum Reason);// 0x3832068
	bool HandleChangeItemStoreArea(enum InItemStoreArea);// 0x3831fd0
	bool HandleBindToTargetItem();// 0x3831f90
	World* GetWorldInternal();// 0x3831f54
	World* GetCurrentWorld();// 0x3831f20
	BattleItemData ExtractItemData();// 0x3831eb4
	void ClearAdditionalData();// 0x3831ea0
	bool CheckCanUse(out const interface classNone ItemContainer, BattleItemUseTarget Target, enum Reason);// 0x3831d4c

--------------------------------
Class: ItemHandleBase.Object
	int Count;//[Offset: 0x28, Size: 4]
	int MaxCount;//[Offset: 0x2c, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool bSingle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x38, Size: 80]
	ItemDefineID DefineID;//[Offset: 0x88, Size: 24]
	void SetAssociation(FName Name, ItemAssociation Association);// 0x383a40c
	void RemoveAssociation(FName Name);// 0x383a390
	void Init(ItemDefineID InDefineID);// 0x383a2fc
	ItemDefineID GetDefineID();// 0x383a2ac
	<FName,ItemAssociation> GetAssociationMap();// 0x383a16c
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x383a078
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x3839fc4
	ItemAssociation GetAssociation(FName Name);// 0x3839f20
	void Constuct(out const ItemDefineID InDefineID);// 0x3839e88
	void AddAssociation(FName Name, ItemAssociation Association);// 0x3839d90

--------------------------------
Class: BattleItemAdditionalData
	FName Name;//[Offset: 0x0, Size: 8]
	float FloatData;//[Offset: 0x8, Size: 4]
	FString StringData;//[Offset: 0x10, Size: 16]
	int IntData;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 24]
	FName TargetAssociationName;//[Offset: 0x18, Size: 8]
	Actor* TargetActor;//[Offset: 0x20, Size: 8]

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 24]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 8]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 8]
	int Count;//[Offset: 0x8, Size: 4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x10, Size: 16]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x28, Size: 40]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: BattleItemData.ItemData
	int Count;//[Offset: 0x58, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x60, Size: 16]
	int Durability;//[Offset: 0x70, Size: 4]
	enum ItemStoreArea;//[Offset: 0x74, Size: 1]
	BattleItemFeatureData FeatureData;//[Offset: 0x78, Size: 44]
	ItemAssociation[] Associations;//[Offset: 0xa8, Size: 16]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8, Size: 24]
	FString Name;//[Offset: 0x20, Size: 16]
	FString Desc;//[Offset: 0x30, Size: 16]
	FString Icon;//[Offset: 0x40, Size: 16]
	ItemHandleBase* ItemHandle;//[Offset: 0x50, Size: 8]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 4]
	int MaxCount;//[Offset: 0x4, Size: 4]
	int CountLimit;//[Offset: 0x8, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemAttrsFlag;//[Offset: 0x14, Size: 4]
	int SortingPriority;//[Offset: 0x18, Size: 4]
	int Worth;//[Offset: 0x1c, Size: 4]
	int ItemCapacity;//[Offset: 0x20, Size: 4]
	int ItemDurability;//[Offset: 0x24, Size: 4]
	int itemType;//[Offset: 0x28, Size: 4]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 40]
	MaterialInterface* MeshMat;//[Offset: 0xa0, Size: 40]
	FName MeshMatSlotName;//[Offset: 0xc8, Size: 8]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xd0, Size: 40]
	MaterialInterface* baseMat;//[Offset: 0xf8, Size: 8]
	MaterialInterface* baseMatClass;//[Offset: 0x100, Size: 40]
	ParticleRes[] ParticleEffects;//[Offset: 0x128, Size: 16]
	UIWidgetRes[] WidgetList;//[Offset: 0x138, Size: 16]
	enum meshType;//[Offset: 0x148, Size: 1]

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 8]
	FName AttachSocket;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 8]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector2D DrawSize;//[Offset: 0x40, Size: 8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int gender;//[Offset: 0x18, Size: 4]
	enum OperationType;//[Offset: 0x1c, Size: 1]
	int AdditionalItemID;//[Offset: 0x20, Size: 4]
	int DIYPlanID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WeaponDIYData.ResponResult
	int WeaponId;//[Offset: 0x4, Size: 4]
	int PlanID;//[Offset: 0x8, Size: 4]
	DIYMergedTexData[] DIYData;//[Offset: 0x10, Size: 16]
	int[] MatParam;//[Offset: 0x20, Size: 16]
	int[] MirroParam;//[Offset: 0x30, Size: 16]
	int[] SlotMatParam;//[Offset: 0x40, Size: 16]

--------------------------------
Class: ResponResult
	bool bResponed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: DIYMergedTexData
	DIYOneTexData[] TextureList;//[Offset: 0x0, Size: 16]
	int TexPathID;//[Offset: 0x10, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x14, Size: 48]
	int SlotID;//[Offset: 0x44, Size: 4]

--------------------------------
Class: DIYOneTexData
	int TexPathID;//[Offset: 0x0, Size: 4]
	DIYParamData DIYParam;//[Offset: 0x4, Size: 48]

--------------------------------
Class: DIYParamData
	int Direction;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	float Opacity;//[Offset: 0x8, Size: 4]
	float Rotation;//[Offset: 0xc, Size: 4]
	float ScaleX;//[Offset: 0x10, Size: 4]
	float ScaleY;//[Offset: 0x14, Size: 4]
	float OffSetX;//[Offset: 0x18, Size: 4]
	float OffSetY;//[Offset: 0x1c, Size: 4]
	float UClipX;//[Offset: 0x20, Size: 4]
	float UClipY;//[Offset: 0x24, Size: 4]
	float VClipX;//[Offset: 0x28, Size: 4]
	float VClipY;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: DIYEnableLevel
	int DeviceLevel;//[Offset: 0x0, Size: 4]
	int EnableLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AvatarDIYEntity.Object
	AvatarDIYComponent* AvatarComponent;//[Offset: 0x28, Size: 8]
	MeshComponent* MeshComponent;//[Offset: 0x30, Size: 8]
	MeshGroup MeshGroup;//[Offset: 0x38, Size: 48]
	ItemDefineID ParentDefineID;//[Offset: 0x68, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityMap;//[Offset: 0x80, Size: 80]
	int SlotID;//[Offset: 0xf0, Size: 4]
	int SubSlotID;//[Offset: 0xf4, Size: 4]
	FName SocketName;//[Offset: 0xf8, Size: 8]
	enum meshType;//[Offset: 0x100, Size: 1]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x108, Size: 8]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x110, Size: 8]
	MeshData EntityMeshData;//[Offset: 0x118, Size: 128]
	MeshData CachedEntityMeshData;//[Offset: 0x198, Size: 128]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21b, Size: 1]
	bool bHasDeaclTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x220, Size: 16]
	SoftObjectPath MeshAssetPath;//[Offset: 0x230, Size: 24]
	<FString,AvatarDIYEntity*> SubEntityList;//[Offset: 0x248, Size: 80]
	void UpdateVisibility();// 0x32722a8
	void UnRegisterTick();// 0x327228c
	void TickEntity(float DeltaTime);// 0x3272208
	void SetSocketName(FName InName);// 0x3272184
	void SetParentDefineID(ItemDefineID ParentID);// 0x32720f4
	void SetLoadedHandle(BattleItemHandleBase* ItemHandle);// 0x3272070
	void SetAvatarVisibility(bool bIsVisible, bool bForce);// 0x3271f98
	void SetAvatarEntityParticleVisibility(bool visibie);// 0x3271f0c
	void RevertEntityMeshData();// 0x3271ef8
	void RenderEntity();// 0x3271edc
	void RegisterTick();// 0x3271ec0
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x3271e28
	void PutOnDefaultEquipment(int InSlotID);// 0x3271da4
	void PrepareEntity();// 0x3271d88
	void OnPreRender();// 0x3271d6c
	void OnPostRender();// 0x3271d50
	void MaskActionDirty(bool bFlag);// 0x3271ccc
	bool IsEntityAvailable(enum VisibilityType);// 0x3271c34
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x3271b68
	void Init(int InSlotID, int InSubSlotID, AvatarDIYComponent* InAvatarComponent);// 0x3271a70
	bool HasSomeAction(enum InActionType);// 0x32719e0
	bool HasMainAction();// 0x32719a8
	FName GetSocketName();// 0x327196c
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x32718d8
	ItemDefineID GetParentDefineID();// 0x3271884
	MeshData GetMeshData();// 0x3271820
	BattleItemHandleBase* GetLoadedHandle();// 0x32717ec
	ItemDefineID GetDefineID();// 0x3271798
	void EnterRenderPipeline();// 0x327177c
	void EnterLogicPipeline();// 0x3271760
	void DrawOutline(bool bEnable);// 0x32716d4
	bool CreateAndApplyResource();// 0x3271694
	void ClearRenderEntity();// 0x3271678
	void ClearEquipmentRenderData(int CurrSlotID, bool bPutDefault);// 0x32715b0
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x32714d8
	void ClearEntity(bool ForceClear);// 0x327144c

--------------------------------
Class: MeshGroup
	MeshAsset[] MeshAssetList;//[Offset: 0x0, Size: 16]
	Object*[] MeshObjectList;//[Offset: 0x10, Size: 16]
	MeshComponent*[] MeshCompList;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MeshAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* StaticMesh;//[Offset: 0x58, Size: 40]
	FName AttachSocket;//[Offset: 0x80, Size: 8]
	enum meshType;//[Offset: 0x88, Size: 1]
	bool bKeepRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	class AnimInstance* animBP;//[Offset: 0x90, Size: 8]
	class AnimInstance* animBPClass;//[Offset: 0x98, Size: 40]
	bool bAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bUpdateTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 8]
	SkeletalMesh* skMesh;//[Offset: 0x8, Size: 8]
	MaterialInstance* matIns;//[Offset: 0x10, Size: 8]
	MaterialInstance*[] additionalMats;//[Offset: 0x18, Size: 16]
	enum meshType;//[Offset: 0x28, Size: 1]
	int[] hiddenSlots;//[Offset: 0x30, Size: 16]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x40, Size: 16]
	HideBoneData[] hideBoneSlots;//[Offset: 0x50, Size: 16]
	ItemDefineID definedID;//[Offset: 0x60, Size: 24]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x848, Size: 8]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x850, Size: 8]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x858, Size: 8]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x860, Size: 8]
	void SetupAttachMeshComponent(MeshComponent* MeshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x332e910
	Actor* GetBindOwner();// 0x332e8f4
	MeshComponent* GetAttachedMeshComponent();// 0x332e8d8
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* MeshComp, FName SocketName, out const Transform RelativeTrans);// 0x332e784
	void BindOwner(Actor* Owner);// 0x332e70c
	void BindEvent(bool bShowWidget);// 0x332e680

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x725, Size: 1]
	enum TimingPolicy;//[Offset: 0x726, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x728, Size: 8]
	IntPoint DrawSize;//[Offset: 0x730, Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x739, Size: 1]
	float RedrawTime;//[Offset: 0x73c, Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x748, Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	Vector2D Pivot;//[Offset: 0x754, Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75c, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75d, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x760, Size: 8]
	LinearColor BackgroundColor;//[Offset: 0x768, Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x778, Size: 16]
	float OpacityFromTexture;//[Offset: 0x788, Size: 4]
	enum BlendMode;//[Offset: 0x78c, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78d, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78e, Size: 1]
	UserWidget* Widget;//[Offset: 0x790, Size: 8]
	BodySetup* BodySetup;//[Offset: 0x7b8, Size: 8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x7c0, Size: 8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x7c8, Size: 8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x7d0, Size: 8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x7d8, Size: 8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x7e0, Size: 8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x7e8, Size: 8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x7f0, Size: 8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x7f8, Size: 8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x801, Size: 1]
	FName SharedLayerName;//[Offset: 0x808, Size: 8]
	int LayerZOrder;//[Offset: 0x810, Size: 4]
	enum GeometryMode;//[Offset: 0x814, Size: 1]
	float CylinderArcAngle;//[Offset: 0x818, Size: 4]
	void SetWidget(UserWidget* Widget);// 0x4f67944
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x4f678c8
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x4f6784c
	void SetDrawSize(Vector2D Size);// 0x4f677d4
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x4f67758
	void RequestRedraw();// 0x4f6773c
	UserWidget* GetUserWidgetObject();// 0x4f67708
	TextureRenderTarget2D* GetRenderTarget();// 0x4f676d4
	LocalPlayer* GetOwnerPlayer();// 0x4f676a0
	MaterialInstanceDynamic* GetMaterialInstance();// 0x4f6766c
	Vector2D GetDrawSize();// 0x4f67638

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xf0, Size: 4]
	int SizeY;//[Offset: 0xf4, Size: 4]
	LinearColor ClearColor;//[Offset: 0xf8, Size: 16]
	byte AddressX;//[Offset: 0x108, Size: 1]
	byte AddressY;//[Offset: 0x109, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10a, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10a, Size: 1]
	byte RenderTargetFormat;//[Offset: 0x10b, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10c, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10c, Size: 1]
	byte OverrideFormat;//[Offset: 0x10d, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xe8, Size: 4]

--------------------------------
Class: AvatarDIYEntityFactory.Object
	AvatarDIYEntity* CreateEntity(int SlotID, int SubSlotID);// 0x3272ee4

--------------------------------
Class: WeaponAvatarDIYEntity.AvatarDIYEntity.Object
	void SetWeaponEntityVisibility(bool visibie);// 0x37446f8
	void SetSocketName(FName InName);// 0x3744674
	void SetLoadedHandle(BattleItemHandleBase* ItemHandle);// 0x37445f0
	void RenderEntity();// 0x37445d4
	void RemoveParticleEffect();// 0x37445b8
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x3744520
	void PrepareEntity();// 0x3744504
	void OnPreRender();// 0x37444e8
	void OnPostRender();// 0x37444cc
	bool IsForceEnableAnim();// 0x374448c
	enum GetSkeletalMeshType(BattleItemHandleBase* InHandle);// 0x37443f8
	ItemDefineID GetDefineID();// 0x37443a4
	void EnterLogicPipeline();// 0x3744388
	void ClearEquipmentLogic(bool bPutDefault, bool bClearMesh);// 0x37442b0
	void BroadcastWeaponRenderEvent();// 0x374429c
	void BroadcastWeaponEquipEvent(bool IsEquipped);// 0x3744218
	void ApplyParticleEffect();// 0x37441fc
	void AddWeaponHandleAction();// 0x37441e8

--------------------------------
Class: DecalBakingRequest
	Object* Mesh;//[Offset: 0x8, Size: 8]
	DecalParameter[] DecalParams;//[Offset: 0x18, Size: 16]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x28, Size: 8]

--------------------------------
Class: DecalParameter
	Texture2D* DecalTexture;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AvatarActionBase

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x3c8, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	void ToggleEnabled();// 0x5bc4b90
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x5bc4b14
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x5bc4a98
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x5bc4a1c
	void SetLightColor(LinearColor NewLightColor);// 0x5bc49a0
	void SetEnabled(bool bSetEnabled);// 0x5bc491c
	void SetCastShadows(bool bNewValue);// 0x5bc4898
	void SetBrightness(float NewBrightness);// 0x5bc481c
	void SetAffectTranslucentLighting(bool bNewValue);// 0x5bc4798
	void OnRep_bEnabled();// 0x5bc477c
	bool IsEnabled();// 0x5bc4744
	LinearColor GetLightColor();// 0x5bc470c
	float GetBrightness();// 0x5bc46d8

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x2f4, Size: 4]
	float MaxDrawDistance;//[Offset: 0x2f8, Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x2fc, Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 1]
	int ShadowMapChannel;//[Offset: 0x304, Size: 4]
	float MinRoughness;//[Offset: 0x30c, Size: 4]
	float ShadowResolutionScale;//[Offset: 0x310, Size: 4]
	int LightPriority;//[Offset: 0x314, Size: 4]
	float ShadowBias;//[Offset: 0x318, Size: 4]
	float ShadowSharpen;//[Offset: 0x31c, Size: 4]
	float ContactShadowLength;//[Offset: 0x320, Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x324, Size: 1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x324, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x324, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x324, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x324, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x325, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x328, Size: 8]
	Vector LightFunctionScale;//[Offset: 0x330, Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x340, Size: 8]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 1]
	float IESBrightnessScale;//[Offset: 0x34c, Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x350, Size: 4]
	float DisabledBrightness;//[Offset: 0x354, Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 1]
	float BloomScale;//[Offset: 0x35c, Size: 4]
	float BloomThreshold;//[Offset: 0x360, Size: 4]
	Color BloomTint;//[Offset: 0x364, Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x36c, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x5bc5a34
	void SetTemperature(float NewTemperature);// 0x5bc59b8
	void SetShadowBias(float NewValue);// 0x5bc593c
	void SetLightPriority(int Priority);// 0x5bc58c0
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x5bc5844
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x5bc57c8
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x5bc574c
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x5bc56d0
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x5bc5610
	void SetIntensity(float NewIntensity);// 0x5bc5594
	void SetIndirectLightingIntensity(float NewIntensity);// 0x5bc5518
	void SetIESTexture(TextureLightProfile* NewValue);// 0x5bc549c
	void SetEnableLightShaftBloom(bool bNewValue);// 0x5bc5418
	void SetBloomTint(Color NewValue);// 0x5bc53a0
	void SetBloomThreshold(float NewValue);// 0x5bc5324
	void SetBloomScale(float NewValue);// 0x5bc52a8
	void SetAffectTranslucentLighting(bool bNewValue);// 0x5bc5224
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x5bc51a0
	void ForceUpdateShadowState();// 0x5bc518c

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x2cc, Size: 16]
	float Brightness;//[Offset: 0x2dc, Size: 4]
	float Intensity;//[Offset: 0x2e0, Size: 4]
	Color LightColor;//[Offset: 0x2e4, Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e8, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e8, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e8, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x2ec, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x2f0, Size: 4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x5bc8380
	void SetCastShadows(bool bNewValue);// 0x5bc82fc
	LinearColor GetLightColor();// 0x5bc82c4

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0x138, Size: 4]
	float TextureMultiplier;//[Offset: 0x13c, Size: 4]

--------------------------------
Class: PredictLineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Actor* PredictActorTemplate;//[Offset: 0x7e8, Size: 8]
	StaticMesh* MeshTemplate;//[Offset: 0x7f0, Size: 40]
	ParticleSystem* PredictEndPointFX;//[Offset: 0x818, Size: 40]
	CurveFloat* PredictEndPointScaleCurve;//[Offset: 0x840, Size: 40]
	PredictProjectilePathParams PredictProjectilePathParams;//[Offset: 0x868, Size: 120]
	delegate InitNewSplineMeshDelegate;//[Offset: 0x8e0, Size: 16]
	PredictLineMaterialParams Param_StartPointLocation;//[Offset: 0x8f0, Size: 16]
	PredictLineMaterialParams Param_EndPointLocation;//[Offset: 0x900, Size: 16]
	PredictLineMaterialParams Param_EndPointFalloff;//[Offset: 0x910, Size: 16]
	PredictLineMaterialParams Param_PredictLineColor;//[Offset: 0x920, Size: 16]
	LinearColor PredictLineColor;//[Offset: 0x930, Size: 16]
	PredictProjectilePathResult PredictResult;//[Offset: 0x950, Size: 184]
	CurveFloat* Curve_PredictEndPointScale;//[Offset: 0xa08, Size: 8]
	ParticleSystem* FX_PredictEndPoint;//[Offset: 0xa10, Size: 8]
	StaticMesh* SplineMeshTemplate;//[Offset: 0xa18, Size: 8]
	SplineMeshComponent*[] CachedSplineMeshes;//[Offset: 0xa28, Size: 16]
	int RedrawCounter;//[Offset: 0xa38, Size: 4]
	void SetPredictParams(out const Vector InStartPoint, out const Vector InVelocity);// 0x349792c
	void SetPredictActorTemplate(class Actor InActorTemplate);// 0x34978b0

--------------------------------
Class: PredictProjectilePathParams
	Vector StartLocation;//[Offset: 0x0, Size: 12]
	Vector LaunchVelocity;//[Offset: 0xc, Size: 12]
	bool bTraceWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float ProjectileRadius;//[Offset: 0x1c, Size: 4]
	float MaxSimTime;//[Offset: 0x20, Size: 4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	byte TraceChannel;//[Offset: 0x25, Size: 1]
	byte[] ObjectTypes;//[Offset: 0x28, Size: 16]
	Actor*[] ActorsToIgnore;//[Offset: 0x38, Size: 16]
	float SimFrequency;//[Offset: 0x48, Size: 4]
	float OverrideGravityZ;//[Offset: 0x4c, Size: 4]
	float GravityScale;//[Offset: 0x50, Size: 4]
	float IgnoreGravityDis;//[Offset: 0x54, Size: 4]
	byte DrawDebugType;//[Offset: 0x58, Size: 1]
	float DrawDebugTime;//[Offset: 0x5c, Size: 4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]

--------------------------------
Class: PredictLineMaterialParams
	MaterialParameterCollection* MaterialParamCollection;//[Offset: 0x0, Size: 8]
	FName ParamName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PredictProjectilePathResult
	PredictProjectilePathPointData[] PathData;//[Offset: 0x0, Size: 16]
	PredictProjectilePathPointData LastTraceDestination;//[Offset: 0x10, Size: 28]
	HitResult HitResult;//[Offset: 0x30, Size: 136]

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector Velocity;//[Offset: 0xc, Size: 12]
	float Time;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x38, Size: 8]
	Pawn* OwnerPawn;//[Offset: 0x40, Size: 8]
	Controller* OwnerController;//[Offset: 0x48, Size: 8]
	STExtraWeapon* BindedWeapon;//[Offset: 0x50, Size: 8]
	void OnWeaponStopFireDelegate__DelegateSignature();// 0x4033584
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x37525ac
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x37524f4
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x37524c0
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x375248c
	PlayerController* GetOwnerPlayerController();// 0x3752458
	Pawn* GetOwnerPawn();// 0x3752424
	Controller* GetOwnerController();// 0x37523f0
	Actor* GetOwnerActor();// 0x37523d4

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0x1084, Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0x1088, Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108c, Size: 1]
	<int> TouchIndexSet;//[Offset: 0x1090, Size: 80]
	byte OnFireTouchFingerIndex;//[Offset: 0x10e0, Size: 1]
	enum TouchEndTriggerSkillEntry;//[Offset: 0x10e1, Size: 1]
	int TouchEndTriggerSkillID;//[Offset: 0x10e4, Size: 4]
	delegate OnPlayerContollerTouchBegin;//[Offset: 0x10e8, Size: 16]
	delegate OnPlayerControllerTouchEnd;//[Offset: 0x10f8, Size: 16]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0x1160, Size: 80]
	float MinOBRelevancyJudgeDissquared;//[Offset: 0x11b0, Size: 4]
	FName FeatureActorName;//[Offset: 0x11b8, Size: 8]
	ValidTouchMoveFrameConfig[] ValidTouchMoveFrameConfig;//[Offset: 0x11c0, Size: 16]
	ValidTouchMoveFrameConfig CurValidTouchMoveFrameConfig;//[Offset: 0x11d0, Size: 32]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0x11f0, Size: 16]
	byte[] IgnoreCameraMovePendingArray;//[Offset: 0x1200, Size: 16]
	byte[] AddTouchMoveFingerArray;//[Offset: 0x1210, Size: 16]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1220, Size: 1]
	byte OnFreeCameraFingerIndex;//[Offset: 0x1221, Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0x1224, Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0x1228, Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0x122c, Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0x1230, Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0x1234, Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0x1238, Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0x123c, Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0x1240, Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0x1244, Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0x1248, Size: 4]
	float RecoverLagDelayTime;//[Offset: 0x124c, Size: 4]
	Vector2D StartPosition;//[Offset: 0x1250, Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0x1258, Size: 8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0x1260, Size: 12]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0x126c, Size: 12]
	FString FollowCandidateName;//[Offset: 0x1280, Size: 16]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0x1290, Size: 80]
	Rotator FreeCameraStartRotation;//[Offset: 0x12e0, Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0x12f0, Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0x1320, Size: 1]
	bool GMShowVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1321, Size: 1]
	int8 CurrentBuildingIndex;//[Offset: 0x1322, Size: 1]
	int WeaponReconnectOpIndex;//[Offset: 0x1324, Size: 4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1328, Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132a, Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0x1330, Size: 16]
	LinearColor CrossHairColor;//[Offset: 0x1340, Size: 16]
	byte AutoAimType;//[Offset: 0x1350, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1360, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1361, Size: 1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1370, Size: 1]
	bool bForceHideConcentric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1371, Size: 1]
	bool bForceShowBlueCircleEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1372, Size: 1]
	FString[] ScreenAppearToBeRemovedInResult;//[Offset: 0x1378, Size: 16]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0x1388, Size: 16]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0x1398, Size: 256]
	SensibilityConfig SensibilityConfig;//[Offset: 0x1498, Size: 256]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1638, Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1639, Size: 1]
	int UseMotionControlType;//[Offset: 0x163c, Size: 4]
	bool IsGyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1640, Size: 1]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0x1648, Size: 16]
	delegate OnPlayerEnterFlying;//[Offset: 0x1658, Size: 16]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0x1668, Size: 16]
	delegate OnPlayerExitFlying;//[Offset: 0x1678, Size: 16]
	delegate OnPlayerEnterJumping;//[Offset: 0x1688, Size: 16]
	delegate OnPlayerExitJumping;//[Offset: 0x1698, Size: 16]
	delegate OnPlayerEnterParachute;//[Offset: 0x16a8, Size: 16]
	delegate OnPlayerExitParachute;//[Offset: 0x16b8, Size: 16]
	delegate OnPlayerEnterWater;//[Offset: 0x16c8, Size: 16]
	delegate OnPlayerExitWater;//[Offset: 0x16d8, Size: 16]
	delegate OnPlayerEnterFighting;//[Offset: 0x16e8, Size: 16]
	delegate OnPlayerExitFighting;//[Offset: 0x16f8, Size: 16]
	delegate OnPlayerEnterFinished;//[Offset: 0x1708, Size: 16]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x1718, Size: 16]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0x1728, Size: 16]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x1738, Size: 16]
	delegate OnShowHideSelfMarkDelegate;//[Offset: 0x1748, Size: 16]
	delegate OnShowAllTeammatePosDelegate;//[Offset: 0x1758, Size: 16]
	delegate OnShowAliasInfoDelegate;//[Offset: 0x1768, Size: 16]
	delegate OnCheckSignalPlaybackDelegate;//[Offset: 0x1778, Size: 16]
	delegate OnEnableSignalSystemChangedDelegate;//[Offset: 0x1788, Size: 16]
	delegate OnCongregationFlagDelegate;//[Offset: 0x1798, Size: 16]
	delegate OnTeamFollowStageChangeDelegate;//[Offset: 0x17a8, Size: 16]
	delegate OnCharacterBreathChange;//[Offset: 0x17b8, Size: 16]
	delegate OnHideFollowPanelAndBtnDelegate;//[Offset: 0x17c8, Size: 16]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x17d8, Size: 16]
	delegate OnRemindTeammateShoot;//[Offset: 0x17e8, Size: 16]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x17f8, Size: 16]
	delegate OnCharacterAntidoteChange;//[Offset: 0x1808, Size: 16]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x1818, Size: 16]
	delegate OnNightBeggan;//[Offset: 0x1828, Size: 16]
	delegate OnNightEnded;//[Offset: 0x1838, Size: 16]
	delegate OnPlayerHitInfoUpdate;//[Offset: 0x1848, Size: 16]
	delegate OnPlayerSwitchToDeadBox;//[Offset: 0x1858, Size: 16]
	int SelectedNightRenderConfig;//[Offset: 0x1868, Size: 4]
	delegate OnInitTaskData;//[Offset: 0x1870, Size: 16]
	delegate OnInitCollectionData;//[Offset: 0x1880, Size: 16]
	delegate OnPlayerDoEmote;//[Offset: 0x1890, Size: 16]
	delegate OnPlayerEnterArea;//[Offset: 0x18a0, Size: 16]
	delegate OnPlayerKilling;//[Offset: 0x18b0, Size: 16]
	delegate OnPickupItem;//[Offset: 0x18c0, Size: 16]
	delegate OnDropItem;//[Offset: 0x18d0, Size: 16]
	delegate OnDeathBoxSpawned;//[Offset: 0x18e0, Size: 16]
	delegate OnTaskConditionActived;//[Offset: 0x18f0, Size: 16]
	delegate OnTaskConditionDeactived;//[Offset: 0x1900, Size: 16]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x1950, Size: 168]
	delegate OnKillOrPutDownMessage;//[Offset: 0x19f8, Size: 16]
	delegate OnStartFireEvent;//[Offset: 0x1a08, Size: 16]
	delegate OnStopFireEvent;//[Offset: 0x1a18, Size: 16]
	delegate OnReleaseFireBtn;//[Offset: 0x1a28, Size: 16]
	delegate OnReleaseScreen;//[Offset: 0x1a38, Size: 16]
	delegate OnFingerMove;//[Offset: 0x1a48, Size: 16]
	delegate OnHandleCameraModeChanged;//[Offset: 0x1a58, Size: 16]
	delegate OnSwitchCameraModeStart;//[Offset: 0x1a68, Size: 16]
	delegate OnSwitchCameraModeEnd;//[Offset: 0x1a78, Size: 16]
	delegate OnPlayerPickUpActor;//[Offset: 0x1a88, Size: 16]
	delegate OnPlayerPutDownActor;//[Offset: 0x1a98, Size: 16]
	delegate OnPlayerPutDownAllProp;//[Offset: 0x1aa8, Size: 16]
	delegate OnSwitchWeapon;//[Offset: 0x1ab8, Size: 16]
	delegate OnEquipWeaponDel;//[Offset: 0x1ac8, Size: 16]
	delegate OnUnequipWeaponDel;//[Offset: 0x1ad8, Size: 16]
	delegate OnUseInventoryItem;//[Offset: 0x1ae8, Size: 16]
	delegate OnChangeBattleOwnerDel;//[Offset: 0x1af8, Size: 16]
	delegate OnDamageToOther;//[Offset: 0x1b08, Size: 16]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x1b18, Size: 16]
	delegate OnLocalCharacterSignalHPChangeDelegate;//[Offset: 0x1b28, Size: 16]
	delegate OnServerCharacterSignalHPChangeDelegate;//[Offset: 0x1b38, Size: 16]
	delegate OnLocalCharacterSignalHPRemaingingTimeDelegate;//[Offset: 0x1b48, Size: 16]
	delegate DelegatePlayerGoldChange;//[Offset: 0x1b58, Size: 16]
	delegate DelegatePlayerLevelChange;//[Offset: 0x1b68, Size: 16]
	delegate OnGameStartCountDownDelegate;//[Offset: 0x1b78, Size: 16]
	delegate OnRank;//[Offset: 0x1b88, Size: 16]
	delegate OnGameStartDelegate;//[Offset: 0x1b98, Size: 16]
	delegate OnPlayerNameChange;//[Offset: 0x1ba8, Size: 16]
	delegate OnUseMainSlot;//[Offset: 0x1bb8, Size: 16]
	delegate OnBackpackMainSlot;//[Offset: 0x1bc8, Size: 16]
	delegate OnRemoveMainSlot;//[Offset: 0x1bd8, Size: 16]
	delegate OnRepPlayerState;//[Offset: 0x1be8, Size: 16]
	delegate OnRepTeammateChange;//[Offset: 0x1bf8, Size: 16]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x1c08, Size: 16]
	delegate OnMapMarkChangeDelegate;//[Offset: 0x1c20, Size: 16]
	delegate OnShowSkillPrompt;//[Offset: 0x1c30, Size: 16]
	delegate OnStartAutoSprintCountDown;//[Offset: 0x1c40, Size: 16]
	delegate OnShowAutoSprintButton;//[Offset: 0x1c50, Size: 16]
	delegate OnPlayerChangeWearingDone;//[Offset: 0x1c60, Size: 16]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0x1c70, Size: 16]
	delegate OnPlayerFinalAssistKill;//[Offset: 0x1c80, Size: 16]
	delegate OnConsumableAvatarChange;//[Offset: 0x1c90, Size: 16]
	delegate OnEquipmentAvatarChange;//[Offset: 0x1ca0, Size: 16]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0x1cb0, Size: 16]
	delegate OnGameStateChange;//[Offset: 0x1cc0, Size: 16]
	delegate OnPlayerKilledOthersPlayer;//[Offset: 0x1cd0, Size: 16]
	delegate OnChangeCharacterBeforeDelegate;//[Offset: 0x1ce0, Size: 16]
	delegate OnChangeCharacterLogicDelegate;//[Offset: 0x1cf0, Size: 16]
	delegate OnInfectionSelectZombieDelegate;//[Offset: 0x1d00, Size: 16]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x1d10, Size: 16]
	delegate OnCacheRecvInfectionSelectZombie;//[Offset: 0x1d40, Size: 16]
	delegate OpenSequencerDelegate;//[Offset: 0x1d50, Size: 16]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x1d70, Size: 8]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x1d78, Size: 16]
	delegate OnAutoSprintActive;//[Offset: 0x1d88, Size: 16]
	delegate OnTakeDamagedDelegate;//[Offset: 0x1d98, Size: 16]
	delegate OnPostTakeDamageDelegate;//[Offset: 0x1da8, Size: 16]
	delegate OnPostTakeDamageForBP;//[Offset: 0x1db8, Size: 16]
	delegate OnLostConnection;//[Offset: 0x1dc8, Size: 16]
	delegate OnReconnected;//[Offset: 0x1dd8, Size: 16]
	delegate OnExitGame;//[Offset: 0x1de8, Size: 16]
	delegate OnSpectatorChange;//[Offset: 0x1df8, Size: 16]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x1e08, Size: 16]
	delegate RunOnNextFrameDelegate;//[Offset: 0x1e18, Size: 16]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x1e28, Size: 8]
	int MaternalZombieWeight;//[Offset: 0x1e30, Size: 4]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x1e38, Size: 8]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x1e40, Size: 8]
	HiggsBosonComponent* HiggsBosonComponent;//[Offset: 0x1e48, Size: 8]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x1e50, Size: 8]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e58, Size: 1]
	delegate NewbieShowCurGuide;//[Offset: 0x20a0, Size: 16]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x20b0, Size: 16]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c4, Size: 1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c5, Size: 1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c6, Size: 1]
	bool EnableDebugRotatoInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c7, Size: 1]
	bool EnableDebugRotatoInfoTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c8, Size: 1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c9, Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20ca, Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x20cc, Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x20d0, Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x20d4, Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x20d8, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x20e0, Size: 8]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x20e8, Size: 8]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f0, Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x20f4, Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x2118, Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x213c, Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x2144, Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x214c, Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x2170, Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x2178, Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x2180, Size: 36]
	<byte,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x21a8, Size: 80]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x21f8, Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x21fc, Size: 4]
	float MoveCameraMaxDistanceThreshold;//[Offset: 0x2200, Size: 4]
	<byte,int> PlayerClothLODLevel;//[Offset: 0x2208, Size: 80]
	enum[] PlayerClothLODAvatarTypeList;//[Offset: 0x2258, Size: 16]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2268, Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2269, Size: 1]
	Actor* BonfireUIAttachedActor;//[Offset: 0x2270, Size: 8]
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2278, Size: 1]
	byte CurCameraMode;//[Offset: 0x2279, Size: 1]
	FString BPClassOverrideTag;//[Offset: 0x2280, Size: 16]
	FName AutoScopeAimCompName;//[Offset: 0x2290, Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x2298, Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229c, Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229d, Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229e, Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229f, Size: 1]
	float MoveableLandHardTime;//[Offset: 0x22a0, Size: 4]
	float CanMoveCDTime;//[Offset: 0x22a4, Size: 4]
	float CanSprintCDTime;//[Offset: 0x22a8, Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x22ac, Size: 4]
	float MovealbeSwitchPoseTime;//[Offset: 0x22b0, Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x22b4, Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22b8, Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x22bc, Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x22c8, Size: 4]
	float SpecialDeviceRate;//[Offset: 0x22cc, Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x22d0, Size: 80]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2320, Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2321, Size: 1]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2322, Size: 1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x2328, Size: 8]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2330, Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2331, Size: 1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x2338, Size: 16]
	bool bDebugShowYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2348, Size: 1]
	float AccumulateYawInput;//[Offset: 0x234c, Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x2350, Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2354, Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2355, Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2356, Size: 1]
	float NoRespondArea;//[Offset: 0x2358, Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x235c, Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2360, Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2361, Size: 1]
	byte sprintOptType;//[Offset: 0x2362, Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x2364, Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x2368, Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x236c, Size: 4]
	int JoystickSprintSensitity;//[Offset: 0x2370, Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x2374, Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2378, Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x2379, Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x237c, Size: 4]
	float AssistAreaHalfHeight;//[Offset: 0x2380, Size: 4]
	float AssistAreaRadius;//[Offset: 0x2384, Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2388, Size: 1]
	<byte,float> TouchForceMap;//[Offset: 0x2390, Size: 80]
	float TouchForceFireThreshold;//[Offset: 0x23e0, Size: 4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x23e4, Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x23e8, Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x23ec, Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x23f0, Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23f4, Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x23f8, Size: 4]
	byte TouchFireType;//[Offset: 0x23fc, Size: 1]
	float TestForce;//[Offset: 0x2400, Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x2408, Size: 16]
	delegate OnDoubleClickCheck;//[Offset: 0x2418, Size: 16]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2428, Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2429, Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x242a, Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x242b, Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x242c, Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x2430, Size: 4]
	float AutoSprintThreshold;//[Offset: 0x2434, Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x2438, Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x243c, Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x2440, Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2444, Size: 1]
	float CurrentCameraFOV;//[Offset: 0x2448, Size: 4]
	float MinFovChangeView;//[Offset: 0x244c, Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x2450, Size: 48]
	int GameTipMsgID;//[Offset: 0x2480, Size: 4]
	FString GameTipParam1;//[Offset: 0x2488, Size: 16]
	FString GameTipParam2;//[Offset: 0x2498, Size: 16]
	float AutoSprintCD;//[Offset: 0x24f8, Size: 4]
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x2500, Size: 80]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x2550, Size: 80]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x25a0, Size: 80]
	float TeamInfoForceUpdateInterval;//[Offset: 0x25f4, Size: 4]
	bool bEnableSignalBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f8, Size: 1]
	class GameMode[] AdditionalSignalBarDisplayGameModes;//[Offset: 0x2600, Size: 16]
	delegate OnReceiveHasSignal;//[Offset: 0x2610, Size: 16]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x2640, Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x2708, Size: 8]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x2710, Size: 8]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x2718, Size: 8]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x2720, Size: 8]
	PlayerTombBox* DeadTombBox;//[Offset: 0x2738, Size: 8]
	FString[] ForbitPickList;//[Offset: 0x2748, Size: 16]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2768, Size: 1]
	int pickupPlayerChoice;//[Offset: 0x276c, Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2770, Size: 1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2771, Size: 1]
	float RescueRemainingSeconds;//[Offset: 0x2774, Size: 4]
	float RescueTotalSeconds;//[Offset: 0x2778, Size: 4]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x277c, Size: 1]
	float FreeViewUpRate;//[Offset: 0x2780, Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x2784, Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x2788, Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278c, Size: 1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278d, Size: 1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x2790, Size: 12]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x279c, Size: 20]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27b0, Size: 1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x27b1, Size: 1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27b2, Size: 1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27b3, Size: 1]
	byte CurSightZoomFingerIndex;//[Offset: 0x2800, Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x2801, Size: 1]
	byte ValidTouchMove;//[Offset: 0x2844, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x2870, Size: 8]
	BackpackComponent* BackpackComponent;//[Offset: 0x2900, Size: 8]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x2908, Size: 8]
	ChatComponent* ChatComponent;//[Offset: 0x2910, Size: 8]
	GuideComponent* GuideComponent;//[Offset: 0x2918, Size: 8]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x2920, Size: 8]
	BaseTaskComponent* TaskComponent;//[Offset: 0x2928, Size: 8]
	delegate ClientObserveCharacterDelegate;//[Offset: 0x2938, Size: 16]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2955, Size: 1]
	int8 bEnableDeathPlaybackDelay;//[Offset: 0x2956, Size: 1]
	int[] ObserveReplicateItems;//[Offset: 0x2958, Size: 16]
	delegate OnOBPlayerItemChangedDelegate;//[Offset: 0x2968, Size: 16]
	delegate OnOBPlayerWeaponChangedDelegate;//[Offset: 0x2978, Size: 16]
	delegate OnOBPlayerBulletChangedDelegate;//[Offset: 0x2988, Size: 16]
	delegate OnViewTargetAttachedToVehicleDelegate;//[Offset: 0x2998, Size: 16]
	delegate OnViewTargetDetachedFromVehicleDelegate;//[Offset: 0x29a8, Size: 16]
	BattleItemData[] ObservedItemList;//[Offset: 0x29d8, Size: 16]
	bool bIsSendingObserveReq;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29e8, Size: 1]
	uint32[] FiringPlayerList;//[Offset: 0x2ab8, Size: 16]
	delegate OnViewTargetPoseChangedDelegate;//[Offset: 0x2ac8, Size: 16]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x2ad8, Size: 16]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x2ae8, Size: 16]
	delegate OnCharacterStatesChange;//[Offset: 0x2af8, Size: 16]
	bool bIsCheckLevelStreamingReturnBeforeFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b08, Size: 1]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x2b10, Size: 16]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b20, Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x2b28, Size: 16]
	float GotoSpectatingDelayTime;//[Offset: 0x2b3c, Size: 4]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x2b40, Size: 16]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x2b50, Size: 16]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x2b60, Size: 16]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x2b70, Size: 16]
	AIPlayerInfoInOB[] NearAIPlayerList;//[Offset: 0x2b80, Size: 16]
	FString TPPFollowAIPlayerKey;//[Offset: 0x2b98, Size: 16]
	<FString,AllStarReportData> AllStarReportInfoCache;//[Offset: 0x2ba8, Size: 80]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x2bf8, Size: 16]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x2c08, Size: 80]
	ObservedData ObservedData;//[Offset: 0x2c58, Size: 80]
	delegate OnSignalHPChanged;//[Offset: 0x2cb8, Size: 16]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ccd, Size: 1]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x2cd0, Size: 16]
	delegate OnToggleOBMapShowHide;//[Offset: 0x2ce8, Size: 16]
	delegate OnInterruptGameButtonShow;//[Offset: 0x2cf8, Size: 16]
	delegate OnToggleOBPlayerList;//[Offset: 0x2d10, Size: 16]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x2d20, Size: 16]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x2d30, Size: 16]
	delegate OnToggleOBTeamList;//[Offset: 0x2d40, Size: 16]
	delegate WeaponEquipAttachment;//[Offset: 0x2d50, Size: 16]
	delegate OnVehicleExitFreeCamera;//[Offset: 0x2d60, Size: 16]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x2d70, Size: 16]
	delegate OnOBVehicleViewChangedDelegate;//[Offset: 0x2d80, Size: 16]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x2da0, Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x2da4, Size: 4]
	bool IsSmoothlyVehicleViewSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db4, Size: 1]
	bool NeedCheckChangeToVehicleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db5, Size: 1]
	CurveVector* OBVehicleViewArmOffset;//[Offset: 0x2db8, Size: 8]
	int OBVehicleViewAcceRecordsNum;//[Offset: 0x2dc0, Size: 4]
	class CameraShake* OnHitCameraShake;//[Offset: 0x2dd8, Size: 8]
	CurveVector* OBVehicleImpulseClamp;//[Offset: 0x2de8, Size: 8]
	CurveFloat* OBVehicleImpulseRollClamp;//[Offset: 0x2df0, Size: 8]
	float CurrentOBVehicleViewArmLength;//[Offset: 0x2df8, Size: 4]
	float OBVehicleViewArmLengthMax;//[Offset: 0x2dfc, Size: 4]
	float OBVehicleViewArmLengthMin;//[Offset: 0x2e00, Size: 4]
	Vector OBVehicleRelativeLocation;//[Offset: 0x2e04, Size: 12]
	float OBVehicleViewFOV;//[Offset: 0x2e10, Size: 4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x2e14, Size: 4]
	byte iPlayerAliasInfoCount;//[Offset: 0x2e18, Size: 1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e19, Size: 1]
	bool IsAutoGetCircleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1a, Size: 1]
	delegate OnCharacterReceiveHealthChangeHistory;//[Offset: 0x2e20, Size: 16]
	delegate OnLiveStateChanged;//[Offset: 0x2e30, Size: 16]
	int FireMode;//[Offset: 0x2e40, Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e44, Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e45, Size: 1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e46, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e47, Size: 1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x2e48, Size: 16]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x2e58, Size: 16]
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x2e68, Size: 16]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x2e78, Size: 16]
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x2e88, Size: 16]
	Actor*[] nowGrenadeList;//[Offset: 0x2e98, Size: 16]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ea8, Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x2eb0, Size: 16]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x2ec0, Size: 16]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x2ed0, Size: 16]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x2ee0, Size: 16]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x2ef0, Size: 16]
	delegate tirggerLandingVoiceCheckDelegate;//[Offset: 0x2f00, Size: 16]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f10, Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x2f18, Size: 16]
	delegate OnPlayerCannotJump;//[Offset: 0x2f28, Size: 16]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f38, Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x2f40, Size: 16]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x2f50, Size: 16]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f60, Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x2f64, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x2f68, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x2f6c, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x2f70, Size: 4]
	float RealTimePawnHeight;//[Offset: 0x2f74, Size: 4]
	float OB_RotationLagSpeed;//[Offset: 0x2f84, Size: 4]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x2fa0, Size: 24]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x2fb8, Size: 16]
	Actor* ThePlane;//[Offset: 0x2fc8, Size: 8]
	float GameAssistantJoyStickOpacity;//[Offset: 0x2fd8, Size: 4]
	delegate OnNotifyServerOpenPickUpBox;//[Offset: 0x2fe0, Size: 16]
	delegate OnNotifyServerFirstOpenPickUpBox;//[Offset: 0x2ff0, Size: 16]
	delegate OnNotifyServerOpenAnyPickUpBox;//[Offset: 0x3000, Size: 16]
	bool bClientCheckResetViewTargetToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3010, Size: 1]
	float ClientCheckResetViewTargetToCharacterConfigSeconds;//[Offset: 0x3014, Size: 4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x3030, Size: 16]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x3048, Size: 8]
	FString LastBreathMurder;//[Offset: 0x3058, Size: 16]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3068, Size: 1]
	uint64 LastBreathMurderUID;//[Offset: 0x3070, Size: 8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x3078, Size: 8]
	FString murderName;//[Offset: 0x3080, Size: 16]
	FString FinalMurderName;//[Offset: 0x3090, Size: 16]
	uint64 MurderUID;//[Offset: 0x30a0, Size: 8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a8, Size: 1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a9, Size: 1]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30aa, Size: 1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x3108, Size: 80]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x3158, Size: 80]
	float OceanSideDetectDistance;//[Offset: 0x31b0, Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x31b4, Size: 4]
	int CurrOBAirDropID;//[Offset: 0x31b8, Size: 4]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x31c0, Size: 80]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3210, Size: 1]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x3320, Size: 8]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3328, Size: 1]
	FString ClientActivePlatformProfileName;//[Offset: 0x3330, Size: 16]
	float ZMoveDisCalcThreshold;//[Offset: 0x3390, Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3394, Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x3398, Size: 8]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a0, Size: 1]
	enum ServerStateType;//[Offset: 0x33a1, Size: 1]
	enum ClientStateType;//[Offset: 0x33a2, Size: 1]
	enum GameStateMsgType;//[Offset: 0x33a3, Size: 1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c4, Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c5, Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c6, Size: 1]
	float ObservingTime;//[Offset: 0x33c8, Size: 4]
	KillerTracker* tracker;//[Offset: 0x33d0, Size: 8]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33ec, Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33ed, Size: 1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x3450, Size: 8]
	FString DefaultHUDClassPath;//[Offset: 0x3458, Size: 16]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x3480, Size: 16]
	STExtraPlayerController* DieInstigator;//[Offset: 0x3490, Size: 8]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3498, Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3499, Size: 1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x34a0, Size: 8]
	int BOptimizeBulletHit;//[Offset: 0x34a8, Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x34b0, Size: 80]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x3500, Size: 16]
	int MaxTeamFootprintCount;//[Offset: 0x3510, Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x3514, Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x3518, Size: 80]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x3568, Size: 80]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x35c0, Size: 8]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x35c8, Size: 16]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x35d8, Size: 80]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x3648, Size: 8]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x3650, Size: 8]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x3658, Size: 8]
	delegate OnPlayerEnterRevivalStateDelegate;//[Offset: 0x36b0, Size: 16]
	delegate OnPlayerLeaveRevivalStateDelegate;//[Offset: 0x36c0, Size: 16]
	delegate SetCaptureIDCardStatusDelegate;//[Offset: 0x36d0, Size: 16]
	delegate OnPlayerExitGameDelegate;//[Offset: 0x36e0, Size: 16]
	delegate OnEnterVehicleDelegate;//[Offset: 0x3710, Size: 16]
	delegate ClientOnEnterVehicle;//[Offset: 0x3720, Size: 16]
	delegate ClientOnLeaveVehicle;//[Offset: 0x3730, Size: 16]
	delegate ClientOnChangeVehicleSeatCompletedDelegate;//[Offset: 0x3740, Size: 16]
	delegate OnVehicleWeaponIsReadyForFireDelegate;//[Offset: 0x3750, Size: 16]
	delegate ClientOnDeathReplayDataWhenFatalDamagedDelegate;//[Offset: 0x3760, Size: 16]
	delegate OnViewTargetChange;//[Offset: 0x3770, Size: 16]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3780, Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3781, Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x3784, Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x3788, Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x3794, Size: 8]
	int IdCardMarkType;//[Offset: 0x37a0, Size: 4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c0, Size: 1]
	int VehicleControlMode;//[Offset: 0x37c4, Size: 4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c8, Size: 1]
	delegate InfectionShowKillNumDelegate;//[Offset: 0x37d0, Size: 16]
	delegate InfectionPlayerPawnInitType;//[Offset: 0x37e0, Size: 16]
	float StreamingDistanceScaleFlying;//[Offset: 0x37f0, Size: 4]
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37f4, Size: 1]
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x37f8, Size: 16]
	bool bIsPlayerOutBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3808, Size: 1]
	delegate OnPlayerInOutBlueCircleChangedDelegate;//[Offset: 0x3810, Size: 16]
	float MoveDistanceThreshold;//[Offset: 0x3820, Size: 4]
	float SpeedRecordTime;//[Offset: 0x3824, Size: 4]
	float SpeedRecordAccTime;//[Offset: 0x3828, Size: 4]
	delegate OnSelfPawnDeathDelegate;//[Offset: 0x3830, Size: 16]
	delegate OnChangeToWalkingDead;//[Offset: 0x3840, Size: 16]
	bool bCanChangeToWalkingDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3850, Size: 1]
	delegate OnNotifyCanChangeToWalkingDead;//[Offset: 0x3858, Size: 16]
	delegate OnChangeToWalkingDeadRes;//[Offset: 0x3868, Size: 16]
	bool GMDisableLeftScreenControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3878, Size: 1]
	bool IsJoystickInLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3879, Size: 1]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x3880, Size: 16]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x3890, Size: 16]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x38a0, Size: 16]
	delegate OnInfectionShowTipMsgDelegate;//[Offset: 0x38b0, Size: 16]
	delegate OnInfectionPlaySoundEventDelegate;//[Offset: 0x38c0, Size: 16]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x38d0, Size: 8]
	uint32 LastKillerKey;//[Offset: 0x38d8, Size: 4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38dc, Size: 1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38dd, Size: 1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e8, Size: 1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e9, Size: 1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38ea, Size: 1]
	float LastReportAntiDataTime;//[Offset: 0x38ec, Size: 4]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x38f0, Size: 16]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x3900, Size: 16]
	delegate OnSpawnVehicleServerTimeUpdatedDelegate;//[Offset: 0x3910, Size: 16]
	bool bDisableTouchMoveInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3920, Size: 1]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x3928, Size: 16]
	delegate OnPlayerNumOnPlaneChangedDelegate;//[Offset: 0x3938, Size: 16]
	delegate OnReconnectResetUIByPlayerControllerStateDelegate;//[Offset: 0x3948, Size: 16]
	delegate OnMemberVoiceDelegate;//[Offset: 0x3958, Size: 16]
	delegate HideAllUIAfterDeadTipsShowDelegate;//[Offset: 0x3968, Size: 16]
	Actor* InteractiveActor;//[Offset: 0x3978, Size: 8]
	delegate OnVehicleWarKilledTrackerStartDelegate;//[Offset: 0x3980, Size: 16]
	delegate OnVehicleWarKilledTrackerFinishDelegate;//[Offset: 0x3990, Size: 16]
	delegate OnVehicleWarVehicleRepawnDelegate;//[Offset: 0x39a0, Size: 16]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x39b0, Size: 16]
	FloatingTextComponent* FloatingTextComp;//[Offset: 0x39c0, Size: 8]
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x39e0, Size: 16]
	<byte,ParachuteAnimAssetData> ParachuteAnimAssetCache;//[Offset: 0x39f0, Size: 80]
	enum CurrentWeaponFunction;//[Offset: 0x3a40, Size: 1]
	float WeaponFunctionChangingInterval;//[Offset: 0x3a44, Size: 4]
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a48, Size: 1]
	float WeaponFunctionLastChangingTime;//[Offset: 0x3a4c, Size: 4]
	WeatherConfigComponent* WeatherConfigComponent;//[Offset: 0x3a50, Size: 8]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x3a58, Size: 8]
	bool bDstWeather;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a68, Size: 1]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a78, Size: 1]
	delegate OnIndoorStateChangeDelegate;//[Offset: 0x3a80, Size: 16]
	double LastFlyLeapPlatfromTime;//[Offset: 0x4188, Size: 8]
	bool bEnableDSErrorLogReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e0, Size: 1]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41e1, Size: 1]
	<int,int> ActivitdedIDMap;//[Offset: 0x41e8, Size: 80]
	WeaponHitDetailInfo ShowWeaponHitDetailInfo;//[Offset: 0x4250, Size: 24]
	WeaponHitDetailInfo CacheWeaponHitDetailInfo;//[Offset: 0x4268, Size: 24]
	LastGameRemainItemData LastGameRemainItemData;//[Offset: 0x4280, Size: 56]
	bool bAddMovementTickInSpect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b8, Size: 1]
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42ba, Size: 1]
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42bb, Size: 1]
	float FadeGrayInterpSpeed;//[Offset: 0x42bc, Size: 4]
	<int,enum> PlayerAvatarHideState;//[Offset: 0x42c0, Size: 80]
	float ParachuteSlideReportDuration;//[Offset: 0x4310, Size: 4]
	float ParachuteReportLocationDiffSq;//[Offset: 0x4314, Size: 4]
	ParachuteData ParachuteData;//[Offset: 0x4318, Size: 144]
	float TrustClientSinceEnterParachuteJump;//[Offset: 0x43ac, Size: 4]
	float ClientParachuteLandedFinishTimeMax;//[Offset: 0x43b4, Size: 4]
	VehicleMoveDragData DragData;//[Offset: 0x43c0, Size: 32]
	float ReportSimulatedDragInterval;//[Offset: 0x43e0, Size: 4]
	void VW_Seat(int change);// 0x3607ff8
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x3607f04
	void ViewPlane();// 0x3607ef0
	void VehicleWarOpenSequencerDelegate__DelegateSignature(out const BattleOpenSequencerInfo SequencerInfo);// 0x4033584
	void VehicleWarFireTakeDamagedEvent(Vector CauserLocation);// 0x3607e74
	void VehicleResetTo(float X, float Y, float Z);// 0x3607d84
	void VehicleMoveTo(float X, float Y, float Z);// 0x3607c94
	void UseZombieModeSkill();// 0x3607c80
	void UserDropItemOperation(ItemDefineID DefineID);// 0x3607bf4
	void UseItem(int ID);// 0x3607b78
	void UpdateSurfboardUI();// 0x3607b64
	void UpdateSelfRevivalCountdown(int CurCountdown);// 0x3607ae0
	void UpdatePoseViewPitchLimit();// 0x3607acc
	void UpdatePoseState(byte PoseType);// 0x3607a50
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x360798c
	void UnPossess();// 0x3607970
	void UnLoadAllCollision(bool Unload);// 0x36078ec
	void TryReqMoveToTarget(int FollowType, FString FollowUID);// 0x3607778
	void TriggerVehicleVoiceCheckFuction(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x3607684
	void TriggerShotVoiceCheckFuction(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x3607500
	void TriggerMoveVoiceCheckFuction(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x360740c
	void TriggerLandingVoiceCheckFuction(Vector posVector, float showTime);// 0x3607354
	void TriggerHunterRevival();// 0x3607340
	void TriggerGlassVoiceCheckFuction(Vector posVector, float showTime);// 0x3607288
	void TPPFollowAI(FString AIPlayerKey);// 0x36071e0
	void TouchMove(Vector Loc, byte FingerIndex);// 0x3607128
	bool TouchEnd(byte PressType);// 0x3607098
	void TouchBegin(byte PressType);// 0x360701c
	void ToggleVehicleSync(bool Val);// 0x3606f98
	void ToggleUserCmdDeltaSendAck(bool Val);// 0x3606f14
	void ToggleUserCmdDeltaFlag(bool Val);// 0x3606e90
	void ToggleUserCmdDeltaCheckSum(bool Val);// 0x3606e0c
	void ToggleUserCmdDelta(bool Val);// 0x3606d88
	void ToggleServerAcknowledgePossession(bool Val);// 0x3606d04
	void ToggleOBVehicleView();// 0x3606cf0
	void ToggleOBTPPFollowFreeView();// 0x3606cdc
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x3606c58
	void ToggleCheatLocation(bool Val);// 0x3606bd4
	void TestMapMarkClient(int inAlertID, int IconID, int testFuncIndex);// 0x3606ae4
	void TestLowProbCircle(bool UseLowProb, int LoopCount);// 0x3606a1c
	void TestLaunchFly(float Speed);// 0x36069a0
	void TestAutoMoveToShootingMachine();// 0x360698c
	void TestAutoMoveToLocation(float X, float Y, float Z);// 0x360689c
	void TestAutoMoveToCharacter(FString TargetPlayerUID);// 0x3606768
	void TempleStopMoving();// 0x3606754
	void TempleStartMoving();// 0x3606740
	void TempleSpawnBoss();// 0x360672c
	void TempleDisappear();// 0x3606718
	void TeleportToTemple(byte bOutCollisionTeleportPoint);// 0x360669c
	void TeleportAIToLoc(float X, float Y, float Z);// 0x36065ac
	void TeamNoAlwaysRelevant();// 0x3606598
	void TeamMateUAVStateChanged(STExtraPlayerState* STPlayerState, TeamateStateUAVChangedCompressData ChangedCompressedData);// 0x36064c4
	void TeamMateStateChangedZNQ(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, float HealthMax, int VoiceID);// 0x36062dc
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector_NetQuantize100 Location, uint32 View, byte Roll, float Health, int VoiceID);// 0x360612c
	void SwitchViewTarget();// 0x3606118
	void SwitchToTeamByNumPressed();// 0x3606104
	void SwitchToPlayerByNumPressed();// 0x36060f0
	void SwitchToDeadBox();// 0x36060dc
	void SwitchShowUI();// 0x36060c8
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x3605fd8
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState, enum FailReason);// 0x3605ea0
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte PoseState);// 0x3605de0
	void SwitchMouseCursorShowState();// 0x3605dcc
	void SwitchGenerateItem();// 0x3605d6c
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x3605cb4
	void SwitchCameraModeByOrder();// 0x3605ca0
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x3605b58
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x3605a5c
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x3605984
	void StopAbsorb();// 0x3605924
	void StartReadyCountDown();// 0x3605910
	void StartLandOnGroundAfterJumpPlane();// 0x36058fc
	void StartInputCameraMoveTest(bool bIsStartInputCameraMoveTest, bool bIsStartTestAllTime, float IntervalTime);// 0x36057f0
	void StartGame();// 0x36057dc
	void StartFreeCamera(byte FigerIndex);// 0x3605760
	void StartAirDropSpecified(float X, float Y);// 0x36056ac
	void StartAirDropBackupEnter(float X, float Y, int MaxPlaneNum);// 0x36055bc
	void StartAirDrop(int Index);// 0x3605540
	void StartAirAttackSpecified(float X, float Y, float Radius);// 0x3605450
	void StartAirAttack(int Index);// 0x36053d4
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x3605310
	void SpawnVehicleWithPathAndLoc(FString Path, float X, float Y, float Z, int Num);// 0x3605178
	void SpawnVehicleWithPath(FString Path, int Num);// 0x3605090
	void SpawnVehicle();// 0x360507c
	void SpawnFloatingTemple();// 0x3605068
	void SpawnAllVehicle(FString Path);// 0x3604fc0
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x3604ed0
	void SpawnAI(int Num, bool bSpawnAll);// 0x3604e10
	void SpawnActorWithPath(FString Path, float X, float Y, float Z);// 0x3604cb4
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x3604c38
	bool SkipChangeViewTarget();// 0x3604bf8
	void ShutDownItemGenerate(bool IsOpen);// 0x3604b74
	void ShowWeaponRecordInfo();// 0x3604b60
	void ShowVaultEnable();// 0x3604b4c
	void ShowStringMsg(const FString Message, FString FromPlayerName, int MsgID);// 0x3604900
	void ShowResultWeaponRecordInfo();// 0x36048ec
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x36047c4
	void ShowOpenSequence(float Time);// 0x3604748
	void ShowNavOperator();// 0x3604734
	void ShowMovePath(const Vector[] Path);// 0x3604684
	void ShowGameTips(int TipsID, FString Params);// 0x3604594
	void ShowFireBtn(bool bShow);// 0x4033584
	void ShowBulletShoot(Vector StartLoc, Rotator Rot);// 0x36044d4
	void ShowAnimationButton(bool IsShow, int NewUIType);// 0x3604404
	void ShowAllRoles();// 0x36043f0
	bool ShouldSendFatalDamageToClient(UAECharacter* Causer, UAECharacter* Victim);// 0x3604320
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x3604290
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x360420c
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);// 0x3604188
	void SetVirtualJoystickWidgetRender(enum Visible);// 0x360410c
	void SetViewYawLimit(float YawMin, float YawMax);// 0x3604058
	void SetViewTargetTest(Actor* NewViewTarget);// 0x3603fdc
	void SetVehicleWeakTickEnable(bool InVal);// 0x3603f58
	void SetUAETriggerEnable(bool IsEnbale);// 0x3603ed4
	void SetTimeSpeedFactor(float Val);// 0x3603e58
	void SetTimeSpeedCheck(bool Val);// 0x3603dd4
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x3603cd0
	void SetStateLeftTime(int leftTime);// 0x3603c54
	void SetSpeed(float Modifier);// 0x3603bd8
	void SetSnowBoradRotationInAir(float Pitch, float Yaw, float Roll);// 0x3603ae8
	void SetSkillFingerIndex(byte FingerIndex);// 0x3603a6c
	void SetSingleThreadUpdateAnim(bool InIsSingleThread);// 0x36039e8
	void SetShoulderFingerIndex(bool TouchBegin, byte FingerIndex);// 0x3603920
	void SetServerLevelLoadingMode(bool bNewLoadAll);// 0x360389c
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x36037d4
	void SetPlayerTeamBodyInstMask(int Mask);// 0x3603758
	void SetPlayerMark(Vector Loc);// 0x36036a4
	void SetPlayerMapMultiMark(Vector NewLoc, bool bAdd, int MaxNum, bool bClearAll);// 0x3603510
	void SetPlayerBodyInstMask(int Mask);// 0x3603494
	void SetPlaneEnabled(bool InEnable);// 0x3603410
	void SetPlane(Actor* Plane);// 0x3603394
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x3603288
	void SetParachuteAnimCached(byte AnimOverrideType, bool InValue);// 0x36031c8
	void SetOBVehicleView(bool IsActive);// 0x3603144
	void SetObservingTime(float Time);// 0x36030c8
	void SetMovable(bool IsMovable);// 0x3603044
	void SetMaxHealth(float HP);// 0x3602fc8
	void SetLowProbCircle(float X, float Y, float R, float Prob);// 0x3602ea0
	void SetLocalUnPossesTest(bool bControllerSide, bool bPawnSide);// 0x3602dd0
	void SetLaunchFlyStateOnServer(enum StateType);// 0x3602d54
	void SetLaunchFlyState(enum StateType);// 0x3602cd8
	void SetJoyStickScale(float JSScale);// 0x3602c5c
	void SetJoyStickPtrFireMode(int FireMode);// 0x3602be0
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x3602b28
	void SetJoyStickOpacity(float JSOpacity);// 0x3602aac
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x3602a34
	void SetJoyStickCenter(Vector2D JSCenter);// 0x36029bc
	void SetIsSnowy(bool bSnowy);// 0x3602938
	void SetIsShowBlood(bool InIsShowBlood);// 0x36028b4
	void SetIsRainy(bool bRainy);// 0x3602830
	void SetIsCacheReceiveRespawnZombie(bool isReceive);// 0x36027ac
	void SetIsBlizzard(bool bBlizzard);// 0x3602728
	void SetInfectResetPlayerInterTime(float InterTime);// 0x36026ac
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x3602620
	void SetHasResultState(bool InState);// 0x360259c
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x3602428
	void SetFuelByPercent(float percent);// 0x36023ac
	void SetEnterInteractiveActor(Actor* IActor, bool IsIn);// 0x36022ec
	void SetEnableWingAvatar(bool Val);// 0x3602268
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x36021a8
	void SetDisableTouchMoveInput(bool bDisable);// 0x3602124
	void SetCustomSensibility(int WeaponId, int AttrIndex, float Value);// 0x3602034
	void SetCustomJumpPoint(float JmpX, float JmpY, float JmpRadius);// 0x3601f44
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x3601e1c
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x3601d2c
	void SetControlRotation(out const Rotator NewRotation, FString CallSource);// 0x3601c24
	void SetClientSpawnAndBackpackWeaponReplicatedDataArray(uint32 CharacterGUID, const ItemDefineID[] DataList, int WeaponSyncTicket);// 0x3601ac4
	void SetCircleInfoToClient(GetCircleInfo ReConnectInfo);// 0x3601978
	void SetCircleCenter(FString PointString);// 0x36018d0
	void SetCirCenterFixed(bool Enable, float X, float Y);// 0x36017d0
	void SetCaptureIDCardStatusDelegate__DelegateSignature(bool IsCapture);// 0x4033584
	void SetCanJump(bool CanJump);// 0x360174c
	void SetCanGotoExPlane(bool bFlag);// 0x36016c8
	void SetCanDropItem(bool bCanDrop);// 0x3601644
	void SetBeKickedPlayerName(FString InPlayerName);// 0x3601510
	void SetAngledSightFingerIndex(bool TouchBegin, byte FingerIndex);// 0x3601448
	void SetAllStarReportDataByOpenID(FString InPlayerOpenID, out AllStarReportData InReportData);// 0x360134c
	void SetAllInfectedAreaLevel(int LevelId);// 0x36012d0
	void SetAirDropEnable(bool Enable);// 0x360124c
	void SetAirAttackEnable(bool Enable);// 0x36011c8
	void Set2x2ForceCircleLastR(float R);// 0x360114c
	void Set2x2ForceCircle(float X, float Y, float R);// 0x360105c
	void Set2x2CircleCenter(int Index, float X, float Y);// 0x3600f6c
	void Set2x2Circle3Center(float x1, float y1, float x2, float y2, float x3, float y3);// 0x3600dcc
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x3600c3c
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x3600b04
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x3600a54
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x36009a4
	void ServerTriggerCharacterSkillWithID(int SkillID, bool bEnable);// 0x36008a0
	void ServerTriggerCharacterEntryEvent(enum EntryEvent);// 0x36007f0
	void ServerTriggerCharacterCustomEvent(byte SkillEvent);// 0x3600740
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x36005d4
	void ServerStopFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x36002e4
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, uint32 CurClipID, BulletInClip CurBulletInClip);// 0x35ffff4
	void ServerStopFillGas(STExtraShootWeapon* TargetWeapon);// 0x35fff44
	void ServerStartPreBarrel(STExtraBaseCharacter* TargetCharacter, float HandledTime);// 0x35ffe54
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x35ffc14
	void ServerStartFireNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo, float MaxAimDistance, Vector2D ScreenAimRect);// 0x35ffa6c
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x35ff938
	void ServerStartFillGas(STExtraShootWeapon* TargetWeapon);// 0x35ff888
	void ServerStartBarrelNew(WeaponManagerBaseComponent* WeaponMangerComp, STExtraShootWeapon* ShootWeapon);// 0x35ff7a0
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x35ff6f0
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte ShootType);// 0x35ff600
	void ServerSetSelfForceHideState(int SlotID, bool bSelfHide);// 0x35ff4fc
	void ServerSetReloadMethod(Actor* TargetActor, byte reloadMethod, STExtraShootWeapon* ShootWeapon);// 0x35ff3cc
	void ServerSetObsverLocation(const Vector locat);// 0x35ff320
	void ServerSetIsFreeView(bool isFreeView);// 0x35ff25c
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x35ff154
	void ServerSetFreeCamera(Rotator InRotation);// 0x35ff0a0
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x35fef98
	void ServerSetControlRotation(const Rotator NewRotation);// 0x35feeec
	void ServerSendLogToLobby(FString ErrorLog);// 0x35fee44
	void ServerReportWatchGamePlayerInfoButtonClick(uint64 WatchPlayer_UID, uint64 WatchedPlayer_UID, float Duration);// 0x35fed1c
	void ServerReportVehicleDrag(const VehicleMoveDragData InDragData);// 0x35fec34
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x35fea54
	void ServerRemoteDestroyAllActor();// 0x35fea40
	void ServerRemoteDestroyActor(int SingleId);// 0x35fe9c4
	int ServerRemoteCreateActor(int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x35fe884
	void ServerReceiveThePlane(int64 TimeStamp);// 0x35fe7d4
	void ServerQuitSpectating();// 0x35fe774
	void ServerPickItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x35fe400
	void ServerOpenParachute();// 0x35fe3a0
	void ServerObserveKiller();// 0x35fe340
	void ServerObserveCharacter(uint32 InPlayerKey);// 0x35fe290
	void ServerObserveAirDropBox(int boxId);// 0x35fe1e0
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x35fe0dc
	void ServerKickPlayerFromGame(uint32 InPlayerKey);// 0x35fe02c
	void ServerJumpFromPlane();// 0x35fdfcc
	void ServerInterruptGame();// 0x35fdf6c
	void ServerInternalSetTeammateForbidPick(bool bIsForbid, int TLogIndex);// 0x35fdea4
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x35fddb8
	void ServerHandleMsg(enum Msg);// 0x35fdd08
	void ServerHandleHitDataArrayFlowOpt(STExtraShootWeapon* TargetWeapon, SACData AntiCheatData, const BulletHitInfoWithoutDamage[] HitInfoWithoutDamageArray);// 0x35fdb28
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x35fda08
	void ServerHandleExtraHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData, const HitTargetExtraData[] HitExtraDataArray);// 0x35fd87c
	void ServerGetTotalPlayers();// 0x35fd81c
	void ServerGetPlayerAliasInfoList();// 0x35fd7bc
	void ServerGetCircleInfo();// 0x35fd75c
	void ServerFight();// 0x35fd6fc
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x35fd64c
	void ServerExitFreeCamera();// 0x35fd5ec
	void ServerDropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x35fd4a0
	void ServerDriveFireBalloon(STExtraFireBalloon* FireBalloon, bool bNewDrive);// 0x35fd39c
	void ServerDoPickupRevivalFlag();// 0x35fd33c
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x35fd230
	void ServerControlFireBalloonMove(STExtraFireBalloon* FireBalloon, float MoveUpValue);// 0x35fd140
	void ServerCMD_RPC(FString Cmd);// 0x35fd064
	void ServerCMD(FString Cmd);// 0x35fcfbc
	void ServerClearTeammatesCache();// 0x35fcf5c
	void ServerChangeWeaponScheme(int Index);// 0x35fceac
	void ServerChangeWeaponFunction(enum NewWeaponFunction);// 0x35fcdfc
	void ServerChangeVehicleAvatar(const int AvatarID);// 0x35fcd4c
	void ServerChangeStatePC(enum TargetStateType);// 0x35fccd0
	void ServerChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x35fcb84
	void ServerAutoSwitchSameSlotWeapon(byte CurrentSlot);// 0x35fcb08
	void SendStringMsg(FString Message, int MsgID, int ItemId, FString PlayerKeyString, int msgExtraParam);// 0x35fc948
	void SendStringDirect(FString Message);// 0x35fc8a0
	void SendLogToLobbyOnece(byte LogType);// 0x35fc824
	void SendGameStateInitOK();// 0x35fc7c4
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x35fc70c
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x35fc5cc
	void ScopeOut();// 0x35fc5b8
	void ScopeIn();// 0x35fc5a4
	void S2C_ResponseSkillPrompt(bool bShow, float RemainingTime, FString PromptText, float TotalTime);// 0x35fc3f0
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x35fc2ac
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x35fc168
	void RunOnNextFrameEvent();// 0x35fc154
	void RunOnNextFrame__DelegateSignature();// 0x4033584
	void RspGetVehiclePos(STExtraVehicleBase* SimVehicle, Vector pos);// 0x35fc094
	void RPC_UseInteractiveActor();// 0x35fc034
	void RPC_Server_VehicleWarSetPlayerHasLogin();// 0x35fbfd4
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x35fbeac
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x35fbc1c
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf);// 0x35fb9d0
	void RPC_Server_ShootGrenadeBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, ShootTimeData InShootTimeInf);// 0x35fb784
	void RPC_Server_SetRemainBoxIsSearched(PlayerRemainTombBox* RemainBox);// 0x35fb6d4
	void RPC_Server_SetPlayerStateChoose(int choose);// 0x35fb624
	void RPC_Server_SetMicphoneTLogToServer(const TLog_Micphone MicphoneTlog);// 0x35fb570
	void RPC_Server_SendLog(FString ErrorLog);// 0x35fb494
	void RPC_Server_RequestRefreshOwnerPawnHealth();// 0x35fb434
	void RPC_Server_ReqHealth();// 0x35fb3d4
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x35fb2f8
	void RPC_Server_RemovePhotonDestructibleFragment(const HitResult Hit);// 0x35fb234
	void RPC_Server_RemoveFracturedMeshFragment(Actor* ImpactActor, Actor* OtherActor, Vector NormalImpulse, const HitResult Hit);// 0x35fb0b4
	void RPC_Server_PrintHP();// 0x35fb054
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x35faf64
	void RPC_Server_NotifyServerUseSpot(SupplySpot* InSupplySpot);// 0x35faeb4
	void RPC_Server_NotifyServerUseEnhancerSpot(EnhancerSpot* InEnhancerSpot);// 0x35fae04
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x35fad18
	void RPC_Server_NotifyServerOpenAnyPickUpBox(PlayerTombBox* TombBox);// 0x35fac68
	void RPC_Server_NotifyServerLaserProjectileBulletAutoExplode(ProjectileBulletBase* Bullet, const ExplosionProjectileHitInfo InExpProjectileInfo);// 0x35fab7c
	void RPC_Server_NotifyServerEnemyStep(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x35faa48
	void RPC_Server_NotifyServerEnemyShoot(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience);// 0x35fa8c0
	void RPC_Server_NotifyServerAddOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x35fa7e4
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window);// 0x35fa530
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x35fa4d0
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr(const ItemDefineID[] WeaponIDArray, WeaponManagerComponent* WeaponMgr);// 0x35fa3b0
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(const ItemDefineID[] WeaponIDArray);// 0x35fa2d4
	void RPC_Server_NorifyServerAddFirstOpenedTreasureBoxes(const int[] TreasureBoxIDArray);// 0x35fa1f8
	void RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes(const int[] PlayerTombBoxIDArray);// 0x35fa11c
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x35fa040
	void RPC_Server_EquipWeaponBullet(STExtraShootWeapon* TargetWeapon, int BulletID);// 0x35f9f50
	void RPC_Server_ConfirmMisKill(uint32 bConfirm, const GameBaseInfo ClientBaseInfo);// 0x35f9e38
	void RPC_Server_ClientHasReactivated();// 0x35f9dd8
	void RPC_Server_ClientHasFinishedRecoverWeapon_New(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x35f9c94
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x35f9b50
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x35f9a60
	void RPC_Server_BattleStateTime(float InBattleStateTime);// 0x35f99b0
	void RPC_ReviveState_GiveUpRevive();// 0x35f9950
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x35f98a0
	void RPC_RemoteCustomEventWithObjects(FString EventTag, FString CustomParam, Object* TObject01, Object* TObject02);// 0x35f96e0
	void RPC_RemoteCustomEventWithObject(FString EventTag, FString CustomParam, Object* TObject);// 0x35f9558
	void RPC_RemoteCustomEvent(FString EventTag, FString CustomParam);// 0x35f9410
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x35f9330
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x35f9280
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x35f913c
	void RPC_OwnerClient_SetTeammatesYouAttackFirstToClient(const FString[] ListOnServer);// 0x35f9004
	void RPC_OwnerClient_SetMurderInfo(FString murderName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x35f8e44
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, const uint64 InUID, const bool IsMurderSameTeam);// 0x35f8c84
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x35f8bc0
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x35f8a24
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int Count);// 0x35f8930
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x35f8840
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x35f8750
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x35f8608
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector_NetQuantize10 BulletStart, Vector_NetQuantize10 BulletEnd);// 0x35f8510
	void RPC_OwnerClient_FlushPlayerHealthChangeHistory(const float[] ChangeHistory, STExtraBaseCharacter* TargetPlayer);// 0x35f83f0
	void RPC_OwnerClient_ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x35f82c0
	void RPC_GiveUpGame();// 0x35f8260
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x35f8130
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime);// 0x35f8004
	void RPC_ClientSetVehicleSpawnServerTime(float STime);// 0x35f7f80
	void RPC_Client_UISetWidgetVisibility(FString WidgetTag, enum IsVisibility);// 0x35f7e90
	void RPC_Client_UISetWidgetText(FString WidgetTag, FString SText, int TextId, FString Params);// 0x35f7cd8
	void RPC_Client_UIOperateWidget(FString WidgetTag, FString SOperation, FString Params);// 0x35f7b5c
	void RPC_Client_UICustomBehavior(FString BehaviorTag, FString BehaviorType, FString Params);// 0x35f79e0
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x35f783c
	void RPC_Client_ShowNewCommonCountDown(float TotalTime, int StringId, int TypeId);// 0x35f7744
	void RPC_Client_RemoteDestroyAllActor();// 0x35f7728
	void RPC_Client_RemoteDestroyActor(int SingleId);// 0x35f76a4
	void RPC_Client_RemoteCreateActor(int SingleId, int TTeamId, int resID, Vector Position, Rotator Rotation);// 0x35f7534
	void RPC_Client_PreSetBulletListInClip(STExtraShootWeapon* TargetWeapon, BulletInClip CurBulletInClip);// 0x35f72dc
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator Rot);// 0x35f71e4
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x35f6fa0
	void RPC_Client_NotifyHealth(float Health);// 0x35f6ef0
	void RPC_Client_InfectionShowKillNum(int ShowKillNum);// 0x35f6e6c
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x35f6d24
	void RPC_Client_ClientDisplayScoreChangeTips(WarPlayerStateScore ScoreStruct);// 0x35f6c48
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x35f6b60
	void RPC_Client_ChangeWeaponState(STExtraWeapon* Weapon, byte StateType);// 0x35f6a70
	void RPC_Client_BeginInteractiveProcess();// 0x35f6a54
	void RPC_Client_AirAttack(const AirAttackOrder airAttackOrderSrc, const Vector AirAttackArea);// 0x35f6910
	void RPC_CancelUseInteractiveActor();// 0x35f68b0
	void RevivalTemateSuccess();// 0x35f6894
	void RevivalTemateFailImpl(FString Reason);// 0x35f67e4
	void RevivalTemateFail(FString Reason);// 0x35f6734
	float RetriveMobileContentScaleFactor();// 0x35f6700
	void RetrievePlayerBattleResultData();// 0x35f66ec
	void RestoreDefaultInteractionSize(int JSIndex);// 0x35f6670
	void RespHasSignalBar(bool bHas);// 0x35f65e4
	void RespawnRecoverData(UAEPlayerController* PC);// 0x35f6568
	void ResetVehicleEngine();// 0x35f6554
	bool ResetValidTouchMoveFrame();// 0x35f651c
	void ResetMissingUIUpdate();// 0x4033584
	void ResetIgnoreMoveInput();// 0x35f6500
	void RequireNetCullingDistanceByDevice();// 0x35f64a0
	void RequireDeviceInfo();// 0x35f6484
	void RequestPlayerNewbieInfo();// 0x35f6470
	void RequestHasSignalBar();// 0x35f6410
	bool RequestChangeWearInBattle(int NewIndex);// 0x35f6380
	bool RequestChangeWear(int NewIndex);// 0x35f62f0
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x35f622c
	void ReqRecordEnterIceMountain();// 0x35f61cc
	void ReqLeaveVehicle();// 0x35f61b8
	void ReqGetVehiclePos(STExtraVehicleBase* SimVehicle);// 0x35f6108
	void ReqExchangeVehicleCharacter(int Param);// 0x35f608c
	void ReqEnterVehicle(float dis);// 0x35f6010
	void ReqEnterSnowBoard();// 0x35f5ffc
	void ReportWatchGamePlayerInfoButtonClick(float DuriationTime);// 0x35f5f80
	void ReportVehicleMoveFlow(const VehicleMoveFlow VehicleMoveFlow);// 0x35f5e54
	void ReportClientParachuteData(ParachuteData InParachuteData);// 0x35f5c20
	void ReportAntiCheatInfo();// 0x35f5c0c
	void ReplaceVehicleWithPath(FString Path);// 0x35f5b64
	void ReplaceVehicle();// 0x35f5b50
	void Rep_RefreshInteractiveActor();// 0x35f5b3c
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x35f5ac0
	void RemoveCustomSensibility(int WeaponId);// 0x35f5a44
	void RemoveAllDoors();// 0x35f5a30
	void ReleaseFire();// 0x4033584
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x35f59b4
	void ReInitParachuteItem();// 0x35f59a0
	void RefreshTopMostUIPanel(byte Type);// 0x4033584
	void RefreshShootDetailInfo();// 0x35f598c
	void RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x4033584
	void RecoverStatusAfterReconnecting();// 0x35f5970
	void RecordPathPoint();// 0x35f595c
	void ReceiveClientRestart();// 0x4033584
	void ReceiveBackpackComponent();// 0x35f5940
	void QuitSpectating();// 0x35f592c
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x35f5808
	void PrintMovementLog(int PrintLog);// 0x35f578c
	void PrintDownCollision();// 0x35f5778
	void PrintAllPickupWarpper();// 0x35f5764
	void PressGrenade(bool isThrow);// 0x4033584
	void PressFire(int FingerIndex);// 0x4033584
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x35f56ac
	void PlayerKillingDelegate__DelegateSignature();// 0x4033584
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0x4033584
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0x4033584
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0x4033584
	void PlayerControllerSelfPawnDeathDelegate__DelegateSignature();// 0x4033584
	void PlayerControllerNotifyChangeToWalkingDead__DelegateSignature(bool bCanChange, bool bIsWalkingDeadFinish);// 0x4033584
	void PlayerControllerChangeToWalkingDeadRes__DelegateSignature(bool bSucc);// 0x4033584
	void PlayerControllerChangeToWalkingDead__DelegateSignature();// 0x4033584
	void PlayBattleSound(FString BankName, FString SoundName);// 0x35f559c
	void PickupInitialItemListForRobustness();// 0x35f5588
	void OpenParachute();// 0x35f5574
	void OnWeaponEquipAttachmentDelegate__DelegateSignature(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x4033584
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x4033584
	void OnWeakGuidEventDelegate__DelegateSignature(int GuidID, Actor* GuidActor);// 0x4033584
	void OnWallFeedBack(bool _WallFeedBack);// 0x35f54f0
	void OnViewTargetSignalHPChanged(float NewSignalHP);// 0x35f5474
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x35f53bc
	void OnViewTargetPlayerStateChanged();// 0x35f53a8
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x35f532c
	void OnViewTargetChangeVehicleSeat();// 0x35f5318
	void OnViewTargetChangePoseDelegate__DelegateSignature(byte LastPose, byte NewPose);// 0x4033584
	void OnViewTargetChange__DelegateSignature(STExtraBaseCharacter* ViewTarget, STExtraBaseCharacter* LastViewTarget, bool bIsOnPlane);// 0x4033584
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x35f529c
	void OnVehicleWeaponIsReadyForFireDelegate__DelegateSignature();// 0x4033584
	void OnVehicleWarVehicleRepawnDelegate__DelegateSignature();// 0x4033584
	void OnVehicleWarKilledTrackerStartDelegate__DelegateSignature();// 0x4033584
	void OnVehicleWarKilledTrackerFinishDelegate__DelegateSignature();// 0x4033584
	void OnVehicleExitFreeCameraDelegate__DelegateSignature(bool bExit);// 0x4033584
	void OnUseVehicleWarWeapon();// 0x35f5288
	void OnUseVehicleWarItem();// 0x35f5274
	void OnUseVehicleWarEyes();// 0x35f5260
	void OnUseMainSlot__DelegateSignature(byte Slot);// 0x4033584
	void OnUseInventoryItemDelegate__DelegateSignature();// 0x4033584
	void OnUnequipWeaponDelegate__DelegateSignature();// 0x4033584
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0x4033584
	static void OnTryReqMoveToTarget(const Object* WorldContextObject, int FollowType, FString FollowUID);// 0x35f50b4
	void OnTouchInterfaceChangedDelegate__DelegateSignature();// 0x4033584
	void OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0x4033584
	void OnTeammatesAllDie();// 0x35f50a0
	void OnTeammateLogin(int InTeamID);// 0x35f5024
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0x4033584
	void OnTeamFollowStageChangeDelegate__DelegateSignature();// 0x4033584
	void OnTaskConditionDeactivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x4033584
	void OnTaskConditionActivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x4033584
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0x4033584
	void OnSwitchWeaponDelegate__DelegateSignature();// 0x4033584
	void OnSwitchToTeamByNumPressed__DelegateSignature();// 0x4033584
	void OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x4033584
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x4033584
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x4033584
	void OnStopWeakGuidDelegate__DelegateSignature();// 0x4033584
	void OnStopFireDelegate__DelegateSignature();// 0x4033584
	void OnStartFireDelegate__DelegateSignature();// 0x4033584
	void OnStartAutoSprintCountDown__DelegateSignature();// 0x4033584
	void OnSpectatorChange__DelegateSignature();// 0x4033584
	void OnSpectatorCameraChange(bool bDie);// 0x4033584
	void OnSpawnVehicleServerTimeUpdatedDelegate__DelegateSignature();// 0x4033584
	void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, FString PromptText, Object* PromptIcon, float TotalTime, bool bCanCancelSkill);// 0x4033584
	void OnShowHideSelfMarkDelegate__DelegateSignature();// 0x4033584
	void OnShowGeneralGameTipsDelegate__DelegateSignature(int TipsID, FString Params);// 0x4033584
	void OnShowAutoSprintButton__DelegateSignature(bool Visible, Vector2D showPos, bool IsInside);// 0x4033584
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x35f4f54
	void OnShowAllTeammatePosDelegate__DelegateSignature(bool bShow);// 0x4033584
	void OnShowAliasInfoDelegate__DelegateSignature();// 0x4033584
	void OnSetChangeCharacterState__DelegateSignature(byte ChangeState);// 0x4033584
	void OnServerFinishPickupRevivalFlag();// 0x35f4f38
	void OnServerCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP);// 0x4033584
	void OnRevivalAndEnterAirplane__DelegateSignature();// 0x4033584
	void OnRepTeammateChange__DelegateSignature();// 0x4033584
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x4033584
	void OnRepPlayerState__DelegateSignature();// 0x4033584
	void OnRepNotify_SetBattleOwner();// 0x35f4f24
	void OnRepNotify_ServerHitEnemyReplicatedData();// 0x35f4f10
	void OnRep_WeatherFog();// 0x35f4efc
	void OnRep_WeaponSystemReconnectReplicateData();// 0x35f4ee8
	void OnRep_WeaponFunctionChanged();// 0x35f4ed4
	void OnRep_WeaponAvatarDataList();// 0x35f4eb8
	void OnRep_UsedSimulation();// 0x35f4e9c
	void OnRep_SwitchWeather();// 0x35f4e88
	void OnRep_STExtraBaseCharacter();// 0x35f4e74
	void OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x35f4e60
	void OnRep_ShowWeaponHitDetailInfo();// 0x35f4e4c
	void OnRep_ServerStateType();// 0x35f4e38
	void OnRep_RefreshTotalPlayers();// 0x35f4e24
	void OnRep_RefreshAirDropBox();// 0x35f4e10
	void OnRep_Plane();// 0x35f4dfc
	void OnRep_ObservedItemList();// 0x35f4de8
	void OnRep_InWateringRangeBP();// 0x4033584
	void OnRep_InWateringCRange();// 0x35f4d84
	void OnRep_InitialEquipmentAvatar();// 0x35f4d68
	void OnRep_InitialConsumableAvatar();// 0x35f4d4c
	void OnRep_ImprisonmentTeammateSucess();// 0x35f4d38
	void OnRep_GameStateMsgType();// 0x35f4d24
	void OnRep_ForbitPickEffect();// 0x35f4d10
	void OnRep_ForbitPick();// 0x35f4cfc
	void OnRep_FiringPlayerList();// 0x35f4ce8
	void OnRep_EnableDeathPlaybackDelay();// 0x35f4cd4
	void OnRep_DeadTombBox();// 0x35f4cc0
	void OnRep_CanOpenParachute();// 0x35f4cac
	void OnRep_CanJump();// 0x35f4c98
	void OnRep_CanImprisonmentTeammate();// 0x35f4c84
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x35f4c70
	void OnRep_BackpackComponent();// 0x35f4c5c
	void OnRep_AutoAimType();// 0x35f4c48
	void OnRemoveMainSlot__DelegateSignature(byte Slot);// 0x4033584
	void OnRemindTeammateShoot__DelegateSignature(FString sPlayerKey, bool bShow, float nDist);// 0x4033584
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0x4033584
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0x4033584
	void OnReleaseFire();// 0x35f4c34
	void OnReconnectResetUIByPlayerControllerStateDelegate__DelegateSignature();// 0x4033584
	void OnReconnected__DelegateSignature();// 0x4033584
	void OnReceiveHasSignal__DelegateSignature(bool HasSignal);// 0x4033584
	void OnRank__DelegateSignature(int Kills, int Rank);// 0x4033584
	void OnPressVehicleWarMatchData();// 0x35f4c20
	void OnPressVampireClothSlotBtn();// 0x35f4c0c
	void OnPressTurnplateQuickMsgBtn();// 0x35f4bf8
	void OnPressTriggerEntireMapBtn();// 0x35f4be4
	void OnPressShowTagVehileSeatListBtn();// 0x35f4bd0
	void OnPressRolewearChangeBtn(int Index);// 0x35f4b54
	void OnPressItemSKillBtn();// 0x35f4b40
	void OnPressFire();// 0x35f4b2c
	void OnPressBackpackBtn();// 0x35f4b18
	void OnPostTakeDamageForBP__DelegateSignature(float Damage, out const DamageEvent DamageEvent, Actor* Victim, Actor* DamageCauser);// 0x4033584
	void OnPlayerUseRecoverItem();// 0x35f4b04
	void OnPlayerStateChanged();// 0x35f4af0
	void OnPlayerReConnected(int LostPlayerKey);// 0x35f4a40
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x4033584
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x4033584
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0x4033584
	void OnPlayerNumOnPlaneChangedDelegate__DelegateSignature();// 0x4033584
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0x4033584
	void OnPlayerLostConnection(int LostPlayerKey);// 0x35f4990
	void OnPlayerLeaveRevivalStateDelegate__DelegateSignature();// 0x4033584
	void OnPlayerKilledOthersPlayer__DelegateSignature(uint32 causerKey, uint32 victimKey, int Relationship, int CauserWeaponAvatarID);// 0x4033584
	void OnPlayerInOutWhiteCircleChangedDelegate__DelegateSignature(bool bIsInWhiteCircle);// 0x4033584
	void OnPlayerInOutBlueCircleChangedDelegate__DelegateSignature(bool bIsInBlueCircle);// 0x4033584
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x35f490c
	void OnPlayerFinalAssistKill__DelegateSignature();// 0x4033584
	void OnPlayerExitGameDelegate__DelegateSignature();// 0x4033584
	void OnPlayerEnterRevivalStateDelegate__DelegateSignature();// 0x4033584
	void OnPlayerControllerStateChangedDelegate__DelegateSignature(enum StateType);// 0x4033584
	void OnPlayerClickDriveBtn();// 0x35f48f8
	void OnPlayerChangeWearingDone__DelegateSignature(int Index, float LastTime);// 0x4033584
	void OnPlayerChangeWearingAnimFinished__DelegateSignature(int Reason);// 0x4033584
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x35f4798
	void OnPickupItemDelegate__DelegateSignature(int ItemId, int Count, STExtraPlayerController* PC);// 0x4033584
	void OnPickUpExpand();// 0x35f4734
	void OnPickUpCollapsed(bool isCollapsed);// 0x35f46b0
	void OnPickUpActor(int Guid, int PickupCount, int TotalCount);// 0x35f45c0
	void OnOneTeamPlayerHPChangeDelegate__DelegateSignature(int Index);// 0x4033584
	void OnOneFloatValueDelegate__DelegateSignature(float TheValue);// 0x4033584
	void OnOccupyNewbieGuide(int inGuideID);// 0x35f4544
	void OnOBVehicleHitActor(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x35f43f4
	void OnObserverLevelLoaded();// 0x35f43e0
	void OnObservedWeaponDataChanged(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x35f433c
	void OnObservedUsingWeaponChanged();// 0x35f4328
	void OnObservedPoisonFogStageChanged();// 0x35f4314
	void OnObservedItemsChanged();// 0x35f4300
	void OnObservedBulletNumChanged();// 0x35f42ec
	void OnOBPawnExitVehicle(STExtraVehicleBase* InTargetVehicle);// 0x35f4270
	void OnNightStateChangedDelegate__DelegateSignature();// 0x4033584
	void OnNewbieGuideHandlePickUp(int inPickUpID);// 0x35f41f4
	void OnMemberVoiceDelegate__DelegateSignature(int member, int Status);// 0x4033584
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0x4033584
	void OnLostConnection__DelegateSignature();// 0x4033584
	void OnLocalCharacterTemperatureChangeDelegate__DelegateSignature(float currentTP, float ratioHP);// 0x4033584
	void OnLocalCharacterSignalHPRemaingingTimeDelegate__DelegateSignature(float RemainingTime);// 0x4033584
	void OnLocalCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP, float PreSignalHP, float RatioSignalHP);// 0x4033584
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x4033584
	void OnLiveStateChanged__DelegateSignature(enum LiveState);// 0x4033584
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x4033584
	void OnKillerNotify(Actor* Killer);// 0x35f4178
	void OnItemOperCount(ItemDefineID DefineID, enum OperationType, int Count);// 0x35f4074
	void OnItemOperationInfo(BackpackComponent* Sender, out const ItemOperationInfo ItemOperationInfo);// 0x35f3f9c
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x35f3e98
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0x4033584
	void OnInfectionShowTipMsgDelegate__DelegateSignature(int MsgID, int IconID, float showTime, float DelayTime);// 0x4033584
	void OnInfectionPlaySoundEvent__DelegateSignature(int SoundID);// 0x4033584
	void OnIndoorStateChangeDelegate__DelegateSignature();// 0x4033584
	void OnHideFollowPanelAndBtnDelegate__DelegateSignature();// 0x4033584
	void OnHandleCameraModeChangedDelegate__DelegateSignature(byte CameraMode);// 0x4033584
	void OnGameStateChange__DelegateSignature(FName GameState);// 0x4033584
	void OnGameStartDelegate__DelegateSignature();// 0x4033584
	void OnGameStartCountDownDelegate__DelegateSignature(float CountdownTime);// 0x4033584
	void OnGameModeStateChanged();// 0x4033584
	void OnFingerMove__DelegateSignature(byte FingerIndex, Vector Loc);// 0x4033584
	void OnExitGame__DelegateSignature();// 0x4033584
	void OnEquipWeaponDelegate__DelegateSignature();// 0x4033584
	void OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x4033584
	void OnEquipmentAvatarChange__DelegateSignature();// 0x4033584
	void OnEnterBattleResultStep();// 0x35f3e84
	void OnEnableSignalSystemChangedDelegate__DelegateSignature();// 0x4033584
	void OnDropItemDelegate__DelegateSignature(int ItemId, int Count, STExtraPlayerController* PC);// 0x4033584
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0x4033584
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0x4033584
	void OnDeadBoxExpand();// 0x35f3e70
	void OnDeadBoxCollapsed(bool isCollpased);// 0x35f3dec
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);// 0x4033584
	void OnConsumableAvatarChange__DelegateSignature();// 0x4033584
	void OnCongregationFlagDelegate__DelegateSignature();// 0x4033584
	void OnClientWillGotoSpectating();// 0x35f3dd8
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CamId, Actor*[] PeerVisualFieldActorList);// 0x4033584
	void OnClickVehicleWarBuff();// 0x35f3dc4
	void OnClickToggleOBVehicleView();// 0x35f3db0
	void OnCheckSignalPlaybackDelegate__DelegateSignature();// 0x4033584
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x4033584
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x4033584
	void OnCharacterRecoveryHealthEvent();// 0x35f3d9c
	void OnCharacterRecoveryHealth__DelegateSignature();// 0x4033584
	void OnCharacterReceiveHealthChangeHistory__DelegateSignature(out const float[] HealthChangeHistory);// 0x4033584
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0x4033584
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x4033584
	void OnCharacterLandingCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x4033584
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x4033584
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x35f3d18
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0x4033584
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0x4033584
	void OnCharacterAntidoteChangeDelegate__DelegateSignature(float FAntidoteExeTime, float FAntidoteMaxTime);// 0x4033584
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0x4033584
	void OnBuyRevivalTeammate(int TeammateIndex);// 0x35f3c94
	void OnBuyRevivalSign();// 0x35f3c78
	void OnBackpackMainSlot__DelegateSignature(byte Slot);// 0x4033584
	void OnAutoSprintActive__DelegateSignature();// 0x4033584
	void OnAssociationOperation(ItemDefineID DefineID, ItemDefineID TargetDefineID, enum OperationType, byte Reason);// 0x35f3b28
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0x4033584
	void ObserveWhoKilledMe();// 0x35f3b14
	void ObserveClientSetPoisonSmogStage(int SmogStage);// 0x35f3a64
	void ObserveCharacter(FString InPlayerName);// 0x35f3930
	void ObserveAirDropBox(int boxId);// 0x35f38b4
	void OBCameraTurnSlower();// 0x35f38a0
	void OBCameraTurnFaster();// 0x35f388c
	void OBCameraMoveSlower();// 0x35f3878
	void OBCameraMoveNear();// 0x35f3864
	void OBCameraMoveFaster();// 0x35f3850
	void OBCameraMoveFar();// 0x35f383c
	void NotifyOpenSequencer(BattleOpenSequencerInfo Info);// 0x35f36a0
	void NotifyIsInResultView(bool isInResultView);// 0x35f361c
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0x4033584
	void NotifyDeadBoxExpand();// 0x4033584
	void NotifyDeadBoxCollapsed(bool isCollpased);// 0x4033584
	void MoveUp(float Rate);// 0x35f35a0
	void MoveToVehicle(int ItemId);// 0x35f3524
	void MoveToNearestVehicle(float IgnoreDistance);// 0x35f34a8
	void MoveToItem(int ItemId);// 0x35f342c
	void MoveToAIWithClassName(FString AIClassName, float XOffset, float YOffset, float ZOffset);// 0x35f32d0
	void MoveToAIByDropItem(int ItemId);// 0x35f3254
	void MoveToAI();// 0x35f3240
	void MoveTo(float X, float Y, float Z);// 0x35f3150
	void MoveTempleToSelf();// 0x35f313c
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x35f3084
	void ModifyStreamingDistance(int Distance);// 0x35f3008
	void ModifyCameraViewPitchLimitWithPose(byte Pose, float PitchMin, float PitchMax);// 0x35f2f18
	void MemberVoice(int member, int Status);// 0x4033584
	void MarkStartFireFrame();// 0x35f2f04
	void MakeVehicleFly(int isFly, bool bIsUp);// 0x35f2e44
	void LogAIItemCount(int ItemId, float Distance);// 0x35f2d8c
	void LocalProfileFootprint();// 0x35f2d78
	void LocalGetGameStateReconnectInfo();// 0x35f2d64
	void LoadAllLand(bool bLoadAll);// 0x35f2ce0
	void LerpFPPCamera();// 0x35f2ccc
	void KillSomeOne(FString InPlayerName);// 0x35f2c24
	void KillAllEnermyVehicle();// 0x35f2c10
	void KillAll();// 0x35f2bfc
	void Kill(int GivenNumber);// 0x35f2b80
	void KickPlayerFromGame();// 0x35f2b6c
	void JumpFromPlane();// 0x35f2b58
	void JoystickTriggerSprint(bool bIsSprint);// 0x4033584
	bool IsViewTarget(const Actor* pActor);// 0x35f2ac0
	bool IsUse3DTouch();// 0x35f2a88
	bool IsTouchToRotControl();// 0x35f2a48
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x35f29b8
	bool IsToggleOBBulletTrackEffect();// 0x35f2980
	bool IsTeammate(const STExtraBaseCharacter* InCharacter);// 0x35f28f0
	bool IsStandalone();// 0x35f28b4
	bool IsShowBlood();// 0x35f2894
	bool IsSameTeam(Pawn* Other);// 0x35f2804
	bool IsRevivalMode();// 0x35f27c4
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x35f272c
	bool IsParachuteAnimCached(byte AnimOverrideType);// 0x35f269c
	bool IsMurderSelfDefense(FString InformMurderName);// 0x35f25e0
	bool IsMoveable_DontConsiderFollowingState();// 0x35f25a8
	bool IsMoveable();// 0x35f2570
	bool IsLastBreathOrRescueingOther();// 0x35f2538
	bool IsInRevival();// 0x35f2500
	bool IsInPlane();// 0x35f24c8
	bool IsInParachuteOpen();// 0x35f2490
	bool IsInParachuteJump();// 0x35f2458
	bool IsInParachute();// 0x35f2420
	bool IsInObservingPlayback();// 0x35f23e8
	bool IsInInitial();// 0x35f23b0
	bool IsInFreeCameraView();// 0x35f2390
	bool IsInFinish();// 0x35f2358
	bool IsInFight();// 0x35f2320
	bool IsInDeathReplay();// 0x35f22e8
	bool IsInDead();// 0x35f22b0
	bool IsForbitPickMakeEffect();// 0x35f2278
	bool IsForbitPick(out const FName TombName);// 0x35f21d8
	bool IsDsSwitchEnable(const int InSwitchId);// 0x35f2148
	bool IsCharacterCanEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x35f2074
	bool IsCanViewEnemy();// 0x35f203c
	bool IsCanSpectateTeammate();// 0x35f2004
	bool IsCanImprisonmentTeammate();// 0x35f1fcc
	bool IsCacheReceiveRespawnZombie();// 0x35f1f94
	bool IsAutoParachuteEnable();// 0x35f1f5c
	bool IsAllowActorTouchMove();// 0x35f1f24
	bool IsAGMPlayer();// 0x35f1eec
	void InsertGrenadeIDToName(int GrenadeID, FName Name);// 0x35f1e34
	void InsertGrenadeIDInOrder(int GrenadeID);// 0x35f1db8
	void InputCameraMoveTest(float DeltaSeconds);// 0x35f1d3c
	void InitWeatherConfigComponent();// 0x35f1d28
	void InitVehicleAvatarSkinList();// 0x35f1d0c
	void InitVehicleAvatarList();// 0x35f1cf0
	void InitTaskDatas(uint32 InPlayerKey);// 0x35f1c74
	void InitTaskDataDelegate__DelegateSignature(int TaskId, int process, FString ext_info);// 0x4033584
	void InitTaskData(int TaskId, int process, FString ext_info);// 0x35f1abc
	void InitTaskComponent();// 0x35f1aa8
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x4033584
	void InitJoyStickAfterActivation();// 0x4033584
	void InitCollectionDataDelegate__DelegateSignature(int ItemId, int CurrentCount, int TotalCount);// 0x4033584
	void InitCollectionData(int ItemId, int CurrentCount, int TotalCount);// 0x35f19b8
	void InfectionSelectZombieDelegate__DelegateSignature(enum TargetPawnType);// 0x4033584
	void InfectionEndRound();// 0x35f19a4
	void ImprisonmentTeammate(FString TeammateName);// 0x35f18c8
	void HideGameTipForLowFPSWarning();// 0x35f18b4
	void HideAllUIAfterDeadTipsShowDelegate__DelegateSignature();// 0x4033584
	FString HawkEyesLocalize(int InPlayerKey);// 0x35f17b8
	void HandleVirtualJoystickInput(out const Geometry Geometry, out const Vector2D ScreenPosition, int PointerIndex, bool MouseDown);// 0x35f1650
	void HandleUpdateShovelingRelease();// 0x35f163c
	void HandleUpdateShovelingPressed();// 0x35f1628
	void HandleUpdateShoveling();// 0x35f1614
	void HandleTogglePlayerListInOB();// 0x35f1600
	void HandleToggleOBTeamList(bool InShow);// 0x35f157c
	void HandleToggleMapInOB();// 0x35f1568
	void HandleToggleHitDamageDisplay();// 0x35f1554
	void HandleToggleBulletTrack();// 0x35f1540
	void HandleTipInfo(FString FullMsg);// 0x35f1498
	void HandleSwitchToTeammatePrev();// 0x35f1484
	void HandleSwitchToTeammateNext();// 0x35f1470
	void HandleSwitchToTeam(int InTeamID);// 0x35f13f4
	void HandleSwitchToPlayerIndex(int InPlayerIndex);// 0x35f1378
	void HandleMsg(enum Msg);// 0x35f12fc
	void HandleLeaveFreeViewInOB();// 0x35f12e8
	void HandleLandOnGroundEnd();// 0x35f12d4
	void HandleFlyLeapPlatform();// 0x35f1274
	void HandleEnterFreeViewInOB();// 0x35f1260
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x35f1194
	void HandleClientHasReactivated();// 0x35f1180
	void HandleChangeRolewearDone();// 0x4033584
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x35f10c8
	int GotoSpectating(int TeammatePlayerid);// 0x35f1034
	void GotoFlying();// 0x35f1020
	void GotoDoubleCircleEdge(float Z);// 0x35f0fa4
	void GMTeleport(FName Teleporter);// 0x35f0f28
	void GMSetScalarParam(FString Name, FString ShaderName, float Value);// 0x35f0cdc
	void GMSetCampId(int CamId);// 0x35f0c60
	void GMSetBoolPoisonCircle();// 0x35f0c4c
	void GMSetBoolAirDrop();// 0x35f0c38
	void GMSetBoolAirAttack();// 0x35f0c24
	void GMSetBoolAI();// 0x35f0c10
	void GMSendDailyTaskReport();// 0x35f0bfc
	void GMOpenWeather(int OpenWeatherID);// 0x35f0b80
	void GMEnableRandom();// 0x35f0b6c
	void GMEnableAllComponent();// 0x35f0b58
	void GMDisableRandom();// 0x35f0b44
	void GMDisableAllComponent();// 0x35f0b30
	void GMCloseWeather(int CloseWeatherID);// 0x35f0ab4
	void GMBroastSyncTaskInfo();// 0x35f0aa0
	void GMBeginCircle(int CurIndex, float PosX, float PosY);// 0x35f09b0
	int GetWriteCircleDistance();// 0x35f097c
	WeatherConfigComponent* GetWeatherConfigComponent();// 0x35f0948
	static WeaponHitDisanceSectionArray GetWeaponHitDistanceSectionByID(int ID);// 0x35f0854
	int GetWeaponDIYPlanID(int WeaponId);// 0x35f07c8
	int GetWeaponAvatarItemId(int BPID);// 0x35f0734
	int GetWeaponAvatarID(int WeaponId, bool isGrenade);// 0x35f0664
	float GetViewPortDPIScale();// 0x35f0628
	VehicleUserComponent* GetVehicleUserComp();// 0x35f05f4
	bool GetUseMotionControlLog();// 0x35f05bc
	bool GetUseMotionControlEnable();// 0x35f0584
	int GetUnlockWearCount();// 0x35f0550
	float GetTouchForce(byte FingerIndex);// 0x35f04c4
	Actor* GetThePlane();// 0x35f04a8
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x35f041c
	SpringArmComponent* GetTargetedSpringArm();// 0x35f03e8
	int GetStatTriangles();// 0x35f03b4
	FString GetStatMemory();// 0x35f0310
	int GetStatDrawCalls();// 0x35f02dc
	BattleItemData[] GetSpecialClothingInAllBackpack(int Index);// 0x35f017c
	int[] GetSpecialClothingCountInAllBackpack(int Index);// 0x35f0088
	int[] GetSpecialAreaList();// 0x35effe4
	int GetSpecialAreaID();// 0x35effb0
	SIslandInactiveClearComponent* GetSIslandInactiveClearComponent();// 0x35eff7c
	Rotator GetSensibilityRate(float YawInput, float PitchInput, bool bIsMotionControl);// 0x35efe70
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x35efd48
	int GetRevivalCountDownTime();// 0x35efd14
	FString GetRenderThreadTime();// 0x35efc70
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0x4033584
	QuickSignComponent* GetQuickSignComponent();// 0x35efc3c
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x35efc08
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x35efb2c
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x35efaf8
	CharacterParachuteComponent* GetParachuteComponent();// 0x35efac4
	AnimationAsset* GetParachuteAnimAsset(byte AnimType, byte AnimOverrideType);// 0x35ef9fc
	Transform GetPaintDecalTargetTransform();// 0x35ef9a8
	ObservingReplay* GetObservingPlayback();// 0x35ef974
	Vector GetNewestAirDropBoxPos();// 0x35ef93c
	PlayerInfoInOB[] GetNearPlayerList();// 0x35ef824
	STExtraPlayerController*[] GetMyObservers();// 0x35ef7a0
	FString GetMurderUIDStr();// 0x35ef6e8
	FString GetMurderName();// 0x35ef644
	bool GetMurderIsAI();// 0x35ef60c
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x35ef404
	byte GetMaxTouchForceFinger();// 0x35ef3c0
	Vector2D GetJoyStickVisualSize();// 0x35ef38c
	Vector2D GetJoyStickCenter();// 0x35ef358
	int GetItemUseSpecialAreaID(int ItemId);// 0x35ef2cc
	bool GetIsRespawn();// 0x35ef2ac
	bool GetIsMurderSameTeam();// 0x35ef274
	bool GetIsFreeCamera();// 0x35ef254
	enum GetInfectionPawnSubType();// 0x35ef220
	enum GetInfectionPawnMainType();// 0x35ef1ec
	IdeaDecalManager* GetIdeaDecalManager();// 0x35ef1b8
	FString GetGameThreadTime();// 0x35ef114
	void GetGameStateReconnectInfoOnServer();// 0x35ef0b4
	void GetGameScreenSize();// 0x35ef0a0
	void GetGameResult();// 0x35ef08c
	LastGameRemainItemData GetGameRemainItems();// 0x35eefb4
	int GetFriendDistance();// 0x35eef80
	Vector GetFocalLocation();// 0x35eef40
	FString GetFinalMurderName();// 0x35eee40
	WeaponHitDetailInfo GetDetailHitInfo();// 0x35eed20
	void GetDailyTaskReportData(out DailyTaskReportInfo ResultData);// 0x35eebdc
	enum GetCurrentStateType();// 0x35eeba8
	Vector GetCurrentLevelOffset();// 0x35eeb70
	STExtraPlayerState* GetCurPlayerState();// 0x35eeb3c
	int GetCurPlayerId();// 0x35eeb08
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x35eead4
	Vector GetCurPawnLocation();// 0x35eea9c
	Pawn* GetCurPawn();// 0x35eea68
	float GetCurFPS();// 0x35eea34
	Rotator GetControlLookRotation();// 0x35ee9f4
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x35ee910
	BattleItemData[] GetClothingInAllBackpack(int Index);// 0x35ee7b0
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x35ee724
	ChatComponent* GetChatComponent();// 0x35ee6f0
	uint32 GetBeKickedPlayerKey();// 0x35ee6bc
	BackpackComponent* GetBackpackComponent();// 0x35ee688
	AllStarReportData GetAllStarReportDataByOpenID(FString InPlayerOpenID);// 0x35ee5d0
	void GenerateIdCardMark(out const Vector Loc);// 0x35ee540
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int boxId);// 0x35ee3dc
	void GameModeGotoNextState();// 0x35ee3c8
	void GameModeGotoFightingState();// 0x35ee3b4
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x35ee2fc
	void ForceServerSetControlRotationOnVehicle();// 0x35ee2e8
	void ForceReleaseCurTouchMoveFinger();// 0x35ee2d4
	void ForceDropItemsWithTypeList(out const int[] TypeList);// 0x35ee21c
	void ForceDropItemsWithType(int TypeItem);// 0x35ee1a0
	void ForceDropItemsWithoutTypeList(out const int[] IgnoreTypeList);// 0x35ee0e8
	void ForceDropItems(out const int[] ItemTableList);// 0x35ee030
	void ForceDropAllItem();// 0x35ee01c
	bool ForbidSpectateTeamMateOnPlane();// 0x35edfdc
	void FlushItem(int onlyStatic);// 0x35edf60
	void FireTakeDamagedEvent(Vector CauserLocation);// 0x35edee4
	void FireOrGrenade();// 0x35eded0
	void FindAIDropItem(int ItemId);// 0x35ede54
	void Fight();// 0x35ede40
	void FadeSceneToGrayOnDeath(bool bSet);// 0x35eddbc
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x35edc44
	void ExitNightState();// 0x35edc30
	void ExitFreeCamera(bool IsForceReset);// 0x35edbac
	void ExecDSCommand(const FString DSCommand);// 0x35edafc
	void EquipIceDrinkItems(out const int[] ItemList);// 0x35eda44
	void EnterVehicleDelegate__DelegateSignature(bool IsEnter, Actor* Vehicle);// 0x4033584
	void EnterNightState();// 0x35eda30
	void EnterExtreme(bool enterOrQuit);// 0x35ed9ac
	void EndTouchScreen(Vector Loc, byte FingerIndex, bool UseOldEndFireJudge);// 0x35ed8b0
	void EndForceTouchFire(Vector Loc);// 0x35ed834
	void EnablePlayerInHouse(bool bIsIn);// 0x35ed7b0
	void EnableMyLandscapeDraw();// 0x35ed79c
	void EnableGuidActorDelegate__DelegateSignature(int GuidID, bool bNewEnable);// 0x4033584
	void EnableAutoParachute(bool bEnable);// 0x35ed718
	void DynamicCreateComponents();// 0x35ed704
	void DsLuaGM(const FString CmdString);// 0x35ed5d0
	void DsLuaDoString(FString LuaString);// 0x35ed528
	void DropItemsWithType(int TypeItem);// 0x35ed4ac
	void DropItem(int ID);// 0x35ed430
	void DropAllItem();// 0x35ed41c
	void DoUITouchMove(Vector Loc);// 0x4033584
	void DoubleClickCancel(const byte FingerIndex);// 0x35ed3a0
	void DoTouchMove(float Yaw, float Pitch);// 0x4033584
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x35ed2f0
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x35ed240
	void DoAfterCanNotPickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x4033584
	void DisplayLuaGameTipsWithTime(FString FunctionName, int ID, FString param1, FString param2, float ControlTime);// 0x35ed054
	void DisplayLuaGameTips(FString FunctionName, int ID, FString param1, FString param2);// 0x35ecea4
	void DisplayLowFPSCountingDown();// 0x35ece90
	void DisplayGameWarningTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x35ecc40
	void DisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x35ec9f0
	void DisplayGameTipWithMsgID(int ID);// 0x35ec974
	void DisplayGameTipForLowFPSWarning(int ID, FString param1, FString param2);// 0x35ec724
	void DisplayBattleGeneralTip(int ID, FString param1, FString param2);// 0x35ec4d4
	void DispatchPlayerRespawnedEvent(UAEPlayerController* PlayerController);// 0x35ec458
	void DispatchPlayerReconnectedEvent();// 0x35ec444
	void DispatchPlayerLostEvent();// 0x35ec430
	void DispatchPlayerExitEvent();// 0x35ec41c
	void DispatchPlayerAboutToRespawnEvent(UAEPlayerController* PlayerController);// 0x35ec3a0
	void DisableMyLandscapeDraw();// 0x35ec38c
	void DelegatePlayerLevelChange__DelegateSignature(int Level);// 0x4033584
	void DelegatePlayerGoldChange__DelegateSignature(int Gold);// 0x4033584
	void DelayGotoSpectating();// 0x35ec378
	void DelayForceExitFreeCamera();// 0x35ec364
	void DebugWorldPlayerAvatarInfo();// 0x35ec350
	void DebugSetUIVisibility(bool bUIVisibility);// 0x4033584
	void DebugEnableFerrisWheelTick(bool bEnable);// 0x35ec2cc
	void DebugEnableDrawSearchLine(int bEnabled);// 0x35ec250
	void DebugEnableBulletImpact(int bEnabled);// 0x35ec1d4
	void DebugAirDropPickInfo(float DrawTime, float BoxDrawSize, float BoxDrawLineLength, float ListWrapperDrawSize, float ListWrapperDrawLineLength);// 0x35ec070
	void DealGetAllNearShotWeapon(float disRate);// 0x35ebff4
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x35ebf40
	void DealGetAllNearMoveCharacter(float checkDis);// 0x35ebec4
	void DeactiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x35ebe04
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x35ebc64
	void ConsumeRevivalSign();// 0x35ebc48
	void CollectAllPlayerWeaponPosInfo();// 0x35ebc34
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x35ebb3c
	void ClientStopShoveling();// 0x35ebadc
	void ClientStartOnlineGame();// 0x35ebac0
	void ClientShowInfectAreaWarning();// 0x35eba60
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers);// 0x35eb8f8
	void ClientSetPoisonSmogStage(int SmogStage);// 0x35eb848
	void ClientSetOBData(uint32 InPlayerKey, int InTeamID, STExtraBaseCharacter* CurViewChar);// 0x35eb750
	void ClientSetControlRotation(const Rotator NewRotation);// 0x35eb6d0
	void ClientSetAntidoteTime(float MaxTime, float ExeTime);// 0x35eb5e8
	void ClientSetAIPosToTarget(Vector StartPos, Vector targetPos);// 0x35eb528
	void ClientSetAIPos(uint32 KeyID, Vector pos, bool isStart);// 0x35eb424
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x35eb354
	void ClientRPC_TeamMateStateChanged(const TeamMateStateInfo TeamMateInfo);// 0x35eb2b8
	void ClientQuitViewEnemy();// 0x35eb29c
	void ClientPlayItemOperationSound(int ItemSoundID, enum ItemOperation, Actor* TargetActor);// 0x35eb1a8
	void ClientOnLeaveVehicleDelegate__DelegateSignature();// 0x4033584
	void ClientOnHurt();// 0x35eb18c
	void ClientOnEnterVehicleDelegate__DelegateSignature(int SeatType);// 0x4033584
	void ClientOnDeathReplayDataWhenFatalDamaged__DelegateSignature(bool bIsDead, out const DeathReplayData DeathReplayData);// 0x4033584
	void ClientOnDamageToOther(float _DamageToOther);// 0x35eb108
	void ClientOnChangeVehicleSeatCompletedDelegate__DelegateSignature(enum SeatType);// 0x4033584
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, enum InServerStateType);// 0x35eaffc
	void ClientInterruptGame();// 0x35eaf9c
	void ClientInitIngameUIAfterRespawn();// 0x35eaf3c
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x35eae80
	void ClientHandleMsg(enum Msg, int64 TimeStamp);// 0x35eadc0
	void ClientGotoSpectating();// 0x35eada4
	void ClientGiveUpRevivalTemmates();// 0x35ead88
	void ClientGameStarted();// 0x35ead6c
	void ClientFriendBattleEnd(bool bIsShowWatchFriendBattleEndTips);// 0x35eace0
	void ClientForbidLoadParahuteAnim(bool bCanForbid);// 0x35eac54
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x35eabc8
	void ClientEnterViewBox(int boxId);// 0x35eab44
	void ClientEndOnlineGame();// 0x35eab28
	void ClientDisplayNormalTips(FString Content);// 0x35eaa78
	void ClientDisplayLuaGameTipsWithTime(FString FunctionName, int ID, FString param1, FString param2, float ControlTime);// 0x35ea884
	void ClientDisplayLuaGameTips(FString FunctionName, int ID, FString param1, FString param2);// 0x35ea6cc
	void ClientDisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x35ea544
	void ClientDisplayGameTipWithMsgID(int ID);// 0x35ea494
	void ClientCheckStartShovelingFail();// 0x35ea434
	void ClientChangeWeaponFunction(enum NewWeaponFunction);// 0x35ea384
	void ClientChangeStatePC(enum TargetStateType);// 0x35ea300
	void ClearParachuteAnimAssetCache();// 0x35ea2ec
	void ClearDeadTombBox();// 0x35ea2d8
	void ClearBossBornPoint();// 0x35ea2c4
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x35ea224
	bool CientRevivalTemmates();// 0x35ea1ec
	void CheckParachuteLandedFinish();// 0x35ea1d8
	bool CheckNeedReport(out const SACData InAntiCheatData);// 0x35ea108
	void CheckConsumeGlideItem();// 0x35ea0f4
	bool CheckAllVehicleWeaponIsReadyForFire(bool WithBroadEvent);// 0x35ea05c
	bool ChecCanChangeWeaponScheme();// 0x35ea01c
	bool ChangeWeaponSchemeIndex(int NewIndex);// 0x35e9f8c
	void ChangeWeaponFunction(enum NewWeaponFunction);// 0x35e9f10
	void ChangeToWalkingDead();// 0x35e9efc
	void ChangeStatePC(enum TargetStateType);// 0x35e9e80
	void ChangeSpectatorStateToFreeView();// 0x35e9e6c
	bool ChangeRolewearIndex(int NewIndex);// 0x35e9ddc
	void ChangePVELevel(int Lv);// 0x35e9d60
	void ChangeCharacterLogicDelegate__DelegateSignature(enum TargetPawnType);// 0x4033584
	void ChangeCharacterBeforeDelegate__DelegateSignature(enum TargetPawnType);// 0x4033584
	void ChangeAIBehaviorTree(int TreeIndex);// 0x35e9ce4
	void CanSeeAllUI(bool bUIVisibility);// 0x35e9c60
	bool CanBePickUpByItemID(out const ItemDefineID DefineID);// 0x35e9bb4
	bool CanBePickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x35e9aa8
	bool CanAutoSwitchGrenade(int GrenadeID);// 0x35e9a10
	void CallZombieFlowAirDrop(int ZombieID);// 0x35e9994
	void CallZombieAirDrop(int ZombieID);// 0x35e9918
	void CallTeamMateUAVStateChanged(TeamMateStateInfo TeamMateInfo);// 0x35e9870
	void CallTeamMateStateChanged(STExtraPlayerState* STPlayerState, Vector Location, Rotator Rotation, float Health, int VoiceID, float Temperature);// 0x35e96c8
	void CallShowTouchInterface(bool InShow);// 0x35e963c
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, float MotionAimRate_Pitch, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, float MotionRate_Yaw_Threshold, float Left, float Right, bool bLandScapeOrientation);// 0x35e9118
	Vector2D CalcAttactBtnPos(float LocX, float LocY, float SizeX, float SizeY);// 0x35e8fe0
	void CacheShootDetailInfoShootNum(int ShootNum);// 0x35e8f64
	void CacheShootDetailInfoHitPos(byte HitPos);// 0x35e8ee8
	void CacheRecvInfectionSelectZombie__DelegateSignature(bool bRecv);// 0x4033584
	void C2S_RequestSkillPrompt();// 0x35e8e88
	void C2S_RequestBeingRescuedRemainingTime();// 0x35e8e28
	void BroadcastFatalDamageToClientWithStruct(const FatalDamageParameter FatalDamageParameter);// 0x35e8d28
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x35e8b48
	SpringArmComponent* BPGetTargetedSpringArm();// 0x35e8b0c
	bool BPGetIsAndroidSimulator();// 0x35e8ad4
	void BPCastUIMsgWithTwoParam(FString Func, FString module, FString param1, FString param2);// 0x35e88fc
	void BPCastUIMsgWithParam(FString Func, FString module, FString param1);// 0x35e8788
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x4033584
	void BluePrintSetViewTarget(STExtraBaseCharacter* pCharacter);// 0x35e870c
	void BindVoiceCheckFunction();// 0x35e86f8
	void BindVirtualJoystickInputDelegates(bool bBind);// 0x35e8674
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x35e85bc
	void BeginAbsorb();// 0x35e855c
	void BackToGameDataRefresh();// 0x35e8548
	bool AutoSelectViewTarget();// 0x35e8510
	void AutoSelectTeammateToView();// 0x35e84fc
	void AddWeaponPendantItem(int WeaponId, int pendantID);// 0x35e8448
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x35e8348
	void AddParachuteAnimAssetCache(byte AnimType, AnimationAsset* AnimAsset, byte AnimOverrideType);// 0x35e8254
	void AddItemAttachList(int BaseItemID);// 0x35e81d8
	void AddItem(int ID, int Count, int PickupType);// 0x35e80e8
	void AddCharacterVirtualItemToBackpack();// 0x35e80d4
	void AddBossBornPoint(float BornX, float BornY);// 0x35e8020
	void AddAvatarItem(int ID, int Color, int Pattern, int Num);// 0x35e7ef8
	void AddAIItem(int ID, int Count, float Distance);// 0x35e7e08
	void ActiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x35e7d48
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x35e7cc4

--------------------------------
Class: UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x800, Size: 8]
	FString PlayerName;//[Offset: 0x808, Size: 16]
	uint32 PlayerKey;//[Offset: 0x818, Size: 4]
	uint64 UId;//[Offset: 0x820, Size: 8]
	FString PlayerOpenID;//[Offset: 0x828, Size: 16]
	int TeamID;//[Offset: 0x838, Size: 4]
	int64 IdxInTeam;//[Offset: 0x840, Size: 8]
	int CampID;//[Offset: 0x848, Size: 4]
	Vector CharacterLocation;//[Offset: 0x84c, Size: 12]
	int RoomMode;//[Offset: 0x858, Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x860, Size: 24]
	int planeAvatarId;//[Offset: 0x878, Size: 4]
	int DyeDebugFlag;//[Offset: 0x87c, Size: 4]
	int PlayerStartID;//[Offset: 0x880, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x888, Size: 64]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	FString PlanetailResLink;//[Offset: 0x8d0, Size: 16]
	int InPacketLossRate;//[Offset: 0x8e0, Size: 4]
	int OutPacketLossRate;//[Offset: 0x8e4, Size: 4]
	int ClientNetworkType;//[Offset: 0x8e8, Size: 4]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 1]
	bool bIsGlobalObserverForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x911, Size: 1]
	int GameReplayType;//[Offset: 0x914, Size: 4]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x918, Size: 48]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x948, Size: 16]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x958, Size: 16]
	int LobbyShowWeaponID;//[Offset: 0x968, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96c, Size: 1]
	FString Nation;//[Offset: 0x970, Size: 16]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x980, Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x988, Size: 1]
	int DefaultCharacterHeadID;//[Offset: 0x98c, Size: 4]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x990, Size: 16]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x9a0, Size: 16]
	int RolewearIndex;//[Offset: 0x9b0, Size: 4]
	int[] equip_plating_list;//[Offset: 0x9b8, Size: 16]
	int VehicleSkinInReady;//[Offset: 0x9c8, Size: 4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9cc, Size: 1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x9d0, Size: 16]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x9e0, Size: 32]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0xa00, Size: 16]
	GameModePlayeWeaponSchemeInfo[] InitialWeaponSchemeInfo;//[Offset: 0xa10, Size: 16]
	delegate OnInitialWeaponScheme;//[Offset: 0xa20, Size: 16]
	int CurWeaponSchemeIndex;//[Offset: 0xa30, Size: 4]
	int PveLevel;//[Offset: 0xa34, Size: 4]
	int[] InitialCharSkillList;//[Offset: 0xa38, Size: 16]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0xa48, Size: 16]
	GameModePlayerItems[] InitialVehicleAvatarSkinList;//[Offset: 0xa58, Size: 16]
	int ShowVehicleSkin;//[Offset: 0xa68, Size: 4]
	GameModePlayerItem[] InitialBackPackPendantList;//[Offset: 0xa70, Size: 16]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0xa80, Size: 16]
	GameModePlayerItem[] InitialVehicleMusicList;//[Offset: 0xa90, Size: 16]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0xaa0, Size: 16]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0xab0, Size: 12]
	<int,int> WeaponAvatarItemList;//[Offset: 0xac0, Size: 80]
	<int,int> GrenadeAvatarItemList;//[Offset: 0xb60, Size: 80]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0xbb0, Size: 16]
	<int,int> VehicleAvatarList;//[Offset: 0xbc0, Size: 80]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0xc10, Size: 80]
	<int,VehicleAvatarSkinList> VehicleAvatarSkinList;//[Offset: 0xc60, Size: 80]
	int[] VehicleMusicList;//[Offset: 0xcb0, Size: 16]
	int[] DefaultVehicleMusic;//[Offset: 0xcc0, Size: 16]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0xcd0, Size: 16]
	GameModeWeaponDIYPlanData[] InitialWeaponDIYPlanData;//[Offset: 0xce0, Size: 16]
	<int,int> WeaponDIYPlanDataMap;//[Offset: 0xcf0, Size: 80]
	<int,int> InitialWeaponPendantList;//[Offset: 0xd40, Size: 80]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0xd90, Size: 16]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0xda0, Size: 16]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0xdb0, Size: 16]
	uint32 TaskSyncToDsTs;//[Offset: 0xdc0, Size: 4]
	BornItem[] BornItems;//[Offset: 0xdc8, Size: 16]
	int AnchorPlatResID;//[Offset: 0xdd8, Size: 4]
	int AnchorPlatColorID;//[Offset: 0xddc, Size: 4]
	int64 LastGameResultTime;//[Offset: 0xe00, Size: 8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe08, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe09, Size: 1]
	FString IpCountryStr;//[Offset: 0xe10, Size: 16]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe20, Size: 1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe21, Size: 1]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe22, Size: 1]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe23, Size: 1]
	LobbyWatchInfo LobbyWatchInfo;//[Offset: 0xe24, Size: 8]
	int HawkEyeSpectateMaxMatchCount;//[Offset: 0xe2c, Size: 4]
	int HawkEyeSpectateUsedMatchCount;//[Offset: 0xe30, Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe34, Size: 1]
	float UpdateOBCircleCounter;//[Offset: 0xe38, Size: 4]
	float UpdateOBCircleInterval;//[Offset: 0xe3c, Size: 4]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe40, Size: 1]
	FString[] FriendObservers;//[Offset: 0xe48, Size: 16]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe58, Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe64, Size: 1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0xec0, Size: 8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecc, Size: 1]
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecd, Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0xee0, Size: 16]
	delegate SyncDailyTaskInfoDelegate;//[Offset: 0xef0, Size: 16]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0xf00, Size: 16]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0xf10, Size: 16]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0xf20, Size: 16]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0xf30, Size: 16]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0xf40, Size: 16]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0xf50, Size: 16]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0xf60, Size: 16]
	delegate OnPlayerControllerBattleBeginPlay;//[Offset: 0xf70, Size: 16]
	bool bCanWatchEnemyInRoomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa0, Size: 1]
	int[] BuffEffectDisplayIDArray;//[Offset: 0xfa8, Size: 16]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb8, Size: 1]
	float NotifyTimeOut;//[Offset: 0xfbc, Size: 4]
	float DelayCloseLoadingTime;//[Offset: 0xfc0, Size: 4]
	FString NeedLoadLevelName;//[Offset: 0xfc8, Size: 16]
	FString NeedLoadedLevelFullName;//[Offset: 0xfd8, Size: 16]
	bool IsTickHouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe8, Size: 1]
	int AntiDataCD;//[Offset: 0xff8, Size: 4]
	int ModeID;//[Offset: 0xffc, Size: 4]
	bool bOpenReconnectUseCharViewPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1000, Size: 1]
	float ClientToDSFlowLimitTime;//[Offset: 0x1030, Size: 4]
	float ClientToDSFlowLimit;//[Offset: 0x1034, Size: 4]
	FString UsingNetObjectPathNameMappingCSV;//[Offset: 0x1058, Size: 16]
	bool UseingWeaponScheme();// 0x3c5e254
	void TestShowLongTimeNoOperation();// 0x3c5e214
	void TestShowConfirmDialogOfMisKill();// 0x3c5e200
	void TestRespawn();// 0x3c5e1ec
	void TestLogout();// 0x3c5e1d8
	void TestCastUIMsgWithPara(FString strMsg, FString module, int TestID);// 0x3c5e08c
	void SyncDailyTaskStoreInfo(DailyTaskStoreInfo[] NewDailyTaskStoreList);// 0x3c5df54
	void SetUsedSimulationCVar(bool Value);// 0x3c5ded0
	static void SetTargetMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x3c5de00
	void SetPanels(out const UAEUserWidget*[] panels);// 0x3c5dd40
	static void SetDSMsgReceiveDelegate(delegate InDelegate);// 0x3c5dcac
	static void SetClientMsgReceiveDelegate(GameInstance* InGameInstance, delegate InDelegate);// 0x3c5dbdc
	void ServerTestLogout();// 0x3c5db7c
	void ServerSetVoiceId(int VoiceID);// 0x3c5dacc
	void ServerKickSelf();// 0x3c5da6c
	void ServerGotoSpectating(Pawn* ViewTarget);// 0x3c5d9bc
	void ServerExitGame();// 0x3c5d95c
	void ServerAcknowledgeReconnection(uint32 Token);// 0x3c5d8ac
	void SendNetObjectPathNameMappingHashToServer(uint32 VersionHash);// 0x3c5d7fc
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x3c5d704
	void SendLuaClientToDS(int ID, out const byte[] Content);// 0x3c5d60c
	void RPC_Server_SyncClientNetInfo(int InLoss, int OutLoss, int InNetworkType);// 0x3c5d4e4
	void RPC_Server_ReportClientNetInfo(int AvgPing, int MaxPing, int MinPing, int LostPackRate, int AvgNoOutlier, int StdNoOutlier, int NumNoOutlier, int InLoss, int OutLoss);// 0x3c5d244
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x3c5d124
	void RPC_LuaClientToDS(int ID, const byte[] Content);// 0x3c5d004
	void Respawn();// 0x3c5cfe8
	void ResetUsedSimulationCVar();// 0x3c5cfd4
	void ReleaseInGameUI();// 0x3c5cfb8
	void ReceivePostLoginInit();// 0x4033584
	void PrintStatistics();// 0x3c5cfa4
	void PlayerStartIDReceived();// 0x3c5cf90
	void OnRep_WeaponAvatarDataList();// 0x3c5cf74
	void OnRep_UsingNetObjectPathNameMappingCSV();// 0x3c5cf60
	void OnRep_UsedSimulation();// 0x3c5cf44
	void OnRep_PveLevel();// 0x3c5cf28
	void OnRep_PlayerOBInfoList();// 0x3c5cf14
	void OnRep_LobbyWatchInfo();// 0x3c5cef8
	void OnRep_LastGameResultTime();// 0x3c5cedc
	void OnRep_IsSpectatingEnemy();// 0x3c5cec0
	void OnRep_IsSpectating();// 0x3c5cea4
	void OnRep_IsObserver();// 0x3c5ce88
	void OnRep_InitialWeaponSchemeInfo();// 0x3c5ce74
	void OnRep_InitialEquipmentAvatar();// 0x3c5ce58
	void OnRep_InitialConsumableAvatar();// 0x3c5ce3c
	void OnRep_FriendObservers();// 0x3c5ce20
	void OnRep_CurWeaponSchemeIndex();// 0x3c5ce0c
	void OnRep_bRoomOwner();// 0x3c5cdf0
	void OnNetObjectPathNameMappingTableAsyncLoad();// 0x3c5cddc
	void NotifyEnterBattle();// 0x3c5cdc8
	void LuaDoString(FString LuaString);// 0x3c5cd18
	void KickSelf();// 0x3c5cd04
	bool IsSpectatorOrDemoPlayer();// 0x3c5cccc
	bool IsSpectator();// 0x3c5cc94
	bool IsRoomMode();// 0x3c5cc70
	bool IsPureSpectator();// 0x3c5cc38
	bool IsObserver();// 0x3c5cc00
	bool IsInSpectatingEnemy();// 0x3c5cbc8
	bool IsInSpectating();// 0x3c5cb90
	bool IsHawkEyeSpectator();// 0x3c5cb58
	bool IsFriendOrEnemySpectator();// 0x3c5cb20
	bool IsFriendObserver();// 0x3c5cae8
	bool IsExited();// 0x3c5cab0
	bool IsDemoRecSpectator();// 0x3c5ca78
	bool IsDemoPlaySpectator();// 0x3c5ca40
	bool IsDemoPlayGlobalObserver();// 0x3c5ca08
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x3c5c954
	void InitWeaponAvatarItems();// 0x3c5c938
	void InitVehicleMusicList();// 0x3c5c91c
	void InitVehicleAvatarSkinList();// 0x3c5c900
	void InitVehicleAvatarList();// 0x3c5c8e4
	void InitVehicleAdvanceAvatarList();// 0x3c5c8c8
	void InitIngameUI();// 0x3c5c8ac
	void InitGrenadeAvatarList(bool ReInitial);// 0x3c5c820
	int GotoSpectating(int PlayerID);// 0x3c5c78c
	bool GetWeaponPandentReflect(int wraponID, out int pendantID);// 0x3c5c6b0
	int GetWeaponAvatarItemId(int ID);// 0x3c5c61c
	void GetVisibleLevelsLoadedName(out FString[] VisibleLevels);// 0x3c5c508
	FString GetLobbyWatchedPlayerKeyAsString();// 0x3c5c464
	DailyTaskStoreInfo GetDailyTaskStoreInfoByTaskId(int TaskId);// 0x3c5c3d4
	int GetCurrentWeaponSchemeMainSlotItemId();// 0x3c5c3a0
	uint32 GetCurrentOBPlayerKey();// 0x3c5c364
	int GetCurrentOBPlayerInfoIndex();// 0x3c5c330
	void ForceNetReady();// 0x3c5c31c
	void ExitGame();// 0x3c5c308
	void ExhaustCPU();// 0x3c5c2f4
	void ExecDSCommand(const FString DSCommand);// 0x3c5c244
	void ExcuteIntRecord(FString Key, int Count);// 0x3c5c0d4
	void ExcuteIntCounterRecord(FString Key, int Count);// 0x3c5bf64
	void EnableInGameUI();// 0x3c5bf50
	void DumpUAENetActors();// 0x3c5bf3c
	void DumpRegions();// 0x3c5bf28
	void DumpNetActors();// 0x3c5bf14
	void DumpCharacters();// 0x3c5bf00
	void DumpAllUI();// 0x3c5beec
	void DumpAllObjects();// 0x3c5bed8
	void DumpAllActors();// 0x3c5bec4
	void DoLuaFile(FString Filename);// 0x3c5be14
	void DoCrash();// 0x3c5be00
	void DisableInGameUI();// 0x3c5bdec
	void DealWithPickUpFailed(ItemDefineID DefineID);// 0x3c5bd58
	void ClientShowTeammateEscapeNotice();// 0x3c5bd3c
	void ClientRPC_CastUIMsgWithStrings(FString strMsg, FString module, const int TipsID, FString param1, FString param2);// 0x3c5bb20
	void ClientRPC_CastUIMsgParams(FString strMsg, FString module, const int Type);// 0x3c5b9cc
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x3c5b8b4
	void ClientInitPlayerOBInfoButton();// 0x3c5b898
	void ClientBroadcastRespawnComplete();// 0x3c5b87c
	void ClientBroadcastReconnectionSuccessful();// 0x3c5b860
	void ClientAcknowledgeReconnection(uint32 Token);// 0x3c5b7dc
	void CheckPlayerOBInfoButtonInit();// 0x3c5b7c0
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x3c5b728
	void CastUIMsg(FString strMsg, FString module);// 0x3c5b610
	enum CanPickUpItem(ItemDefineID DefineID);// 0x3c5b56c
	void CallLuaTableFunction(FString tableName, FString FunctionName);// 0x3c5b454
	void CallLuaGlobalFunction(FString FunctionName);// 0x3c5b3a4
	void BroadcastRespawnComplete();// 0x3c5b390

--------------------------------
Class: LuaPlayerController.PlayerController.Controller.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x790, Size: 80]
	FString LuaFilePath;//[Offset: 0x7e0, Size: 16]

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0, Size: 16]
	int WeatherID;//[Offset: 0x10, Size: 4]
	float WeatherTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 16]
	FString LocalAddr;//[Offset: 0x10, Size: 16]
	float AvgPing;//[Offset: 0x20, Size: 4]
	float MaxPing;//[Offset: 0x24, Size: 4]
	float HighPingPercent;//[Offset: 0x28, Size: 4]

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	uint64 UId;//[Offset: 0x8, Size: 8]
	int ZoneID;//[Offset: 0x10, Size: 4]
	uint32 PlayerKey;//[Offset: 0x14, Size: 4]
	int BattleMode;//[Offset: 0x18, Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int GameCount;//[Offset: 0x20, Size: 4]
	int WinCount;//[Offset: 0x24, Size: 4]
	int TopTenCount;//[Offset: 0x28, Size: 4]
	int KillNum;//[Offset: 0x2c, Size: 4]
	float KDNum;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GameModePlayerRolewearInfo
	GameModePlayerItem[] RolewearInfo;//[Offset: 0x0, Size: 16]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: GameModePlayerKnapsackExtInfo
	GameModePlayerKnapsackSingleInfo KnapsackExtInfo;//[Offset: 0x0, Size: 96]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	int WearIndex;//[Offset: 0x64, Size: 4]

--------------------------------
Class: GameModePlayerKnapsackSingleInfo
	int Parachute;//[Offset: 0x0, Size: 4]
	int BagSkin;//[Offset: 0x4, Size: 4]
	int HelmetSkin;//[Offset: 0x8, Size: 4]
	int FlySkin;//[Offset: 0xc, Size: 4]
	int GrenadeSkin;//[Offset: 0x10, Size: 4]
	GameModePlayerConsumableAvatar ConsumableAvatarList;//[Offset: 0x14, Size: 16]
	GameModePlayerItem[] WeaponList;//[Offset: 0x28, Size: 16]
	GameModePlayerItem[] VehicleSkinList;//[Offset: 0x38, Size: 16]
	GameModePlayerItem[] BackPackPendantList;//[Offset: 0x48, Size: 16]
	int ShowVehicleSkin;//[Offset: 0x58, Size: 4]
	int WingmanSkin;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: GameModePlayerConsumableAvatar
	int GrenadeAvatarShoulei;//[Offset: 0x0, Size: 4]
	int GrenadeAvatarSmoke;//[Offset: 0x4, Size: 4]
	int GrenadeAvatarStun;//[Offset: 0x8, Size: 4]
	int GrenadeAvatarBurn;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayeWeaponSchemeInfo
	int SchemeIndex;//[Offset: 0x0, Size: 4]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	GameModePlayeWeaponSchemeSlotInfo[] SlotList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: GameModePlayeWeaponSchemeSlotInfo
	int SlotIndex;//[Offset: 0x0, Size: 4]
	int ItemId;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int[] AttachList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: GameModePlayerItems
	GameModePlayerItem[] Items;//[Offset: 0x0, Size: 16]

--------------------------------
Class: VehicleAvatarData
	int VehicleSkinID;//[Offset: 0x0, Size: 4]
	int[] VehicleStyleIDList;//[Offset: 0x8, Size: 16]
	VehicleAvatarStyle[] VehicleAvatarStyle;//[Offset: 0x18, Size: 16]

--------------------------------
Class: VehicleAvatarStyle
	int ModelID;//[Offset: 0x0, Size: 4]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int ParticleID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModePlayerEquipmentAvatar
	int BagAvatar;//[Offset: 0x0, Size: 4]
	int HelmetAvatar;//[Offset: 0x4, Size: 4]
	int ArmorAvatar;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModeWeaponAvatarData
	int ParentID;//[Offset: 0x0, Size: 4]
	int AvatarSpecificID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleAvatarSkinList
	int[] SkinList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: GameModeWeaponDIYPlanData
	int WeaponAvatarID;//[Offset: 0x0, Size: 4]
	int PlanID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpecialPickItem
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DailyTaskStoreInfo
	int TaskId;//[Offset: 0x0, Size: 4]
	int State;//[Offset: 0x4, Size: 4]
	int Progress;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BornItem
	int BornItemID;//[Offset: 0x0, Size: 4]
	int BornItemCount;//[Offset: 0x4, Size: 4]
	int BornItemFlags;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LobbyWatchInfo
	uint32 WatchedPlayerKey;//[Offset: 0x0, Size: 4]
	bool bIsHawkEyeSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: ValidTouchMoveFrameConfig
	FString DeviceName;//[Offset: 0x0, Size: 16]
	int Enable;//[Offset: 0x10, Size: 4]
	int Frame;//[Offset: 0x14, Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 16]
	FString PlayerUIDStr;//[Offset: 0x10, Size: 16]
	int PlayerGender;//[Offset: 0x20, Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int[] EquipedAvatarList;//[Offset: 0x28, Size: 16]
	int[] EquipedWeaponList;//[Offset: 0x38, Size: 16]

--------------------------------
Class: ClientFatalDamageRecordData
	FString Causer;//[Offset: 0x0, Size: 16]
	FString CauserNation;//[Offset: 0x10, Size: 16]
	FString VictimName;//[Offset: 0x20, Size: 16]
	FString VictimNation;//[Offset: 0x30, Size: 16]
	FString FuzzyCauserName;//[Offset: 0x40, Size: 16]
	FString FuzzyVictimName;//[Offset: 0x50, Size: 16]
	int DamageType;//[Offset: 0x60, Size: 4]
	int AdditionalParam;//[Offset: 0x64, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x68, Size: 4]
	int CauserClothAvatarID;//[Offset: 0x6c, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int ResultHealthStatus;//[Offset: 0x74, Size: 4]
	byte RecordRelationShip;//[Offset: 0x78, Size: 1]
	int PreviousHealthStatus;//[Offset: 0x7c, Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x80, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x84, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x88, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x8c, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x90, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x94, Size: 4]
	FString CauserPicURL;//[Offset: 0x98, Size: 16]
	FString VictimPicURL;//[Offset: 0xa8, Size: 16]
	FString RealKillerName;//[Offset: 0xb8, Size: 16]
	int RealKillNum;//[Offset: 0xc8, Size: 4]
	byte CauserType;//[Offset: 0xcc, Size: 1]
	byte VictimType;//[Offset: 0xcd, Size: 1]
	int CauserTeamID;//[Offset: 0xd0, Size: 4]
	int VictimTeamID;//[Offset: 0xd4, Size: 4]
	bool IsUseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	LinearColor UseColor;//[Offset: 0xdc, Size: 16]
	byte[] ExpandDataContent;//[Offset: 0xf0, Size: 16]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 40]
	SensibilityMode FireMode;//[Offset: 0x28, Size: 40]
	SensibilityMode MotionMode;//[Offset: 0x50, Size: 40]
	SensibilityMode MotionFireMode;//[Offset: 0x78, Size: 40]
	float VehicleEye;//[Offset: 0xa0, Size: 4]
	float ParachuteEye;//[Offset: 0xa4, Size: 4]
	float FPPEye;//[Offset: 0xa8, Size: 4]
	int SideMirrorModeC;//[Offset: 0xac, Size: 4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0xb0, Size: 80]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 4]
	float Sight1X;//[Offset: 0x4, Size: 4]
	float Sight2X;//[Offset: 0x8, Size: 4]
	float Sight3X;//[Offset: 0xc, Size: 4]
	float Sight4X;//[Offset: 0x10, Size: 4]
	float Sight6X;//[Offset: 0x14, Size: 4]
	float Sight8X;//[Offset: 0x18, Size: 4]
	float FPPNoAim;//[Offset: 0x1c, Size: 4]
	float Shoulder;//[Offset: 0x20, Size: 4]
	float ShoulderFPP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0, Size: 4]
	int Type;//[Offset: 0x4, Size: 4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0, Size: 1]
	FString AttackActionName;//[Offset: 0x8, Size: 16]
	FString AttackName;//[Offset: 0x18, Size: 16]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int KillNum;//[Offset: 0x2c, Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bHideKillIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	FString FullMsg;//[Offset: 0x38, Size: 16]
	int victimAnchorPlatformResID;//[Offset: 0x48, Size: 4]
	FString VictimPlayerName;//[Offset: 0x50, Size: 16]
	FString CauserPlayerName;//[Offset: 0x60, Size: 16]
	FString CauserRealPlayerName;//[Offset: 0x70, Size: 16]
	bool bIsCauserTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	bool bIsVictimTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 1]
	bool bIamCauser;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 1]
	bool bIamVictim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83, Size: 1]
	int ResultHealthStatus;//[Offset: 0x84, Size: 4]
	int CauserType;//[Offset: 0x88, Size: 4]
	int DamageType;//[Offset: 0x8c, Size: 4]
	int AdditionalParam;//[Offset: 0x90, Size: 4]
	int PreviousHealthStatus;//[Offset: 0x94, Size: 4]
	byte[] ExpandDataContent;//[Offset: 0x98, Size: 16]

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0x110, Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	float GuideInterval;//[Offset: 0x118, Size: 4]
	int MaxGuideLevel;//[Offset: 0x11c, Size: 4]
	class STNewBieGuideConfig* uBRNewGuideConfig;//[Offset: 0x120, Size: 40]
	class Object[] tGuideConfigClassArray;//[Offset: 0x148, Size: 16]
	STNewBieGuideConfig*[] tGuideConfigArray;//[Offset: 0x158, Size: 16]
	class STNewBieGuideConfig* uModNewGuideConfig;//[Offset: 0x168, Size: 40]
	NewbieGuideItem[] tItems;//[Offset: 0x190, Size: 16]
	STExtraPlayerController* OwnerController;//[Offset: 0x1a0, Size: 8]
	int[] FinishedTips;//[Offset: 0x1a8, Size: 16]
	int[] FinishedCounts;//[Offset: 0x1b8, Size: 16]
	int PlayerLevel;//[Offset: 0x1c8, Size: 4]
	byte curPlayerCategory;//[Offset: 0x1cc, Size: 1]
	void TriggerNewbieEvent(FString NewbieEvent);// 0x343ce04
	void ShowHideGuide(int TipsID, bool bShow);// 0x343cd44
	void SendNewbieMsg(int TipsID, bool isStart, int tipsIndex);// 0x343cc40
	void OnUIAssetLoadFinsh(LoadGuideUIFinishRet inFinishRet);// 0x343cbc4
	void OnNewbieEventMapUpdate__DelegateSignature();// 0x4033584
	void OnLoadGuideConfigFinish(LoadGuideConfig inFinishRet);// 0x343ca84
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte _curPlayerCategory, int _PlayerLevel);// 0x343c7bc
	void HandleNewbieGuideEnd(FString GuideID, FString EndType);// 0x343c6ac
	void HandleNewbieGuideBegin(FString GuideID);// 0x343c604
	bool GetIsAllowNewGuide();// 0x343c5cc
	bool GetIsAllowLuaNewGuide();// 0x343c594
	void AddGuidItem(class STNewBieGuideConfig Config);// 0x343c454

--------------------------------
Class: STNewBieGuideConfig.Object
	NewbieGuideItem[] tItems;//[Offset: 0x28, Size: 16]

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x8, Size: 16]
	byte Type;//[Offset: 0x18, Size: 1]
	int MaxGuideCounts;//[Offset: 0x1c, Size: 4]
	int MaxGuideLevel;//[Offset: 0x20, Size: 4]
	byte[] SubjectPlayerTypes;//[Offset: 0x28, Size: 16]
	int Priority;//[Offset: 0x38, Size: 4]
	int MuteFlag;//[Offset: 0x3c, Size: 4]
	int PreconditionID;//[Offset: 0x40, Size: 4]
	float PreconditionTipTimeGap;//[Offset: 0x44, Size: 4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x48, Size: 16]
	STNewbieGuideSuccessListenerBase* QuickFinishedListener;//[Offset: 0x58, Size: 8]
	STNewbieGuideSuccessListenerBase*[] QuickFinishedListenerList;//[Offset: 0x60, Size: 16]
	float Duration;//[Offset: 0x70, Size: 4]
	NewbieGuideUIInfo[] UIInfos;//[Offset: 0x78, Size: 16]
	bool UseNewEdition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x88, Size: 8]
	FString LuaFilePath;//[Offset: 0x90, Size: 16]
	bool ReconnectRecover();// 0x343bc44
	bool IsOK();// 0x343bc04

--------------------------------
Class: STNewbieGuideSuccessListenerBase.GSListenerBase.Object
	bool GuideFinishedByPlayer();// 0x343be7c

--------------------------------
Class: GSListenerBase.Object
	delegate OnGSListenerBaseTrigger;//[Offset: 0x28, Size: 16]
	Controller* OwnerController;//[Offset: 0x38, Size: 8]
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float DelayTime;//[Offset: 0x44, Size: 4]
	bool ReconnectRecover();// 0x33d02a8
	void OnEventTrigger();// 0x33d028c
	Actor* GetCurrentEventOwnerActor();// 0x33d0250
	bool EnableListener();// 0x33d0210
	bool DisableListener();// 0x33d01d0

--------------------------------
Class: NewbieGuideUIInfo
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x0, Size: 40]
	bool isMountUIDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FString MountName;//[Offset: 0x30, Size: 16]
	FString MountOuterName;//[Offset: 0x40, Size: 16]
	AnchorData LayoutData;//[Offset: 0x50, Size: 40]
	FString LogicManagerNames;//[Offset: 0x78, Size: 16]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	int ZOrder;//[Offset: 0x8c, Size: 4]
	Widget* UIWidget;//[Offset: 0x90, Size: 8]
	class Object* UIWidgetClass;//[Offset: 0x98, Size: 8]

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x218, Size: 8]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x220, Size: 8]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x228, Size: 8]
	UAEUserWidget* ParentWidget;//[Offset: 0x230, Size: 8]
	Property*[] Params;//[Offset: 0x2d8, Size: 16]
	delegate widgetSizeNofity;//[Offset: 0x2f8, Size: 16]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x308, Size: 40]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x330, Size: 40]
	float TickRate;//[Offset: 0x358, Size: 4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d, Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e, Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35f, Size: 1]
	Vector2D ScreenPos;//[Offset: 0x360, Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x368, Size: 8]
	enum FadingStatus;//[Offset: 0x378, Size: 1]
	float CurrentOpacity;//[Offset: 0x37c, Size: 4]
	float FadingInTime;//[Offset: 0x380, Size: 4]
	float FadingOutTime;//[Offset: 0x384, Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b, Size: 1]
	FString UIMsgPrefix;//[Offset: 0x390, Size: 16]
	FString[] UIMsgFunctionList;//[Offset: 0x3a0, Size: 16]
	bool bRegistedUIMsgToMoudle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	FString MoudleToRegisted;//[Offset: 0x3b8, Size: 16]
	bool Visible();// 0x5d124e0
	void UnRegistFromGameFrontendHUD();// 0x5d124cc
	void SynchronizeBlueprintProperties();// 0x4033584
	void Show();// 0x5d124b8
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x5d1243c
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x5d123c0
	static void SetOnWidgetShow(delegate onShow);// 0x5d1232c
	static void SetOnWidgetHide(delegate OnHide);// 0x5d12298
	static void SetOnClearUIStack(delegate onClear);// 0x5d12204
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x5d120d8
	void RegistToGameFrontendHUD(FrontendHUD* GameFrontHUD);// 0x5d1205c
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x5d11f9c
	void ReceiveShow();// 0x4033584
	void ReceiveHide();// 0x4033584
	void ReceivedMountWidget();// 0x5d11f80
	void ReceivedInitWidget();// 0x4033584
	void ReCachedUIMsgFunction();// 0x5d11f6c
	static void PushOpenedUIStack(FString Name);// 0x5d11ecc
	static void PopOpenedUIStack(FString curOpen);// 0x5d11e2c
	void OnWidgetShow__DelegateSignature(FString ClassName);// 0x4033584
	void OnWidgetHide__DelegateSignature(FString ClassName);// 0x4033584
	void OnRightClicked(Vector2D TempScreenPos);// 0x4033584
	void OnFadeOutFinished();// 0x5d11e10
	void OnFadeInFinished();// 0x5d11df4
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x4033584
	void OnClicked(Vector2D TempScreenPos);// 0x4033584
	void OnClearUIStack__DelegateSignature();// 0x4033584
	bool IntCompare(int A, int B, enum CompareType);// 0x5d11cf0
	void InitWidget(bool Recursive);// 0x5d11c6c
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x5d11bb0
	void Hide();// 0x5d11b9c
	void HandleUIMessageBattle(FString UIMessage);// 0x5d11af4
	void HandleUIMessage(FString UIMessage);// 0x5d11a4c
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains);// 0x5d118e8
	Widget* GetWidgetContainsName(FString Name);// 0x5d11830
	UAEUserWidget* GetParentWidget();// 0x5d117fc
	PlayerController* GetOwningPlayer();// 0x5d117c0
	LogicManagerBase* GetOwningLogicManager();// 0x5d1178c
	FrontendHUD* GetOwningFrontendHUD();// 0x5d11758
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x5d116cc
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x5d11598
	UserWidget* GetChildWidget(FString WName);// 0x5d114e0
	Margin GetAdapation();// 0x5d114bc
	bool FloatCompare(float A, float B, enum CompareType);// 0x5d113b8
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget);// 0x5d1133c
	void DestroyWidget();// 0x5d11328
	static void ClearOpenedUIStack();// 0x5d11314
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x5d1126c
	void ClearFunctionCache();// 0x5d11258
	void ClearClassWidgetTree();// 0x5d11244
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x5d11188

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x40, Size: 8]
	FString FrontendUtilsClassName;//[Offset: 0x50, Size: 16]
	FrontendUtils* Utils;//[Offset: 0x60, Size: 8]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x68, Size: 16]
	<FString,LogicManagerBase*> LogicManagerMap;//[Offset: 0x78, Size: 80]
	int UnusedWidgetMinCount;//[Offset: 0xd8, Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0xdc, Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xe0, Size: 4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xe4, Size: 4]
	float MaxMiddleMemoryLimit;//[Offset: 0xe8, Size: 4]
	float MaxGCArrayObjectSize;//[Offset: 0xec, Size: 4]
	FName CurrentGameStatus;//[Offset: 0xf0, Size: 8]
	FName LastGameStatus;//[Offset: 0xf8, Size: 8]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	FName PendingGameStatus;//[Offset: 0x108, Size: 8]
	FString LatestGameStatusURL;//[Offset: 0x110, Size: 16]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0x120, Size: 16]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0x130, Size: 16]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0x140, Size: 16]
	delegate OnGameStatusSwitchTerminate;//[Offset: 0x160, Size: 16]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x170, Size: 16]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x180, Size: 16]
	delegate OnSetGameStatusEvent;//[Offset: 0x190, Size: 16]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x1a0, Size: 16]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x1b0, Size: 16]
	World* CurrentGameStatusWorld;//[Offset: 0x1c0, Size: 8]
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x5d0c3cc
	void StandAloneSwitchGameStatus(FName InGameStatus, FString Options);// 0x5d0c248
	void OnPreLoadMap(FString MapName);// 0x5d0c198
	void OnPostLoadMapWithWorld(World* World);// 0x5d0c114
	void OnGameViewportClientCreated();// 0x5d0c100
	World* GetWorld();// 0x5d0c0c4
	FrontendUtils* GetUtils();// 0x5d0c090
	PlayerController* GetPlayerController();// 0x5d0c05c
	LogicManagerBase* GetLogicManagerByName(FString LogicManagerTagName);// 0x5d0bf20
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x5d0be94
	GameViewportClient* GetGameViewportClient();// 0x5d0be60
	GameMode* GetGameMode();// 0x5d0be2c
	GameInstance* GetGameInstance();// 0x5d0bdf8
	Object*[] FindRegistedUIFunctionList(FString strMsg, FString moduleMsg);// 0x5d0bc78
	void EnableGuiTest(bool bEnable);// 0x5d0bbf4
	void DynamicRegistUIMsgToCache(UAEUserWidget* Widget, FString module);// 0x5d0bb0c
	void ClearLogicManagerByName(FString managerName);// 0x5d0b9d8

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 8]
	delegate SceneCameraSwitchedDelegate;//[Offset: 0x30, Size: 16]
	FName CurrentSceneCameraName;//[Offset: 0x40, Size: 8]
	CameraActor*[] SceneCameraList;//[Offset: 0x48, Size: 16]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x58, Size: 80]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0xa8, Size: 16]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0xb8, Size: 80]
	PointLight*[] ScenePointLightList;//[Offset: 0x108, Size: 16]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0x118, Size: 80]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x168, Size: 80]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x220, Size: 16]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x230, Size: 8]
	Object* GlobalUIEventDispatcher;//[Offset: 0x238, Size: 8]
	FString GlobalUIContainerClassName;//[Offset: 0x240, Size: 16]
	FName[] GlobalUIContainerNames;//[Offset: 0x250, Size: 16]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x260, Size: 80]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x2b0, Size: 16]
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x2c0, Size: 80]
	<UAEWidgetContainer*,bool> UIShowStatusMap;//[Offset: 0x348, Size: 80]
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float blendTime, bool bForce);// 0x5d0db1c
	void SwitchSceneCamera(FName SceneCameraName, float blendTime, bool bForce);// 0x5d0da20
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x5d0d8c8
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x5d0d6f8
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x5d0d560
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x5d0d4ac
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x5d0d3f8
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x5d0d344
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x5d0d290
	void PopAllPushedUI();// 0x5d0d27c
	void OnAllSceneCamerasRegistered();// 0x5d0d260
	bool IsPushedPanel(out const FName managerName);// 0x5d0d1c0
	bool IsNoRenderClient();// 0x5d0d188
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x5d0d048
	FString GetUIStackTopSrcTag();// 0x5d0cfa4
	FString GetUIStackTopDstTag();// 0x5d0cf00
	FString GetUIStackTop();// 0x5d0ce5c
	CameraActor* GetSceneCamera();// 0x5d0ce28
	FrontendHUD* GetOwningFrontendHUD();// 0x5d0cdf4
	Object* GetGlobalUIEventDispatcher();// 0x5d0cdc0
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x5d0cd34
	void EnableLobbyMainLight(bool NewEnable);// 0x5d0ccb0
	void ClearAllSceneCameras();// 0x5d0cc9c

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x3d8, Size: 8]
	void SetRadius(float NewRadius);// 0x5c35f64
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x5c35ee8

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x3fc, Size: 4]
	float AttenuationRadius;//[Offset: 0x400, Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x404, Size: 1]
	float LightFalloffExponent;//[Offset: 0x408, Size: 4]
	float SourceRadius;//[Offset: 0x40c, Size: 4]
	float SoftSourceRadius;//[Offset: 0x410, Size: 4]
	float SourceLength;//[Offset: 0x414, Size: 4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x418, Size: 1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x418, Size: 1]
	float RectLightSourceWidth;//[Offset: 0x41c, Size: 4]
	float RectLightSourceHeight;//[Offset: 0x420, Size: 4]
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x424, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x428, Size: 12]
	void SetSourceRadius(float bNewValue);// 0x5c36754
	void SetSourceLength(float NewValue);// 0x5c366d8
	void SetSoftSourceRadius(float bNewValue);// 0x5c3665c
	void SetSimulateRectLight(bool NewValue);// 0x5c365d8
	void SetSimulatePortalLight(bool NewValue);// 0x5c36554
	void SetRectLightSourceWidth(float NewValue);// 0x5c364d8
	void SetRectLightSourceHeight(float NewValue);// 0x5c3645c
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x5c363e0
	void SetAttenuationRadius(float NewRadius);// 0x5c36364

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 4]
	float ShadowExponent;//[Offset: 0x4, Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x3c8, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 1]
	void OnRep_bEnabled();// 0x5c64e14

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x2f4, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x2f8, Size: 8]
	float SourceCubemapAngle;//[Offset: 0x300, Size: 4]
	int CubemapResolution;//[Offset: 0x304, Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x308, Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x310, Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x320, Size: 4]
	float Contrast;//[Offset: 0x324, Size: 4]
	float OcclusionExponent;//[Offset: 0x328, Size: 4]
	float MinOcclusion;//[Offset: 0x32c, Size: 4]
	Color OcclusionTint;//[Offset: 0x330, Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x334, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x3d8, Size: 8]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x5c657a0
	void SetOcclusionTint(out const Color InTint);// 0x5c65718
	void SetOcclusionExponent(float InOcclusionExponent);// 0x5c6569c
	void SetOcclusionContrast(float InOcclusionContrast);// 0x5c65620
	void SetMinOcclusion(float InMinOcclusion);// 0x5c655a4
	void SetLightColor(LinearColor NewLightColor);// 0x5c65528
	void SetIntensity(float NewIntensity);// 0x5c654ac
	void SetIndirectLightingIntensity(float NewIntensity);// 0x5c65430
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x5c65340
	void SetCubemap(TextureCube* NewCubemap);// 0x5c652c4
	void RecaptureSky();// 0x5c652b0

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UserWidget*[] WidgetList;//[Offset: 0x3d0, Size: 16]
	void RemoveWidgetInternal(UserWidget* Widget);// 0x5d13a5c
	void RemoveWidget(UserWidget* Widget);// 0x5d139e0
	void AddWidgetWithZOrderInternal(UserWidget* Widget, int ZOrder);// 0x5d13920
	void AddWidgetWithZOrder(UserWidget* Widget, int ZOrder);// 0x5d13868
	void AddWidgetInternal(UserWidget* Widget);// 0x5d137e4
	void AddWidget(UserWidget* Widget);// 0x5d13768

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x38, Size: 8]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	int iUIControlState;//[Offset: 0x54, Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x58, Size: 4]
	FName[] GameStatusList;//[Offset: 0x70, Size: 16]
	class Object[] WidgetUClassList;//[Offset: 0xb0, Size: 16]
	UAEUserWidget*[] WidgetList;//[Offset: 0xc0, Size: 16]
	Object*[] DelayMessage_Obj;//[Offset: 0xe8, Size: 16]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x5d0edf8
	bool IsEnableRemoveDynamicWidgets();// 0x5d0edc0
	UAEUserWidget*[] GetWidgetList();// 0x5d0ed1c
	UAEUserWidget* GetWidgetByName(FString InName);// 0x5d0ec64
	UAEUserWidget* GetWidgetByClass(class Object InClass);// 0x5d0ebd8
	FrontendHUD* GetOwningFrontendHUD();// 0x5d0eba4
	int GetDefaultSceneCamera();// 0x5d0eb70
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x5d0e9c8

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x458, Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 1]
	int NumSpectators;//[Offset: 0x464, Size: 4]
	int NumPlayers;//[Offset: 0x468, Size: 4]
	int NumBots;//[Offset: 0x46c, Size: 4]
	float MinRespawnDelay;//[Offset: 0x470, Size: 4]
	int NumTravellingPlayers;//[Offset: 0x474, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x478, Size: 8]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x480, Size: 16]
	float InactivePlayerStateLifeSpan;//[Offset: 0x490, Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	void StartMatch();// 0x5b43f34
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x5b43eb0
	void Say(FString Msg);// 0x5b43e00
	void RestartGame();// 0x5b43de4
	bool ReadyToStartMatch();// 0x5b43da4
	bool ReadyToEndMatch();// 0x5b43d64
	void K2_OnSetMatchState(FName NewState);// 0x4033584
	bool IsMatchInProgress();// 0x5b43d24
	bool HasMatchEnded();// 0x5b43ce4
	FName GetMatchState();// 0x5b43cc8
	void EndMatch();// 0x5b43cac
	void AbortMatch();// 0x5b43c90

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 16]
	FName ContainerName;//[Offset: 0x10, Size: 8]
	int ZOrder;//[Offset: 0x18, Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x20, Size: 8]

--------------------------------
Class: Image.Widget.Visual.Object
	bool bIsEnhancedImage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	SlateBrush Brush;//[Offset: 0x108, Size: 184]
	delegate BrushDelegate;//[Offset: 0x1c0, Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x1d0, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1e0, Size: 16]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool bVersionImg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	FString imageSrcPath;//[Offset: 0x1f8, Size: 16]
	float HitTestAreaRadius;//[Offset: 0x208, Size: 4]
	delegate OnMouseButtonDownEvent;//[Offset: 0x210, Size: 16]
	bool bDontPaintWhenAlphaZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bDontPaintWhenColorZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	void SetOpacity(float InOpacity);// 0x4f41618
	void SetDontPaintWhenColorZero(bool Enable);// 0x4f41594
	void SetDontPaintWhenAlphaZero(bool Enable);// 0x4f41510
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4f41494
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x4f413d4
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x4f41314
	void SetBrushFromPathAsync(FString ResourcePath);// 0x4f4126c
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x4f411f0
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x4f41174
	void SetBrush(out const SlateBrush InBrush);// 0x4f41044
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x4f41010
	bool GetDontPaintWhenColorZero();// 0x4f40fd8
	bool GetDontPaintWhenAlphaZero();// 0x4f40fa0

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xf0, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 184]

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 16]
	Anchors Anchors;//[Offset: 0x10, Size: 16]
	Vector2D Alignment;//[Offset: 0x20, Size: 8]

--------------------------------
Class: LoadGuideUIFinishRet

--------------------------------
Class: LoadGuideConfig

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	void RPC_SrvSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf, double InClientTime);// 0x367da14
	void RPC_SrvSyncTimeLine(int InSrvDeltaTime, double InClientTime);// 0x367d924
	void RPC_GetClientTimeRespond(int Index, float serverLevelTime, int64 serverSystemTime, double serverBootTime);// 0x367d7b4
	void RPC_GetClientTimeRequest(int Index);// 0x367d704
	void RPC_ClientSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf);// 0x367d614
	void RPC_ClientSyncTimeLine(int InSrvDeltaTime);// 0x367d564
	void ReportDebugInfo(int RporetedId);// 0x367d4b4
	void OnServerAboutToReconnect();// 0x367d4a0
	void GetClientTimeInterval();// 0x367d48c
	void CheckTimeLine();// 0x367d478

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	float TimeStartDelay;//[Offset: 0x114, Size: 4]
	float SyncInterval;//[Offset: 0x118, Size: 4]
	void RPC_SrvSyncTimeLine(float InSrvSendTime, float InClientTime);// 0x367eec0
	void RPC_ClientSyncTimeLine(float InServerTime);// 0x367ee3c
	void OnTimeInspectorColdMove_Vehicle();// 0x367ee28
	void OnTimeInspectorColdMove_Own();// 0x367ee14
	void OnServerAboutToReconnect();// 0x367ee00
	void CheckTimeLine();// 0x367edec

--------------------------------
Class: HiggsBosonComponent.ActorComponent.Object
	FString TraceData;//[Offset: 0x228, Size: 16]
	FString GameTraceData;//[Offset: 0x238, Size: 16]
	uint32 HeartBreaks;//[Offset: 0x248, Size: 4]
	FString HeartInfo;//[Offset: 0x250, Size: 16]
	delegate OnSwiftHawkDelegate;//[Offset: 0x260, Size: 16]
	delegate OnGlueHiaRayResult;//[Offset: 0x270, Size: 16]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x280, Size: 8]
	STExtraPlayerController* PlayerController;//[Offset: 0x288, Size: 8]
	void SwiftHawk(const byte[] Hawks, uint32 Magic);// 0x33d7e08
	void ServerShowSecurityAlert(FString Tips);// 0x33d7d58
	void RPC_ServerGlueHiaPark(int8 HeShui, const byte[] GlueHiaParkArr, uint32 HiaStatus, const byte[] GlueArg);// 0x33d7b90
	void RPC_ServerCapbo(int8 BoCapC, int8 InBoType, const byte[] BoDataArr);// 0x33d7a30
	void RPC_ClientCoronaLab(byte bAllSwitch, const byte[] CoronaLab, uint32 CoronaState);// 0x33d78d0
	void OnWeaponAimInput(float InDistToEnemy, float InYaw, float InPitch, float InRoll);// 0x33d77a8
	void OnTouchInput(float InYaw, float InPitch, float InRoll);// 0x33d76b8
	void OnStopFireEvent();// 0x33d76a4
	void OnStartFireEvent();// 0x33d7690
	void OnSkillInteruptVisual(const Actor* InTarget, const Actor* InCauser);// 0x33d75dc
	void OnSkillEndVisual(const Actor* InTarget, const Actor* InCauser);// 0x33d7528
	void OnSkillEndTrans(const Actor* InTarget, const Actor* InCauser);// 0x33d7474
	void OnSkillBeginVisual(const Actor* InTarget, const Actor* InCauser);// 0x33d73c0
	void OnSkillBeginTrans(const Actor* InTarget, const Actor* InCauser);// 0x33d730c
	void OnPlayerScopeOut(bool bBegan);// 0x33d7288
	void OnPlayerScopeIn(bool bBegan);// 0x33d7204
	void OnMyPawnRespawn(UAEPlayerController* InPlayerController);// 0x33d7188
	void OnKillSomeOneEvent(const Actor* InSomeOne);// 0x33d710c
	void OnGyroInput(float InYaw, float InPitch, float InRoll);// 0x33d701c
	void OnClientAdjustPosition(Vector NewLoc, enum Reason);// 0x33d6f64
	void OnCapboReturn(int BoCapC, int InBoType, out const byte[] RetData);// 0x33d6e30
	void OnBulletImpactEvent(const Actor* InCauser, out const HitResult InImpactResult);// 0x33d6d54
	void FlushGameEnd();// 0x33d6d40
	void ClientSwiftHawk(byte Type, int SequenceID);// 0x33d6c80
	void ClientDoJT();// 0x33d6c6c

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch VsHitDetail;//[Offset: 0x188, Size: 12]
	VerifySwitch VsFlyDist2D;//[Offset: 0x194, Size: 12]
	VerifySwitch VsFlyDist3D;//[Offset: 0x1a0, Size: 12]
	VerifySwitch VsFlyGravitySimple;//[Offset: 0x1ac, Size: 12]
	VerifySwitch VsFlyGravityDetail;//[Offset: 0x1b8, Size: 12]
	VerifySwitch VsRelMoveFailed;//[Offset: 0x1c4, Size: 12]
	VerifySwitch VsPureMoveSpeed;//[Offset: 0x1d0, Size: 12]
	VerifySwitch VsNoHitDetail;//[Offset: 0x1dc, Size: 12]
	VerifySwitch VsFakeTraceMissMatch;//[Offset: 0x1e8, Size: 12]
	VerifySwitch VsSilentProtect01;//[Offset: 0x1f4, Size: 12]
	VerifySwitch VsSilentProtect02;//[Offset: 0x200, Size: 12]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x20c, Size: 12]
	VerifySwitch VsLocusCheckZ;//[Offset: 0x218, Size: 12]
	VerifySwitch VsLocusCheckHorizonSingle;//[Offset: 0x224, Size: 12]
	VerifySwitch VsLocusCheckHorizonBigBox;//[Offset: 0x230, Size: 12]
	VerifySwitch VsMuzzleDataWrong;//[Offset: 0x23c, Size: 12]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x248, Size: 12]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x254, Size: 12]
	VerifySwitch VsMuzzleRangeForward;//[Offset: 0x260, Size: 12]
	VerifySwitch VsMuzzleRangeRight;//[Offset: 0x26c, Size: 12]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x278, Size: 12]
	VerifySwitch VsMaxWeaponToBaseFailed;//[Offset: 0x284, Size: 12]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x290, Size: 12]
	VerifySwitch VsBulletBornFailed;//[Offset: 0x29c, Size: 12]
	VerifySwitch VsBoneScale;//[Offset: 0x2a8, Size: 12]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x2b4, Size: 12]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x2c0, Size: 12]
	VerifySwitch VsBulletID;//[Offset: 0x2cc, Size: 12]
	VerifySwitch VsWeaponHasNoBase;//[Offset: 0x2d8, Size: 12]
	VerifySwitch VsBlockStaticToDynamic;//[Offset: 0x2e4, Size: 12]
	VerifySwitch VsMoveTimeStampError;//[Offset: 0x2f0, Size: 12]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x2fc, Size: 12]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x308, Size: 12]
	int MaxShootPointPassWall;//[Offset: 0x314, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x318, Size: 4]
	int MaxLocusFailTime;//[Offset: 0x31c, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x320, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x324, Size: 4]
	float MaxSkeletonLength;//[Offset: 0x328, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x32c, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x330, Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x334, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x338, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x33c, Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x348, Size: 12]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x354, Size: 12]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x360, Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x36c, Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x378, Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x384, Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x390, Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x39c, Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x3a8, Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x3b4, Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x3c0, Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x3cc, Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x3d8, Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x3e4, Size: 12]
	VerifySwitch VsShootTimeDeConMerged;//[Offset: 0x3f0, Size: 12]
	int MaxMergedStrategy1;//[Offset: 0x3fc, Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x400, Size: 4]
	VerifySwitch VsShootTimeDeConFrameControl;//[Offset: 0x404, Size: 12]
	VerifySwitch VsShootTimeServerNoConnSpan;//[Offset: 0x410, Size: 12]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x41c, Size: 12]
	VerifySwitch VsClientNotConnectShoot;//[Offset: 0x428, Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x434, Size: 12]
	VerifySwitch VsParachuteVelocityCheck;//[Offset: 0x440, Size: 12]
	float MaxFuelConsume;//[Offset: 0x44c, Size: 4]
	VerifySwitch VsHighMuzzleShootDown;//[Offset: 0x4d0, Size: 12]
	VerifySwitch VsWeaponScopeHeightError;//[Offset: 0x4dc, Size: 12]
	VerifySwitch VsWeaponScopeDisError;//[Offset: 0x4e8, Size: 12]
	VerifySwitch VsOwnerHeadAndMuzzlePassWall;//[Offset: 0x4f4, Size: 12]
	VerifySwitch VsImpactPointAndActorDisBig;//[Offset: 0x500, Size: 12]
	VerifySwitch VsImpactPointAndBulletDisBig;//[Offset: 0x50c, Size: 12]
	VerifySwitch VsShooterPosByNetdelayInvalid;//[Offset: 0x518, Size: 12]
	VerifySwitch VsVictmPosByNetdelayInvalid;//[Offset: 0x524, Size: 12]
	VerifySwitch VsShootVerifyInvalid;//[Offset: 0x530, Size: 12]
	bool bOpenDetailDataCollect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	bool bOpenSocialIslandJump2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 1]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x540, Size: 12]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x54c, Size: 12]
	VerifySwitch VsClientBulletDir;//[Offset: 0x558, Size: 12]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x564, Size: 12]
	VerifySwitch VsClientDownShoot;//[Offset: 0x570, Size: 12]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x57c, Size: 12]
	VerifySwitch FarJump;//[Offset: 0x588, Size: 12]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x594, Size: 12]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x5a0, Size: 12]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x5ac, Size: 12]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x5b8, Size: 12]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x5c4, Size: 12]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x5d0, Size: 12]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x5dc, Size: 12]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x5e8, Size: 12]
	AntiCheatDetailData CatchReportAntiCheatDetailData;//[Offset: 0x5f8, Size: 40]
	int MaxCatchWeaponAntiDataNLength;//[Offset: 0x620, Size: 4]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x624, Size: 12]
	VerifySwitch SpeedCheatOver10;//[Offset: 0x64c, Size: 12]
	VerifySwitch SpeedCheatOver15;//[Offset: 0x658, Size: 12]
	VerifySwitch SpeedCheatOver20;//[Offset: 0x664, Size: 12]
	VerifySwitch SpeedQuickCheck;//[Offset: 0x670, Size: 12]
	VerifySwitch BulletDirError;//[Offset: 0x67c, Size: 12]
	VerifySwitch MuzzleAndOwnerDisOpti;//[Offset: 0x688, Size: 12]
	VerifySwitch ImpactAndEnemyDisOpti;//[Offset: 0x694, Size: 12]
	VerifySwitch SwitchMuzzleImpactDirError1;//[Offset: 0x6a0, Size: 12]
	VerifySwitch SwitchMuzzleImpactDirError2;//[Offset: 0x6ac, Size: 12]
	VerifySwitch SwitchShootPosHistoryLocusError1;//[Offset: 0x6b8, Size: 12]
	VerifySwitch SwitchShootPosHistoryLocusError2;//[Offset: 0x6c4, Size: 12]
	VerifySwitch SwitchMuzzleLocusError;//[Offset: 0x6d0, Size: 12]
	VerifySwitch SwitchMuzzleLocusErrorX;//[Offset: 0x6dc, Size: 12]
	VerifySwitch SwitchMuzzleLocusErrorY;//[Offset: 0x6e8, Size: 12]
	VerifySwitch SwitchMuzzleLocusErrorZ;//[Offset: 0x6f4, Size: 12]
	float MaxUseOptiArguPing;//[Offset: 0x700, Size: 4]
	int UploadHitDataDelayTime1;//[Offset: 0x704, Size: 4]
	int UploadHitDataDelayTime2;//[Offset: 0x708, Size: 4]
	int UploadHitDataDelayTime3;//[Offset: 0x70c, Size: 4]
	int UploadHitDataDelayTime4;//[Offset: 0x710, Size: 4]
	int ShootVerifyTimes;//[Offset: 0x714, Size: 4]
	float VehicleSpeedZDeltaTotal;//[Offset: 0x770, Size: 4]
	int VehicleSpeedZDeltaOver10Times;//[Offset: 0x774, Size: 4]
	VerifySwitch VehicleSpeedZDeltaOver10TimesWhenNoXY;//[Offset: 0x778, Size: 12]
	VerifySwitch VehicleSpeedZCheck;//[Offset: 0x784, Size: 12]
	float ParachuteStartTime;//[Offset: 0x794, Size: 4]
	float ParachuteOpenTime;//[Offset: 0x798, Size: 4]
	float ParachuteCloseTime;//[Offset: 0x79c, Size: 4]
	float ParachuteStartHight;//[Offset: 0x7a0, Size: 4]
	float ParachuteOpenHight;//[Offset: 0x7a4, Size: 4]
	float ParachuteCloseHight;//[Offset: 0x7a8, Size: 4]
	void ReportAntiCheatDetailData();// 0x3470fb8
	void PushWeaponAntiData(out WeaponAntiData NewWeaponAntiData);// 0x3470f28
	void OnRecoverOnServer();// 0x3470f14
	void OnPreReconnectOnServer();// 0x3470f00
	void ExitParachute();// 0x3470eec
	void EnterParachute();// 0x3470ed8
	void EnterJumping();// 0x3470ec4

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x0, Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int VerifyFailedCnt;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AntiCheatDetailData
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x8, Size: 16]
	WeaponAntiData[] WeaponAntiDataList;//[Offset: 0x18, Size: 16]

--------------------------------
Class: WeaponAntiData
	uint16 MuzzleFloorHeight;//[Offset: 0x0, Size: 2]
	int16 MuzzleActorHeadHeight;//[Offset: 0x2, Size: 2]
	uint16 ImplactPointAndActorDis;//[Offset: 0x4, Size: 2]
	uint16 ImplactPointAndBulletDis;//[Offset: 0x6, Size: 2]
	uint16 ImplactPoinPosChange;//[Offset: 0x8, Size: 2]
	uint16 BulletAndGunAngle;//[Offset: 0xa, Size: 2]
	uint16 NetDelay;//[Offset: 0xc, Size: 2]
	uint32 ShooterPosDis;//[Offset: 0x10, Size: 4]
	uint32 VictmPosDis;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 4]
	float CameraSwitchTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0, Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 12]
	float SpringArmLength;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0, Size: 4]
	float ViewPitchMax;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerParams
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString PlanetailResLink;//[Offset: 0x8, Size: 16]
	uint64 UId;//[Offset: 0x18, Size: 8]
	FString OpenID;//[Offset: 0x20, Size: 16]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	FName PlayerType;//[Offset: 0x38, Size: 8]
	FString PlayerName;//[Offset: 0x40, Size: 16]
	uint32 PlayerKey;//[Offset: 0x50, Size: 4]
	int TeamID;//[Offset: 0x54, Size: 4]
	int64 IdxInTeam;//[Offset: 0x58, Size: 8]
	int PlayerBornPointID;//[Offset: 0x60, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 1]
	byte gender;//[Offset: 0x66, Size: 1]
	FString PIC_URL;//[Offset: 0x68, Size: 16]
	int Level;//[Offset: 0x78, Size: 4]
	int Segment_Level;//[Offset: 0x7c, Size: 4]
	int AceImprintShowId;//[Offset: 0x80, Size: 4]
	int AceImprintBaseId;//[Offset: 0x84, Size: 4]
	int AvatarBoxId;//[Offset: 0x88, Size: 4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	uint64 MLAIDisplayUID;//[Offset: 0x90, Size: 8]
	GameModePlayerItem[] ItemList;//[Offset: 0x98, Size: 16]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0xa8, Size: 16]
	int[] equip_plating_list;//[Offset: 0xb8, Size: 16]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0xc8, Size: 16]
	int RolewearIndex;//[Offset: 0xd8, Size: 4]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0xe0, Size: 16]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0xf0, Size: 16]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0x100, Size: 16]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0x110, Size: 16]
	VehicleAvatarData[] VehicleAdvanceAvatarList;//[Offset: 0x120, Size: 16]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x130, Size: 12]
	GameModeWeaponDIYPlanData[] WeaponDIYPlanData;//[Offset: 0x140, Size: 16]
	int VehicleSkinInReady;//[Offset: 0x150, Size: 4]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x158, Size: 72]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x1a0, Size: 48]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x1d0, Size: 32]
	GameModePlayerKnapsackExtInfo[] KnapsackExtInfoList;//[Offset: 0x1f0, Size: 16]
	GameModePlayeWeaponSchemeInfo[] WeaponSchemeInfoList;//[Offset: 0x200, Size: 16]
	int CurWeaponSchemeIndex;//[Offset: 0x210, Size: 4]
	int PveLevel;//[Offset: 0x214, Size: 4]
	int[] CharSkillList;//[Offset: 0x218, Size: 16]
	GameModePlayerBanChat banChat;//[Offset: 0x228, Size: 24]
	GameModePlayerBanChat banTarget;//[Offset: 0x240, Size: 24]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x258, Size: 16]
	AchievementPrize EquippedAchievementPrize;//[Offset: 0x268, Size: 12]
	int[] audioChat;//[Offset: 0x278, Size: 16]
	FName CurrentPlayerState;//[Offset: 0x288, Size: 8]
	FName CurrentCharacterState;//[Offset: 0x290, Size: 8]
	float SyncedTimestamp;//[Offset: 0x298, Size: 4]
	float DestinyValue;//[Offset: 0x29c, Size: 4]
	float WarmScore;//[Offset: 0x2a0, Size: 4]
	float AIAllocMarkValue;//[Offset: 0x2a4, Size: 4]
	int LeaderCount;//[Offset: 0x2a8, Size: 4]
	uint64 LastGameLeaderUID;//[Offset: 0x2b0, Size: 8]
	uint64[] LastGameTeammatesUID;//[Offset: 0x2b8, Size: 16]
	uint64 LastGameBattleID;//[Offset: 0x2c8, Size: 8]
	float RatingScore;//[Offset: 0x2d0, Size: 4]
	bool bDoPlayerUseAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	float MaxRankingScore;//[Offset: 0x2d8, Size: 4]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	uint64 WatchPlayerKey;//[Offset: 0x2e0, Size: 8]
	bool bIsHawkEyeSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	int HawkEyeSpectateMaxMatchCount;//[Offset: 0x2ec, Size: 4]
	int HawkEyeSpectateUsedMatchCount;//[Offset: 0x2f0, Size: 4]
	byte PlatformGender;//[Offset: 0x2f4, Size: 1]
	int planeAvatarId;//[Offset: 0x2f8, Size: 4]
	int DyeDebugFlag;//[Offset: 0x2fc, Size: 4]
	FString Nation;//[Offset: 0x300, Size: 16]
	int MatchLabel;//[Offset: 0x310, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x314, Size: 4]
	int AnchorPlatResID;//[Offset: 0x318, Size: 4]
	bool OnlyTeammateSeeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	int64 LastGameResultTime;//[Offset: 0x320, Size: 8]
	int64 CorpsID;//[Offset: 0x328, Size: 8]
	int64 CampID;//[Offset: 0x330, Size: 8]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	bool bCanDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a, Size: 1]
	FString IpCountryStr;//[Offset: 0x340, Size: 16]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	int VeteranRecruitIndex;//[Offset: 0x354, Size: 4]
	int MatchStrategyLabel;//[Offset: 0x358, Size: 4]
	DailyTaskStoreInfo[] DailyTaskStoreList;//[Offset: 0x360, Size: 16]
	int LandId;//[Offset: 0x370, Size: 4]
	int FollowType;//[Offset: 0x374, Size: 4]
	uint64 FollowUID;//[Offset: 0x378, Size: 8]
	uint32 TaskSyncToDsTs;//[Offset: 0x380, Size: 4]
	BornItem[] BornItems;//[Offset: 0x388, Size: 16]
	uint64 LuckmateUID;//[Offset: 0x398, Size: 8]
	int CollectedEventType;//[Offset: 0x3a0, Size: 4]

--------------------------------
Class: GameModePlayerAliasInfo
	int AliasID;//[Offset: 0x0, Size: 4]
	FString AliasTitle;//[Offset: 0x8, Size: 16]
	FString AliasNation;//[Offset: 0x18, Size: 16]
	int AliasRank;//[Offset: 0x28, Size: 4]
	FString AliasPartnerName;//[Offset: 0x30, Size: 16]
	int AliasPartnerRelation;//[Offset: 0x40, Size: 4]
	int AliasRankID;//[Offset: 0x44, Size: 4]

--------------------------------
Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AchievementPrize
	int MedalAvatarID;//[Offset: 0x0, Size: 4]
	int NotifyTitleAvatarID;//[Offset: 0x4, Size: 4]
	int ScoreBoardAvatarID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ServerHitEnemyReplicatedData
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0, Size: 8]
	uint32 EventId;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x8, Size: 8]
	FName[] GrenadeLogicSlotList;//[Offset: 0x10, Size: 16]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x20, Size: 16]

--------------------------------
Class: TeamMateStateInfo
	byte DirtyFlags;//[Offset: 0x0, Size: 1]
	STExtraPlayerState* PlayerState;//[Offset: 0x8, Size: 8]
	Vector_NetQuantize10 Location;//[Offset: 0x10, Size: 12]
	Rotator Rotation;//[Offset: 0x1c, Size: 12]
	float PlayerHealth;//[Offset: 0x28, Size: 4]
	float PlayerHealthMax;//[Offset: 0x2c, Size: 4]
	int MemberIdInVoiceRoom;//[Offset: 0x30, Size: 4]

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0x103c, Size: 4]
	FString IniTeamLeaderName;//[Offset: 0x1040, Size: 16]
	enum LiveState;//[Offset: 0x1050, Size: 1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0x1058, Size: 16]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x1068, Size: 8]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0x1070, Size: 8]
	bool bIsRespawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1078, Size: 1]
	float PlayerHealth;//[Offset: 0x107c, Size: 4]
	float PlayerHealthMax;//[Offset: 0x1080, Size: 4]
	float PlayerTemperature;//[Offset: 0x1084, Size: 4]
	float PlayerTemperatureMax;//[Offset: 0x1088, Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0x108c, Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0x10a4, Size: 24]
	enum EUAVUseType;//[Offset: 0x10bc, Size: 1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bd, Size: 1]
	enum eCurVehicleType;//[Offset: 0x10be, Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0x10bf, Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0x10c0, Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0x10cc, Size: 12]
	Vector MapMark;//[Offset: 0x10d8, Size: 12]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e4, Size: 1]
	Vector RestartLocation;//[Offset: 0x10e8, Size: 12]
	Rotator RestartRotate;//[Offset: 0x10f4, Size: 12]
	<int,int> UseQuickMsgMap;//[Offset: 0x1100, Size: 80]
	<int,int> UseWheelMsgMap;//[Offset: 0x1150, Size: 80]
	byte PlayerUseQuickSight;//[Offset: 0x11a0, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0x11a1, Size: 1]
	byte ShowMsgCnt;//[Offset: 0x11a2, Size: 1]
	byte UserConfirmCnt;//[Offset: 0x11a3, Size: 1]
	byte UserCancelCnt;//[Offset: 0x11a4, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0x11a5, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0x11a8, Size: 4]
	float FPSAfterAdapt;//[Offset: 0x11ac, Size: 4]
	int AirDropBoxFirstPickUpNum;//[Offset: 0x11d0, Size: 4]
	STExtraPlayerState*[] TeamMatePlayerStateList;//[Offset: 0x11d8, Size: 16]
	HistoricalTeammateInfo[] HistoricalTeammateInfoArray;//[Offset: 0x11e8, Size: 16]
	int PlayerLayerID;//[Offset: 0x1248, Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0x1250, Size: 24]
	int Breath;//[Offset: 0x1268, Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0x1270, Size: 24]
	float EnegyBuffStage1;//[Offset: 0x1288, Size: 4]
	float EnegyBuffStage2;//[Offset: 0x128c, Size: 4]
	float EnegyBuffStage3;//[Offset: 0x1290, Size: 4]
	float EnegyBuffStage4;//[Offset: 0x1294, Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0x1298, Size: 4]
	float CurEnegyBuff;//[Offset: 0x129c, Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0x12a0, Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0x12a4, Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0x12a8, Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0x12ac, Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0x12b0, Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0x12b4, Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0x12b8, Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0x12bc, Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x12c0, Size: 16]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0x12d0, Size: 16]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e1, Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ec, Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ed, Size: 1]
	int[] TeamMatesExitState;//[Offset: 0x12f0, Size: 16]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1300, Size: 1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1301, Size: 1]
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1302, Size: 1]
	uint32 LastInstigatorEnemyKey;//[Offset: 0x1308, Size: 4]
	int PlayersCountOnPlane;//[Offset: 0x130c, Size: 4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0x1310, Size: 16]
	float SingleRoundTotalDamage;//[Offset: 0x1320, Size: 4]
	int ContinuousKillsNum;//[Offset: 0x1324, Size: 4]
	delegate OnInfectionRoundDamageChange;//[Offset: 0x1328, Size: 16]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0x1338, Size: 16]
	int MonsterTreasureBoxGetNum;//[Offset: 0x1348, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0x134c, Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0x1350, Size: 4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1354, Size: 1]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0x1358, Size: 16]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0x1368, Size: 16]
	int MaxDecalCount;//[Offset: 0x1398, Size: 4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0x13a0, Size: 16]
	PlayerStaticInfoInOB[] KickListTotalPlayers;//[Offset: 0x1420, Size: 16]
	float SignalHP;//[Offset: 0x1430, Size: 4]
	delegate OnSignalHPChange;//[Offset: 0x1438, Size: 16]
	float SignalHPRemainingTime;//[Offset: 0x1448, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0x144c, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0x1450, Size: 4]
	CharacterBuffRecord[] CharacterBuffRecords;//[Offset: 0x1458, Size: 16]
	int RemainingRevivalTime;//[Offset: 0x1468, Size: 4]
	int RemainingRevivalCount;//[Offset: 0x146c, Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1470, Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1471, Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1472, Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1473, Size: 1]
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1474, Size: 1]
	int SelfRevivalCountdown;//[Offset: 0x1478, Size: 4]
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147c, Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0x1480, Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0x1488, Size: 16]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0x1498, Size: 16]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x14a8, Size: 16]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x14b8, Size: 16]
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0x14c8, Size: 16]
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0x14d8, Size: 16]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0x14e8, Size: 16]
	<int> LastMarkInstanceID;//[Offset: 0x14f8, Size: 80]
	<int> CurrentMarkInstanceID;//[Offset: 0x1548, Size: 80]
	<int,MarkSyncData> CurrentMarkInstanceIDMap;//[Offset: 0x1598, Size: 80]
	<int,MarkSyncData> LastMarkInstanceIDMap;//[Offset: 0x15e8, Size: 80]
	float KdValue;//[Offset: 0x1638, Size: 4]
	Vector LastVehicleLocation;//[Offset: 0x1650, Size: 12]
	delegate OnMapMultiMarkChange;//[Offset: 0x1668, Size: 16]
	delegate OnPlayerUnderAttack;//[Offset: 0x1678, Size: 16]
	delegate OnSetPlane;//[Offset: 0x1688, Size: 16]
	Vector[] MapMultiMark;//[Offset: 0x1698, Size: 16]
	bool bForceHideTeamatePositionItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f8, Size: 1]
	Vector AirplaneStartLoc;//[Offset: 0x16fc, Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x1708, Size: 12]
	Vector AirplaneCanJumpLoc;//[Offset: 0x1714, Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x1720, Size: 12]
	Vector LastValidAirplaneCanJumpLoc;//[Offset: 0x172c, Size: 12]
	Vector LastValidAirplaneForceJumpLoc;//[Offset: 0x1738, Size: 12]
	Actor* Plane;//[Offset: 0x1748, Size: 8]
	int FlightNo;//[Offset: 0x1750, Size: 4]
	bool IsAIShouldIgnoreSenseEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1754, Size: 1]
	FName[] CurMapTags;//[Offset: 0x1758, Size: 16]
	FName[] ShowingMapTags;//[Offset: 0x1768, Size: 16]
	delegate OnMapTagsChangedDelegate;//[Offset: 0x1778, Size: 16]
	void UpdateSelfHealthDataOnServer();// 0x361e37c
	void UpdateDeliveryData(uint32 InDeliverPlayerKey, byte DeliveryAIType);// 0x361e2bc
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x361e17c
	void SetPlayerMapMultiMark(Vector Loc, bool bAdd, int MaxNum, bool bClearAll);// 0x361e034
	void SetPlayerGiveUp(bool InGiveUp);// 0x361dfb0
	void SetLastValidAirplaneInfo();// 0x361df9c
	void SetForceSyncTeammateData(bool IsForCE);// 0x361df18
	void SetCurMapTags(const FName[] mapTags);// 0x361de3c
	void SetAirplaneStopLoc(Vector StopLoc);// 0x361ddbc
	void SetAirplaneStartLoc(Vector StarLoc);// 0x361dd3c
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x361dcbc
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x361dc3c
	void SaveBuffData();// 0x361dc20
	void RPC_OnPlayerUnderAttack();// 0x361dc04
	void RestoreBuffData();// 0x361dbe8
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper);// 0x361da68
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x361d970
	void RespondToPawnCanCarryOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x361d878
	void RespondToPawnCanCaptivateOtherStatusChange(STExtraBaseCharacter* _carryWho, STExtraBaseCharacter* _ownerPawn, bool bIsBegged);// 0x361d780
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* param2);// 0x361d68c
	void RemovePaintDecal(IdeaDecalActor* DecalActor);// 0x361d610
	void RefreshRevivalState();// 0x361d5fc
	void RefreshFollowMark();// 0x361d5e8
	void RefreshAirplaneRoute();// 0x361d5d4
	void PlayerStateSetPlane__DelegateSignature(Actor* Plane);// 0x4033584
	int PlayersCountOnMyPlane();// 0x361d5a0
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x4033584
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0x4033584
	void OnRep_VisualFieldInfo();// 0x361d58c
	void OnRep_UpdateKillMonsterNum();// 0x361d570
	void OnRep_TeamMatePlayerStateList();// 0x361d55c
	void OnRep_SingleRoundTotalDamage();// 0x361d548
	void OnRep_SignalHP();// 0x361d534
	void OnRep_RemainingRevivalTime();// 0x361d520
	void OnRep_RemainingRevivalCount();// 0x4033584
	void OnRep_RankNotify();// 0x361d50c
	void OnRep_PlayerTemperatureChanged();// 0x361d4f8
	void OnRep_PlayersCountOnPlane();// 0x361d4e4
	void OnRep_PlayerReconnectEvent();// 0x361d4d0
	void OnRep_PlayerName();// 0x361d4b4
	void OnRep_PlayerLostConnectionEvent();// 0x361d4a0
	void OnRep_PlayerLiveStateInternal();// 0x361d48c
	void OnRep_PlayerLiveState();// 0x361d470
	void OnRep_PlayerKillsChange();// 0x361d454
	void OnRep_PlayerIsFollowing();// 0x361d440
	void OnRep_PlayerGiveUp();// 0x361d424
	void OnRep_PlayerGameOver();// 0x361d410
	void OnRep_PlayerExitGameEvent();// 0x361d3fc
	void OnRep_PlayerAliasShowInfoList();// 0x361d3e8
	void OnRep_Plane();// 0x361d3d4
	void OnRep_MarkSyncData();// 0x361d3c0
	void OnRep_MarkSelfSyncData();// 0x361d3ac
	void OnRep_MapMarkNotify();// 0x361d398
	void OnRep_LastVehicleLocation();// 0x361d384
	void OnRep_IsIDCardCaptured();// 0x361d370
	void OnRep_HPChanged();// 0x361d35c
	void OnRep_HasRevivalSign();// 0x361d340
	void OnRep_HasEscaped();// 0x361d32c
	void OnRep_CurMapTags();// 0x361d318
	void OnRep_ChangeRevivalState();// 0x361d2fc
	void OnRep_ChangeInRevivingState();// 0x361d2e8
	void OnRep_BreathChanged();// 0x361d2d4
	void OnRep_BPS();// 0x361d2c0
	void OnRep_AirplaneStopLoc();// 0x361d2ac
	void OnRep_AirplaneStartLoc();// 0x361d298
	void OnRep_AirplaneForceJumpLoc();// 0x361d284
	void OnRep_AirplaneCanJumpLoc();// 0x361d270
	void OnPlayerUnderAttack__DelegateSignature(FString PUID);// 0x4033584
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0x4033584
	void OnNewRound();// 0x361d254
	void OnMapTagsChangedDelegate__DelegateSignature(STExtraPlayerState* CurPlayerState);// 0x4033584
	void OnMapMultiMarkChange__DelegateSignature(Vector[] MapMultiMark);// 0x4033584
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);// 0x4033584
	void OnClientVeteranRecruitIndexUpdated();// 0x361d238
	void OnClientRemoveBuff(int BuffID, int SkillID);// 0x361d17c
	void OnClientAddBuff(int BuffID, int SkillID);// 0x361d0c0
	bool ModifyHawkEyeTeamMatePlayerStateName(STExtraPlayerState* InPlayerState, uint32 WatchPlayerKey);// 0x361cff4
	void LuaReceiveBeginPlay();// 0x361cfd8
	void Kill(int ScoreNum, Character* VictimPawn);// 0x361cf18
	bool IsSinglePlayer();// 0x361cee0
	bool IsLocalPlayerState();// 0x361cea8
	bool IsInGame();// 0x361ce68
	bool IsInBetrayState();// 0x361ce28
	bool IsAlive();// 0x361cdf0
	uint32 GetUserIDByMemberID(int memberID);// 0x361cd5c
	void GetTeamMatePlayerUIDList(out FString[] OutList, bool bIsExcludeMyself);// 0x361cbf4
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x361cae0
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x361ca54
	STExtraPlayerState* GetTeammatePlayerState(int TeammateIndex);// 0x361c9c8
	int GetTeamMateIndexByName(FString TeammateName);// 0x361c910
	int GetTeamMateIndex(STExtraPlayerState* Teammate);// 0x361c884
	int GetTeammateCount();// 0x361c850
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x361c798
	FString GetStringPlayerKey();// 0x361c6f4
	float GetPlayerTemperature();// 0x361c6c0
	int GetPlayerTeamIndex();// 0x361c68c
	float GetPlayerMaxTemperature();// 0x361c658
	float GetPlayerMaxHealth();// 0x361c624
	int GetPlayerIndexInTeam();// 0x361c5f0
	float GetPlayerHealthPercent();// 0x361c5bc
	float GetPlayerHealth();// 0x361c588
	Vector GetPlayerCurLoc();// 0x361c550
	STExtraBaseCharacter* GetPlayerCharacter();// 0x361c51c
	void GetPlayerAliasInfoList(out GameModePlayerAliasShowInfo[] OutList);// 0x361c478
	float GetMaxEnegyBuff();// 0x361c444
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x361c2d8
	Vector GetMapMark3DLocation();// 0x361c2a0
	Vector GetLastValidAirplaneForceJumpLoc();// 0x361c278
	Vector GetLastValidAirplaneCanJumpLoc();// 0x361c250
	Vector GetForceJumpLoc();// 0x361c228
	Vector GetCanJumpLoc();// 0x361c200
	void GetCampMatePlayerList(out STExtraBaseCharacter*[] playerList, bool includeTeammate);// 0x361c0f4
	float GetBreathPercentage();// 0x361c0c0
	int GetBountyGold();// 0x4033584
	Vector2D GetAutoParachuteJumpPlaneLoc();// 0x361c08c
	MarkSyncData[] GetAllSelfMarkData();// 0x361c028
	void GetAllPlayerStates(out STExtraPlayerState*[] OutList);// 0x361bf70
	void GetAllPlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x361be5c
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x361bda8
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x361bbe4
	Vector GetAirplaneStopLoc();// 0x361bbbc
	Vector GetAirplaneStartLoc();// 0x361bb94
	Vector2D GetAirplaneForward2D();// 0x361bb60
	void ForceNotifyAlertUpdate();// 0x361bb4c
	void FollowInitialTeamParachuteLeaderAndShowTips(FString LeaderName);// 0x361ba18
	void FadeTeammatesMapMark();// 0x361ba04
	void DispatchPlayerExitEvent();// 0x361b9e8
	Vector2D ConverMapMarkTo2D(out const Vector MapMark3D);// 0x361b950
	void ClientSyncRoute(Vector StartLoc, Vector StopLoc);// 0x361b890
	void ClientDisplayGameTipWithMsgID(int ID, FString param1, FString param2);// 0x361b708
	void ChangeFadeMapMarkDist(float NewDist);// 0x361b688
	bool CanSelfRevive();// 0x361b648
	bool CanRevivalTeammate();// 0x361b610
	bool CanBeRevival();// 0x361b5d0
	byte CalculateEnegyStage();// 0x361b59c
	void BPKill(Character* VictimPawn);// 0x361b518
	void AddOneAssist();// 0x361b4fc
	void AddInDamageAmount(Actor* Causor, float FinalDamage);// 0x361b43c
	void AddEnegySafety(float AddVal);// 0x361b3c0
	void AddDamager(STExtraBaseCharacter* Damager, int DamageType);// 0x361b300
	void AddDamageAmount(Character* VictimPawn, float FinalDamage, bool bHitHead);// 0x361b1fc

--------------------------------
Class: UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	bool IsForcedNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	float surviveTime;//[Offset: 0x514, Size: 4]
	float Pronetime;//[Offset: 0x518, Size: 4]
	float marchDistance;//[Offset: 0x524, Size: 4]
	float travelDistance;//[Offset: 0x528, Size: 4]
	float DriveDistance;//[Offset: 0x52c, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x530, Size: 4]
	int destroyVehicleNum;//[Offset: 0x534, Size: 4]
	int rescueTimes;//[Offset: 0x538, Size: 4]
	int NormalItemsNum;//[Offset: 0x53c, Size: 4]
	int SeniorItemsNum;//[Offset: 0x540, Size: 4]
	int GVMemberID;//[Offset: 0x544, Size: 4]
	FName PlayerType;//[Offset: 0x548, Size: 8]
	uint64 FinalTeamleaderUID;//[Offset: 0x550, Size: 8]
	uint32 PlayerKey;//[Offset: 0x558, Size: 4]
	FString PlayerUID;//[Offset: 0x560, Size: 16]
	FString MLAIStringUID;//[Offset: 0x570, Size: 16]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	FString iconUrl;//[Offset: 0x588, Size: 16]
	int gender;//[Offset: 0x598, Size: 4]
	int PlayerLevel;//[Offset: 0x59c, Size: 4]
	int SegmentLevel;//[Offset: 0x5a0, Size: 4]
	int AceImprintShowId;//[Offset: 0x5a4, Size: 4]
	int AceImprintBaseId;//[Offset: 0x5a8, Size: 4]
	int AvatarBoxId;//[Offset: 0x5ac, Size: 4]
	int CampID;//[Offset: 0x5b0, Size: 4]
	int resID;//[Offset: 0x5b4, Size: 4]
	uint64 UId;//[Offset: 0x5b8, Size: 8]
	uint64 MLAIDisplayUID;//[Offset: 0x5c0, Size: 8]
	FString OpenID;//[Offset: 0x5c8, Size: 16]
	FString Nation;//[Offset: 0x5d8, Size: 16]
	int TeamID;//[Offset: 0x5e8, Size: 4]
	int64 IdxInTeam;//[Offset: 0x5f0, Size: 8]
	int PlayerBornPointID;//[Offset: 0x5f8, Size: 4]
	int Kills;//[Offset: 0x5fc, Size: 4]
	int KillsBeforeDie;//[Offset: 0x600, Size: 4]
	int Knockouts;//[Offset: 0x604, Size: 4]
	int Assists;//[Offset: 0x610, Size: 4]
	byte PlatformGender;//[Offset: 0x614, Size: 1]
	int MatchStrategyLabel;//[Offset: 0x618, Size: 4]
	int MatchLabel;//[Offset: 0x61c, Size: 4]
	uint32 Killer;//[Offset: 0x620, Size: 4]
	uint32 KillerIGPlayerKey;//[Offset: 0x624, Size: 4]
	FString BeKilledOpenID;//[Offset: 0x628, Size: 16]
	FString KillerName;//[Offset: 0x638, Size: 16]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x648, Size: 8]
	int ShootWeaponShotNum;//[Offset: 0x650, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x654, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x658, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x65c, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x660, Size: 4]
	int HeadShotNum;//[Offset: 0x664, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x668, Size: 4]
	int KillNumByGrende;//[Offset: 0x66c, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x670, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x674, Size: 4]
	int MaxKillDistance;//[Offset: 0x678, Size: 4]
	int HealTimes;//[Offset: 0x67c, Size: 4]
	float DamageAmount;//[Offset: 0x680, Size: 4]
	float VehicleDamageAmount;//[Offset: 0x684, Size: 4]
	float HealAmount;//[Offset: 0x688, Size: 4]
	FString[] KillFlow;//[Offset: 0x690, Size: 16]
	<FString> TeammateKillUIDSet;//[Offset: 0x6a0, Size: 80]
	FString[] KnockOutFlow;//[Offset: 0x6f0, Size: 16]
	KnockOutData[] KnockOutList;//[Offset: 0x700, Size: 16]
	float InDamageAmount;//[Offset: 0x710, Size: 4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x728, Size: 16]
	bool bIsForbidItemFlowMerge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x740, Size: 80]
	AIDeliveryTlogData TLog_AIDeliveryTlogData;//[Offset: 0x790, Size: 88]
	bool bHasSendAIDeliverData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x7f0, Size: 80]
	GameModeLikeResultData[] Like;//[Offset: 0x840, Size: 16]
	uint32 Switch;//[Offset: 0x850, Size: 4]
	uint32[] Self;//[Offset: 0x858, Size: 16]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x868, Size: 16]
	UseItemFlow[] UseItemFlow;//[Offset: 0x878, Size: 16]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x888, Size: 16]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x898, Size: 16]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x8a8, Size: 16]
	<int,int> TLog_BulletCount;//[Offset: 0x8b8, Size: 80]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x908, Size: 8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x910, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x914, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x918, Size: 16]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x928, Size: 4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x92c, Size: 4]
	int FirstOpenedTreasureBoxNum;//[Offset: 0x930, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x934, Size: 4]
	int[] BuildFlow;//[Offset: 0x938, Size: 16]
	int[] DestroyShelterFlow;//[Offset: 0x948, Size: 16]
	float ShelterTakeDamage;//[Offset: 0x958, Size: 4]
	float HitShelterDamage;//[Offset: 0x95c, Size: 4]
	Vector LandLocation;//[Offset: 0x960, Size: 12]
	Vector ParachuteLocation;//[Offset: 0x96c, Size: 12]
	int LandTime;//[Offset: 0x978, Size: 4]
	Vector DeadLocation;//[Offset: 0x97c, Size: 12]
	FString DeadDamangeType;//[Offset: 0x988, Size: 16]
	int PveDeadAttacker;//[Offset: 0x998, Size: 4]
	int PveStageId;//[Offset: 0x99c, Size: 4]
	FString DeadTimeStr;//[Offset: 0x9a0, Size: 16]
	int NearDeathDamageType;//[Offset: 0x9b0, Size: 4]
	uint32 NearDeathCauserId;//[Offset: 0x9b4, Size: 4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8, Size: 1]
	int BeDownTimes;//[Offset: 0x9bc, Size: 4]
	int BeSavedTimes;//[Offset: 0x9c0, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x9c8, Size: 112]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa40, Size: 1]
	int GamePlayingTime;//[Offset: 0xa44, Size: 4]
	int ObserverTime;//[Offset: 0xa48, Size: 4]
	int TouchDownAreaID;//[Offset: 0xa4c, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0xa50, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0xa58, Size: 16]
	bool bHasTouchDownAreaList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 1]
	float ReportTouchDownHeight;//[Offset: 0xa6c, Size: 4]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0xa70, Size: 16]
	ReportCollection[] SpecialCollectionList;//[Offset: 0xa80, Size: 16]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0xa90, Size: 16]
	int[] SecretAreaIDList;//[Offset: 0xaa0, Size: 16]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0xab0, Size: 16]
	float DrivingHelicopterTime;//[Offset: 0xac0, Size: 4]
	float InHelicopterTime;//[Offset: 0xac4, Size: 4]
	int RevivalNum;//[Offset: 0xac8, Size: 4]
	int BeRevivedNum;//[Offset: 0xacc, Size: 4]
	int KillNumInVehicle;//[Offset: 0xad0, Size: 4]
	float MaxVehicleToLandHeight;//[Offset: 0xad4, Size: 4]
	float MaxVehicleInAirInterval;//[Offset: 0xad8, Size: 4]
	int KillPlayerNum;//[Offset: 0xadc, Size: 4]
	int KillAINum;//[Offset: 0xae0, Size: 4]
	float TotalSprintDistance;//[Offset: 0xae4, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0xae8, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0xaec, Size: 4]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0xaf0, Size: 16]
	int ProneTimes;//[Offset: 0xb00, Size: 4]
	int CrouchTimes;//[Offset: 0xb04, Size: 4]
	int JumpTimes;//[Offset: 0xb08, Size: 4]
	int KillMonsterNum;//[Offset: 0xb0c, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0xb10, Size: 80]
	float TotalDamageAmountToMonsters;//[Offset: 0xb60, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0xb64, Size: 4]
	<int,float> DamageAmountToMonsters;//[Offset: 0xb68, Size: 80]
	<int,float> DamageAmountFromMonsters;//[Offset: 0xbb8, Size: 80]
	int MonsterHeadShotKilledTimes;//[Offset: 0xc08, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0xc0c, Size: 4]
	int LightCandleNum;//[Offset: 0xc10, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0xc18, Size: 80]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0xc68, Size: 16]
	float BattleStateTime;//[Offset: 0xc78, Size: 4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7c, Size: 1]
	float DriveWithTeammateDistance;//[Offset: 0xc80, Size: 4]
	int FistKillingCount;//[Offset: 0xc84, Size: 4]
	int OpenedAirDropBoxNum;//[Offset: 0xc88, Size: 4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0xc90, Size: 80]
	FString[] DestroyVehicleFlow;//[Offset: 0xce0, Size: 16]
	int UseHelicoperNum;//[Offset: 0xcf0, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0xcf8, Size: 16]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0xd08, Size: 16]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0xd18, Size: 40]
	float UseHelicoperDistance;//[Offset: 0xd40, Size: 4]
	byte CharmRankIndex;//[Offset: 0xd44, Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0xd48, Size: 80]
	int SnowBoardJumpActionCount;//[Offset: 0xd9c, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0xda0, Size: 4]
	int KillMagicWalkAI;//[Offset: 0xda4, Size: 4]
	int SendMagicWalkAI;//[Offset: 0xda8, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0xdb0, Size: 16]
	int KillSnowManCount;//[Offset: 0xdc0, Size: 4]
	uint64 LuckmateUID;//[Offset: 0xdc8, Size: 8]
	<enum,int> EventCounterMap;//[Offset: 0xdd0, Size: 80]
	<int,int> GeneralCounterMap;//[Offset: 0xe20, Size: 80]
	delegate OnGenerelCountChanged;//[Offset: 0xe70, Size: 16]
	int VeteranRecruitIndex;//[Offset: 0xe80, Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xe88, Size: 16]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0xe98, Size: 72]
	int MemberIdInVoiceRoom;//[Offset: 0xee0, Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee4, Size: 1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0xee8, Size: 48]
	int UpassShow;//[Offset: 0xf18, Size: 4]
	int upassKeepBuy;//[Offset: 0xf1c, Size: 4]
	int upassCurValue;//[Offset: 0xf20, Size: 4]
	bool UpassIsBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf24, Size: 1]
	TLog_Micphone MicphoneTlog;//[Offset: 0xf28, Size: 24]
	float TeammateMicrophoneTime;//[Offset: 0xf40, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0xf44, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0xf48, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xf4c, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0xf50, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0xf54, Size: 4]
	float MicrophoneUseTimeStamp;//[Offset: 0xf58, Size: 4]
	float SpeakerUseTimeStamp;//[Offset: 0xf5c, Size: 4]
	bool IsOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf98, Size: 1]
	GameBaseInfo GameBaseInfo;//[Offset: 0xfb8, Size: 128]
	int CollectedEventType;//[Offset: 0x1038, Size: 4]
	void SetGVMemberIDServerCall(int memberID);// 0x3c61db8
	void SetGVMemberID(int memberID);// 0x3c61d3c
	void SetDeliveryResult(uint32 InDeliverPlayerKey, bool bInSuccess, int EventTypeId);// 0x3c61c38
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x3c61b40
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x3c61a20
	void ReportTaskExtInfo(int TaskId, FString ExtInfo);// 0x3c618ac
	void ReportTaskData(int TaskId, int process);// 0x3c617f8
	void ReportSpecialCollection(int ItemId, int Count);// 0x3c61744
	void ReportSecretAreaID(int SecretAreaID);// 0x3c616c8
	void ReportLikeTeammate(int64 BeLikeUID, int LikeType);// 0x3c61610
	void ReportLikeSwitch(int SwitchSetting);// 0x3c61594
	void ReportLikeSelf(int LikeType);// 0x3c61518
	void ReportLandLocType(int TouchDownLocType);// 0x3c6149c
	void ReportLandAreaList(out int[] TouchDownAreaIDs);// 0x3c613e4
	void ReportLandArea(int TouchDownArea);// 0x3c61368
	void ReportLabelCheck(int TeammateUID, int Result);// 0x3c612b4
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x3c61238
	void OnRepCampIDBP();// 0x4033584
	void OnRep_VeteranRecruitIndex();// 0x3c61224
	void OnRep_UpdateKillMonsterNum();// 0x3c61208
	void OnRep_UID();// 0x3c611f4
	void OnRep_PlayerKillsChange();// 0x3c611d8
	void OnRep_MLAIDisplayUID();// 0x3c611c4
	void OnRep_MatchLabel();// 0x3c611b0
	void OnRep_CollectItemRecord();// 0x3c6119c
	void OnRep_CampID();// 0x3c61188
	void OnRep_AliasInfo();// 0x3c61174
	void OnClientVeteranRecruitIndexUpdated();// 0x3c61158
	bool IsSpecialPickItemCollectionCompleted(int ItemId);// 0x3c610c8
	bool IsSpecialPickItem(int ItemId);// 0x3c61038
	bool IsItemForbidMerge(int ItemResId);// 0x3c60fa0
	bool IsDeathDamageInfoValid();// 0x3c60f68
	void GetWeaponRecordData(out OnePlayerWeapon OutWeaponInfo);// 0x3c60e90
	int GetVeteranPlayerLevel();// 0x3c60e54
	uint32 GetUserIDByMemberID(int memberID);// 0x3c60dc0
	FString GetUIDString();// 0x3c60d1c
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x3c60cb0
	int GetRank();// 0x3c60c7c
	uint32 GetPlayerKey();// 0x3c60c48
	GameModePlayerBattleResultData_SuperCold GetPlayerBattleResultData_SuperCold();// 0x3c60b84
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x3c60b18
	enum GetMentorPlayerType();// 0x3c60adc
	DamageInfo GetDeathDamageInfo();// 0x3c60a90
	void ForceUpdateCampCharacterList();// 0x3c60a74
	void ClearTlogData();// 0x3c60a58
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x3c60998
	void AddGeneralCount(int ID, int InCount, bool bReset);// 0x3c608a0
	void AddEventCount(byte EventId, int InCount, bool bReset);// 0x3c607a4

--------------------------------
Class: LuaPlayerState.PlayerState.Info.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x4b0, Size: 80]
	FString LuaFilePath;//[Offset: 0x500, Size: 16]

--------------------------------
Class: KnockOutData
	uint64 AttackerID;//[Offset: 0x0, Size: 8]
	int Times;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	int SourceType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]
	FString TimeStr;//[Offset: 0x20, Size: 16]
	uint64 InstanceID;//[Offset: 0x30, Size: 8]

--------------------------------
Class: TLog_BornLandGrenadeData
	int PickupCount;//[Offset: 0x0, Size: 4]
	int ThrowCount;//[Offset: 0x4, Size: 4]
	int HitOthersCount;//[Offset: 0x8, Size: 4]
	int HitedByOthersCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AIDeliveryTlogData
	uint64 UId;//[Offset: 0x0, Size: 8]
	<uint32,AIDeliveryInfo> DeliveryMap;//[Offset: 0x8, Size: 80]

--------------------------------
Class: AIDeliveryInfo
	int DeliveryStartTime;//[Offset: 0x0, Size: 4]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int DeliveryArrivalTime;//[Offset: 0x8, Size: 4]
	int EventTypeId;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameModeLikeResultData
	uint32[] Like;//[Offset: 0x0, Size: 16]
	uint64 UId;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeTeammateLableCheckData
	uint32 Mask;//[Offset: 0x0, Size: 4]
	uint64 UId;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 80]

--------------------------------
Class: UseBuffFlow
	int BuffID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 80]

--------------------------------
Class: BuildingEnterFlow
	int BuildingID;//[Offset: 0x0, Size: 4]
	int EnterCount;//[Offset: 0x4, Size: 4]
	<int,int> AreaCountMap;//[Offset: 0x8, Size: 80]

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FString TimeStr;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TLog_SpecialStats
	float MonsterDamageInNight1;//[Offset: 0x0, Size: 4]
	float MonsterDamageInNight2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleDriveDisData
	uint64 DriverID;//[Offset: 0x0, Size: 8]
	int VehicleType;//[Offset: 0x8, Size: 4]
	int AvatarID;//[Offset: 0xc, Size: 4]
	float DriveDistance;//[Offset: 0x10, Size: 4]
	float DriveTime;//[Offset: 0x14, Size: 4]
	float VehicleJumpDistanceMax;//[Offset: 0x18, Size: 4]
	uint64[] PeopleInCar;//[Offset: 0x20, Size: 16]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0, Size: 4]
	int ArmorID;//[Offset: 0x4, Size: 4]
	int BackPackID;//[Offset: 0x8, Size: 4]
	int MainWeapon1ID;//[Offset: 0xc, Size: 4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 16]
	int MainWeapon2ID;//[Offset: 0x20, Size: 4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x28, Size: 16]
	int ViceWeaponID;//[Offset: 0x38, Size: 4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x40, Size: 16]
	int CloseWeaponID;//[Offset: 0x50, Size: 4]
	int[] ThrowWeaponsID;//[Offset: 0x58, Size: 16]
	int8 IsLuckyClothing;//[Offset: 0x68, Size: 1]

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponDamageRecord
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int HeadShootCount;//[Offset: 0xc, Size: 4]
	int LimbsShootCount;//[Offset: 0x10, Size: 4]
	int BodyShootCount;//[Offset: 0x14, Size: 4]
	int HandShootCount;//[Offset: 0x18, Size: 4]
	int FootShootCount;//[Offset: 0x1c, Size: 4]
	int UniqueHitCount;//[Offset: 0x20, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x28, Size: 16]
	int TotalUseTime;//[Offset: 0x38, Size: 4]
	int TotalOwnTime;//[Offset: 0x3c, Size: 4]
	int KillCount;//[Offset: 0x40, Size: 4]
	int KnockNumber;//[Offset: 0x44, Size: 4]
	int[] Associations;//[Offset: 0x48, Size: 16]
	int AvatarID;//[Offset: 0x58, Size: 4]
	int DIYPlanID;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0, Size: 4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: DestroyVehicleWheelFlow
	int AreaID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActivityEventReportData
	byte EventId;//[Offset: 0x0, Size: 1]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_KillInfo
	int FakePlayerID;//[Offset: 0x0, Size: 4]
	int DeadTime;//[Offset: 0x4, Size: 4]
	int AILastFightTime;//[Offset: 0x8, Size: 4]
	int[] PlayerAreas;//[Offset: 0x10, Size: 16]
	int ArmorID;//[Offset: 0x20, Size: 4]
	int HelmetID;//[Offset: 0x24, Size: 4]

--------------------------------
Class: PlayEmoteData
	int EmoteIndex;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TLog_Micphone
	float TeammateMicrophoneTime;//[Offset: 0x0, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0x4, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0x8, Size: 4]
	float EnemySpeakerTime;//[Offset: 0xc, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0x10, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0, Size: 16]
	FString GameAppID;//[Offset: 0x10, Size: 16]
	FString OpenID;//[Offset: 0x20, Size: 16]
	uint16 AreaID;//[Offset: 0x30, Size: 2]
	int8 PlatID;//[Offset: 0x32, Size: 1]
	FString ZoneID;//[Offset: 0x38, Size: 16]
	uint64 BattleID;//[Offset: 0x48, Size: 8]
	FString UserName;//[Offset: 0x50, Size: 16]
	uint64 RoleID;//[Offset: 0x60, Size: 8]
	int8 RoleType;//[Offset: 0x68, Size: 1]
	FString PicUrl;//[Offset: 0x70, Size: 16]

--------------------------------
Class: OnePlayerWeapon
	FString PlayerID;//[Offset: 0x0, Size: 16]
	WeaponReport[] Weapons;//[Offset: 0x10, Size: 16]

--------------------------------
Class: WeaponReport
	int WeaponId;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]
	int HitCount;//[Offset: 0x8, Size: 4]
	int UniqueHitCount;//[Offset: 0xc, Size: 4]
	int KillCount;//[Offset: 0x10, Size: 4]
	float TotalDamage;//[Offset: 0x14, Size: 4]
	float TotalMonsterDamage;//[Offset: 0x18, Size: 4]
	int TotalOwnTime;//[Offset: 0x1c, Size: 4]
	int TotalUseTime;//[Offset: 0x20, Size: 4]
	int KnockDownCount;//[Offset: 0x24, Size: 4]
	int HeadShootCount;//[Offset: 0x28, Size: 4]
	int KillAICount;//[Offset: 0x2c, Size: 4]
	int KnockDownAICount;//[Offset: 0x30, Size: 4]
	int HeadShootAICount;//[Offset: 0x34, Size: 4]
	int HitAICount;//[Offset: 0x38, Size: 4]
	int UniqueHitAICount;//[Offset: 0x3c, Size: 4]
	int UseCount;//[Offset: 0x40, Size: 4]
	HitFlow[] HitFlow;//[Offset: 0x48, Size: 16]

--------------------------------
Class: HitFlow
	int AimType;//[Offset: 0x0, Size: 4]
	int Distance;//[Offset: 0x4, Size: 4]
	int IsKill;//[Offset: 0x8, Size: 4]
	float Damage;//[Offset: 0xc, Size: 4]
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte[] PlayerStates;//[Offset: 0x18, Size: 16]
	byte HitPos;//[Offset: 0x28, Size: 1]
	bool IsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0, Size: 16]
	uint64 UId;//[Offset: 0x10, Size: 8]
	int Kill;//[Offset: 0x18, Size: 4]
	int AIKills;//[Offset: 0x1c, Size: 4]
	FString State;//[Offset: 0x20, Size: 16]
	float travelDistance;//[Offset: 0x30, Size: 4]
	float marchDistance;//[Offset: 0x34, Size: 4]
	float DriveDistance;//[Offset: 0x38, Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x3c, Size: 4]
	float DamageAmount;//[Offset: 0x40, Size: 4]
	float HealAmount;//[Offset: 0x44, Size: 4]
	int AssistNum;//[Offset: 0x48, Size: 4]
	int HeadShotNum;//[Offset: 0x4c, Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x50, Size: 4]
	float surviveTime;//[Offset: 0x54, Size: 4]
	int rescueTimes;//[Offset: 0x58, Size: 4]
	int DestroyVehicles;//[Offset: 0x5c, Size: 4]
	FString[] KillFlow;//[Offset: 0x60, Size: 16]
	FString[] KnockOutFlow;//[Offset: 0x70, Size: 16]
	float OutsideBlueCircleTime;//[Offset: 0x80, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x88, Size: 16]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x98, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x9c, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0xa0, Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0xa8, Size: 16]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0xb8, Size: 4]
	float InDamageAmount;//[Offset: 0xbc, Size: 4]
	int ProneTimes;//[Offset: 0xc0, Size: 4]
	int CrouchTimes;//[Offset: 0xc4, Size: 4]
	int JumpTimes;//[Offset: 0xc8, Size: 4]
	int KillMonsterNum;//[Offset: 0xcc, Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0xd0, Size: 80]
	int LightCandleNum;//[Offset: 0x120, Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0x128, Size: 80]
	float TotalDamageAmountToMonsters;//[Offset: 0x178, Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x17c, Size: 4]
	int MonsterHeadShotKilledTimes;//[Offset: 0x180, Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x184, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	int mainWeaponID;//[Offset: 0x18c, Size: 4]
	float MaxWeaponAccurate;//[Offset: 0x190, Size: 4]
	float MaxWeaponHeadShotRate;//[Offset: 0x194, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData_SuperCold
	int MakeFiresNum;//[Offset: 0x0, Size: 4]
	int DeerBBQNum;//[Offset: 0x4, Size: 4]
	int ChichenBBQNum;//[Offset: 0x8, Size: 4]
	int UseKFNum;//[Offset: 0xc, Size: 4]
	int UseUAVNum;//[Offset: 0x10, Size: 4]
	int KFUsingTime;//[Offset: 0x14, Size: 4]
	int UAVUsingTime;//[Offset: 0x18, Size: 4]
	int SkateboardUsingCount;//[Offset: 0x1c, Size: 4]
	int SkateboardUsingTime;//[Offset: 0x20, Size: 4]
	int SkateboardUsingDistance;//[Offset: 0x24, Size: 4]
	KillAnimalData[] AnimalKillFlow;//[Offset: 0x28, Size: 16]

--------------------------------
Class: KillAnimalData
	byte AnimalType;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0, Size: 16]
	int RemainingPlayerCount;//[Offset: 0x10, Size: 4]
	int TotalPlayerCount;//[Offset: 0x14, Size: 4]
	int RemainingTeamCount;//[Offset: 0x18, Size: 4]
	int TotalTeamCount;//[Offset: 0x1c, Size: 4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	uint64 Killer;//[Offset: 0x28, Size: 8]
	uint64 killer_ig_uid;//[Offset: 0x30, Size: 8]
	uint64 KillerAIDisplayUID;//[Offset: 0x38, Size: 8]
	FString KillerName;//[Offset: 0x40, Size: 16]
	FString BeKilledOpenID;//[Offset: 0x50, Size: 16]
	int ShootWeaponShotNum;//[Offset: 0x60, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x64, Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x68, Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x6c, Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x70, Size: 4]
	int HealTimes;//[Offset: 0x74, Size: 4]
	FString[] KillFlow;//[Offset: 0x78, Size: 16]
	FString[] KnockOutFlow;//[Offset: 0x88, Size: 16]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x98, Size: 16]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0xa8, Size: 80]
	<int,int> TLog_BulletCount;//[Offset: 0xf8, Size: 80]
	uint64 parachute_leader_uid;//[Offset: 0x148, Size: 8]
	UseItemFlow[] UseItemFlow;//[Offset: 0x150, Size: 16]
	UseBuffFlow[] UseBuffFlow;//[Offset: 0x160, Size: 16]
	BuildingEnterFlow[] BuildingEnterFlow;//[Offset: 0x170, Size: 16]
	DestroyVehicleWheelFlow[] DestroyVehicleWheelFlow;//[Offset: 0x180, Size: 16]
	int destroyVehicleNum;//[Offset: 0x190, Size: 4]
	int is_escape;//[Offset: 0x194, Size: 4]
	TLog_KillInfo[] PlayerKillAIInfo;//[Offset: 0x198, Size: 16]
	TLog_KillInfo[] PlayerNearDeathDuoToAI;//[Offset: 0x1a8, Size: 16]
	TLog_KillInfo AIKillPlayerInfo;//[Offset: 0x1b8, Size: 40]
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0x1e0, Size: 16]
	GameModeLikeResultData[] Like;//[Offset: 0x1f0, Size: 16]
	uint32 Switch;//[Offset: 0x200, Size: 4]
	uint32[] Self;//[Offset: 0x208, Size: 16]
	GameModeTeammateLableCheckData[] LabelCheck;//[Offset: 0x218, Size: 16]
	Vector LandLocation;//[Offset: 0x228, Size: 12]
	int LandTime;//[Offset: 0x234, Size: 4]
	Vector ParachuteLocation;//[Offset: 0x238, Size: 12]
	Vector DeadLocation;//[Offset: 0x244, Size: 12]
	FString DeadDamangeType;//[Offset: 0x250, Size: 16]
	int PveDeadAttacker;//[Offset: 0x260, Size: 4]
	int PveStageId;//[Offset: 0x264, Size: 4]
	FString DeadTimeStr;//[Offset: 0x268, Size: 16]
	FString logoutime;//[Offset: 0x278, Size: 16]
	float Pronetime;//[Offset: 0x288, Size: 4]
	float BeInWaterTime;//[Offset: 0x28c, Size: 4]
	float SwimmingDistance;//[Offset: 0x290, Size: 4]
	int BeDownTimes;//[Offset: 0x294, Size: 4]
	int BeSavedTimes;//[Offset: 0x298, Size: 4]
	int PickUpAirDrops;//[Offset: 0x29c, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x2a0, Size: 112]
	int Rank;//[Offset: 0x310, Size: 4]
	int TotalScore;//[Offset: 0x314, Size: 4]
	int ProneTimes;//[Offset: 0x318, Size: 4]
	int CrouchTimes;//[Offset: 0x31c, Size: 4]
	int JumpTimes;//[Offset: 0x320, Size: 4]
	int TouchDownAreaID;//[Offset: 0x324, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x328, Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x330, Size: 16]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x340, Size: 16]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x350, Size: 16]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x360, Size: 16]
	GrenadeDamageRecord GrenadeDamageRecord;//[Offset: 0x370, Size: 40]
	KniveDamageRecord KniveDamageRecord;//[Offset: 0x398, Size: 40]
	int[] SecretAreaIDList;//[Offset: 0x3c0, Size: 16]
	int KillNumInVehicle;//[Offset: 0x3d0, Size: 4]
	float TotalSprintDistance;//[Offset: 0x3d4, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x3d8, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x3dc, Size: 4]
	int[] BuildFlow;//[Offset: 0x3e0, Size: 16]
	int[] DestroyShelterFlow;//[Offset: 0x3f0, Size: 16]
	float ShelterTakeDamage;//[Offset: 0x400, Size: 4]
	float HitShelterDamage;//[Offset: 0x404, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x408, Size: 16]
	KnockOutData[] KnockOutList;//[Offset: 0x418, Size: 16]
	bool IsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	int KillMonsterNum;//[Offset: 0x42c, Size: 4]
	int LightCandleNum;//[Offset: 0x430, Size: 4]
	int KillMagicWalkAI;//[Offset: 0x434, Size: 4]
	int SendMagicWalkAI;//[Offset: 0x438, Size: 4]
	float BattleStateTime;//[Offset: 0x43c, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	<int,int> ActivityButtonCount;//[Offset: 0x448, Size: 80]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x498, Size: 8]
	float TotalDamage;//[Offset: 0x4a0, Size: 4]
	float VehicleDamageAmount;//[Offset: 0x4a4, Size: 4]
	int OpenAirDropBoxesNum;//[Offset: 0x4a8, Size: 4]
	int FollowState;//[Offset: 0x4ac, Size: 4]
	FString[] DestroyVehicleFlow;//[Offset: 0x4b0, Size: 16]
	int UseHelicoperNum;//[Offset: 0x4c0, Size: 4]
	float UseHelicoperDistance;//[Offset: 0x4c4, Size: 4]
	int RevivalNum;//[Offset: 0x4c8, Size: 4]
	int BeRevivedNum;//[Offset: 0x4cc, Size: 4]
	int DrivingHelicopterTime;//[Offset: 0x4d0, Size: 4]
	int InHelicopterTime;//[Offset: 0x4d4, Size: 4]
	int SnowBoardJumpActionCount;//[Offset: 0x4d8, Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0x4dc, Size: 4]
	int[] FindBlackMonsterIDs;//[Offset: 0x4e0, Size: 16]
	int KillSnowManCount;//[Offset: 0x4f0, Size: 4]
	<enum,int> EventCounterMap;//[Offset: 0x4f8, Size: 80]
	<int,int> GeneralCounterMap;//[Offset: 0x548, Size: 80]
	TLog_Micphone MicphoneTlog;//[Offset: 0x598, Size: 24]
	int NormalItemNum;//[Offset: 0x5b0, Size: 4]
	int SeniorItemNum;//[Offset: 0x5b4, Size: 4]
	SpecialWeaponRecord[] SpecicalWeaponRecordList;//[Offset: 0x5b8, Size: 16]

--------------------------------
Class: GrenadeDamageRecord
	int HitCount;//[Offset: 0x0, Size: 4]
	int[] HitDistanceArray;//[Offset: 0x8, Size: 16]
	GrenadeDamageRecordItem[] Grenades;//[Offset: 0x18, Size: 16]

--------------------------------
Class: GrenadeDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int FireCount;//[Offset: 0x8, Size: 4]
	int KillCount;//[Offset: 0xc, Size: 4]
	int KnockNumber;//[Offset: 0x10, Size: 4]
	int AvatarID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: KniveDamageRecord
	int HeadShootCount;//[Offset: 0x0, Size: 4]
	int LimbsShootCount;//[Offset: 0x4, Size: 4]
	int BodyShootCount;//[Offset: 0x8, Size: 4]
	int HandShootCount;//[Offset: 0xc, Size: 4]
	int FootShootCount;//[Offset: 0x10, Size: 4]
	KniveDamageRecordItem[] Knives;//[Offset: 0x18, Size: 16]

--------------------------------
Class: KniveDamageRecordItem
	int WeaponId;//[Offset: 0x0, Size: 4]
	float TotalDamage;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int KnockNumber;//[Offset: 0xc, Size: 4]
	int AvatarID;//[Offset: 0x10, Size: 4]
	int TotalUseTime;//[Offset: 0x14, Size: 4]
	int TotalOwnTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SpecialWeaponRecord
	int WeaponId;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DamageInfo
	uint32 DamageType;//[Offset: 0x0, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float Distance;//[Offset: 0x8, Size: 4]
	uint32 Time;//[Offset: 0xc, Size: 4]
	uint32 DamageValue;//[Offset: 0x10, Size: 4]
	uint32 AttackerID;//[Offset: 0x14, Size: 4]
	Vector AttackerLoc;//[Offset: 0x18, Size: 12]
	uint32 AttackerBulletNumInClip;//[Offset: 0x24, Size: 4]
	uint32 AttackerSightType;//[Offset: 0x28, Size: 4]
	uint32 AttackerWeaponType;//[Offset: 0x2c, Size: 4]
	uint32 AttackerShotTimes;//[Offset: 0x30, Size: 4]
	uint64 AttackerState;//[Offset: 0x38, Size: 8]
	bool bAttackerMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	uint64 VictimID;//[Offset: 0x48, Size: 8]
	Vector VictimLoc;//[Offset: 0x50, Size: 12]
	uint32 VictimState;//[Offset: 0x5c, Size: 4]
	bool bVictimInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	int VictimVehicleType;//[Offset: 0x64, Size: 4]
	float VictimVelocity;//[Offset: 0x68, Size: 4]
	uint32 AttackerAreaID;//[Offset: 0x6c, Size: 4]
	uint32 AlivePlayerNum;//[Offset: 0x70, Size: 4]
	uint32 VictimTeamID;//[Offset: 0x74, Size: 4]
	int FloorType;//[Offset: 0x78, Size: 4]
	uint32 AttackerWeaponAvatarID;//[Offset: 0x7c, Size: 4]
	uint32 AttackerVehicleShapeType;//[Offset: 0x80, Size: 4]

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x8, Size: 8]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: HistoricalTeammateInfo
	FString Name;//[Offset: 0x0, Size: 16]
	FString UId;//[Offset: 0x10, Size: 16]
	FString OpenID;//[Offset: 0x20, Size: 16]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int InTeamIndex;//[Offset: 0x34, Size: 4]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0, Size: 4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	int LayerID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x8, Size: 8]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x10, Size: 8]

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0x1330, Size: 8]
	ParticleSystemComponent* DustPSC;//[Offset: 0x1338, Size: 8]
	ParticleSystemComponent*[] PSCs;//[Offset: 0x1358, Size: 16]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0x1368, Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0x1390, Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0x1398, Size: 8]
	float TorqueMultiplierforBoosting;//[Offset: 0x13a4, Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0x13a8, Size: 4]
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ac, Size: 1]
	int ValidTransformMinWheelNum;//[Offset: 0x13b0, Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0x13b8, Size: 16]
	float MinLandingWheelSuspensionOffset;//[Offset: 0x13c8, Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0x13d0, Size: 16]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0x13e8, Size: 8]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0x13f0, Size: 8]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0x13f8, Size: 8]
	AkAudioEvent* Sfx_Slip;//[Offset: 0x1400, Size: 8]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0x1408, Size: 8]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0x1410, Size: 8]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0x1418, Size: 8]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0x1420, Size: 8]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x1428, Size: 8]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0x1430, Size: 120]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0x14a8, Size: 112]
	AkComponent* AkComp_WheelFriction;//[Offset: 0x1518, Size: 8]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x1534, Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x1538, Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0x1560, Size: 4]
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x1568, Size: 8]
	FString LoopSmokeCmpName;//[Offset: 0x1570, Size: 16]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x1580, Size: 12]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158c, Size: 1]
	float ExtraBoostFactor;//[Offset: 0x1590, Size: 4]
	FName IsStoppedBlackboardKeyName;//[Offset: 0x15e8, Size: 8]
	FName TargetLocationBlackboardKeyName;//[Offset: 0x15f0, Size: 8]
	FName PathingLocationBlackboardKeyName;//[Offset: 0x15f8, Size: 8]
	FName PathInputLocationBlackboardKeyName;//[Offset: 0x1600, Size: 8]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);// 0x365e970
	void SetHandBrake(float Rate);// 0x365e8ec
	void SetBoosting(bool bEnalbed);// 0x365e860
	void PostLoadFPPMesh();// 0x365e844
	void OnWheelsLanded();// 0x365e830
	void OnRep_ReplicatedState();// 0x365e81c
	void OnGearChanged(bool bIsUp);// 0x365e798
	void MulticastDrawNavigationDebug(float DeltaSeconds, Vector TargetLocation, Vector PathingLocation, Vector PathInputLocation);// 0x365e65c
	void MulticastDrawAvoidanceDebugLineTraceSingle(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x365e4f4
	void MulticastDrawAvoidanceDebugLineTraceMulti(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x365e38c
	void MulticastDrawAvoidanceDebugBoxTraceSingle(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x365e1a0
	void MulticastDrawAvoidanceDebugBoxTraceMulti(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x365dfb4
	void MoveRight(float Rate);// 0x365df30
	void MoveForward(float Rate);// 0x365deac
	float GetVehicleSpeed();// 0x365de78
	float GetVehicleSlip();// 0x365de3c
	Vector GetRotationInputDir();// 0x365ddfc
	int GetCurrentGear(float MinRot);// 0x365dd70
	float GetBoostFactor();// 0x365dd34
	void BroadcastClientVehicleWheelDestroyEffect();// 0x365dd18

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x30, Size: 16]

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 1]
	ParticleSystem* MoveFx;//[Offset: 0x8, Size: 8]
	ParticleSystem* SlipFx;//[Offset: 0x10, Size: 8]
	ParticleSystem* HubFx;//[Offset: 0x18, Size: 8]
	float minSpeed;//[Offset: 0x20, Size: 4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x3c8, Size: 4]
	float MaxQuadLength;//[Offset: 0x3cc, Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x3d0, Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x3d8, Size: 8]
	float DefaultTrailWidth;//[Offset: 0x3e0, Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	float DefaultTrailLength;//[Offset: 0x3e8, Size: 4]
	float TextureLength;//[Offset: 0x3ec, Size: 4]
	int USegmentNum;//[Offset: 0x3f0, Size: 4]
	int CoordU;//[Offset: 0x3f4, Size: 4]
	int SlippingCoordU;//[Offset: 0x3f8, Size: 4]
	int BrokenCoordU;//[Offset: 0x3fc, Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x404, Size: 4]
	float AdditionalTextureLength;//[Offset: 0x408, Size: 4]
	int AdditionalCoordU;//[Offset: 0x40c, Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x410, Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x414, Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x420, Size: 8]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x36804c0
	void StopUpdate();// 0x36804ac
	bool IsUpdating();// 0x3680474

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x730, Size: 16]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x741, Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x742, Size: 1]
	enum CollisionMode;//[Offset: 0x743, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x748, Size: 8]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x780, Size: 16]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x790, Size: 16]
	BoxSphereBounds LocalBounds;//[Offset: 0x7a0, Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x7c0, Size: 88]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x818, Size: 16]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x6acf6a8
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x6acf560
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x6acf4a0
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x6acf3e0
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x6acf320
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x6acf1a8
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x4033584
	bool IsMeshSectionVisible(int SectionIndex);// 0x6acf118
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x6acf088
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x6aceff8
	int GetNumSections();// 0x6acefc4
	int GetLastSectionIndex();// 0x6acef90
	int FirstAvailableMeshSectionIndex();// 0x6acef5c
	void EndBatchUpdates();// 0x6acef48
	bool DoesSectionExist(int SectionIndex);// 0x6aceeb8
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x6ace9a8
	void CookCollisionNow();// 0x6ace994
	void ClearMeshSection(int SectionIndex);// 0x6ace918
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x6ace89c
	void ClearCollisionConvexMeshes();// 0x6ace888
	void ClearAllMeshSections();// 0x6ace874
	void ClearAllMeshCollisionSections();// 0x6ace860
	void BeginBatchUpdates();// 0x6ace844
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x6ace70c

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 16]
	int[] IndexBuffer;//[Offset: 0x10, Size: 16]

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 16]
	Box BoundingBox;//[Offset: 0x10, Size: 28]

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 12]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector Normal;//[Offset: 0x40, Size: 12]
	enum Type;//[Offset: 0x4c, Size: 1]
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x460, Size: 16]
	FName[] ExtraOptBoneNames;//[Offset: 0x470, Size: 16]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	float DebugVehicleSettingInterval;//[Offset: 0x494, Size: 4]
	VehicleWheel*[] WheelHubs;//[Offset: 0x498, Size: 16]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x4b0, Size: 8]
	<uint32,CachedWheelData> mapCachedWheelData;//[Offset: 0x500, Size: 80]
	float MaxRPMLimit;//[Offset: 0x680, Size: 4]
	float TorqueRate;//[Offset: 0x684, Size: 4]
	byte[] SpecialModifyCollisionList;//[Offset: 0x688, Size: 16]
	int[] SpecialModifyShapeIndexList;//[Offset: 0x698, Size: 16]
	FName RootBodyName;//[Offset: 0x6a8, Size: 8]
	bool bAllowCollisionWeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	bool IsInAir_bServerCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b1, Size: 1]
	bool IsInAir_bClientCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b2, Size: 1]
	int IsInAir_ShapeIndexToQuery;//[Offset: 0x6b4, Size: 4]
	float IsInAir_QueryInterval;//[Offset: 0x6b8, Size: 4]
	float IsInAir_QueryLength;//[Offset: 0x6bc, Size: 4]
	delegate OnIsInAirChange;//[Offset: 0x6c0, Size: 16]
	bool IsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	bool DynamicChangeDragCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	float DragCoefficientInAir;//[Offset: 0x6dc, Size: 4]
	void SetVehicleToRestState();// 0x36566ac
	void SetTransmissionSetup(out const VehicleTransmissionData NewTransmissionSetup);// 0x36565f0
	void SetSuspensionIgnoreMask(int InIgnoreMask);// 0x3656574
	void SetEngineSetup(out const VehicleEngineData NewEngineSetup);// 0x3656434
	void SetDragCoefficient(float InDragCoefficient);// 0x36563b0
	void SetDifferentialSetup(out const VehicleDifferential4WData NewDifferentialSetup);// 0x3656328
	void SetBoosting(float Rate);// 0x36562a4
	void RefreshBodyCollision();// 0x3656290
	void OnExpoldeStopWheel();// 0x365627c
	void MoveWheelShapeHeight(float Height);// 0x3656200
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x365610c
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x3655fa0
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x3655eac
	int GetSuspensionIgnoreMask();// 0x3655e78
	int GetNumWheelsNotInAir();// 0x3655e44
	Vector GetLinearVelocity();// 0x3655e0c
	Transform GetCMassLocalPose();// 0x3655db8
	void ForceWheelsRotate(float DriveTorque);// 0x3655d3c
	void ClearDestroyedWheel();// 0x3655d28
	void ChangeDragCoefficientInInAir();// 0x3655d14

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x300, Size: 144]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x390, Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x3b0, Size: 48]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x3e0, Size: 120]
	float AckermannAccuracy;//[Offset: 0x458, Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x1a0, Size: 16]
	float Mass;//[Offset: 0x1b0, Size: 4]
	float DragCoefficient;//[Offset: 0x1b4, Size: 4]
	float ChassisWidth;//[Offset: 0x1b8, Size: 4]
	float ChassisHeight;//[Offset: 0x1bc, Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	float DragArea;//[Offset: 0x1c4, Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x1c8, Size: 4]
	float MaxEngineRPM;//[Offset: 0x1cc, Size: 4]
	float DebugDragMagnitude;//[Offset: 0x1d0, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x1d4, Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x1e0, Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x1e4, Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x1e8, Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x1ec, Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x1f0, Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x1f4, Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x1f8, Size: 4]
	VehicleWheel*[] Wheels;//[Offset: 0x200, Size: 16]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x22c, Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x230, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x234, Size: 4]
	float RVOSteeringStep;//[Offset: 0x238, Size: 4]
	float RVOThrottleStep;//[Offset: 0x23c, Size: 4]
	int AvoidanceUID;//[Offset: 0x240, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x244, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x248, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x24c, Size: 4]
	float AvoidanceWeight;//[Offset: 0x250, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x254, Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x270, Size: 20]
	float RawSteeringInput;//[Offset: 0x288, Size: 4]
	float RawThrottleInput;//[Offset: 0x28c, Size: 4]
	float RawBrakeInput;//[Offset: 0x290, Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 1]
	float SteeringInput;//[Offset: 0x298, Size: 4]
	float ThrottleInput;//[Offset: 0x29c, Size: 4]
	float BrakeInput;//[Offset: 0x2a0, Size: 4]
	float HandbrakeInput;//[Offset: 0x2a4, Size: 4]
	float IdleBrakeInput;//[Offset: 0x2a8, Size: 4]
	float StopThreshold;//[Offset: 0x2ac, Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x2b0, Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x2b4, Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x2bc, Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x2c4, Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x2cc, Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4, Size: 1]
	void SetUseAutoGears(bool bUseAuto);// 0x6e0aed4
	void SetThrottleInput(float Throttle);// 0x6e0ae50
	void SetTargetGear(int GearNum, bool bImmediate);// 0x6e0ad90
	void SetSteeringInput(float Steering);// 0x6e0ad0c
	void SetPhysActive(bool bActive);// 0x6e0ac88
	void SetHandbrakeInput(bool bNewHandbrake);// 0x6e0abfc
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x6e0ab74
	void SetGroupsToIgnore(int GroupFlags);// 0x6e0aaf8
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x6e0aa70
	void SetGroupsToAvoid(int GroupFlags);// 0x6e0a9f4
	void SetGearUp(bool bNewGearUp);// 0x6e0a970
	void SetGearDown(bool bNewGearDown);// 0x6e0a8ec
	void SetBrakeInput(float Brake);// 0x6e0a868
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x6e0a7e0
	void SetAvoidanceGroup(int GroupFlags);// 0x6e0a764
	void SetAvoidanceEnabled(bool bEnable);// 0x6e0a6e0
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x6e0a538
	void GetWheelShapeIndices(out int[] OutWheelShapeIndices);// 0x6e0a438
	bool GetUseAutoGears();// 0x6e0a400
	int GetTargetGear();// 0x6e0a3cc
	float GetForwardSpeed();// 0x6e0a398
	float GetEngineRotationSpeed();// 0x6e0a364
	float GetEngineMaxRotationSpeed();// 0x6e0a330
	int GetCurrentGear();// 0x6e0a2fc
	void EnableVehicleWheel(int WheelIndex, bool InEnable);// 0x6e0a23c
	void EnableVehicleSimulation(bool InEnable);// 0x6e0a1b8

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 120]
	float MaxRPM;//[Offset: 0x78, Size: 4]
	float MOI;//[Offset: 0x7c, Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x80, Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x84, Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x88, Size: 4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 1]
	float FrontRearSplit;//[Offset: 0x4, Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 4]
	float CentreBias;//[Offset: 0x10, Size: 4]
	float FrontBias;//[Offset: 0x14, Size: 4]
	float RearBias;//[Offset: 0x18, Size: 4]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float GearSwitchTime;//[Offset: 0x4, Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 4]
	float FinalRatio;//[Offset: 0xc, Size: 4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 16]
	float ReverseGearRatio;//[Offset: 0x20, Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x24, Size: 4]
	float ClutchStrength;//[Offset: 0x28, Size: 4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 4]
	float DownRatio;//[Offset: 0x4, Size: 4]
	float UpRatio;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 8]
	FName TireBoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 16]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x28, Size: 8]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	Vector Offset;//[Offset: 0x34, Size: 12]
	float ShapeRadius;//[Offset: 0x40, Size: 4]
	float ShapeWidth;//[Offset: 0x44, Size: 4]
	float Mass;//[Offset: 0x48, Size: 4]
	float DampingRate;//[Offset: 0x4c, Size: 4]
	float SteerAngle;//[Offset: 0x50, Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	TireType* TireType;//[Offset: 0x58, Size: 8]
	TireConfig* TireConfig;//[Offset: 0x60, Size: 8]
	float LatStiffMaxLoad;//[Offset: 0x68, Size: 4]
	float LatStiffValue;//[Offset: 0x6c, Size: 4]
	float LongStiffValue;//[Offset: 0x70, Size: 4]
	float SuspensionForceOffset;//[Offset: 0x74, Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x78, Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x7c, Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x80, Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x84, Size: 4]
	byte SweepType;//[Offset: 0x88, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x8c, Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x90, Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x98, Size: 8]
	int WheelIndex;//[Offset: 0xa0, Size: 4]
	float DebugLongSlip;//[Offset: 0xa4, Size: 4]
	float DebugLatSlip;//[Offset: 0xa8, Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0xac, Size: 4]
	float DebugWheelTorque;//[Offset: 0xb4, Size: 4]
	float DebugLongForce;//[Offset: 0xb8, Size: 4]
	float DebugLatForce;//[Offset: 0xbc, Size: 4]
	Vector Location;//[Offset: 0xc0, Size: 12]
	Vector OldLocation;//[Offset: 0xcc, Size: 12]
	Vector Velocity;//[Offset: 0xd8, Size: 12]
	bool IsInAir();// 0x6e09960
	float GetSuspensionOffset();// 0x6e0992c
	float GetSteerAngle();// 0x6e098f8
	float GetRotationAngle();// 0x6e098c4

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x38, Size: 16]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 8]
	float FrictionScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 8]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 12]

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float BrakeInput;//[Offset: 0x8, Size: 4]
	float HandbrakeInput;//[Offset: 0xc, Size: 4]
	int CurrentGear;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 4]
	float FallRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CachedWheelData
	bool WheelsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float WheelSuspensionOffset;//[Offset: 0x4, Size: 4]
	PhysicalMaterial* WheelContactMaterial;//[Offset: 0x8, Size: 8]

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x32f0, Size: 16]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x3300, Size: 16]
	delegate OnSkillFinishedDelegate;//[Offset: 0x3310, Size: 16]
	delegate OnPlayerInteractiveStateChange;//[Offset: 0x3320, Size: 16]
	delegate OnScopeOutDelegate;//[Offset: 0x3330, Size: 16]
	delegate OnScopeInDelegate;//[Offset: 0x3340, Size: 16]
	delegate OnGetOnVehicleDelegate;//[Offset: 0x3350, Size: 16]
	delegate OnRepParachuteStateDelegate;//[Offset: 0x3360, Size: 16]
	delegate OnParachuteStateChanged;//[Offset: 0x3370, Size: 16]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x3380, Size: 8]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x3388, Size: 8]
	BoxComponent* BoxEar;//[Offset: 0x3390, Size: 8]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x3398, Size: 8]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x33a0, Size: 8]
	float IndoorCheckDistance;//[Offset: 0x33a8, Size: 4]
	float IndoorCheckTime;//[Offset: 0x33ac, Size: 4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x33b0, Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x33b4, Size: 4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33b8, Size: 1]
	float IndoorBodyAreaDistance;//[Offset: 0x33bc, Size: 4]
	float fTickDuration;//[Offset: 0x33c0, Size: 4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x33c8, Size: 24]
	bool ShouldVaultOnBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e0, Size: 1]
	enum ParachuteState;//[Offset: 0x33f0, Size: 1]
	bool bClientParachuteLandedFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33f3, Size: 1]
	float LandDistanceCanAjustWhenParachuteLanded;//[Offset: 0x33f8, Size: 4]
	float CheckCanLandInternal;//[Offset: 0x3420, Size: 4]
	float CheckCanLandMaxSeconds;//[Offset: 0x3424, Size: 4]
	bool bIsPendingCaptived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342c, Size: 1]
	enum LastParachuteState;//[Offset: 0x342d, Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x3430, Size: 4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3434, Size: 1]
	float SwimZDir;//[Offset: 0x3438, Size: 4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343c, Size: 1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x343d, Size: 1]
	float SwimRotateX_Ex;//[Offset: 0x3440, Size: 4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x3448, Size: 8]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x3450, Size: 8]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x3458, Size: 8]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x3460, Size: 8]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x3468, Size: 8]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x3470, Size: 8]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x3478, Size: 8]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x3480, Size: 8]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x3488, Size: 8]
	AkAudioEvent* AK_ParachuteLocalOverride;//[Offset: 0x3490, Size: 8]
	AkAudioEvent* AK_ParachuteRemoteOverride;//[Offset: 0x3498, Size: 8]
	AkAudioEvent* AK_LandingLocalOverride;//[Offset: 0x34a0, Size: 8]
	AkAudioEvent* AK_LandingRemotelOverride;//[Offset: 0x34a8, Size: 8]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x34b0, Size: 80]
	SpringArmParams FreeFallSpringArmParamForVehicleParachute;//[Offset: 0x3500, Size: 80]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x3550, Size: 80]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x35a0, Size: 80]
	class CameraShake* FreeFallCamShake;//[Offset: 0x3608, Size: 8]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3610, Size: 1]
	bool bEnableParachuteFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3611, Size: 1]
	float VehicleForwardInputRate;//[Offset: 0x3614, Size: 4]
	float VehicleRightInputRate;//[Offset: 0x3618, Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361c, Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x3630, Size: 8]
	MinimalViewInfo CameraInfoAdditive;//[Offset: 0x3640, Size: 1456]
	float CameraInfoAdditiveWeight;//[Offset: 0x3bf0, Size: 4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x3c48, Size: 8]
	bool EnableGoldenSuitCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5b, Size: 1]
	bool IsGoldenSuitStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5c, Size: 1]
	float GoldenSuitCheckAccDelta;//[Offset: 0x3c60, Size: 4]
	bool EnableGoldenSuitATK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c64, Size: 1]
	enum GoldenSuitSlot;//[Offset: 0x3c65, Size: 1]
	int GoldenSuitReplaceSkillId;//[Offset: 0x3c68, Size: 4]
	float GoldenSuitCheckDelta;//[Offset: 0x3c6c, Size: 4]
	float GoldenSuitTestFistDamage;//[Offset: 0x3c70, Size: 4]
	FanPickerConfigData FistFanPickerData;//[Offset: 0x3c78, Size: 80]
	FName FeatureActorName;//[Offset: 0x3d38, Size: 8]
	bool bSprintUseConsumableNotStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d40, Size: 1]
	bool bLockUpdateAroundAfterRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d41, Size: 1]
	bool bIsLockingUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d42, Size: 1]
	float LockUpdateAroundPickupTime;//[Offset: 0x3d44, Size: 4]
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x3d50, Size: 8]
	ActivityActorBase*[] ActivityActorList;//[Offset: 0x3d60, Size: 16]
	InteractiveComponentBase*[] InteractiveComponentList;//[Offset: 0x3d70, Size: 16]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d80, Size: 1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d81, Size: 1]
	AngledSightRepData AngledSightRepData;//[Offset: 0x3d82, Size: 2]
	float SpecifiedItemLastConsumeTime;//[Offset: 0x3d84, Size: 4]
	int TrySightCorrectionTime;//[Offset: 0x3d90, Size: 4]
	float SightCorrectionDelay;//[Offset: 0x3d94, Size: 4]
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d98, Size: 1]
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d99, Size: 1]
	int CurrentSightCorrectionTimes;//[Offset: 0x3d9c, Size: 4]
	bool bRecommendSignalRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da9, Size: 1]
	bool ForceSyncControllerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3daa, Size: 1]
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3db0, Size: 1]
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x3db8, Size: 16]
	int CurrentActivityID;//[Offset: 0x3dc8, Size: 4]
	int CurrentActivityIndex;//[Offset: 0x3dcc, Size: 4]
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x3dd0, Size: 8]
	bool bEnableSecurity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd8, Size: 1]
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x3de0, Size: 16]
	int[] InjuryFreeData;//[Offset: 0x3df0, Size: 16]
	void UseCameraParamForVehicleParachute(bool InEnable);// 0x35d8660
	void UpdateParachuteState(out const Rotator Rotation, float FallingSpeed);// 0x35d8590
	void UpdateParachuteFallingCameraDistance(float Alpha);// 0x35d8514
	void UpdateIndoorState(bool IsInDoor);// 0x35d8450
	void UpdateEnableGoldenSuitCheck();// 0x35d8434
	void UpdateBodyIndoorState(bool BodyIndoor);// 0x35d8370
	void TriggerZombieBornSkills();// 0x35d835c
	void TriggerParachuteLandVoice();// 0x35d8340
	bool TriggerEntrySkillWithID(int SkillID, bool bEnable);// 0x35d8264
	void TriggerAutoAimCheck(float DeltaTime);// 0x35d81e8
	void TouchCancelSkillLock();// 0x35d81d4
	void SyncLatestPlayerStatus(enum LatestParachuteState);// 0x35d8124
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x35d80a0
	void SwitchSightAngledServer(byte InAngledSightType, bool IsOnlyTurn);// 0x35d7f9c
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x35d7ed4
	void SwitchSightAngled(byte Type, bool IsOnlyTurn);// 0x35d7e14
	void SwitchCameraToParachuteOpening();// 0x35d7df8
	void SwitchCameraToParachuteFalling();// 0x35d7ddc
	void SwitchCameraToNormal();// 0x35d7dc0
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float Alpha);// 0x35d7d44
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x4033584
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x35d7d30
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x4033584
	void StopCamShake();// 0x35d7d14
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x35d7c98
	void StartSwitchColdDown(float SwitchColdDownTime);// 0x35d7c1c
	void StartCamShake();// 0x35d7c00
	void ShowNightVisionFrame();// 0x35d7be4
	void ShowConfirmDialogOfMisKill();// 0x35d7bc8
	bool ShouldTriggerEntryEvent(enum EntryEvent);// 0x35d7b38
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x35d7a8c
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x35d7a10
	void SetSpecifiedItemConsumed(int ItemId);// 0x4033584
	void SetSelfAndVehicleShadow(bool IsShow);// 0x35d798c
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x35d78d4
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x35d77d0
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x35d7714
	void SetParachuteState(enum State);// 0x35d7690
	void SetInjuryFreeRateData(out const int[] InInjuryFreeData);// 0x35d75d8
	void SetFPPDeafultFov(float InFov);// 0x35d755c
	void SetFovInTPPSpringArm(float FieldOfView);// 0x35d74e0
	void SetBodyIndoor(bool IsInDoor);// 0x35d745c
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x35d725c
	void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd);// 0x35d70bc
	void ServerUpdateParachuteState(const Rotator Rotation, float FallingSpeed);// 0x35d6fd0
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x35d6ea4
	void ServerRPCOnClickInteractiveButton(InteractiveComponentBase* pComponent);// 0x35d6df4
	void ServerOnApplicationactivated(bool bActive);// 0x35d6d30
	void RPC_Server_OnMiniGameEnd(int Score, int Duration, ActivityActorBase* ActiveActor);// 0x35d6c08
	void RPC_Server_CheckActivityOverlap(ActivityActorBase* ActiveActor, bool isBeginOverlap);// 0x35d6b04
	void RPC_Client_NotifyActivityOverlap(ActivityActorBase* ActiveActorn, bool isBeginOverlap);// 0x35d6a00
	void RPC_Client_CheckedActivityOverlap(ActivityActorBase* ActiveActorn, bool IsOverlaped, bool IsBegin);// 0x35d68b0
	void ResetCharacter();// 0x35d6894
	void RequestLoadParachuteAnim(bool bHasNewChildComponent);// 0x35d6808
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x35d6744
	void RemoveParachuteAnim();// 0x35d6730
	void ReleaseTrigger(enum Hand);// 0x35d66ac
	void RefreshBearerFramingTick();// 0x35d6698
	void PushTrigger(enum Hand);// 0x35d6614
	void ProneWithTerrain(Rotator CharacterRotation, bool isMoving, float Offset, float deap);// 0x35d64d8
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x4033584
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0x4033584
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0x4033584
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0x4033584
	void OnRepParachuteStateDelegate__DelegateSignature();// 0x4033584
	void OnRep_STPlayerController();// 0x35d64c4
	void OnRep_ParachuteState(enum State);// 0x35d6440
	void OnRep_InjuryFreeData();// 0x35d642c
	void OnRep_CurrentActivityID();// 0x35d6418
	void OnRep_bIsPendingCaptived();// 0x35d6404
	void OnRep_AngleSightStateChanged();// 0x35d63f0
	void OnRep_ActivityAnimationRepData();// 0x35d63dc
	void OnRank(int Kills, int Rank);// 0x35d6328
	void OnPlayerInteractiveStateChange__DelegateSignature(STExtraBaseCharacter* BaseCharacter, ActivityActorBase* ActivityActor, enum Status);// 0x4033584
	void OnPlayerCurrentWeaponChange(byte CurSlot);// 0x35d62ac
	void OnParachuteStateChangedDelegate__DelegateSignature(enum LastParachuteState, enum NewParachuteState);// 0x4033584
	void OnMiniTreeTriggerServerLogicCPP();// 0x35d6290
	void OnLockUpdateAroundPickupEnd();// 0x35d627c
	void OnLoadParachuteAnimCompleted();// 0x35d6268
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x4033584
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x4033584
	void OnBPStateCheckIn();// 0x4033584
	void OnAvatarEquippedSucc(enum SlotType, bool IsEquipped, int InItemID);// 0x35d6164
	void OnAllAvatarEquippedSucc();// 0x35d6150
	void NotifyClientParachuteLanded(bool bOK);// 0x35d608c
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x35d6000
	void MiniTreeTriggerServerLogic();// 0x35d5fa0
	bool IsSwitchCoolingDownFinish();// 0x35d5f7c
	bool IsSpecifiedItemInCD(int ItemId);// 0x35d5ee4
	bool IsLandedWithClientPos();// 0x35d5eac
	bool IsInLaunchSeat();// 0x35d5e6c
	bool IsGrenadeEmpty();// 0x35d5e34
	bool IsBodyIndoorFuc();// 0x35d5e14
	bool IsBodyIndoorCheck();// 0x35d5ddc
	bool IsAllowSyncControllerRotationInActived();// 0x35d5da4
	bool IsAllowPickupActor();// 0x35d5d6c
	void InitAirAttackLocatorComponent();// 0x35d5d58
	void HideNightVisionFrame();// 0x35d5d3c
	bool HasParachuteAnimLoaded();// 0x35d5d04
	void HandleParachuteStateChanged(enum NewState);// 0x35d5c80
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x35d5b1c
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x35d59b8
	SpringArmComponent* GetThirdPersonSpringArm();// 0x4033584
	CameraComponent* GetThirdPersonCamera();// 0x4033584
	float GetSwimRotateX_Ex();// 0x35d5984
	int GetSkillIndexByActivityID();// 0x4033584
	SpringArmComponent* GetScopeSpringArm();// 0x4033584
	CameraComponent* GetScopeCamera();// 0x4033584
	bool GetPlayerVisibile();// 0x35d594c
	AnimationAsset* GetPlayerParachuteAnimByAnimType(byte AnimType);// 0x35d58c0
	STExtraPlayerController* GetPlayerControllerSafety();// 0x35d5884
	void GetOnVehicleDelegate__DelegateSignature();// 0x4033584
	SceneComponent* GetMoveableComp();// 0x35d5850
	bool GetIsInDoor();// 0x35d5810
	bool GetIsGunADS();// 0x35d57d0
	float GetInjuryFreeRate(int BodyPart);// 0x35d573c
	SpringArmComponent* GetFPPSpringArm();// 0x4033584
	float GetFPPDeafultFov();// 0x35d5708
	CameraComponent* GetFPPCamera();// 0x4033584
	SpringArmComponent* GetFirstPersonSpringArm();// 0x4033584
	CameraComponent* GetFirstPersonCamera();// 0x4033584
	enum[] GetDisallowedStates(int ActivityID);// 0x4033584
	int GetBuildingAvatarID(int BuildingID);// 0x4033584
	Vector GetBonePos(FName BoneName, Vector OffsetPos);// 0x35d563c
	void FreeFallShakeCam();// 0x35d5628
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x35d55ac
	void EnableRegionBaseNetConsideration();// 0x35d5598
	void EnablePet(bool Enable);// 0x35d550c
	void DynamicCreateComponents();// 0x35d54f8
	void DumpCharacterAnimBPVars();// 0x35d54e4
	void DisableSimulateAnimUpdateRateOptimization(bool bDisable, float LessThanDistanceSquareCanDisable);// 0x35d541c
	void DelayRemoveParachuteAnim();// 0x35d5408
	void ClientUserMoveCmdAck(int Sequence);// 0x35d5384
	void ClientRPCOnOverlapInteractiveComponent(InteractiveComponentBase* pComponent, bool isBeginOverlap);// 0x35d52bc
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x35d51c8
	void ClientInitParachuteLaunchStatus(Vector Vel);// 0x35d5144
	void ClientAckGoodMove(float TimeStamp);// 0x35d50c0
	void ClearHPUI();// 0x35d50a4
	void CheckServerCanLanded();// 0x35d5090
	bool CanAnimInstanceCacheParachuteAnim(STExtraAnimInstance* MyAnimInstance);// 0x35d5000
	void CallRefreshBPStateCheckIn();// 0x35d4fec
	void AsyncLoadGunCollisionFinish(SoftClassPath GunCollisionPath);// 0x35d4eb0
	void AnimInstanceCacheParachuteAnimVars(bool bForceRefreshAnim);// 0x35d4e2c
	bool AllowTriggerActivities(bool bCheckCanReceive);// 0x35d4d94
	void AdjustServerParachuteLanded(const Vector Position, const Rotator Rotation);// 0x35d4cac

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0x128, Size: 32]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0x148, Size: 32]
	Vector2D AimTargetScreenPos;//[Offset: 0x168, Size: 8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	STExtraPlayerController* ExtraPlayerController;//[Offset: 0x178, Size: 8]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x180, Size: 8]
	float LastSelectAimEnemyTime;//[Offset: 0x188, Size: 4]
	float LastFindAimEnemyTime;//[Offset: 0x18c, Size: 4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x190, Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x194, Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x198, Size: 4]
	float SCOPE_AUTO_AIM_TIME;//[Offset: 0x19c, Size: 4]
	float OPEN_COLLISION_TIME;//[Offset: 0x1a0, Size: 4]
	float AIM_CROSSHAIR_CHECK_DELTA;//[Offset: 0x1a4, Size: 4]
	float LOCK_TARGET_TOLERANCE;//[Offset: 0x1a8, Size: 4]
	float RANGE_SCALE;//[Offset: 0x1ac, Size: 4]
	float RANGE_SCALE_MAX;//[Offset: 0x1b0, Size: 4]
	float AC_AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x1f0, Size: 4]
	float AC_AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x1f4, Size: 4]
	float AC_DEFAULT_CD_TIME;//[Offset: 0x1f8, Size: 4]
	float AC_SCOPE_AUTO_AIM_TIME;//[Offset: 0x1fc, Size: 4]
	float AC_RANGE_SCALE;//[Offset: 0x200, Size: 4]
	float AC_RANGE_SCALE_MAX;//[Offset: 0x204, Size: 4]
	float AC_AutoAimBreakThroughRatio;//[Offset: 0x208, Size: 4]
	FName[] AC_Bones;//[Offset: 0x210, Size: 16]
	FName[] Bones;//[Offset: 0x220, Size: 16]
	<FName,Vector> BonesOffset;//[Offset: 0x230, Size: 80]
	float TargetScreenWidth;//[Offset: 0x280, Size: 4]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 1]
	float AutoAimSensitiveScreenRatio;//[Offset: 0x288, Size: 4]
	bool bEnableAimSensitiveOnlyInGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	float AutoAimSensitiveAngle;//[Offset: 0x290, Size: 4]
	float AutoAimBreakThroughAngle;//[Offset: 0x294, Size: 4]
	float AutoAimBreakThroughRatio;//[Offset: 0x298, Size: 4]
	float AutoAimBreakThroughStart;//[Offset: 0x29c, Size: 4]
	float AutoAimBreakThroughSensitiveScale;//[Offset: 0x2a0, Size: 4]
	bool BInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool bModifyCrossHair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	WeaponCrossHairPerformData[] CrossHairDataRifle;//[Offset: 0x5e8, Size: 16]
	WeaponCrossHairPerformData[] CrossHairDataPistol;//[Offset: 0x5f8, Size: 16]
	WeaponCrossHairPerformData[] CrossHairDataShotGun;//[Offset: 0x608, Size: 16]
	void OnUnEquipWeapon();// 0x373fca0
	void OnShoot(STExtraWeapon* Weapon);// 0x373fc24
	void OnEquipWeapon();// 0x373fc10
	void OnCharacterLeaveState(enum ChangedState);// 0x373fb94
	void OnCharacterEnterState(enum ChangedState);// 0x373fb18
	bool IsTriggerBeforeFire();// 0x373fae0
	bool IsCurrentWeaponSupportAutoAim();// 0x373faa8
	void Init(Controller* Controller);// 0x373fa2c
	bool HasEnemyInAutoAimRange(float DeltaTime);// 0x373f99c
	void GetDataFromWeaponEntity();// 0x373f988
	AutoAimEnemyInfo FindEnemyNearScreenCenter(out const Vector RayStart, float Radius, out const FName BoneName, float CollisionTime, bool HitMatchBone);// 0x373f7c8
	bool CheckSmoke(out const Vector StartPoint, out const Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName);// 0x373f644
	bool CheckInAngle(STExtraBaseCharacter* EnemyPawn, float MaxAngle);// 0x373f570
	bool CheckBuffStun();// 0x373f538
	bool CanEnemeyRaycastReach(out const Vector StartPoint, out const Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName);// 0x373f3b4
	bool CanAsynCalcuAimRange();// 0x373f37c
	void BPDrawDebugInfo(out const float[] AutoAimParams);// 0x373f2bc

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 8]
	FName BoneName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 16]
	enum SpreadType;//[Offset: 0x10, Size: 1]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 24]
	float Offset;//[Offset: 0x18, Size: 4]
	Vector2D IconOffset;//[Offset: 0x1c, Size: 8]
	float Alpha;//[Offset: 0x24, Size: 4]
	float Scale;//[Offset: 0x28, Size: 4]
	float IconRotate;//[Offset: 0x2c, Size: 4]
	float LogicRotate;//[Offset: 0x30, Size: 4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	float BlendInOutRatePerSec;//[Offset: 0x38, Size: 4]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 8]
	float U;//[Offset: 0x8, Size: 4]
	float V;//[Offset: 0xc, Size: 4]
	float UL;//[Offset: 0x10, Size: 4]
	float VL;//[Offset: 0x14, Size: 4]

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0x158, Size: 8]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0x160, Size: 16]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x170, Size: 8]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x178, Size: 16]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x188, Size: 16]
	FName ScreenPlane;//[Offset: 0x198, Size: 8]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0x1a0, Size: 16]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x1b0, Size: 16]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x1c0, Size: 8]
	MultiAppearanceMeshData[] MultiAppearanceMeshData;//[Offset: 0x1d8, Size: 16]
	void UpdateMultiAppearancePresentList(float DeltaTime);// 0x366599c
	void StopScreenParticleEffectByName(FString ScreenParticleName);// 0x36658f4
	void StopScreenParticleEffect(byte EffectType);// 0x3665878
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x3665788
	void StopAllScreenParticleEffect();// 0x3665774
	void StopAllScreenAppearance();// 0x3665760
	void SetTextureParameterValue(FString AppearanceName, FName ParamName, Texture* Tex);// 0x3665640
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x3665588
	bool SetScalarParam(FString AppearanceName, FName ParamName, float ParamValue);// 0x3665450
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x3665330
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x3665260
	void SetAllAppearanceMeshHiddenInGame(bool bNewHid);// 0x36651dc
	void PlayScreenParticleEffectByName(FString ScreenParticleName, float InEffectValue);// 0x36650f4
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x366503c
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x3664f00
	void PlayGraduallyShowOut(FString AppearanceKey, float Frag, float DelayTime);// 0x3664d58
	void PlayGraduallyShowIn(FString AppearanceKey, float Frag, float DelayTime, float BeginAlpha);// 0x3664b74
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI, FName InMatInstParamName, CurveFloat* InParamCurve);// 0x3664988
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x366490c
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x3664850
	void HandleEffectLoadFinishByName(FString ScreenParticleName);// 0x366471c
	void HandleEffectLoadFinish(byte EffectType);// 0x36646a0
	bool GetScalarParam(FString AppearanceName, FName ParamName, out float ParamValue);// 0x3664558

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 16]
	float LifeSpan;//[Offset: 0x10, Size: 4]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x18, Size: 40]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x40, Size: 8]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x48, Size: 8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x60, Size: 48]
	FName MatInstParamName;//[Offset: 0x90, Size: 8]
	CurveFloat* ParamCurve;//[Offset: 0x98, Size: 8]

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 8]

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0, Size: 1]
	FString ScreenParticleEffectName;//[Offset: 0x8, Size: 16]
	ParticleSystem* ParticleEffect;//[Offset: 0x18, Size: 40]
	FName ParticleParamName;//[Offset: 0x40, Size: 8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x48, Size: 16]
	Vector ScreenParticleEffectLoc;//[Offset: 0x58, Size: 12]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x68, Size: 8]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]
	float CurrentParamValue;//[Offset: 0x74, Size: 4]
	byte DisableDeviceLevel;//[Offset: 0x78, Size: 1]

--------------------------------
Class: MltAppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 16]
	FName AppearanceTag;//[Offset: 0x10, Size: 8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x20, Size: 48]
	MaterialInterface* ParentMaterial;//[Offset: 0x50, Size: 8]
	float MatialAlpha;//[Offset: 0x58, Size: 4]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x60, Size: 8]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x68, Size: 8]
	bool IsLogicShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool IsShowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]
	bool IsShowIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 1]
	float GradualFrag;//[Offset: 0x74, Size: 4]
	float DelayTime;//[Offset: 0x78, Size: 4]

--------------------------------
Class: MultiAppearanceMeshData
	StaticMeshComponent* MultiAppearanceMesh;//[Offset: 0x0, Size: 8]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x720, Size: 12]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x5b017cc
	Vector GetUnscaledBoxExtent();// 0x5b017a4
	Vector GetScaledBoxExtent();// 0x5b0176c

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x830, Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x860, Size: 48]
	Transform ScopeRelativeTransform;//[Offset: 0x890, Size: 48]
	void SetActivate(bool _IsActivate);// 0x344881c

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x9c0, Size: 16]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x332b1e8

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0, Size: 8]
	SceneComponent* ParentComp;//[Offset: 0x8, Size: 8]
	FName ParentSocketName;//[Offset: 0x10, Size: 8]
	float TargetArmALength;//[Offset: 0x18, Size: 4]
	Vector SocketOffset;//[Offset: 0x1c, Size: 12]
	Vector TargetOffset;//[Offset: 0x28, Size: 12]
	Vector RelativeLocation;//[Offset: 0x34, Size: 12]
	float ProbeSize;//[Offset: 0x40, Size: 4]
	byte ProbeChannel;//[Offset: 0x44, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47, Size: 1]
	float CameraLagSpeed;//[Offset: 0x48, Size: 4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]

--------------------------------
Class: CameraParams
	float FieldOfView;//[Offset: 0x0, Size: 4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0x110, Size: 4]
	float AALOpenSensibility;//[Offset: 0x114, Size: 4]
	float OpenAALFOV;//[Offset: 0x118, Size: 4]
	int MaxDist;//[Offset: 0x11c, Size: 4]
	int minDist;//[Offset: 0x120, Size: 4]
	int DangerDist;//[Offset: 0x124, Size: 4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0x128, Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x150, Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x178, Size: 8]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x180, Size: 8]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x188, Size: 8]
	float FixArrowScaleDistance;//[Offset: 0x194, Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x198, Size: 4]
	float ArrowScalePlus1;//[Offset: 0x19c, Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x1a0, Size: 4]
	float ArrowScalePlus2;//[Offset: 0x1a4, Size: 4]
	float ShortDis;//[Offset: 0x1a8, Size: 4]
	byte ChannelType;//[Offset: 0x1ac, Size: 1]
	Vector TargetLocation;//[Offset: 0x1b0, Size: 12]
	void SetItemExsist(bool bExsist);// 0x323e7f4
	void SetFinalLocation();// 0x323e7e0
	void SetAALFov(bool bOpen);// 0x323e75c
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x323e664
	void OnFreeArrowLoadFinsh();// 0x323e650
	void OnCalledActorLoadFinsh(Vector Location);// 0x323e5d4
	float GetTargetDistance();// 0x323e5a0
	bool GetAALAvaliable();// 0x323e568

--------------------------------
Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x428, Size: 4]
	float AirAttackDelayTime;//[Offset: 0x42c, Size: 4]
	int SkillID;//[Offset: 0x430, Size: 4]
	int IconID;//[Offset: 0x434, Size: 4]
	float AttackAreaRadius;//[Offset: 0x438, Size: 4]

--------------------------------
Class: FanPickerConfigData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float CapsuleRadius;//[Offset: 0x8, Size: 4]
	Vector Offset;//[Offset: 0xc, Size: 12]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsCheckHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool IsHeadJudgeWithoutOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bPickUpMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	class Actor[] IgnoredActors;//[Offset: 0x20, Size: 16]
	bool bForwardHitAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	enum PickerType;//[Offset: 0x31, Size: 1]
	enum PickerTargetType;//[Offset: 0x32, Size: 1]
	int PickerMaxCount;//[Offset: 0x34, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	Actor*[] IgnoreTargets;//[Offset: 0x40, Size: 16]

--------------------------------
Class: ActivityAnimationRepData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 8]

--------------------------------
Class: ActivityActorBase.CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	Character* ClientMainCharacter;//[Offset: 0x528, Size: 8]
	Character* CurActiveCharacter;//[Offset: 0x530, Size: 8]
	bool bIsInFightingUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	bool bActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x539, Size: 1]
	bool bClientActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53a, Size: 1]
	bool bIsCoolingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53b, Size: 1]
	bool bIsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	bool bButtonShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 1]
	MeshComponent* Mesh;//[Offset: 0x540, Size: 8]
	ShapeComponent* ShapeCollision;//[Offset: 0x548, Size: 8]
	delegate OnActorReset;//[Offset: 0x550, Size: 16]
	bool bActivityEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	bool bUseDSOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 1]
	bool bEanbleSimulatedInteractive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x562, Size: 1]
	FString actorName;//[Offset: 0x568, Size: 16]
	FString ActivityName;//[Offset: 0x578, Size: 16]
	int SkillIndex;//[Offset: 0x588, Size: 4]
	enum SkillEntry;//[Offset: 0x58c, Size: 1]
	AnimMontage* SoftAnimMontage;//[Offset: 0x590, Size: 40]
	bool bShowButtonWhenActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	bool bButtonShowWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	int ButtonShowTextID;//[Offset: 0x5bc, Size: 4]
	FString ButtonShowAdditionalTextString;//[Offset: 0x5c0, Size: 16]
	Object* ButtonShowPic;//[Offset: 0x5d0, Size: 40]
	int ButtonShowConsumeItemID;//[Offset: 0x5f8, Size: 4]
	int CancleButtonShowTextID;//[Offset: 0x5fc, Size: 4]
	Object* CancleButtonShowPic;//[Offset: 0x600, Size: 40]
	enum[] SpecialInteractivePawnState;//[Offset: 0x628, Size: 16]
	bool bIsIgnoreShootHistoryLocusVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	bool bEnablePickupInActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 1]
	bool bEnableSyncControllerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63a, Size: 1]
	bool bButtonShowCheckObstruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63b, Size: 1]
	float CoolDownTime;//[Offset: 0x63c, Size: 4]
	int ConsumeItemType;//[Offset: 0x640, Size: 4]
	int ConsumeItemID;//[Offset: 0x644, Size: 4]
	int ConsumeItemNum;//[Offset: 0x648, Size: 4]
	bool bShouldOccupy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 1]
	float OccupiedStateTimeout;//[Offset: 0x650, Size: 4]
	int NetRegionSize;//[Offset: 0x654, Size: 4]
	bool bUseDefautInteractiveBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	bool bUseCodeKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 1]
	int CodeKey;//[Offset: 0x65c, Size: 4]
	delegate OnOccupyDelegate;//[Offset: 0x678, Size: 16]
	delegate OnCoolDownDelegate;//[Offset: 0x688, Size: 16]
	delegate OnUpdateButton;//[Offset: 0x698, Size: 16]
	delegate OnActivityEnableUpdated;//[Offset: 0x6a8, Size: 16]
	void UpdateButtonInfo(Character* Character, bool bShow, bool bForce);// 0x3225ea0
	void TriggerSkillEvent(Character* Character);// 0x3225e1c
	void StartOccupied();// 0x3225e08
	void StartCoolDown();// 0x3225df4
	void SetEnable(bool bIsEnable);// 0x3225d70
	void OnRep_bIsOccupied();// 0x3225d5c
	void OnRep_bIsCoolingDown();// 0x3225d48
	void OnRep_bActivityEnable();// 0x3225d34
	void OnRep_bActived();// 0x3225d20
	void OnOccupyFinished();// 0x3225d0c
	void OnNotifyActivityOverlap(Character* Character, bool IsBegin);// 0x3225c4c
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x3225b50
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x3225a1c
	void OnCoolDownFinished();// 0x3225a08
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3225828
	void NotifyActivityOverlap(Character* Character, bool IsBegin);// 0x3225768
	bool LocalStartActive(Character* Character);// 0x32256d0
	void LocalReset(Character* Character);// 0x322564c
	bool LocalInterruptActive(Character* Character);// 0x32255b4
	bool LocalActiveFinished(Character* Character);// 0x322551c
	bool IsOccupied();// 0x32254e4
	bool IsCoolingDown();// 0x32254ac
	bool IsConsumeItemEnough();// 0x3225474
	bool IsCharaterInActived(Character* InCharacter);// 0x32253dc
	bool IsAllowInteractive(Character* Character, out int Reason, bool bEanbleSimulated);// 0x32252b8
	void GetRegionID(out RegionID OutRegionID);// 0x3225218
	bool GetRegionBasedNetConsideration();// 0x32251d8
	MeshComponent* GetMesh();// 0x32251bc
	Character* GetMainCharacter();// 0x3225188
	byte GetIsWeakNetUpdate();// 0x322514c
	int GetConsumeItemNum();// 0x3225118
	int GetConsumeItemID();// 0x32250e4
	int GetConsumeItemCurCount();// 0x32250b0
	Character* GetActivedCharacter();// 0x3225078
	void ForceNetConsider();// 0x322505c
	bool ClientClickCancleButton(Character* Character, out int OutReason);// 0x3224f80
	bool ClientClickButton(Character* Character, out int OutReason);// 0x3224e9c
	void CheckedActivityOverlap(Character* Character, bool IsServerOverlaped, bool IsBegin);// 0x3224d88
	void CheckActivityOverlap(Character* Character, bool IsBegin);// 0x3224cc8
	void BPUpdateInteractiveUI(Character* Character);// 0x3224c44
	void BPUpdateButtonInfo();// 0x4033584
	bool BPStartActive(Character* Character, bool bSuccess, bool bClient);// 0x3224b24
	bool BPShowButton(Character* Character, bool bShow);// 0x3224a48
	void BPReset(Character* Character);// 0x32249c4
	void BPOnCharacterAttached(Character* InCharacter);// 0x3224940
	bool BPInterruptActive(Character* Character, bool bSuccess, bool bClient);// 0x3224820
	AnimMontage* BPGetSoftAnimMontage(Character* InCharacter);// 0x3224734
	bool BPClientClickCancleButton(Character* Character, int Reason);// 0x4033584
	bool BPClientClickButtonFailed(Character* Character, int Reason);// 0x4033584
	bool BPClickButton(Character* Character, int Reason);// 0x3224660
	bool BPAllowShowButton(Character* Character, out int Reason);// 0x322457c
	bool BPAllowInteractive(Character* Character);// 0x32244e4
	bool BPAllowClickButton(Character* Character);// 0x322444c
	void BPActiveStateChange();// 0x4033584
	bool BPActiveFinished(Character* Character, bool bSuccess, bool bClient);// 0x322432c
	bool AllowShowButton(Character* Character, out int Reason);// 0x3224248
	bool AllowInteractive(Character* Character, out int Reason);// 0x3224164
	bool AllowClickButton(Character* Character, out int Reason);// 0x3224080

--------------------------------
Class: CustomDecoratorActor.DecoratorActor.LuaActor.Actor.Object
	int[] CustomIntValueArray;//[Offset: 0x510, Size: 16]
	bool SetCustomIntValue(int Index, int Value);// 0x3329e98
	int GetCustomIntValue(int Index);// 0x3329e0c

--------------------------------
Class: DecoratorActor.LuaActor.Actor.Object
	int resID;//[Offset: 0x4e0, Size: 4]
	int TlogID;//[Offset: 0x4e4, Size: 4]
	int Health;//[Offset: 0x4e8, Size: 4]
	int TeamID;//[Offset: 0x4ec, Size: 4]
	int IconID;//[Offset: 0x4f0, Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	bool bDisableCollisionOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f5, Size: 1]
	delegate OnHealthChangeNotify;//[Offset: 0x4f8, Size: 16]
	bool bShowBulletImpactEffectInOnlyAutonomous;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50a, Size: 1]
	void ShowIconInPlayerMap(uint32 PlayerKey);// 0x333f664
	void ShowIconInMap();// 0x333f650
	bool ShouldTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x333f4e8
	void SetHealth(int ToHealth);// 0x333f470
	void SendLuaDSToClient(int ID, out const byte[] Content);// 0x333f378
	void RPC_LuaDSToClient(int ID, const byte[] Content);// 0x333f258
	void OnRep_Health();// 0x333f244
	void OnDie();// 0x333f228
	void OnBPRespawned();// 0x333f20c
	bool IsDead();// 0x333f1e8
	void HideIconInMap();// 0x333f1d4
	int GetHitBodyType(FString HitPart);// 0x333f088
	int GetActorResId();// 0x333f06c
	void EatEffectMulticast(FString DriverKey);// 0x333efbc
	void Client_OnEatEffect(FString DriverKey);// 0x4033584
	float BPTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, out const HitResult HitResult);// 0x333edf8

--------------------------------
Class: LuaActor.Actor.Object
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x428, Size: 80]
	FString LuaFilePath;//[Offset: 0x478, Size: 16]
	void UnRegistLuaTick();// 0x6a07b84
	void RegistLuaTick(float TickInterval);// 0x6a07b08

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: RegionID

--------------------------------
Class: InteractiveComponentBase.LuaActorComponent.ActorComponent.Object
	delegate OnAllowToInteract;//[Offset: 0x1d8, Size: 16]
	delegate OnInteractionEffective;//[Offset: 0x1e8, Size: 16]
	delegate OnClientShowInteractiveUI;//[Offset: 0x1f8, Size: 16]
	delegate OnServerAddOrDeleteComponent;//[Offset: 0x208, Size: 16]
	delegate OnServerRPCSetOccupied;//[Offset: 0x218, Size: 16]
	delegate OnServerClickInteractiveButton;//[Offset: 0x228, Size: 16]
	delegate OnStartCoolDown;//[Offset: 0x238, Size: 16]
	delegate OnRepOccupied;//[Offset: 0x248, Size: 16]
	delegate OnRepCoolDown;//[Offset: 0x258, Size: 16]
	delegate OnRepCurrentCharacter;//[Offset: 0x268, Size: 16]
	delegate OnRepCurrentCharacterArray;//[Offset: 0x278, Size: 16]
	delegate OnRepEnabled;//[Offset: 0x288, Size: 16]
	delegate OnResetSkillAction;//[Offset: 0x298, Size: 16]
	delegate OnStartedSkillAction;//[Offset: 0x2a8, Size: 16]
	delegate OnFinishedSkillAction;//[Offset: 0x2b8, Size: 16]
	PrimitiveComponent* PrimitiveComponent;//[Offset: 0x2c8, Size: 8]
	PrimitiveComponent*[] PrimitiveComponentArray;//[Offset: 0x2d0, Size: 16]
	Character* OccupyingCharacter;//[Offset: 0x2e0, Size: 8]
	Character*[] OccupyingCharacterArray;//[Offset: 0x2e8, Size: 16]
	bool bIsCooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	int CoolDownLeftTimeForShow;//[Offset: 0x2fc, Size: 4]
	bool bOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	FName PrimitiveComponentTag;//[Offset: 0x308, Size: 8]
	int CollisionsNum;//[Offset: 0x310, Size: 4]
	bool bShowedMultiplayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool bOnlyInFightingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	bool bCheckBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x316, Size: 1]
	int CheckBlockCharacterIncrement;//[Offset: 0x318, Size: 4]
	int CheckBlockActorIncrement;//[Offset: 0x31c, Size: 4]
	bool bCanInteractInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	bool bCanInteractWhenNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321, Size: 1]
	bool bCanInteractInCarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x322, Size: 1]
	bool bAllowWhenCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x323, Size: 1]
	int TipsIdWhenClickedInCoolDown;//[Offset: 0x324, Size: 4]
	float CoolDownTime;//[Offset: 0x328, Size: 4]
	float MaxOccupyingTime;//[Offset: 0x32c, Size: 4]
	int MaxOccupyingCharacterNum;//[Offset: 0x330, Size: 4]
	int TLogKey;//[Offset: 0x334, Size: 4]
	Volume* CustomTriggerVolume;//[Offset: 0x338, Size: 8]
	int DebugParameter;//[Offset: 0x340, Size: 4]
	int SkillID;//[Offset: 0x344, Size: 4]
	bool bResetSkillData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	float LoadingDuration;//[Offset: 0x34c, Size: 4]
	AnimMontage* FPS_AnimMontage_Stand;//[Offset: 0x350, Size: 40]
	AnimMontage* FPS_AnimMontage_Crouch;//[Offset: 0x378, Size: 40]
	AnimMontage* FPS_AnimMontage_Prone;//[Offset: 0x3a0, Size: 40]
	AnimMontage* FPS_AnimMontage_Vehicle;//[Offset: 0x3c8, Size: 40]
	AnimMontage* TPS_AnimMontage_Stand;//[Offset: 0x3f0, Size: 40]
	AnimMontage* TPS_AnimMontage_Crouch;//[Offset: 0x418, Size: 40]
	AnimMontage* TPS_AnimMontage_Prone;//[Offset: 0x440, Size: 40]
	AnimMontage* TPS_AnimMontage_Vehicle;//[Offset: 0x468, Size: 40]
	void SetOccupied(Character* Character, bool bOccupied);// 0x33e7c28
	void SetEnable(bool bIsEnable);// 0x33e7ba4
	void ServerAddOrDeleteInteractiveComponent(Character* Character, bool bAdd);// 0x33e7ae4
	void OnRep_Occupied();// 0x33e7ad0
	void OnRep_Enabled();// 0x33e7abc
	void OnRep_CurrentCharacterArray();// 0x33e7aa8
	void OnRep_CurrentCharacter();// 0x33e7a94
	void OnRep_CoolDown();// 0x33e7a80
	void OnEndOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex);// 0x33e7954
	void OnBeginOverlap(PrimitiveComponent* SelfComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x33e777c
	bool IsOverlappingByCharacter(Character* Character);// 0x33e76ec
	bool IsEnabled();// 0x33e76b4
	bool IsCoolingDown();// 0x33e767c
	int GetInteractiveCharacterNum();// 0x33e7648
	void GetCurrentOccupyingCharacterArray(out Character*[] OutActors);// 0x33e7590
	Character* GetCurrentOccupyingCharacter();// 0x33e755c
	int GetCoolDownLeftTimeForShow();// 0x33e7528
	void GetAllInteractiveCharacters(out Character*[] OutActors);// 0x33e7470

--------------------------------
Class: AngledSightRepData
	byte AngledSightType;//[Offset: 0x0, Size: 1]
	bool IsOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: ActicityDisallowedData
	enum[] DisallowedStates;//[Offset: 0x0, Size: 16]
	int ActivityID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WarteringAreaCPP.UAERegionActor.LuaActor.Actor.Object
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x560, Size: 16]
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x570, Size: 16]
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x580, Size: 16]
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x591, Size: 1]
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x592, Size: 1]
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x593, Size: 1]
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x594, Size: 12]
	float CurrentScale;//[Offset: 0x5a0, Size: 4]
	int CurActTime;//[Offset: 0x5a4, Size: 4]
	PlayerController*[] PlayerCDTable;//[Offset: 0x5a8, Size: 16]
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	FName SocketBaseTags;//[Offset: 0x5c0, Size: 8]
	float CurrentCarouselRotationAccel;//[Offset: 0x5c8, Size: 4]
	float CurrentCarouselRotation;//[Offset: 0x5cc, Size: 4]
	int CurrentInteractingPlayerCount;//[Offset: 0x5d0, Size: 4]
	int PlayerNumberForTriggerEvent;//[Offset: 0x5d4, Size: 4]
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x5d8, Size: 16]
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x5e8, Size: 16]
	int AttachedNumber;//[Offset: 0x5fc, Size: 4]
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x600, Size: 80]
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x650, Size: 16]
	Vector[] DropOffLocations;//[Offset: 0x670, Size: 16]
	enum DropOffLocationType;//[Offset: 0x680, Size: 1]
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x681, Size: 1]
	int AssociatedSkillIndex;//[Offset: 0x684, Size: 4]
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x688, Size: 16]
	byte IsDayTime;//[Offset: 0x698, Size: 1]
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 1]
	Pawn*[] PawnDoneList;//[Offset: 0x6a0, Size: 16]
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	enum FixedDropOffLocationType;//[Offset: 0x6b1, Size: 1]
	Vector[] FixedRelativeDropPositions;//[Offset: 0x6b8, Size: 16]
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 1]
	bool UseDropFixedPosition();// 0x37395a8
	void StopDancing_Multicast(const Actor*[] Players);// 0x37394cc
	void StartDancing_Multicast(int MontageIndex, const Actor*[] Players);// 0x37393ac
	void SpawnTreeParticleCPP_Multicast(PlayerController* PlayerController);// 0x37392fc
	static void SetupMinimapDisplay(UAEPlayerController* PController, out const LoveTreeData[] treeData);// 0x373920c
	void SetCDFlagByPC(PlayerController* PlayerController);// 0x3739190
	void ServerDoWaterLogic(PlayerController* PlayerController, FString ExMsg);// 0x4033584
	void ResetPCByTime(PlayerController* PlayerController, float cdTime);// 0x37390d8
	void OnTimeStampRep(out const BunnyDanceSyncData SyncData);// 0x3739038
	void OnStopDancing(out const Actor*[] Players);// 0x3738f78
	void OnStartDancing(int MontageIndex, out const Actor*[] Players);// 0x3738e78
	void OnSpawnTreeParticleCPP(PlayerController* PlayerController);// 0x3738df4
	void OnSkeletalAnimationSyncData(out const SkeletalAnimationSyncData InSkeletalAnimationSyncData);// 0x4033584
	void OnSkeletalAnimationStateChanged(SceneComponent* AttachedComponent, bool bShouldStartAnimation);// 0x4033584
	void OnRep_TimeStamp(out const BunnyDanceSyncData SyncData);// 0x3738d5c
	void OnRep_SkeletalAnimationSyncData();// 0x3738d48
	void OnRep_ShowRabbitAnim();// 0x3738d2c
	void OnRep_PawnDoneList();// 0x3738d10
	void OnRep_IsDayTime();// 0x3738cf4
	void OnRep_CurrentScaleCPP();// 0x3738ce0
	void OnRep_CurrentScaleBP();// 0x4033584
	void OnRep_CurrentInteractingPlayerCount();// 0x3738c7c
	void OnRep_CurActTimeCPP();// 0x3738c18
	void OnRep_CurActTimeBP();// 0x4033584
	void OnRep_AttachedNumber();// 0x3738bb4
	void OnPlayersDance(out const Actor*[] Players, int MontageIndex, float JoinTime);// 0x3738a6c
	void OnPlayerNumberChanged(int Number);// 0x4033584
	void OnPlayerDetached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x4033584
	void OnPlayerAttached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x4033584
	void OnPCCDCleared(PlayerController* PlayerController);// 0x4033584
	void OnClientCurrentInteractingPlayerCountChanged();// 0x4033584
	bool IsDropFixedRelativePositionSetUp();// 0x3738a2c
	bool GetIsPCInCD(PlayerController* PlayerController);// 0x373899c
	Vector GetDropFixedRelativePosition(Actor* DropOwner);// 0x3738904
	void DispatchPlayerDance_Multicast(const Actor*[] Players, int MontageIndex, float JoinTime);// 0x37387a4
	bool CanTriggertEvent(Pawn* CurPawn);// 0x4033584
	int CacheAssociatedSkillIndex();// 0x4033584

--------------------------------
Class: UAERegionActor.LuaActor.Actor.Object
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	enum RegionSize;//[Offset: 0x499, Size: 1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 1]

--------------------------------
Class: BunnyDanceSyncData
	int CurrentIndex;//[Offset: 0x0, Size: 4]
	bool bIsDancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float TimeStamp;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SocketAttachmentInternalData
	FName SocketName;//[Offset: 0x0, Size: 8]
	SceneComponent* SocketBase;//[Offset: 0x8, Size: 8]
	Actor* AttachedPlayer;//[Offset: 0x10, Size: 8]
	Vector OffsetLoc;//[Offset: 0x18, Size: 12]
	Rotator OffsetRot;//[Offset: 0x24, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x30, Size: 8]

--------------------------------
Class: SocketAttachmentNameTable
	FName SocketName;//[Offset: 0x0, Size: 8]
	Vector OffsetLoc;//[Offset: 0x8, Size: 12]
	Rotator OffsetRot;//[Offset: 0x14, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 8]

--------------------------------
Class: SkeletalAnimationSyncData
	SceneComponent* SocketBase;//[Offset: 0x0, Size: 8]
	bool Status;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: LoveTreeData
	int ID;//[Offset: 0x0, Size: 4]
	Vector Loc;//[Offset: 0x4, Size: 12]
	float minRate;//[Offset: 0x10, Size: 4]
	float maxRate;//[Offset: 0x14, Size: 4]

--------------------------------
Class: PlayerRoleCacheFrameData

--------------------------------
Class: PlayerTombBox.LuaActor.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x4e8, Size: 16]
	FName TombName;//[Offset: 0x4f8, Size: 8]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x508, Size: 8]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x510, Size: 8]
	ItemDefineID KillByItemDefineID;//[Offset: 0x518, Size: 24]
	int DeadTime;//[Offset: 0x530, Size: 4]
	int BoxLifeSpan;//[Offset: 0x534, Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x53c, Size: 12]
	byte AttackRules;//[Offset: 0x548, Size: 1]
	Actor* AttachedActor;//[Offset: 0x550, Size: 8]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	enum BoxType;//[Offset: 0x559, Size: 1]
	ItemTombParticle[] TombBoxItemEffect;//[Offset: 0x560, Size: 16]
	uint32 OwnerUniqueID;//[Offset: 0x570, Size: 4]
	int TargetPlayerKey;//[Offset: 0x574, Size: 4]
	bool bAutoShowItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x57c, Size: 4]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool bDropEffectVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	bool bAirDropWrapperDynamicRegionNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x582, Size: 1]
	int AvatarID;//[Offset: 0x584, Size: 4]
	Character* BoxOwner;//[Offset: 0x588, Size: 8]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x590, Size: 8]
	PickUpListWrapperActor* ItemEffectBoxPickupWrapperActor;//[Offset: 0x598, Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x5a0, Size: 8]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	int DropGroupID;//[Offset: 0x5ac, Size: 4]
	Vector DropStartLocation;//[Offset: 0x5b0, Size: 12]
	void SwitchToDeadTombBox();// 0x348544c
	void SetVisible(bool IsVisible);// 0x34853cc
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x3485284
	void RegisterToPlayerPickUpList();// 0x3485270
	void RegisterToCurveAnimComponent();// 0x3485254
	void OpenListenUIEvent(bool bOpen);// 0x4033584
	void OnRep_VisibilityChange();// 0x3485240
	void OnRep_ItemEffectBoxPickupWrapperActor();// 0x348522c
	void OnRep_ChangeBoxMesh();// 0x3485218
	void OnRep_BoxLifeSpan();// 0x3485204
	void OnRep_AvatarId();// 0x34851e8
	void OnRep_AttachmentReplication();// 0x34851cc
	void OnRep_AttachedActor();// 0x34851b8
	void OnRefreshItemEffect();// 0x34851a4
	void HideDeadTombApparence();// 0x3485188
	int GetUniqueInstanceID();// 0x3485154
	int GetTombboxLifespan();// 0x3485120
	PickUpListWrapperActor* GetPickupWrapperActor();// 0x3485104
	void GetDropItemListFromPlayer(out PickUpItemData[] ItemDataList);// 0x3485060
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x3485028
	int GetAvatarId();// 0x3484ff4
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x3484ee8
	void GeneratePlayerBackpackWrappers();// 0x3484ed4
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x3484d5c
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x3484c64
	void GenerateBoxWrappersByItemDataList(out const PickUpItemData[] DataList, FName BoxName, bool IsInAirDropBox);// 0x3484b30
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirDropBoxID);// 0x34849e8
	bool CanPickByPawn(Pawn* Pawn);// 0x3484950

--------------------------------
Class: ItemTombParticle
	ParticleSystem* SoftPS;//[Offset: 0x0, Size: 40]
	ParticleSystemComponent* PS;//[Offset: 0x28, Size: 8]
	<int> ItemSpecificIDArray;//[Offset: 0x30, Size: 80]

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x800, Size: 16]
	enum BoxType;//[Offset: 0x820, Size: 1]
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x3462acc
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x3462a04
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x4033584
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey);// 0x4033584
	void OnRep_PickUpDataList();// 0x34629f0
	void OnPickUpDataListChangedDelegate__DelegateSignature();// 0x4033584
	void OnBoxEmptyDelegate__DelegateSignature(int boxId);// 0x4033584
	PickUpItemData[] GetDataList();// 0x3462984
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x3462850

--------------------------------
Class: PickUpWrapperActor.UAENetActor.LuaActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x500, Size: 4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	ItemDefineID DefineID;//[Offset: 0x508, Size: 24]
	int Count;//[Offset: 0x520, Size: 4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x524, Size: 1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x525, Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x526, Size: 1]
	FString[] ForbitPickPlayerNameList;//[Offset: 0x528, Size: 16]
	bool bForceDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x539, Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53a, Size: 1]
	FName OwnerName;//[Offset: 0x540, Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x548, Size: 4]
	float OwnerTime;//[Offset: 0x54c, Size: 4]
	bool bUseAttachedRelLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x554, Size: 12]
	Actor* AttachedActor;//[Offset: 0x560, Size: 8]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x568, Size: 16]
	bool bForceRecycle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x57c, Size: 4]
	float PickUpColdCountDown;//[Offset: 0x580, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x5a8, Size: 4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ac, Size: 1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x5b0, Size: 4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x5b8, Size: 8]
	FString ItemValue;//[Offset: 0x5c0, Size: 16]
	FString ItemCategory;//[Offset: 0x5d0, Size: 16]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1, Size: 1]
	delegate OnWrapperPickedUp;//[Offset: 0x5e8, Size: 16]
	StaticMeshComponent* PickupMesh;//[Offset: 0x600, Size: 8]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x608, Size: 8]
	int ObjectPoolSize;//[Offset: 0x610, Size: 4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 1]
	int InBoxEffectDurationTime;//[Offset: 0x618, Size: 4]
	FString EffectPath;//[Offset: 0x620, Size: 16]
	FString DurationTime;//[Offset: 0x630, Size: 16]
	int ItemId;//[Offset: 0x640, Size: 4]
	Color DefaultColor;//[Offset: 0x644, Size: 4]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x650, Size: 128]
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x6d0, Size: 128]
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x750, Size: 8]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x7a0, Size: 8]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x7b0, Size: 24]
	UAENetDriver* NetDriver;//[Offset: 0x7c8, Size: 8]
	int SpotDataIndex;//[Offset: 0x7d4, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	int DropGroupID;//[Offset: 0x7ec, Size: 4]
	Vector DropStartLocation;//[Offset: 0x7f0, Size: 12]
	void UpdateAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x3467ca4
	FString ToDetailString();// 0x3467bf8
	void ShowMesh(bool bShow);// 0x3467b74
	void ShowActor();// 0x3467b60
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x3467a18
	void SetDefineIDWhenDroped(out const ItemDefineID DID);// 0x3467988
	void SetDefineID(out const ItemDefineID DID);// 0x34678f8
	void SetCountOnServerAfterSpawn(int _Count);// 0x346787c
	void SetActorToGround(Actor* IgnoreActor);// 0x34677cc
	void ServerResetShowActor();// 0x34677b8
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x346767c
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);// 0x34675cc
	void RegisterToCurveAnimComponent();// 0x34675b8
	void PickUpWrapperShow__DelegateSignature();// 0x4033584
	void PickUpWrapperHide__DelegateSignature(float InRefreshTimeStamp);// 0x4033584
	void OnWrapperPickedDelegate__DelegateSignature();// 0x4033584
	void OnSpawned();// 0x346759c
	void OnRespawnedEvent();// 0x3467580
	void OnRep_PickUpColdCountDown();// 0x346756c
	void OnRep_Owner();// 0x3467550
	void OnRep_DropGroundEffectInfo();// 0x346753c
	void OnRep_DefindID();// 0x3467528
	void OnRep_Count();// 0x346750c
	void OnRep_AttachmentReplication();// 0x34674f0
	void OnRep_AttachedActor();// 0x34674dc
	void OnLoadDropEffectFinish(DropGroundEffectInfo effectInfo);// 0x3467350
	void OnHideActor(bool bHide);// 0x34672c4
	void OnDestroyed();// 0x34672a8
	void OnActorDestroyed();// 0x346728c
	void ModifyData(int _Count);// 0x3467210
	void MarkPlayerPlayerInfoByDropped(STExtraBaseCharacter* InDroppedPlayer);// 0x3467194
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget);// 0x34670cc
	bool LoadDynamicMeshInst(StaticMesh* InStaticMesh);// 0x346703c
	bool LoadDynamicMesh(FString MeshPath);// 0x3466f80
	bool LoadDynamicMaterialInst(MaterialInstance* InMaterialInst);// 0x3466ef0
	bool LoadDynamicMaterial(FString MaterialPath);// 0x3466e34
	bool IsCanPickup(out const ItemDefineID InItemID, STExtraBaseCharacter* InFirstPlayer);// 0x3466d48
	void InitData(ItemSpotSceneComponent* Component, int ItemCount, FString Value, FString Category, bool RepeatGenerateItem);// 0x3466a5c
	bool HasWrapperContainsAttachment(int AttachmentID);// 0x34669c4
	StaticMeshComponent* GetPickupMesh();// 0x3466990
	int GetNetGUIDOffsetValue();// 0x346695c
	int GetItemType();// 0x3466920
	uint64 GetItemInstanceId();// 0x34668ec
	int GetItemId();// 0x34668b0
	bool GetHasBeenPickedUp();// 0x3466870
	PickUpItemData[] GetDataList();// 0x3466804
	void ForceNetUpdate();// 0x34667e8
	void FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x34666b4
	void ColdTimeCountDown();// 0x34666a0
	void ClientResetShowActor();// 0x346668c
	bool CheckPickUpDataIsWeapon();// 0x3466654
	bool CanBePickedUp();// 0x3466614
	void BroadcastResetShowActor();// 0x34665b4
	void BroadcastDataToAllClients(int Count_New);// 0x3466504
	void AsyncLoadPickUpEffectDone(bool bFirstCreate);// 0x3466480
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x34662ac

--------------------------------
Class: UAENetActor.LuaActor.Actor.Object
	int iRegionActor;//[Offset: 0x498, Size: 4]
	bool bStaticAddNetworkActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49e, Size: 1]

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x20, Size: 16]
	int InstanceID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x2e4, Size: 4]
	bool bForceSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	byte SpotGroupType;//[Offset: 0x2ea, Size: 1]
	float RepeatGenerateItemCD;//[Offset: 0x2ec, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2f0, Size: 8]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x2f8, Size: 16]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x308, Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0x310, Size: 80]
	Actor*[] CacheItems;//[Offset: 0x360, Size: 16]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x3c2e078
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x3c2dfcc
	bool GenerateSpot();// 0x3c2df8c
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x3c2de88
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x3c2dc78
	int CountCacheItemValeCategory();// 0x3c2dc44
	void ClearCacheItems();// 0x3c2dc30

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x2c9, Size: 1]
	int ID;//[Offset: 0x2cc, Size: 4]
	int WorldCompositionID;//[Offset: 0x2d0, Size: 4]
	float HalfHeight;//[Offset: 0x2d4, Size: 4]
	int SpotProbability;//[Offset: 0x2d8, Size: 4]
	float LineOffsetZ;//[Offset: 0x2dc, Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 1]
	void SetSpotValid(bool Valid);// 0x3c3d1d8
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x3c3cf48
	bool IsSpotValid();// 0x3c3cf08
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x3c3cd7c
	bool GenerateSpot();// 0x3c3cd3c
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod);// 0x3c3cbcc

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x2d8, Size: 12]
	byte BornIslandGroupType;//[Offset: 0x2e4, Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5, Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x2e8, Size: 272]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x3f8, Size: 80]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x448, Size: 16]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	FString[] AreaIDList;//[Offset: 0x460, Size: 16]
	ItemRegionCircle[] ReplacedGeneratorRegionMap;//[Offset: 0x470, Size: 16]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x480, Size: 16]
	ExtraItemSpawn[] ExtraSpawnItemsList;//[Offset: 0x490, Size: 16]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x4a0, Size: 80]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x4f0, Size: 40]
	CurveFloat* SpotRateCurve;//[Offset: 0x518, Size: 8]
	CurveFloat* ItemRateCurve;//[Offset: 0x520, Size: 8]
	<FString,float> CategoryRates;//[Offset: 0x528, Size: 80]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x578, Size: 80]
	Actor*[] BornIslandItems;//[Offset: 0x5c8, Size: 16]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x5d8, Size: 16]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e9, Size: 1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ea, Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x5f0, Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x5f8, Size: 8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x658, Size: 16]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x678, Size: 16]
	FString CookedBandFilePath;//[Offset: 0x6d8, Size: 16]
	bool bIsAreaItemLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	AreaItemsLimitEdit[] AreaItemsLimit;//[Offset: 0x740, Size: 16]
	<RegionID,AreaItemsLimit> AreaItemsLimitMaps;//[Offset: 0x750, Size: 80]
	int DSSwitchSyncLoadId;//[Offset: 0x7a0, Size: 4]
	bool bUseDynamicSpotConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 1]
	DynamicSpotConfig[] DynamicSpotConfigs;//[Offset: 0x7a8, Size: 16]
	bool bEnablePreCalculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 1]
	int RandomSpotCountPerTick;//[Offset: 0x80c, Size: 4]
	delegate PreCalculateCompleted;//[Offset: 0x860, Size: 16]
	bool bCheckPreCalculateComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	bool bEnablePrimeItemCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x871, Size: 1]
	PrimeItemCircleConfig[] PrimeItemCircleConfigs;//[Offset: 0x878, Size: 16]
	<Vector,UAESpotGroupObject*> SpotGroupObjectsMapByLoc;//[Offset: 0x8a8, Size: 80]
	void WriteItemSpotStatisticsDatas();// 0x3c28684
	void WriteItemClassStatisticsDatas_V15();// 0x3c28670
	void WriteItemClassStatisticsDatas();// 0x3c2865c
	void WriteGroupStatisticsDatas();// 0x3c28648
	void WriteBuildingStatisticsDatas();// 0x3c28634
	void WriteAreaItemStatisticsDatas();// 0x3c28620
	void WriteAllStatisticsDatasToLog();// 0x3c28604
	void WriteAllStatisticsDatas();// 0x3c285e8
	void SetCatetoryRate(<FString,float> Rates);// 0x3c28490
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x3c283c8
	void RegisterBornIslandItem(Actor* Item);// 0x3c28344
	UAEDataTable* ReadItemGenerateTable(FString TablePath);// 0x3c28208
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x3c28078
	ItemGenerateSpawnData RandomItemGenerateSpawnData(out ItemGenerateSpawnData[] Items);// 0x3c27e68
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x3c27d58
	void RandomBornIslandGroups();// 0x3c27d3c
	void OnAsyncLoadItemClassFinish(class Actor ActorClassPtr, ItemGenerateSpawnClass SpawnClass);// 0x3c27b3c
	void LuaCustomFunctionAfterGenerate(out ItemGenerateSpawnClass SpawnClass, Actor* ItemActor);// 0x3c279fc
	bool LuaAddRandomItemClassArray(ItemGenerateSpawnClass SpawnClass);// 0x3c278e0
	void LoadItemGenerateTable();// 0x3c278c4
	bool IsCatetoryEnabled();// 0x3c2788c
	void InitCatetorys();// 0x3c27878
	void InitCategoryEx();// 0x3c27864
	Vector[] GetSpotLocsByTag(FString ExTag);// 0x3c27748
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x3c275fc
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem, ItemSpotSceneComponent* SpotComponent);// 0x3c27364
	int GetItemDefineID(class Object PickUpClass);// 0x4033584
	float GetCatetoryRate(FString Catetory);// 0x3c272ac
	void GenerateSpotOnTick(float DeltaTime);// 0x3c27228
	Vector FindASpawnLoc(World* InWorld, const Vector TraceStart);// 0x3c2715c
	void EnablePrimeItemCircle(Vector Center, int Radius, int PrimeConfigIndex);// 0x3c2706c
	void EnableDynamicSpotConfigByIndex(int DynamicIndex);// 0x3c26ff0
	void DoPickUp(int ItemSpotDataIndex, FString Value, FString Category);// 0x3c26e9c
	void DeleteBornIslandItems();// 0x3c26e88
	bool CheckShouldGenerateItem(int ItemId);// 0x3c26df0
	void CheckRecoverItems();// 0x3c26ddc
	void AddIgnoreItemClassPath(out const FString[] IgnoreItemClassList);// 0x3c26cc8

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2, Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0x1d4, Size: 4]
	FString ItemTableName;//[Offset: 0x1d8, Size: 16]
	FString[] ItemSpawnTableList;//[Offset: 0x1e8, Size: 16]
	UAEDataTable* ItemTable;//[Offset: 0x1f8, Size: 8]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0x208, Size: 80]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x258, Size: 16]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x268, Size: 80]
	FString CookedFilePath;//[Offset: 0x2b8, Size: 16]
	FString[] CookedFileAddPathArray;//[Offset: 0x2c8, Size: 16]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x3bfe7c4
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x3bfe740
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x3bfe6bc
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x3bfe530
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x3bfe474
	void GenerateSpots();// 0x3bfe458
	void GenerateSpotOnTick(float DeltaTime);// 0x3bfe3d4
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x3bfe19c
	void CheckTileLevelsVisible();// 0x3bfe188

--------------------------------
Class: ItemActorComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 4]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 80]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x60, Size: 80]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0xb0, Size: 80]
	AreaItemStatisticsData[] AreaItemStatisticsData;//[Offset: 0x100, Size: 16]

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x8, Size: 1]
	int AllGroupSpotCount;//[Offset: 0xc, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x10, Size: 4]
	int AllSpotCount;//[Offset: 0x14, Size: 4]
	int AllValidSpotCount;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TableRowBase

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x8, Size: 16]
	float BuildingLocationX;//[Offset: 0x18, Size: 4]
	float BuildingLocationY;//[Offset: 0x1c, Size: 4]
	int AllGroupSpotCount;//[Offset: 0x20, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x24, Size: 4]
	int AllSpotCount;//[Offset: 0x28, Size: 4]
	int AllValidSpotCount;//[Offset: 0x2c, Size: 4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x30, Size: 80]

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x8, Size: 1]
	int AllSpotCount;//[Offset: 0xc, Size: 4]
	int AllValidSpotCount;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString ItemPath;//[Offset: 0x8, Size: 16]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int ItemCount;//[Offset: 0x1c, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x20, Size: 16]
	int ItemTogetherCount;//[Offset: 0x30, Size: 4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: AreaItemStatisticsData.TableRowBase
	FString ItemName;//[Offset: 0x8, Size: 16]
	int UId;//[Offset: 0x18, Size: 4]
	int ItemId;//[Offset: 0x1c, Size: 4]
	int GroupType;//[Offset: 0x20, Size: 4]
	int SpotType;//[Offset: 0x24, Size: 4]
	FString AreaName;//[Offset: 0x28, Size: 16]
	Vector Location;//[Offset: 0x38, Size: 12]
	float X;//[Offset: 0x44, Size: 4]
	float Y;//[Offset: 0x48, Size: 4]
	int GameTime;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0, Size: 1]
	int SpotGroupPercent;//[Offset: 0x4, Size: 4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 16]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float RepeatGenerateItemCDMin;//[Offset: 0x1c, Size: 4]
	float RepeatGenerateItemCDMax;//[Offset: 0x20, Size: 4]

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	int SpotPercentMin;//[Offset: 0x4, Size: 4]
	int SpotPercentMax;//[Offset: 0x8, Size: 4]
	int SpotPercentDot;//[Offset: 0xc, Size: 4]
	int ItemPerSpotMin;//[Offset: 0x10, Size: 4]
	int ItemPerSpotMax;//[Offset: 0x14, Size: 4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x18, Size: 16]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0, Size: 16]
	int Weight;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ItemRegionCircle
	Vector Center;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float RadiusSquared2D;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ExtraItemSpawn
	int SpawnPercent;//[Offset: 0x0, Size: 4]
	FString SpawnItemValue;//[Offset: 0x8, Size: 16]
	FString SpawnItemCategory;//[Offset: 0x18, Size: 16]

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FString,Property*> NameToProperty;//[Offset: 0xb0, Size: 80]
	bool SetTableData_String(FString KeyValue, FString TagName, FString Value);// 0x5d10000
	bool SetTableData_Int32(FString KeyValue, FString TagName, int Value);// 0x5d0fea0
	bool SetTableData_Float(FString KeyValue, FString TagName, float Value);// 0x5d0fd40
	FString GetTableName();// 0x5d0fc9c
	FString GetRealTableName(FString tableName);// 0x5d0fb80
	bool ConditionAddEmptyRow(out const FName RowName);// 0x5d0fae0

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0, Size: 1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x8, Size: 16]

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x2c9, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca, Size: 1]
	int WorldCompositionID;//[Offset: 0x2cc, Size: 4]
	float LastGenerateItemTime;//[Offset: 0x2d0, Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x2d4, Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 1]
	void SetGroupValid(bool Valid);// 0x3c2389c
	bool IsValidGroup();// 0x3c2385c
	int FindWorldCompositionID();// 0x3c23828
	void DoPickUp();// 0x3c23814

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0, Size: 16]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ItemGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString ItemValue;//[Offset: 0x8, Size: 16]
	FString ItemCategory;//[Offset: 0x18, Size: 16]
	int ItemWeight;//[Offset: 0x28, Size: 4]
	FString ItemPath;//[Offset: 0x30, Size: 16]
	int ItemStackCount;//[Offset: 0x40, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x48, Size: 16]
	int ItemTogetherStackCount;//[Offset: 0x58, Size: 4]
	int ItemTogetherCountMin;//[Offset: 0x5c, Size: 4]
	int ItemTogetherCountMax;//[Offset: 0x60, Size: 4]

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0, Size: 4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x2e0, Size: 8]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x2e8, Size: 16]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x2f8, Size: 16]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x3c29da4
	void RepeatSpots();// 0x3c29d90
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x3c29d14
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x3c29ba4
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x3c29a78
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x3c29960

--------------------------------
Class: DateTime

--------------------------------
Class: RepeatItemSpotData
	float RepeatGenerateCD;//[Offset: 0xb8, Size: 4]
	int64 LastGenerateItemTime;//[Offset: 0xc0, Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0xc8, Size: 80]

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0, Size: 4]
	class Object* ItemClass;//[Offset: 0x8, Size: 8]
	FString ItemPath;//[Offset: 0x10, Size: 16]
	int ItemCount;//[Offset: 0x20, Size: 4]
	FString MetaData;//[Offset: 0x28, Size: 16]
	FString ItemValue;//[Offset: 0x38, Size: 16]
	FString ItemCategory;//[Offset: 0x48, Size: 16]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool IsNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x5c, Size: 12]
	Vector SpotGroupLoc;//[Offset: 0x68, Size: 12]
	Rotator SpotRotator;//[Offset: 0x74, Size: 12]
	int SpotPercent;//[Offset: 0x80, Size: 4]
	FString SpotDefaultTag;//[Offset: 0x88, Size: 16]
	Actor* HostActor;//[Offset: 0xa0, Size: 8]
	Actor* AttachedActor;//[Offset: 0xa8, Size: 8]
	int SpotIndex;//[Offset: 0xc4, Size: 4]
	bool Random;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9, Size: 1]
	Vector RelativeLoc;//[Offset: 0xcc, Size: 12]

--------------------------------
Class: AreaItemsLimitEdit
	int AreaX;//[Offset: 0x0, Size: 4]
	int AreaY;//[Offset: 0x4, Size: 4]
	GenerateItemLimit[] ItemsMaxLimitEdit;//[Offset: 0x8, Size: 16]
	GenerateItemLimit[] ItemsMinLimitEdit;//[Offset: 0x18, Size: 16]

--------------------------------
Class: GenerateItemLimit
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AreaItemsLimit
	RegionID RegionID;//[Offset: 0x0, Size: 12]
	bool IsBeginGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool IsCheckRecoverItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	Vector[] AvailablePosi;//[Offset: 0x10, Size: 16]
	<int,AreaItemsNum> ItemsMaxLimit;//[Offset: 0x20, Size: 80]
	<int,AreaItemsNum> ItemsMinLimit;//[Offset: 0x70, Size: 80]

--------------------------------
Class: AreaItemsNum
	int LimitNum;//[Offset: 0x0, Size: 4]
	int CurNum;//[Offset: 0x4, Size: 4]
	FString WrapperPath;//[Offset: 0x8, Size: 16]

--------------------------------
Class: DynamicSpotConfig
	FString DynamicSpotPath;//[Offset: 0x0, Size: 16]
	CustomSpotConfig CustomSpotConfig;//[Offset: 0x10, Size: 16]
	SpotGroupProperty[] SpotGroupProperties;//[Offset: 0x20, Size: 16]

--------------------------------
Class: CustomSpotConfig
	bool bGroupNumCtrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int NeedGroupMin;//[Offset: 0x4, Size: 4]
	int NeedGroupMax;//[Offset: 0x8, Size: 4]
	bool bUseCookedRotator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: PrimeItemCircleConfig
	SpotGroupProperty[] PrimeItemCircleProperties;//[Offset: 0x0, Size: 16]

--------------------------------
Class: UAESpotGroupObject.Object
	Object* Host;//[Offset: 0x70, Size: 8]

--------------------------------
Class: DropGroundEffectInfo
	float GroundEffectLifeSpan;//[Offset: 0x0, Size: 4]
	Transform EffectTransform;//[Offset: 0x10, Size: 48]
	ParticleSystem* GroundEffect;//[Offset: 0x40, Size: 40]
	FString EffectPath;//[Offset: 0x68, Size: 16]
	bool bShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool bEffectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]

--------------------------------
Class: UAENetDriver.IpNetDriver.NetDriver.Object
	float NetCullChangeTime;//[Offset: 0x690, Size: 4]
	bool bEnableCollectNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	bool bEnableResetNetStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 1]

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e8, Size: 1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e8, Size: 1]
	uint32 MaxPortCountToTry;//[Offset: 0x5ec, Size: 4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x608, Size: 4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x60c, Size: 4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x610, Size: 4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x614, Size: 4]
	float RecreateSocketCooldownTime;//[Offset: 0x678, Size: 4]
	float RecreateSocketMaxTryCount;//[Offset: 0x67c, Size: 4]
	bool bResolveRemoteHostOnRecreateSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 1]
	bool bContinueProcessWhenReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x681, Size: 1]
	bool bContinueProcessWhenConReceiveEmptyPackets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x682, Size: 1]

--------------------------------
Class: AirDropBoxGenerateWrapperItemData
	class Actor* WrapperClass;//[Offset: 0x0, Size: 8]
	int Count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x2cc, Size: 4]
	Vector SocketOffset;//[Offset: 0x2d0, Size: 12]
	Vector TargetOffset;//[Offset: 0x2dc, Size: 12]
	float ProbeSize;//[Offset: 0x2e8, Size: 4]
	byte ProbeChannel;//[Offset: 0x2ec, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ed, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ed, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2ed, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2ed, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2ed, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2ed, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2ed, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2ed, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ee, Size: 1]
	float CameraLagSpeed;//[Offset: 0x2f0, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x2f4, Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x2f8, Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x2fc, Size: 4]
	void SetActive(bool bNewActive, bool bReset);// 0x5c79e84
	Rotator GetTargetRotation();// 0x5c79e44

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	STExtraAnimInstanceProxy Proxy;//[Offset: 0xa30, Size: 1360]
	bool CanDumpThisAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf80, Size: 1]
	Rotator OwnerAimRotation;//[Offset: 0xf84, Size: 12]
	Rotator C_SightAngledRotOffset;//[Offset: 0xf90, Size: 12]
	bool C_bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9c, Size: 1]
	bool C_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9d, Size: 1]
	bool C_SkillFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9e, Size: 1]
	bool C_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9f, Size: 1]
	bool C_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa0, Size: 1]
	bool C_ReloadProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa1, Size: 1]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa2, Size: 1]
	bool C_IsGrenadeModeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa3, Size: 1]
	bool C_IsWeaponBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa4, Size: 1]
	Rotator SwimRotate;//[Offset: 0xfa8, Size: 12]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb4, Size: 1]
	bool C_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb5, Size: 1]
	float C_SwimSpeed;//[Offset: 0xfb8, Size: 4]
	float C_ProneHandleAlpha;//[Offset: 0xfbc, Size: 4]
	bool C_IsLeanOutVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc0, Size: 1]
	float LeftHandShouldNotIKAlpha;//[Offset: 0xfc4, Size: 4]
	bool C_SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc8, Size: 1]
	bool C_IsCrouchingOrMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc9, Size: 1]
	byte C_SeatSpecialType;//[Offset: 0xfca, Size: 1]
	int WeaponReloadSlotIndex;//[Offset: 0xfcc, Size: 4]
	bool C_IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0, Size: 1]
	bool C_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd1, Size: 1]
	float NeckTurnUILeftAngle;//[Offset: 0xfd4, Size: 4]
	float NeckTurnUIRightAngle;//[Offset: 0xfd8, Size: 4]
	float NeckTurnUIUPAngle;//[Offset: 0xfdc, Size: 4]
	float NeckTurnUIDownAngle;//[Offset: 0xfe0, Size: 4]
	float NeckNotTurnAngle;//[Offset: 0xfe4, Size: 4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0xfe8, Size: 4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0xfec, Size: 4]
	float NeckMapAngleLeft;//[Offset: 0xff0, Size: 4]
	float NeckMapAngleRight;//[Offset: 0xff4, Size: 4]
	float NeckMapAngleUp;//[Offset: 0xff8, Size: 4]
	float NeckMapAngleDown;//[Offset: 0xffc, Size: 4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0x1000, Size: 4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0x1004, Size: 4]
	float NeckMapCrouchAngleLeft;//[Offset: 0x1008, Size: 4]
	float NeckMapCrouchAngleRight;//[Offset: 0x100c, Size: 4]
	float NeckMapCrouchAngleUp;//[Offset: 0x1010, Size: 4]
	float NeckMapCrouchAngleDown;//[Offset: 0x1014, Size: 4]
	float NeckTurnSpeed;//[Offset: 0x1018, Size: 4]
	enum C_ParachuteState;//[Offset: 0x101c, Size: 1]
	Rotator C_HeadRotOffset;//[Offset: 0x1020, Size: 12]
	Rotator DeltaViewOffset;//[Offset: 0x102c, Size: 12]
	bool C_UseFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1038, Size: 1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1039, Size: 1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103a, Size: 1]
	bool C_IsObstructedAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103b, Size: 1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103c, Size: 1]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103d, Size: 1]
	float C_HoldingShieldAlpha;//[Offset: 0x1040, Size: 4]
	float C_HoldingShieldAdditive;//[Offset: 0x1044, Size: 4]
	BlendSpace* C_ObstructedAnim;//[Offset: 0x1048, Size: 8]
	AnimSequence* C_ShieldAddtive;//[Offset: 0x1050, Size: 8]
	AnimMontage* C_RevivalMontage;//[Offset: 0x1058, Size: 8]
	BlendSpace* C_BSFreeFalling;//[Offset: 0x1060, Size: 8]
	BlendSpace* C_BSFreeFalling_Turn;//[Offset: 0x1068, Size: 8]
	AnimSequence* C_FreeFalling_Shake;//[Offset: 0x1070, Size: 8]
	BlendSpace* C_BSParachute;//[Offset: 0x1078, Size: 8]
	AnimSequence* C_ParachuteEnter;//[Offset: 0x1080, Size: 8]
	AnimSequence* C_ParachuteLand;//[Offset: 0x1088, Size: 8]
	AnimMontage* C_FreeFallingStartMontage;//[Offset: 0x1090, Size: 8]
	bool bIsHelicoptorDirver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1099, Size: 1]
	Vector C_MoveDirExt;//[Offset: 0x109c, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0x10a8, Size: 12]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0x10b4, Size: 12]
	Rotator r_C_ComponentRotationRelToControlRotation;//[Offset: 0x10c0, Size: 12]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cc, Size: 1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cd, Size: 1]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ce, Size: 1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10cf, Size: 1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d1, Size: 1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d2, Size: 1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d3, Size: 1]
	bool b_C_ParachuteState_FreeFallShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d4, Size: 1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d5, Size: 1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d6, Size: 1]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d7, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d8, Size: 1]
	bool b_C_LastMovementMode_NEQ_Falling_OR_HoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d9, Size: 1]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0x10dc, Size: 4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0x10e0, Size: 4]
	bool b_C_NotUseGeneralHeadAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e4, Size: 1]
	bool b_C_MoveVelocity_SightSlow_High;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e5, Size: 1]
	bool b_C_MoveVelocity_SightSlow_Low;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e6, Size: 1]
	bool b_C_DoingPickup_Or_DoingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e7, Size: 1]
	enum[] DisallowedEyeRotationWithHeadList;//[Offset: 0x10e8, Size: 16]
	float C_LeanOut_AimAngle;//[Offset: 0x10fc, Size: 4]
	float LeanOutL_AimAngle;//[Offset: 0x1104, Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0x1108, Size: 4]
	bool bIsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110c, Size: 1]
	bool bForcePlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1130, Size: 1]
	bool bEnableStanbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1132, Size: 1]
	bool bEnableArmedStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1133, Size: 1]
	float EnableArmedStandbyAnimPitchMin;//[Offset: 0x1134, Size: 4]
	float EnableArmedStandbyAnimPitchMax;//[Offset: 0x1138, Size: 4]
	float StandbyAnimTimeInterval;//[Offset: 0x113c, Size: 4]
	enum[] StandbyAnimPawnStateExclusion;//[Offset: 0x1140, Size: 16]
	int[] ColdGameModeIDList;//[Offset: 0x1150, Size: 16]
	enum[] StandbyGameModeType;//[Offset: 0x1160, Size: 16]
	bool bIsPlayRandomAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1170, Size: 1]
	AnimMontage* CurStandbyAnimMontage;//[Offset: 0x1180, Size: 8]
	STExtraBaseCharacter* C_AttachParentCharacter;//[Offset: 0x1188, Size: 8]
	Vector C_AttachParentPawnMoveVelocity;//[Offset: 0x1190, Size: 12]
	bool b_C_CarryBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119c, Size: 1]
	bool b_C_BeCarriedBackState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119d, Size: 1]
	float f_C_CarryBackBSTimeAccumulator;//[Offset: 0x11a0, Size: 4]
	void TryToFireFlareGun();// 0x3547094
	void TryPlayStandbyAnim();// 0x3547080
	bool ShouldDestoryParachuteAnimAsset();// 0x3547048
	void SetVelocityZFactor(float NewFactor);// 0x3546fcc
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x3546f0c
	void PostCacheParamList(float DeltaSeconds);// 0x4033584
	void PendingKillParachuteAnim(Object* InObject);// 0x3546e90
	void OnEmoteAnimFinished(int EmoteIndex, int StopReason);// 0x3546ddc
	void InterrupteStandbyAnim(STExtraBaseCharacter* SelfRef);// 0x3546d60
	void HandlePlayerPickUp();// 0x3546d44
	void HandlePerspectiveChanged(bool IsFPP);// 0x3546cc0
	FString[] GetAnimUngroupsEntry();// 0x3546b90
	FString[] GetAnimSyncGroupsEntry();// 0x3546a60
	void DumpAllProperties();// 0x3546a4c
	void DumpAllAnimInstancesInThisWorld();// 0x3546a38
	void ClearStandbyAnimState();// 0x3546a1c
	void ClearParachuteAnimVars();// 0x3546a08
	AnimParamList CacheParamList(float DeltaSeconds);// 0x35468b4
	void CacheParachuteAnimVars(bool bForceRefresh);// 0x3546830
	Object* CacheParachuteAnimVar_Internal(int ParachuteAnimType, class Object TargetClass);// 0x3546768
	PlayerAnimList CacheAnimVarList();// 0x3546638
	void AsyncAnimStandbyCallback(AnimationAsset* RetAsset);// 0x35465bc

--------------------------------
Class: STExtraAnimInstanceBase.STPawnAnimInstanceBase.AnimInstance.Object
	bool C_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 1]
	bool C_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48a, Size: 1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48b, Size: 1]
	bool C_Scoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]
	bool C_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 1]
	bool C_IsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e, Size: 1]
	bool C_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f, Size: 1]
	bool C_ShouldPlayTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool C_ShouldSlowMoveAnimX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	bool C_ShouldSlowMoveAnimY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 1]
	bool C_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493, Size: 1]
	bool C_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	bool C_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495, Size: 1]
	bool C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x496, Size: 1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x497, Size: 1]
	bool C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	bool C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 1]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a, Size: 1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49b, Size: 1]
	bool b_C_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 1]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49d, Size: 1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49e, Size: 1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49f, Size: 1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	bool C_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a1, Size: 1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a2, Size: 1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a3, Size: 1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4, Size: 1]
	bool C_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5, Size: 1]
	bool C_EnableForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a6, Size: 1]
	bool b_P_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a7, Size: 1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4aa, Size: 1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ab, Size: 1]
	bool C_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	bool C_ShouldIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad, Size: 1]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ae, Size: 1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4af, Size: 1]
	bool bWalkToJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	bool bJumpStartToWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 1]
	bool bFallingToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b2, Size: 1]
	byte C_LODLevel;//[Offset: 0x4b3, Size: 1]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0x4b4, Size: 4]
	float C_SightSlowBlendStandBaseAlpha;//[Offset: 0x4b8, Size: 4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x4c0, Size: 12]
	float MoveVelocityLength2D;//[Offset: 0x4cc, Size: 4]
	byte C_PoseType;//[Offset: 0x4d0, Size: 1]
	byte C_LastMovementMode;//[Offset: 0x4d1, Size: 1]
	byte C_CustomMovementMode;//[Offset: 0x4d2, Size: 1]
	byte C_WeaponType;//[Offset: 0x4d3, Size: 1]
	byte C_WeaponHoldType;//[Offset: 0x4d4, Size: 1]
	byte C_WeaponState;//[Offset: 0x4d5, Size: 1]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d6, Size: 1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x4d8, Size: 4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	bool b_C_WeaponState_EQ_PreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dd, Size: 1]
	bool C_IsReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4de, Size: 1]
	bool C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4df, Size: 1]
	enum C_VehicleType;//[Offset: 0x4e0, Size: 1]
	bool C_IsShoudlerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1, Size: 1]
	float C_IsReloadAnimAdditive_Alpha;//[Offset: 0x4e4, Size: 4]
	float C_CharacterYawRotateRate;//[Offset: 0x4e8, Size: 4]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0x4ec, Size: 4]
	float C_MaxFallingSpeed;//[Offset: 0x4f0, Size: 4]
	float C_FireAlpha;//[Offset: 0x4f4, Size: 4]
	float b_WalkAdditiveAlpha;//[Offset: 0x4f8, Size: 4]
	float f_FallingVelocityZFactor;//[Offset: 0x4fc, Size: 4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0x500, Size: 4]
	float PeekFrameRate;//[Offset: 0x504, Size: 4]
	float PeekSpeed;//[Offset: 0x508, Size: 4]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x50c, Size: 4]
	float C_ForegripAnimParam;//[Offset: 0x510, Size: 4]
	float C_HandleFolderFactor;//[Offset: 0x514, Size: 4]
	float C_HandleFolderAlphaLerp;//[Offset: 0x518, Size: 4]
	float C_HandleFolderAlphaTarget;//[Offset: 0x51c, Size: 4]
	float C_HandleFolderAlphaSpeed;//[Offset: 0x520, Size: 4]
	float MoveDirParachuteLerpSpeed;//[Offset: 0x524, Size: 4]
	float MoveDirNormalLerpSpeed;//[Offset: 0x528, Size: 4]
	float ScopeVelocityInterpSpeed;//[Offset: 0x52c, Size: 4]
	Transform C_Foot_R_Target_Transform;//[Offset: 0x530, Size: 48]
	Transform C_Foot_L_Target_Transform;//[Offset: 0x560, Size: 48]
	Transform C_Hand_R_Target_Transform;//[Offset: 0x590, Size: 48]
	Transform C_Hand_L_Target_Transform;//[Offset: 0x5c0, Size: 48]
	float PedalRotateSpeed;//[Offset: 0x5f0, Size: 4]
	Vector C_MoveVelocity;//[Offset: 0x5f8, Size: 12]
	Vector C_MoveInputVelocity;//[Offset: 0x604, Size: 12]
	Vector C_MoveInputVelocityUnit;//[Offset: 0x610, Size: 12]
	Vector C_MoveDir;//[Offset: 0x61c, Size: 12]
	Vector C_HurtDir;//[Offset: 0x628, Size: 12]
	Vector C_FirstAnimSpine_StandAndCrouch;//[Offset: 0x634, Size: 12]
	Vector C_FirstAnimSpine_Prone;//[Offset: 0x640, Size: 12]
	Vector C_FPPStandOffsetLocation;//[Offset: 0x64c, Size: 12]
	Vector ScopeAimSpine03TranslationModify;//[Offset: 0x658, Size: 12]
	Rotator ScopeAimSpine03RotationModifiy;//[Offset: 0x664, Size: 12]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0x670, Size: 12]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0x67c, Size: 12]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0x688, Size: 12]
	Rotator C_OwnerRotation;//[Offset: 0x694, Size: 12]
	Rotator C_ControlRotation;//[Offset: 0x6a0, Size: 12]
	Rotator C_LastControlRotation;//[Offset: 0x6ac, Size: 12]
	Rotator C_ViewRotation;//[Offset: 0x6b8, Size: 12]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0x6c4, Size: 12]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0x6d0, Size: 12]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0x6dc, Size: 12]
	Rotator RecoilADSRotation_CP;//[Offset: 0x6e8, Size: 12]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0x6f4, Size: 12]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0x700, Size: 12]
	Vector C_FPPProneOffsetLocation;//[Offset: 0x70c, Size: 12]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0x718, Size: 12]
	CurveFloat* C_FallingIKCurve;//[Offset: 0x728, Size: 8]
	Rotator OwnerRotation;//[Offset: 0x730, Size: 12]
	bool Shoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c, Size: 1]
	Rotator ShovelingRotation;//[Offset: 0x740, Size: 12]
	float ShovelingRotationoffset;//[Offset: 0x74c, Size: 4]
	Rotator UpShovelingRotationAdd;//[Offset: 0x750, Size: 12]
	Rotator FloorRotation;//[Offset: 0x75c, Size: 12]
	float FloorRotationPitchSpeed;//[Offset: 0x768, Size: 4]
	byte Role;//[Offset: 0x76c, Size: 1]
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76d, Size: 1]
	bool ShovelingToCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76e, Size: 1]
	bool ShovelMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76f, Size: 1]
	bool ShovelGenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	bool b_C_SlideFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 1]
	bool C_ClimbAnimSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x772, Size: 1]
	float C_ClimbAnimTransTime;//[Offset: 0x774, Size: 4]
	float C_ClimbAnimTime_A;//[Offset: 0x778, Size: 4]
	float C_ClimbAnimTime_B;//[Offset: 0x77c, Size: 4]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0x780, Size: 8]
	BlendSpace* C_MovementBSCache_Stand;//[Offset: 0x788, Size: 8]
	BlendSpace* C_MovementBSCache_Crouch;//[Offset: 0x790, Size: 8]
	BlendSpace* C_MovementBSCache_Prone;//[Offset: 0x798, Size: 8]
	AnimSequence* C_SwitchPose_Stand_To_Crouch;//[Offset: 0x7a0, Size: 8]
	AnimSequence* C_SwitchPose_Stand_To_Prone;//[Offset: 0x7a8, Size: 8]
	AnimSequence* C_SwitchPose_Crouch_To_Stand;//[Offset: 0x7b0, Size: 8]
	AnimSequence* C_SwitchPose_Crouch_To_Prone;//[Offset: 0x7b8, Size: 8]
	AnimSequence* C_SwitchPose_Prone_To_Stand;//[Offset: 0x7c0, Size: 8]
	AnimSequence* C_SwitchPose_Prone_To_Crouch;//[Offset: 0x7c8, Size: 8]
	BlendSpace* C_MovementBSCache_Stand_Dest;//[Offset: 0x7d0, Size: 8]
	BlendSpace* C_MovementBSCache_Crouch_Dest;//[Offset: 0x7d8, Size: 8]
	BlendSpace* C_MovementBSCache_Prone_Dest;//[Offset: 0x7e0, Size: 8]
	<FName,float> C_MovementBS_Stand_SourceTransTime;//[Offset: 0x7e8, Size: 80]
	<FName,float> C_MovementBS_Stand_DestTransTime;//[Offset: 0x838, Size: 80]
	AnimSequence* C_SwitchPose_Stand_To_Crouch_Dest;//[Offset: 0x888, Size: 8]
	AnimSequence* C_SwitchPose_Stand_To_Prone_Dest;//[Offset: 0x890, Size: 8]
	AnimSequence* C_SwitchPose_Crouch_To_Stand_Dest;//[Offset: 0x898, Size: 8]
	AnimSequence* C_SwitchPose_Crouch_To_Prone_Dest;//[Offset: 0x8a0, Size: 8]
	AnimSequence* C_SwitchPose_Prone_To_Stand_Dest;//[Offset: 0x8a8, Size: 8]
	AnimSequence* C_SwitchPose_Prone_To_Crouch_Dest;//[Offset: 0x8b0, Size: 8]
	float StandSwitchToPronePoseAnimDuration;//[Offset: 0x8b8, Size: 4]
	float StandSwitchFromPronePoseAnimDuration;//[Offset: 0x8bc, Size: 4]
	float CrouchSwitchToPronePoseAnimDuration;//[Offset: 0x8c0, Size: 4]
	float CrouchSwitchFromPronePoseAnimDuration;//[Offset: 0x8c4, Size: 4]
	float StandSwitchToPronePoseAnimDelay;//[Offset: 0x8c8, Size: 4]
	float StandSwitchFromPronePoseAnimDelay;//[Offset: 0x8cc, Size: 4]
	float CrouchSwitchToPronePoseAnimDelay;//[Offset: 0x8d0, Size: 4]
	float CrouchSwitchFromPronePoseAnimDelay;//[Offset: 0x8d4, Size: 4]
	float SwitchingPoseTimer;//[Offset: 0x8d8, Size: 4]
	float SwitchingPoseTimerInternal;//[Offset: 0x8dc, Size: 4]
	byte C_InterruptCachePose;//[Offset: 0x8e0, Size: 1]
	bool C_UseInterruptPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e1, Size: 1]
	float InterruptPoseInternal;//[Offset: 0x8e4, Size: 4]
	bool C_IsSwitchingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 1]
	byte C_RecoverCharPose;//[Offset: 0x8e9, Size: 1]
	float SwitchPoseTransTime;//[Offset: 0x8f4, Size: 4]
	bool C_IsPlayMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 1]
	bool C_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f9, Size: 1]
	bool b_C_MoveVelocity_Turning_NotScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x908, Size: 1]
	AnimSequence* C_IdleAddtive;//[Offset: 0x910, Size: 8]
	AnimSequence* C_ShoulderIdleAddtive;//[Offset: 0x918, Size: 8]
	BlendSpace1D* C_FallingBS;//[Offset: 0x920, Size: 8]
	AnimSequence* C_JumpStart;//[Offset: 0x928, Size: 8]
	AnimSequence* C_LandLight;//[Offset: 0x930, Size: 8]
	AnimSequence* C_LandHeavy;//[Offset: 0x938, Size: 8]
	BlendSpace1D* MovementUpBodyOverride;//[Offset: 0x940, Size: 8]
	BlendSpace* MovementLowerBodyOverride;//[Offset: 0x948, Size: 8]
	AnimSequence* C_TurnAnim;//[Offset: 0x950, Size: 8]
	AnimSequence* C_StandScopeBlendAnim;//[Offset: 0x958, Size: 8]
	AnimSequence* C_CrouchScopeBlendAnim;//[Offset: 0x960, Size: 8]
	BlendSpace* C_HitBlendSpace;//[Offset: 0x968, Size: 8]
	BlendSpace1D* C_PeekAnim;//[Offset: 0x970, Size: 8]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0x978, Size: 8]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0x980, Size: 8]
	AnimMontage* C_MontageRescue;//[Offset: 0x988, Size: 8]
	AnimMontage* C_MontageDead;//[Offset: 0x990, Size: 8]
	AnimMontage* C_MontageDead_Stand;//[Offset: 0x998, Size: 8]
	AnimMontage* C_MontageDead_Crouch;//[Offset: 0x9a0, Size: 8]
	AnimMontage* C_MontageDead_Prone;//[Offset: 0x9a8, Size: 8]
	AnimSequence* C_ShovelPhaseEnter;//[Offset: 0x9b0, Size: 8]
	AnimSequence* C_ShovePhaseShoveling;//[Offset: 0x9b8, Size: 8]
	AnimSequence* C_ShovelPhaseLeave;//[Offset: 0x9c0, Size: 8]
	AnimSequence* C_Climb_FrameAnim_A;//[Offset: 0x9c8, Size: 8]
	AnimSequence* C_Climb_FrameAnim_B;//[Offset: 0x9d0, Size: 8]
	enum AnimInstanceType;//[Offset: 0x9d8, Size: 1]
	bool MovementUpBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d9, Size: 1]
	float MovementUpBodyBlentWeight;//[Offset: 0x9dc, Size: 4]
	bool MovementLowerBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 1]
	float MovementLowerBodyBlentWeight;//[Offset: 0x9e4, Size: 4]
	bool C_bSkeletonMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8, Size: 1]
	class AnimInstance* VehicleBikeABP;//[Offset: 0x9f0, Size: 8]
	class AnimInstance* VehicleAnimDefaultABP;//[Offset: 0x9f8, Size: 8]
	AnimInstanceContainer* VehicleAnimContainer;//[Offset: 0xa00, Size: 8]
	bool bEnableVehicleAnimContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa08, Size: 1]
	byte LastPoseTypeCache;//[Offset: 0xa09, Size: 1]
	int ForceLODLevel;//[Offset: 0xa18, Size: 4]
	void SwitchingPoseFinishCallback();// 0x354974c
	void SetInterruptPose(bool bUseInterrupPose, byte InterruptPose);// 0x3549684
	void SetClimbAnimation(AnimSequence* AnimSequence, bool bFlag);// 0x35495c4
	void RefreshPeekState();// 0x35495b0
	void PlaySwitchWeaponAnimation(bool bWantsEquip);// 0x354952c
	void PlayPostReloadWeaponAnimation();// 0x3549518
	void PlayPostFillGasWeaponAnimation();// 0x3549504
	void PlayPlayerDeadAnimation();// 0x35494f0
	void PlayAnimationByEventType(byte Type, float SpeedScale);// 0x3549438
	void OnRespawned_BP();// 0x354941c
	void OnRecycled_BP();// 0x3549400
	bool IsAssetSkeletonMatch(AnimationAsset* CheckAnimAsset, SkeletalMeshComponent* MeshComp);// 0x3549338
	void HandlePlayerWeaponStateChanged(byte NewState);// 0x35492b4
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x35491f4
	void HandlePlayerPickUp();// 0x35491d8
	void HandlePlayerEnterRescueState(bool bBeginRescueing);// 0x354914c
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x4033584
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x3548fc8
	void HandleOwnerAnimEvent(FName EventMsg);// 0x3548f44
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x3548dc4
	byte GetRole();// 0x3548d90
	void FillShovelAnimation(out const PlayerAnimList AnimList);// 0x3548bf4
	void EnableAnimFlag(enum PlayFlag);// 0x3548b78
	void DisableAnimFlag(enum PlayFlag);// 0x3548afc
	void ClearStandbyAnimState();// 0x3548ae0

--------------------------------
Class: STPawnAnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x470, Size: 8]
	FString LuaFilePath;//[Offset: 0x478, Size: 16]
	void OnNotifyMontagePlayingEvent_BluePrint(FName NotifyName);// 0x4033584
	void OnNotifyMontagePlayingEvent(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointPayload);// 0x3662dc0
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, float StartPos);// 0x3662c3c
	void HandleOwnerAnimEvent(FName EventMsg);// 0x3662bb8
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float blendTime);// 0x3662a38

--------------------------------
Class: STExtraAnimInstanceProxy.AnimInstanceProxy
	STExtraBaseCharacter* OwnerPawn;//[Offset: 0x528, Size: 8]
	STExtraAnimInstanceBase* ParentAnimInst;//[Offset: 0x530, Size: 8]

--------------------------------
Class: AnimInstanceProxy
	AnimInstance*[] SubAnimInstances;//[Offset: 0x518, Size: 16]

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x140, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	float AnimLength;//[Offset: 0x84, Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x88, Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa0, Size: 4]
	byte NotifyTriggerMode;//[Offset: 0xa4, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xa8, Size: 16]
	int SampleIndexWithMarkers;//[Offset: 0xb8, Size: 4]
	BlendSample[] SampleData;//[Offset: 0xc0, Size: 16]
	EditorElement[] GridSamples;//[Offset: 0xd0, Size: 16]
	BlendParameter BlendParameters;//[Offset: 0xe0, Size: 32]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 4]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 8]
	Vector SampleValue;//[Offset: 0x8, Size: 12]
	float RateScale;//[Offset: 0x14, Size: 4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 4]
	float Weights;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 16]
	float Min;//[Offset: 0x10, Size: 4]
	float Max;//[Offset: 0x14, Size: 4]
	int GridNum;//[Offset: 0x18, Size: 4]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: AnimInstanceContainer.Object
	AnimInstance* SetTargetAnimInstance(class AnimInstance InstanceClass);// 0x5ad8194
	bool RemoveCacheAnimInstance(class AnimInstance InstanceClass);// 0x5ad8104
	void ClearCacheAnimInstance();// 0x5ad80f0
	bool AddCacheAnimInstance(class AnimInstance InstanceClass);// 0x5ad8060

--------------------------------
Class: PlayerAnimList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	PlayerAnimData MovementAnim;//[Offset: 0x8, Size: 16]
	PlayerAnimData AimAnim;//[Offset: 0x18, Size: 16]
	PlayerAnimData ReloadAnim;//[Offset: 0x28, Size: 16]
	PlayerAnimData FillGasAnim;//[Offset: 0x38, Size: 16]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x48, Size: 16]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x58, Size: 16]
	PlayerAnimData PickUpAnim;//[Offset: 0x68, Size: 16]
	PlayerAnimData FireAnim;//[Offset: 0x78, Size: 16]
	PlayerAnimData HurtAnim;//[Offset: 0x88, Size: 16]
	PlayerAnimData TurnAnim;//[Offset: 0x98, Size: 16]
	PlayerAnimData PullingPlugAnim;//[Offset: 0xa8, Size: 16]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0xb8, Size: 16]
	PlayerAnimData WeaponIdle;//[Offset: 0xc8, Size: 16]
	PlayerAnimData ForegripAnim;//[Offset: 0xd8, Size: 16]
	PlayerAnimData ShoudlerWeaponIdle;//[Offset: 0xe8, Size: 16]
	PlayerAnimData BeCarriedBackMoveAnim;//[Offset: 0xf8, Size: 16]
	PlayerAnimData BeCarriedBackPickUpAnim;//[Offset: 0x108, Size: 16]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x118, Size: 16]
	PlayerAnimData[] ShovelAnimList;//[Offset: 0x128, Size: 16]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0x138, Size: 16]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 8]
	float Rate;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AnimParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	Vector Velocity;//[Offset: 0x4, Size: 12]
	Vector movedir;//[Offset: 0x10, Size: 12]
	byte MovementMode;//[Offset: 0x1c, Size: 1]
	byte CustomMovementMode;//[Offset: 0x1d, Size: 1]
	byte PoseType;//[Offset: 0x1e, Size: 1]
	Rotator ViewRotation;//[Offset: 0x20, Size: 12]
	Rotator ControlRotation;//[Offset: 0x2c, Size: 12]
	byte WeaponType;//[Offset: 0x38, Size: 1]
	byte WeaponHoldType;//[Offset: 0x39, Size: 1]
	byte WeaponState;//[Offset: 0x3a, Size: 1]
	byte WeaponReloadMethod;//[Offset: 0x3b, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	byte SightType;//[Offset: 0x3d, Size: 1]
	float RecoilKickADS;//[Offset: 0x40, Size: 4]
	float ForegripParam;//[Offset: 0x44, Size: 4]
	Vector OffsetFPPLocation;//[Offset: 0x4c, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x58, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88, Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94, Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0, Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac, Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8, Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4, Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0, Size: 12]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	Vector HurtDir;//[Offset: 0xe4, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	byte JumpType;//[Offset: 0xf2, Size: 1]
	enum ParachuteState;//[Offset: 0xf3, Size: 1]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	bool bFreeFallingShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7, Size: 1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	float HandleFolderFactor;//[Offset: 0xfc, Size: 4]
	float CharacterYawRotateRate;//[Offset: 0x100, Size: 4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool bCarryBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	float CarryBlendTimeAccumulator;//[Offset: 0x108, Size: 4]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x30, Size: 16]

--------------------------------
Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 8]
	AkAudioEvent* EventStart;//[Offset: 0x8, Size: 8]
	AkAudioEvent* EventStop;//[Offset: 0x10, Size: 8]

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x58, Size: 8]

--------------------------------
Class: STExtraVehicleSfxLoopBase
	AkComponent* AkComp;//[Offset: 0x0, Size: 8]
	<uint32,float> MapRTPC;//[Offset: 0x8, Size: 80]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x2d0, Size: 8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x2d8, Size: 16]
	int EarlyReflectionOrder;//[Offset: 0x2e8, Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x2ec, Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x2f0, Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f8, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f8, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9, Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fa, Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fa, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x2fc, Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x300, Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x308, Size: 8]
	FString EventName;//[Offset: 0x310, Size: 16]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x669bad0
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x669b7e4
	void StopPlayingID(int StopEventID);// 0x669b768
	void Stop();// 0x669b754
	int SetSwitch(FString SwitchGroup, FString SwitchState);// 0x669b53c
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x669b4b8
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x669b348
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x669b19c
	void SetOutputBusVolume(float BusVolume);// 0x669b120
	void SetListeners(out const AkComponent*[] Listeners);// 0x669b068
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x669afec
	void SetAutoDestroy(bool in_AutoDestroy);// 0x669af6c
	void SetAttenuationScalingFactor(float Value);// 0x669aef0
	int SeekOnEvent(FString in_EventName, int in_iPosition);// 0x669adf8
	void PostTrigger(FString Trigger);// 0x669acc4
	int PostAssociatedAkEvent();// 0x669ac90
	int PostAkEventByName(FString in_EventName);// 0x669abd8
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x669aae0
	float GetAttenuationRadius();// 0x669aaac

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 8]

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x58, Size: 8]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x60, Size: 8]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0, Size: 1]
	int8 ThrottleInput;//[Offset: 0x1, Size: 1]
	int8 BrakeInput;//[Offset: 0x2, Size: 1]
	int8 HandbrakeInput;//[Offset: 0x3, Size: 1]
	int8 CurrentGear;//[Offset: 0x4, Size: 1]
	int Flag;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModePlayerAliasShowInfo
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x0, Size: 72]
	FString PlayerName;//[Offset: 0x48, Size: 16]
	STExtraBaseCharacter* Character;//[Offset: 0x58, Size: 8]

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0, Size: 4]
	Vector BoxLocation;//[Offset: 0x4, Size: 12]
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 8]

--------------------------------
Class: BuildMaterialData
	int MatID;//[Offset: 0x0, Size: 4]
	int MatCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x3c8, Size: 8]
	int DecalId;//[Offset: 0x3d0, Size: 4]
	int TeamID;//[Offset: 0x3d4, Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x3e0, Size: 128]
	STExtraPlayerState* OwnerPS;//[Offset: 0x460, Size: 8]
	STExtraVehicleBase* Vehicle;//[Offset: 0x468, Size: 8]
	AkComponent* AkComponent;//[Offset: 0x470, Size: 8]
	int PostEventID;//[Offset: 0x478, Size: 4]
	void RemoveSelfByParent();// 0x33dc198
	void OnRep_DecalInfo();// 0x33dc184
	void OnDamageableActorDestroyed(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x33dc0c4

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform Transform;//[Offset: 0x10, Size: 48]
	enum ParentType;//[Offset: 0x5d, Size: 1]
	PrimitiveComponent* Parent;//[Offset: 0x60, Size: 8]

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0, Size: 16]
	FString PlayerOpenID;//[Offset: 0x10, Size: 16]
	FString PicUrl;//[Offset: 0x20, Size: 16]
	int TeamID;//[Offset: 0x30, Size: 4]
	FString TeamName;//[Offset: 0x38, Size: 16]
	uint64 UId;//[Offset: 0x48, Size: 8]
	uint32 PlayerKey;//[Offset: 0x50, Size: 4]

--------------------------------
Class: CharacterBuffRecord
	int BuffID;//[Offset: 0x0, Size: 4]
	int CauseSkillID;//[Offset: 0x4, Size: 4]
	int LayerCount;//[Offset: 0x8, Size: 4]
	Actor* Causer;//[Offset: 0xc, Size: 8]

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0, Size: 1]
	int TypeId;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	Rotator Rotation;//[Offset: 0x14, Size: 12]
	int InstanceID;//[Offset: 0x20, Size: 4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x28, Size: 32]
	enum MapAdded;//[Offset: 0x48, Size: 1]
	int ActorUniqueID;//[Offset: 0x4c, Size: 4]
	Actor* Actor;//[Offset: 0x50, Size: 8]
	bool bIsLuaConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	Property*[] DeltaProperties;//[Offset: 0x60, Size: 16]

--------------------------------
Class: CustomMarkEventData
	float CreateTime;//[Offset: 0x0, Size: 4]
	int CustomState;//[Offset: 0x4, Size: 4]
	FString CustomString;//[Offset: 0x8, Size: 16]
	enum InWhichMap;//[Offset: 0x18, Size: 1]
	int CustomCanvasTag;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: TeamateStateUAVChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	uint32 View;//[Offset: 0xc, Size: 4]
	byte Roll;//[Offset: 0x10, Size: 1]
	byte uavType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: BackpackComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0x180, Size: 16]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x190, Size: 16]
	delegate SingleItemDeleteDelegate;//[Offset: 0x1a0, Size: 16]
	delegate CapacityUpdatedDelegate;//[Offset: 0x1b0, Size: 16]
	delegate ItemOperationDelegate;//[Offset: 0x1c0, Size: 16]
	delegate ItemOperationInfoDelegate;//[Offset: 0x1d0, Size: 16]
	delegate AssociationOperationDelegate;//[Offset: 0x1e0, Size: 16]
	delegate ItemOperCountDelegate;//[Offset: 0x1f0, Size: 16]
	delegate ItemOperationFailedDelegate;//[Offset: 0x200, Size: 16]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x210, Size: 16]
	delegate ItemHandleAddDelegate;//[Offset: 0x220, Size: 16]
	<int,int> PickupLimitSetting;//[Offset: 0x230, Size: 80]
	delegate ItemUpdatedDelegate;//[Offset: 0x280, Size: 16]
	delegate ItemRemovedDelegate;//[Offset: 0x290, Size: 16]
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0x2a0, Size: 16]
	BattleItemPickupAfterLand[] BattleItemPickupAfterLandList;//[Offset: 0x2b0, Size: 16]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x2c0, Size: 16]
	IncNetArray ItemListNet;//[Offset: 0x2e0, Size: 32]
	BattleItemData[] CachItemList;//[Offset: 0x300, Size: 16]
	IncNetArray ItemListNetCache;//[Offset: 0x310, Size: 32]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x338, Size: 16]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x348, Size: 80]
	int CapacityThreshold;//[Offset: 0x398, Size: 4]
	float Capacity;//[Offset: 0x39c, Size: 4]
	float OccupiedCapacity;//[Offset: 0x3a0, Size: 4]
	float SafetyBoxCapacity;//[Offset: 0x3a4, Size: 4]
	float SafetyBoxOccupiedCapacity;//[Offset: 0x3a8, Size: 4]
	int virtualitemid;//[Offset: 0x3c4, Size: 4]
	delegate ZombieModeSkillPropLevelChangedDelegate;//[Offset: 0x3d0, Size: 16]
	delegate ZombieModeSkillPropCDDelegate;//[Offset: 0x3e0, Size: 16]
	bool IsForbidAutoEquipAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	int[] NeedToShowTypeList;//[Offset: 0x400, Size: 16]
	bool bVerifyWeaponPackageData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	bool bShowBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 1]
	delegate BackpackShowBountyDelegate;//[Offset: 0x418, Size: 16]
	FString LuaFilePath;//[Offset: 0x428, Size: 16]
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x3bfc390
	float UpdateCapacity();// 0x3bfc354
	void UnlockUpdateItemListReceive();// 0x3bfc340
	void UnequipItem(ItemDefineID DefineID);// 0x3bfc2b4
	void TryMergeItemHandles(ItemDefineID DefineID, enum InItemStoreArea);// 0x3bfc1ec
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x3bfc0cc
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x3bfbfd8
	void ServerSetShowBounty(bool bInShowBounty);// 0x3bfbf14
	void ServerSetCustomAccessories(int WeaponItemID, int Index, int ItemId);// 0x3bfbdec
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x3bfbcc4
	int ReturnItem(ItemDefineID DefineID, int Count, bool bCallHandlePickup);// 0x3bfbba4
	bool RemoveItemHandle(ItemDefineID DefineID);// 0x3bfbafc
	void ReceiveItemList();// 0x3bfbae0
	void ReceiveCapacity();// 0x3bfbac4
	bool PickupItemFromWrapperDetail(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x3bfb7e4
	bool PickUpItem_Default(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x3bfb540
	bool PickupItem(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x3bfb260
	void PickupBattleItemOnPlane();// 0x3bfb24c
	bool PickItem_IntoSafetyBox(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x3bfafa8
	bool PickItem_IntoBackpack(ItemDefineID DefineID, BattleItemPickupInfo pickupInfo, enum Reason);// 0x3bfad04
	void OnRep_specialCountLimit();// 0x3bfacf0
	void OnRep_ItemListNet();// 0x3bfacdc
	void OnRep_ItemList();// 0x3bfacc8
	void OnRep_Capacity();// 0x3bfacb4
	void NotifyItemUpdated(ItemDefineID DefineID);// 0x3bfac20
	void NotifyItemRemoved(ItemDefineID DefineID);// 0x3bfab8c
	void NotifyItemListUpdated();// 0x3bfab70
	void NotifyCapacityUpdated();// 0x3bfab54
	BattleItemHandleBase* NewItemHandle(ItemDefineID DefineID);// 0x3bfaab0
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x3bfa9f0
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int Count);// 0x3bfa938
	void ModifyAutoPickClipType(int InAutoPickClipType);// 0x3bfa888
	void ModifyAimNotAutoUse(bool bAdd);// 0x3bfa7c4
	void LockUpdateItemListReceive();// 0x3bfa7b0
	BattleItemData ItemNet2Data(out const NetArrayUnit netItem);// 0x3bfa628
	bool IsNeedToShowInBackpack(int TypeDefineID);// 0x3bfa598
	bool IsItemExist(out const ItemDefineID DefineID);// 0x3bfa4ec
	bool IsEnableWeaponAttachmentBindToWeapon();// 0x3bfa4ac
	bool IsCustomIgnoreAccessories(int WeaponId, int Index);// 0x3bfa3e4
	bool IsCustomAccessories(int WeaponId, int ItemId);// 0x3bfa31c
	bool IsAutoUse(int ItemId);// 0x4033584
	bool HasUnEquipItemByDefindIdRange(int LowValue, int HighValue);// 0x3bfa254
	bool HasTagSub(int ItemId, out const FName TagName);// 0x4033584
	bool HasItemBySubType(int SubType);// 0x3bfa1c4
	bool HasItemByDefineID(ItemDefineID DefineID);// 0x3bfa124
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x3bfa05c
	void HandleDropInDisuse(out const ItemDefineID DefineID, BattleItemHandleBase* ItemHandle, enum Reason, float OccupiedCapacityBeforeDisuse);// 0x3bf9f04
	World* GetWorld_BP();// 0x3bf9ed0
	int GetUnEquipItemNumByItemId(int ItemId);// 0x3bf9e44
	SpecialPickInfo GetSpecialItemNow(ItemDefineID DefineID);// 0x3bf9da4
	SpecialPickInfo GetSpecialItemBefore(int ItemResId);// 0x3bf9d14
	BattleItemData GetLeastElectrictyBattleItemData(ItemDefineID DefineID, FString AdditionalDataName);// 0x3bf9b64
	int GetItemSubType(int ItemId);// 0x4033584
	BattleItemData[] GetItemListByDefineID(ItemDefineID DefineID);// 0x3bf99f4
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x3bf99b4
	ItemHandleBase*[] GetItemHandleList();// 0x3bf9928
	int GetItemCountByType(int InItemType);// 0x3bf989c
	int GetItemCountByItemSpecialID(int InItemSpecialID);// 0x3bf9810
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x3bf974c
	float GetItemAssociateWeights(BattleItemData InItemData);// 0x3bf967c
	BattleItemData GetFirstItemBySubType(int SubType);// 0x3bf95c8
	BattleItemData GetFirstItemByDefineIDIgnoreInstance(ItemDefineID DefineID);// 0x3bf9504
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x3bf9448
	BattleItemData[] GetAllItemList(enum InItemStoreArea);// 0x3bf92e8
	enum GetAIPickupType(int ItemId);// 0x3bf9254
	void ForceNetUpdate();// 0x3bf9238
	void EquipItem(ItemDefineID DefineID);// 0x3bf91ac
	bool DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x3bf908c
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x3bf8fa8
	BattleItemHandleBase* CreateItemHandleInternal(ItemDefineID DefineID);// 0x3bf8f04
	ItemHandleBase* CreateItemHandle(ItemDefineID DefineID);// 0x3bf8e60
	int ConsumeItem(ItemDefineID DefineID, int Count);// 0x3bf8d88
	void ClientUpdateSingleItem(const ItemDefineID DefineID);// 0x3bf8d00
	void ClientUpdateItemData(const BattleItemData InItemData);// 0x3bf8c5c
	void ClientRemoveItemData(const BattleItemData InItemData);// 0x3bf8bb8
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x3bf8aac
	void ClientBroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x3bf89a0
	int CheckSpecialMaxCountForItem(ItemDefineID DefineID, int Count);// 0x3bf88c8
	bool CheckSkillPropItemCanBePickup(BackpackComponent* BackpackComp, ItemDefineID DefineID);// 0x3bf87e0
	bool CheckPickUpItemDefaultSuccess(out const ItemDefineID DefineID, bool bPickupSucc, bool bAutoEquip);// 0x3bf86a0
	int CheckLeftLimitCountForItem(int InItemID, int InCount);// 0x3bf85d4
	void CheckItemEmptyInBackpack(int InItemID);// 0x3bf8558
	int CheckCapacityForItem(ItemDefineID DefineID, int Count, enum InItemStoreArea);// 0x3bf8444
	bool ChangeItemStoreArea(ItemDefineID DefineID, int InItemNum, enum InItemStoreArea);// 0x3bf8324
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x3bf827c
	bool CacheItemAssociationBeforeDisuse(ItemDefineID DefineID, enum Reason);// 0x3bf8198
	void BroadcastItemOperCountDelegate(ItemDefineID DefineID, enum OperationType, int Count);// 0x3bf8094
	void BroadcastItemOperationInfoDelegate(out const ItemOperationInfo ItemOperationInfo);// 0x3bf7ff8
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x3bf7ef4
	void BroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x3bf7df0
	bool AddItemHandle(ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x3bf7d0c
	void AddBattleItemPickupOnPlane(out ItemDefineID DefineID, out BattleItemPickupInfo pickupInfo, enum Reason, enum BattleItemClientPickupType);// 0x3bf7aac

--------------------------------
Class: CustomAccessoriesData
	int WeaponId;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int ItemId;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleItemPickupAfterLand
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	BattleItemPickupInfo pickupInfo;//[Offset: 0x18, Size: 88]
	enum Reason;//[Offset: 0x70, Size: 1]
	enum BattleItemClientPickupType;//[Offset: 0x71, Size: 1]

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] incArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0, Size: 72]
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	enum ItemStoreArea;//[Offset: 0x1d, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20, Size: 16]
	ItemAssociation[] Associations;//[Offset: 0x30, Size: 16]
	int Durability;//[Offset: 0x40, Size: 4]

--------------------------------
Class: ItemOperationInfo
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum BattleItemOperationType;//[Offset: 0x18, Size: 1]
	byte Reason;//[Offset: 0x19, Size: 1]
	int Count;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	float CheckDoorDistanceSqr;//[Offset: 0x110, Size: 4]
	PUBGDoor* TriggeredDoor;//[Offset: 0x118, Size: 8]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0x120, Size: 8]
	void SetAutoOpenDoorMode(int Mode);// 0x331ec10
	void SetAutoOpenDoorEnable(bool bEnable);// 0x331eb8c
	void RPC_Server_DoorState(PUBGDoor* actionDoor, int ClientDoorState);// 0x331ea9c
	void RPC_Client_DoorState(PUBGDoor* actionDoor, int DoorState);// 0x331e9ac
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x331e91c
	PUBGDoor* GetPriorityDoor();// 0x331e8e8
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor, int ClientDoorState);// 0x331e7a4
	void BP_SimulateUIClick(bool bExtraDoor);// 0x4033584
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x4033584

--------------------------------
Class: PUBGDoor.UAENetActor.LuaActor.Actor.Object
	int iRegionDoor;//[Offset: 0x53c, Size: 4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 1]
	float MaxNetCullDistanceSquared;//[Offset: 0x544, Size: 4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x54c, Size: 4]
	float autoOpenAngel;//[Offset: 0x550, Size: 4]
	float forwardSpeedRatio;//[Offset: 0x554, Size: 4]
	int DoorState;//[Offset: 0x558, Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	float DoorOperateTime;//[Offset: 0x560, Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x568, Size: 8]
	BoxComponent* interactionBox;//[Offset: 0x570, Size: 8]
	BoxComponent* interForceBox;//[Offset: 0x578, Size: 8]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	int DoorStateEx;//[Offset: 0x584, Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x590, Size: 8]
	BoxComponent* interactionBoxEx;//[Offset: 0x598, Size: 8]
	BoxComponent* interForceBoxEx;//[Offset: 0x5a0, Size: 8]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	bool bIsFobidUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a9, Size: 1]
	bool bIsFobidAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5aa, Size: 1]
	delegate OnDoorBrokenDelegate;//[Offset: 0x5b0, Size: 16]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x5c0, Size: 16]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x5d0, Size: 4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d5, Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d6, Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d7, Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 1]
	Character* PlayerCharacter;//[Offset: 0x5e0, Size: 8]
	float autoOpenAngelCosinValue;//[Offset: 0x5e8, Size: 4]
	StaticMesh* InitialMesh_C;//[Offset: 0x5f8, Size: 8]
	bool bInitedDataBeforeBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	FName DoorMeshCollisionProfileBeforeBroken;//[Offset: 0x608, Size: 8]
	FName DoorMeshBoxCollisionProfileBeforeBroken;//[Offset: 0x610, Size: 8]
	CollisionResponseContainer DoorMeshBoxCollisionResponses;//[Offset: 0x620, Size: 32]
	bool WasBrokenForObjectPoolReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 1]
	void SetDoorBroken(bool bExtraDoor);// 0x34a04b0
	void RefreshUIOnClient();// 0x34a049c
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x34a03dc
	void OnRep_RepDoorStateEx();// 0x34a03c8
	void OnRep_RepDoorState();// 0x34a03b4
	void OnRep_RepDoorBrokenEx();// 0x34a03a0
	void OnRep_RepDoorBroken();// 0x34a038c
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x34a0260
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x34a0134
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x34a0074
	void OnBPRespawned();// 0x34a0058
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x349fe80
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x349fca8
	void On_DoorAniFinsih(const BoxComponent* InDoorCheckBox, bool extraDoor);// 0x349fbe8
	bool IsSameDoorState(int ClientState);// 0x349fb58
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx, BoxComponent* interForceBox, BoxComponent* interForceBoxEx);// 0x349f96c
	enum[] GetDamageableGameObjectType();// 0x349f8c0
	void ForceNetUpdate();// 0x349f8a4
	void DeCodeKey();// 0x349f888
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x349f7c8
	void ClientDoorRPC(int iDoorState, bool bDoorBroken, int iDoorStateEx, bool bDoorBrokenEx);// 0x349f678
	void BPSetObjectPoolInitialData();// 0x349f65c
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x4033584
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x4033584
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x4033584

--------------------------------
Class: ChatComponent.ActorComponent.Object
	int end_time;//[Offset: 0x114, Size: 4]
	FString Reason;//[Offset: 0x118, Size: 16]
	int[] audioChat;//[Offset: 0x128, Size: 16]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0x138, Size: 16]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0x148, Size: 16]
	QuickChatOption[] allChatOption;//[Offset: 0x158, Size: 16]
	int MinTraceDist;//[Offset: 0x168, Size: 4]
	FString TeammateColor;//[Offset: 0x170, Size: 16]
	FString MyColor;//[Offset: 0x180, Size: 16]
	<int,FString> ActorNameList;//[Offset: 0x190, Size: 80]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x1e0, Size: 80]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x230, Size: 16]
	float SendMsgCD;//[Offset: 0x240, Size: 4]
	float lastShowChatTime;//[Offset: 0x244, Size: 4]
	float ShowChatDuration;//[Offset: 0x248, Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x250, Size: 16]
	FString EndChar;//[Offset: 0x260, Size: 16]
	FString ColonChar;//[Offset: 0x270, Size: 16]
	<int,int> TextID2AudioID;//[Offset: 0x280, Size: 80]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x2d0, Size: 16]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x2e0, Size: 8]
	int itemIDOnGround;//[Offset: 0x300, Size: 4]
	int itemOnGroundNetGUID;//[Offset: 0x304, Size: 4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x308, Size: 8]
	Vector hitItemPosition;//[Offset: 0x310, Size: 12]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	Vector hitGroundPosition;//[Offset: 0x320, Size: 12]
	FString CongregationPlayerName;//[Offset: 0x330, Size: 16]
	FString CongregationPlayerKey;//[Offset: 0x340, Size: 16]
	InGameChatMsg CurrMsg;//[Offset: 0x350, Size: 96]
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x4033584
	void ShowTeamMsg(out const InGameChatMsg msgItem, bool isMe, bool ShowChat);// 0x3311a5c
	void ShowQuickPanel(bool bShow);// 0x33119d8
	void ServerSendMsg(const InGameChatMsg msgItem);// 0x33118a4
	void ServerSendGift(const InGameChatMsg msgItem);// 0x3311770
	void SendDirtyFilterContent(FString Content);// 0x4033584
	void SendDirtyFilter(FString Name, FString Content, bool isMe);// 0x4033584
	void ReportBattleChat(int MsgID, FString Msg, int msgExtraParam);// 0x4033584
	void OnInviteNextBattle(FString gid, FString Name);// 0x3311660
	void OnFilterFinish(FString filterText);// 0x4033584
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x4033584
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x4033584
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x4033584
	void MakeQuickSignMark(out const InGameChatMsg msgItem, bool isMe, enum flagType);// 0x33114c0
	void LoadBankAndPlay(FString BankName, FString EventName);// 0x33113b0
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x331125c
	void FindTextIDByAudioID();// 0x4033584
	void CloseChatHistoryList();// 0x4033584
	void ClientReceiveMsg(const InGameChatMsg msgItem, bool isMe);// 0x331110c
	void ClientReceiveGift(const InGameChatMsg msgItem, bool isMe);// 0x3310fbc
	void AddQuickAudio(AkAudioEvent* audio, int chatID);// 0x3310f04
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x4033584
	void AddOneMarkToUI(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x4033584
	void AddFriendChat(FString gid, FString Name, FString Content, bool IsSelf);// 0x3310bd4

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0, Size: 4]
	int RealTextID;//[Offset: 0x4, Size: 4]
	int AlternateTextID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: QuickChatOption
	int chatTextID;//[Offset: 0x0, Size: 4]
	AkAudioEvent* audioEvent1;//[Offset: 0x8, Size: 8]

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0, Size: 16]
	FString Content;//[Offset: 0x10, Size: 16]
	bool IsSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	int MsgType;//[Offset: 0x24, Size: 4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0, Size: 1]
	int[] chatIDList;//[Offset: 0x8, Size: 16]
	int AlternateChatID;//[Offset: 0x18, Size: 4]
	int FlagIndex;//[Offset: 0x1c, Size: 4]
	int traceDist;//[Offset: 0x20, Size: 4]
	float minDist;//[Offset: 0x24, Size: 4]

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x0, Size: 4]
	int flagID;//[Offset: 0x4, Size: 4]
	Vector hitPosition;//[Offset: 0x8, Size: 12]

--------------------------------
Class: InGameFilterChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 16]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0x154, Size: 4]
	float PickUpZLimit;//[Offset: 0x158, Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x160, Size: 16]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x170, Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0x174, Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x178, Size: 4]
	Vector2D RegionXRange;//[Offset: 0x17c, Size: 8]
	Vector2D RegionYRange;//[Offset: 0x184, Size: 8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d, Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x190, Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x19c, Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x1a0, Size: 4]
	float DrawTime;//[Offset: 0x1a4, Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x1b0, Size: 8]
	<SearchedPickUpItemResult,float> RecentAutoPickupMap;//[Offset: 0x1b8, Size: 80]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x208, Size: 16]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x218, Size: 16]
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x3464c50
	void ServerPutDownTarget(Actor* Target);// 0x3464ba0
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x3464a38
	void ServerPickUpAttachmentTarget(Actor* Target, const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x34647f8
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x3464740
	void PutDownTarget(Actor* Target);// 0x34646c4
	void PickUpTargetAttachment(Actor* Target, out const PickUpItemData ItemData, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x34644c4
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount, int BattleItemClientPickupType);// 0x3464398
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x346431c
	void NotifyMeetPickupAvailableActor(Actor* Target, bool bUpdatePickupManager);// 0x346425c
	void MarkRecentAutoPickUp(SearchedPickUpItemResult PickUpResult);// 0x3464040
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x3463fb0
	Vector[] GetNearItemLocationList(out const Vector TargetLoc, float Radius, float IgnoreDist, uint32[] ItemIDs);// 0x3463d3c
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x3463c58
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x3463b64
	void ControlClientPutDownTarget(Actor* Target);// 0x3463ab4
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x34639c4
	void ControlClientPickUpAttachmentTarget(Actor* Target, int AdditionalParam, int PickupAttachmentID, ItemDefineID TargetDefineID);// 0x3463818
	void ClampWorldLocation(out Vector OutVector);// 0x3463790
	bool CheckRecentAutoPickUp(SearchedPickUpItemResult PickUpResult, float OverTime);// 0x346352c

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 8]
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 56]

--------------------------------
Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 16]
	uint32 playerIdentifier;//[Offset: 0x10, Size: 4]
	FString msgContent;//[Offset: 0x18, Size: 16]
	int MsgID;//[Offset: 0x28, Size: 4]
	int audioID;//[Offset: 0x2c, Size: 4]
	int ItemId;//[Offset: 0x30, Size: 4]
	FString PlayerKeyString;//[Offset: 0x38, Size: 16]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	Vector hitPosition;//[Offset: 0x4c, Size: 12]
	int itemIDOnGround;//[Offset: 0x58, Size: 4]

--------------------------------
Class: GuideComponent.ActorComponent.Object
	GuideInfo[] WidgetList;//[Offset: 0x110, Size: 16]
	Widget* MaskWidget;//[Offset: 0x120, Size: 8]
	void SetMaskWidgetOnTop(bool bTop);// 0x33d074c
	void CreateGuideUI();// 0x4033584

--------------------------------
Class: GuideInfo
	Widget* Widget;//[Offset: 0x0, Size: 8]
	int guildUI;//[Offset: 0x8, Size: 4]
	Vector2D Offset;//[Offset: 0xc, Size: 8]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	int childData;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: QuickSignComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0x110, Size: 16]
	delegate OnDelSignMarkDelegate;//[Offset: 0x120, Size: 16]
	delegate OnDangerousQuickSignDelegate;//[Offset: 0x130, Size: 16]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int TextID_OutRange;//[Offset: 0x144, Size: 4]
	FString PreFix_Command;//[Offset: 0x148, Size: 16]
	FString PreFix_Command_Res;//[Offset: 0x158, Size: 16]
	FString PreFix_Mark;//[Offset: 0x168, Size: 16]
	int MinTraceDist;//[Offset: 0x178, Size: 4]
	int MaxTraceDist;//[Offset: 0x17c, Size: 4]
	int ItemTraceDist;//[Offset: 0x180, Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x184, Size: 4]
	int MiniMapAttentionIconID;//[Offset: 0x188, Size: 4]
	int MiniMapThingIconID;//[Offset: 0x18c, Size: 4]
	float MinHighLightDangerousTime;//[Offset: 0x190, Size: 4]
	float MinHighLightDangerousDistance;//[Offset: 0x194, Size: 4]
	float DangerousMarkLifeSpan;//[Offset: 0x198, Size: 4]
	<int,DangerousSignInfo> LastDangerousID;//[Offset: 0x1a0, Size: 80]
	int MarkMaxNum;//[Offset: 0x1f0, Size: 4]
	float ReplyDelayTime;//[Offset: 0x1f4, Size: 4]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x1f8, Size: 8]
	<int,FString> CommandTypeIDMap;//[Offset: 0x200, Size: 80]
	<class Object,FString> MarkNameClassMap;//[Offset: 0x250, Size: 80]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x2a0, Size: 80]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x2f0, Size: 80]
	FString[] HasReplyMsg;//[Offset: 0x340, Size: 16]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x350, Size: 80]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x3a0, Size: 80]
	int[] ServerCachedNetGUIDs;//[Offset: 0x3f0, Size: 16]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x400, Size: 16]
	FString[] TempIDArray;//[Offset: 0x410, Size: 16]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x420, Size: 80]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x470, Size: 80]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x4c0, Size: 80]
	<FString,enum> ConfigKeyToSignSubType;//[Offset: 0x510, Size: 80]
	<FString,QuickSignMark> CustomMarkInfoMap;//[Offset: 0x5b0, Size: 80]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x34b4988
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool IsSelf);// 0x4033584
	void ServerSendMsg(const QuickSignMsg msgItem, byte SignType);// 0x34b485c
	void ServerMarkCustom(const QuickSignMsg msgItem, float ShareDistance, bool ShareWithTeammates);// 0x34b46dc
	void ServerDelNetGuid(int Guid);// 0x34b4660
	void ServerDelMsg(FString MsgID);// 0x34b4584
	void ServerDelCustomMark(FString MsgID, bool ShareWithTeammates);// 0x34b4450
	void ServerAddNetGuid(int Guid);// 0x34b43d4
	void ReportQuickSign(out const QuickSignMsg msgItem);// 0x4033584
	void RemoveActorMask(int ActorNetGUID);// 0x34b4324
	void OperMark(FString MsgID);// 0x34b427c
	void OnPickUpActor(int Guid);// 0x34b4200
	void MakeQuickNeed(enum SignSubType);// 0x34b4184
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor);// 0x34b4108
	void MakeQuickMark();// 0x34b40f4
	void MakeQuickCommand(byte SignType);// 0x34b4078
	void MakeCustomMark(Vector targetPos, FString SignConfigKey);// 0x34b3f90
	bool IsSelfMark(FString MsgID);// 0x34b3ed4
	bool IsContainMark(FString MsgID);// 0x34b3e18
	int GetVoiceAudioID(enum MsgType);// 0x4033584
	bool GenerateMarkInfo(out const QuickSignMsg msgItem, out QuickSignMark MarkInfo);// 0x4033584
	FString FindMarkNameClassKey(class Object uMarkClass);// 0x34b3d14
	void DelSpecialReplyMsg(out const QuickSignMark msgItem);// 0x34b3c5c
	void DelMarkFromPool(FString MsgMark, bool bIsCheckSenderMap);// 0x34b3b6c
	void DealWithNewMsg(out const QuickSignMsg msgItem, bool IsSelf, FString SenderPlayerKey, bool ShowChat);// 0x34b3920
	void DealWithMarkCustomMsg(out const QuickSignMsg msgItem, bool IsSelf);// 0x34b3808
	void ClientReceiveMsg(const QuickSignMsg msgItem, bool IsSelf, FString SenderPlayerKey);// 0x34b3694
	void ClientMarkCustomMsg(const QuickSignMsg msgItem, bool IsSelf);// 0x34b3590
	void ClientDelMsg(FString MsgID);// 0x34b34e0
	void ClientDelCustomMarkMsg(FString MsgID);// 0x34b3430
	void CheckMsgValid();// 0x34b341c
	void AnalysisConfigKeyClass(FString ConfigId, FString ConfigScriptParam);// 0x34b330c
	void AddSpecialReplyMsg(out const QuickSignMark msgItem);// 0x34b3254
	void AddNewMark(out const QuickSignMsg msgItem, bool IsSelf, FString SenderPlayerKey);// 0x34b304c
	void AddMarkToPool(out const QuickSignMark MsgMark, FString SenderPlayerKey);// 0x34b2e98
	void AddActorMask(int ActorNetGUID);// 0x34b2de8

--------------------------------
Class: DangerousSignInfo
	FString MsgID;//[Offset: 0x0, Size: 16]
	Vector LastDangerousLocation;//[Offset: 0x10, Size: 12]
	float LastMarkDangerousTime;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: QuickSignMark
	FString MsgID;//[Offset: 0x0, Size: 16]
	FString MarkType;//[Offset: 0x10, Size: 16]
	FString IconPath;//[Offset: 0x20, Size: 16]
	FString IconBGPath;//[Offset: 0x30, Size: 16]
	FString IconOuterPath;//[Offset: 0x40, Size: 16]
	FString IconOuterBGPath;//[Offset: 0x50, Size: 16]
	FString IconOutScreenIconPath;//[Offset: 0x60, Size: 16]
	FString IconOutScreenBGPath;//[Offset: 0x70, Size: 16]
	FString IconOutScreenArrowPath;//[Offset: 0x80, Size: 16]
	FString ReplyID;//[Offset: 0x90, Size: 16]
	Vector Loc;//[Offset: 0xa0, Size: 12]
	int MaxNum;//[Offset: 0xac, Size: 4]
	int LifeSpan;//[Offset: 0xb0, Size: 4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	FString SenderPlayerKey;//[Offset: 0xb8, Size: 16]

--------------------------------
Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: QuickSignMsg
	FString MsgID;//[Offset: 0x0, Size: 16]
	FString PlayerName;//[Offset: 0x10, Size: 16]
	Vector HitPos;//[Offset: 0x20, Size: 12]
	FString ConfigKey;//[Offset: 0x30, Size: 16]
	int audioID;//[Offset: 0x40, Size: 4]
	FString ParamString;//[Offset: 0x48, Size: 16]
	int BindActorGUID;//[Offset: 0x58, Size: 4]
	uint32 PlayerKey;//[Offset: 0x5c, Size: 4]
	int MiniMapIconTypeId;//[Offset: 0x60, Size: 4]
	enum MsgType;//[Offset: 0x64, Size: 1]

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0x110, Size: 8]
	FString OwningPlayerName;//[Offset: 0x118, Size: 16]
	UAETriggerObject*[] TaskTriggerObjects;//[Offset: 0x128, Size: 16]
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x138, Size: 80]
	int RetrieveUseItemAreaType(int ItemId, Vector PlayerLocation);// 0x32baa34
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x32ba9a8
	int[] RetrieveTaskAreaList(Vector PlayerLocation);// 0x32ba8b4
	int RetrieveLandLocType(FString TargetName);// 0x32ba778
	void ReportTaskAndSpecialCollection(byte TaskType, int TaskId, int process);// 0x32ba680
	bool RegisterEvent(class Object RegisterEventClass, UAETriggerObject* TriggerListener, byte TaskEventType);// 0x32ba574
	bool IsTriggerActive(int InTaskID);// 0x32ba4e4
	bool IsSpecialPickItem(int InItemID);// 0x32ba454
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName);// 0x32ba104
	void HandlePlayerPickupItem(int ItemId, int Count, STExtraPlayerController* PC);// 0x32ba014
	void HandlePlayerKilling();// 0x32ba000
	void HandlePlayerEnterArea(int AreaID);// 0x32b9f84
	void HandlePlayerDropItem(int ItemId, int Count, STExtraPlayerController* PC);// 0x32b9e94
	void HandlePlayerDoEmote(int EmoteIndex);// 0x32b9e18
	void HandleInitTaskData(int TaskId, int process, FString ext_info);// 0x32b9c60
	void HandleInitCollectionData(int ItemId, int CurrentCount, int TotalCount);// 0x32b9b70
	void HandleDeathBoxSpawned(Transform SpawnTransform);// 0x32b9acc
	UAETriggerObject* GetTriggerObject(int InTaskID);// 0x32b9a40
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0x4033584
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0x4033584
	bool GetTaskParams(int InTaskID, out FString outMainConditionParamStr, out int outTaskProcess);// 0x32b98e4
	FString GetTaskClassPath(byte TaskType, int TaskUID);// 0x32b97ac
	int[] GetTaskAreaListFromDataTable(Vector InPlayerLocation);// 0x4033584
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0x4033584
	FString GetOwningPlayerName();// 0x32b9708
	FString GetMapName();// 0x32b9664
	int GetLandLocIDFromDataTable(FString InTargetName);// 0x4033584
	int GetItemUseAreaIDFromDataTable(int ItemId, Vector InPlayerLocation);// 0x4033584
	void FireEvent(byte TaskEventType, int Param, FString ExtMsg);// 0x32b94ac
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x32b93ec
	UAETriggerObject_Task* CreateTriggerObject(byte TaskType, int TaskId);// 0x32b931c
	bool AddTrigger(byte TaskType, int TaskId, int process, FString ext_info);// 0x32b9114
	void AddEventToTrigger(UAETriggerObject* TriggerObj, class Object Event, byte TaskEventType);// 0x32b901c
	void ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x32b8f5c

--------------------------------
Class: UAETriggerObject.Object
	enum RunType;//[Offset: 0x28, Size: 1]
	enum TriggerObjectType;//[Offset: 0x29, Size: 1]
	int EventDelayTime;//[Offset: 0x2c, Size: 4]
	int ActionDelayTime;//[Offset: 0x30, Size: 4]
	FString TriggerName;//[Offset: 0x38, Size: 16]
	Actor* OuterActor;//[Offset: 0x48, Size: 8]
	class Object[] TriggerEventsClass;//[Offset: 0x50, Size: 16]
	TriggerAction*[] TriggerActions;//[Offset: 0x60, Size: 16]
	TriggerCondition*[] TriggerConditions;//[Offset: 0x70, Size: 16]
	FlowNodeBase* CarrierFlowNode;//[Offset: 0x80, Size: 8]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	TimerHandle TimerHandle_EventDelay;//[Offset: 0xa0, Size: 8]
	TimerHandle TimerHandle_ActionDelay;//[Offset: 0xa8, Size: 8]
	TriggerEvent* CurEvent;//[Offset: 0xb0, Size: 8]
	FString DelayEventName;//[Offset: 0xb8, Size: 16]
	FString FiredEventName;//[Offset: 0xc8, Size: 16]
	<TriggerEvent*> TriggeredEvents;//[Offset: 0xd8, Size: 80]
	<TriggerAction*> CompleteActions;//[Offset: 0x128, Size: 80]
	bool IsEnableCheckDo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x180, Size: 8]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	float TickInterval;//[Offset: 0x1a4, Size: 4]
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 1]
	Property*[] eventParams;//[Offset: 0x1b0, Size: 16]

--------------------------------
Class: TriggerAction.Object
	VariableSet* DataSource;//[Offset: 0x28, Size: 8]
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	enum ExecPolicy;//[Offset: 0x39, Size: 1]
	UAETriggerObject* ParentTrigger;//[Offset: 0x40, Size: 8]
	UAELevelDirector* ActionOuterActor;//[Offset: 0x48, Size: 8]
	bool bSupportNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]

--------------------------------
Class: VariableSet.Object
	VariableSetCachedActors DataActors;//[Offset: 0x78, Size: 88]

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x50, Size: 8]

--------------------------------
Class: UAELevelDirector.Actor.Object
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool ClientEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	bool ServerEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 1]
	LevelDirectorInstAction[] InstanceActions;//[Offset: 0x3d0, Size: 16]
	FString[] ClassPaths;//[Offset: 0x3e0, Size: 16]
	FString ConfigFilePath;//[Offset: 0x3f0, Size: 16]
	class UAELevelDirector_PlayerRepInfo* PlayerRepInfoClass;//[Offset: 0x400, Size: 8]
	FString ClientConfigFilePath;//[Offset: 0x408, Size: 16]
	UAELevelDirectorRepData LevelDirectorRepData;//[Offset: 0x418, Size: 24]
	<uint32,UAELevelDirector_PlayerRepInfo*> AllPlayersRepInfo;//[Offset: 0x430, Size: 80]
	UAETriggerFuncLib*[] FunctionLibList;//[Offset: 0x480, Size: 16]
	TriggersFlowBase* TriggersFlowTree;//[Offset: 0x490, Size: 8]
	<FString,UAETriggerObject*> TriggerObjectMap;//[Offset: 0x498, Size: 80]
	VariableSet* AllVariableSet;//[Offset: 0x4e8, Size: 8]
	UAETriggerParamFuncLib* TriggerParamFuncLib;//[Offset: 0x4f0, Size: 8]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x4f8, Size: 8]
	FString DescData;//[Offset: 0x500, Size: 16]
	UAELevelDirector_PlayerRepInfo* CurLevelDirector_PlayerRepInfo;//[Offset: 0x510, Size: 8]
	<uint32,UAELevelDirector_PlayerRepInfo*> HistoryLevelDirector_PlayerRepInfos;//[Offset: 0x518, Size: 80]
	TaskRepData TaskData;//[Offset: 0x570, Size: 24]
	bool StartLevelDirector();// 0x673a544
	void SetTriggerRunType(FString TriggerName, enum RunType);// 0x673a3d4
	void SetEnable(bool Enab);// 0x673a354
	void S2Sim_CallExcuteAction();// 0x673a338
	void RequestTriggerComplete(UAETriggerObject* CompleteTrigger);// 0x673a288
	void OnRep_LevelDirectorData();// 0x673a274
	bool InitialLevelDirector();// 0x673a234
	UAETriggerObject* GetTrigger(FString NodeName, FString TriggerName);// 0x673a01c
	bool GetHasBeenInit();// 0x6739fe4
	VariableSet* GetDataSet();// 0x6739fb0
	int GetCurTaskID();// 0x6739f7c
	void ForceExecuteTrigger(FString TriggerName);// 0x6739e48
	bool FlowControllSubControll(out FString[] TriggerNames, FString NodeName);// 0x6739c30
	bool FlowControllOr(out FString[] TriggerNames, FString NodeName);// 0x6739a18
	bool FlowControllOneSequence(FString TriggerName, FString NodeName);// 0x67397fc
	bool FlowControllMultiSequence(out FString[] TriggerNames, FString NodeName);// 0x67395e4
	bool FlowControllAnd(out FString[] TriggerNames, FString NodeName, bool DefaultActive);// 0x6739388
	void DeactiveTrigger(FString NodeName, FString TriggerName);// 0x6739178
	void DeactiveNode(FString NodeName);// 0x6739044
	void ClientExecuteAction(FString ActionClassName, int64 UId, const TriggerParamRepData[] RepParams, bool IsKeep, bool IsRevert, UAELevelDirector_PlayerRepInfo* InLevelDirector_PlayerRepInfo);// 0x6738e38
	void AddEventToTrigger(FString TriggerName, class Object Event);// 0x6738cc8
	TriggerCondition* AddConditionToTrigger(FString TriggerName, class Object Condition);// 0x6738b50
	TriggerAction* AddActionToTrigger(FString TriggerName, class Object Action);// 0x67389d8
	void ActiveTrigger(FString NodeName, FString TriggerName);// 0x67387c8
	void ActiveNode(FString NodeName);// 0x6738694

--------------------------------
Class: LevelDirectorInstAction
	int64 ActionUniqueID;//[Offset: 0x0, Size: 8]
	TriggerAction* Action;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UAELevelDirector_PlayerRepInfo.Info.Actor.Object
	TriggerActionRepData[] ActionRepDatas;//[Offset: 0x3c8, Size: 16]
	uint32 UniqueId;//[Offset: 0x3d8, Size: 4]
	UAELevelDirector* RelevantLevelDirector;//[Offset: 0x3e0, Size: 8]
	void OnRep_LevelDirector();// 0x673b36c
	void OnRep_ActionRepDatas();// 0x673b358
	void ClientExecuteAction(const TriggerActionRepData InActionRepData);// 0x673b288

--------------------------------
Class: TriggerActionRepData
	int64 RepID;//[Offset: 0x0, Size: 8]
	int64 UId;//[Offset: 0x8, Size: 8]
	FString ActionClassName;//[Offset: 0x10, Size: 16]
	TriggerParamRepData[] ParamDatas;//[Offset: 0x20, Size: 16]

--------------------------------
Class: TriggerParamRepData
	byte ParamType;//[Offset: 0x0, Size: 1]
	byte ParamSubType;//[Offset: 0x1, Size: 1]
	FString ParamName;//[Offset: 0x8, Size: 16]
	byte[] ParamData;//[Offset: 0x18, Size: 16]

--------------------------------
Class: UAELevelDirectorRepData
	UFlowNodeRepData FlowNodeRepData;//[Offset: 0x0, Size: 24]

--------------------------------
Class: UFlowNodeRepData
	FString RepData;//[Offset: 0x0, Size: 16]
	int NodeID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: UAETriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x28, Size: 16]
	VariableSet* DataSet;//[Offset: 0x38, Size: 8]
	Actor* GetLastIteratorActor();// 0x673c98c

--------------------------------
Class: TriggerClassItem
	FString TagName;//[Offset: 0x0, Size: 16]
	FString ClassFullPath;//[Offset: 0x10, Size: 16]
	float RandomRadius;//[Offset: 0x20, Size: 4]

--------------------------------
Class: TriggersFlowBase.Object
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x30, Size: 8]
	<FString,FlowNodeBase*> Nodes;//[Offset: 0x38, Size: 80]
	bool IsRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x28, Size: 8]
	UFlowNodeRepData RepData;//[Offset: 0x30, Size: 24]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool DefaltActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	TriggersFlowBase* CarriedFlow;//[Offset: 0x68, Size: 8]
	enum NodeType;//[Offset: 0x70, Size: 1]
	UAETriggerObject*[] TriggerObjects;//[Offset: 0x78, Size: 16]

--------------------------------
Class: UAETriggerParamFuncLib.UAETriggerFuncLib.Object

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x38, Size: 80]
	<FString,LevelEventListenerList> EventListeners;//[Offset: 0x90, Size: 80]

--------------------------------
Class: TriggerEvent.Object
	FString EventName;//[Offset: 0x28, Size: 16]
	Object* EventInstigator;//[Offset: 0x38, Size: 8]
	<FString,TriggerEventListenerTrigger> RelevantListener;//[Offset: 0x50, Size: 80]

--------------------------------
Class: TriggerEventListenerTrigger
	UAETriggerObject* ListenerTrigger;//[Offset: 0x0, Size: 8]

--------------------------------
Class: LevelEventListenerList
	<LevelEventListener*> Listeners;//[Offset: 0x0, Size: 80]

--------------------------------
Class: LevelEventListener.Object
	FString EventName;//[Offset: 0x28, Size: 16]
	<FString,FName> RelevantListenerCallbacks;//[Offset: 0x38, Size: 80]
	<FString> ObjectRelevantEvents;//[Offset: 0x88, Size: 80]
	Actor* ListenerEntity;//[Offset: 0xd8, Size: 8]
	Property*[] Params;//[Offset: 0xe0, Size: 16]

--------------------------------
Class: TaskRepData
	FString TaskName;//[Offset: 0x0, Size: 16]
	int TaskId;//[Offset: 0x10, Size: 4]

--------------------------------
Class: TriggerCondition.Object
	VariableSet* DataSource;//[Offset: 0x28, Size: 8]
	TriggerCondition*[] ChildConditions;//[Offset: 0x30, Size: 16]
	UAETriggerObject* ParentTrigger;//[Offset: 0x50, Size: 8]
	void AddChildCondition(TriggerCondition* NewChildCond);// 0x673726c

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UAETriggerObject_Task.UAETriggerObject.Object
	TriggerCondition* RootCondition;//[Offset: 0x1c8, Size: 8]
	byte[] TaskEventTypes;//[Offset: 0x1d0, Size: 16]
	TriggerAction*[] RedoTriggerActions;//[Offset: 0x1e0, Size: 16]
	int TaskId;//[Offset: 0x1f0, Size: 4]
	byte TaskType;//[Offset: 0x1f4, Size: 1]
	void SetTaskProcess(int process, FString ext_info);// 0x36e0970
	void RedoAction();// 0x36e0954
	void NofityTriggerComplete();// 0x36e0938
	bool IsConditionsSatisfy(const TriggerEvent* Event);// 0x36e08a0
	void InitConfigurableCondition(int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x36e06f0
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x36e0628
	TriggerCondition* CreateSpecifiedSpaceCondition(byte SpecifiedSpace);// 0x36e0594
	TriggerCondition* CreateSpecifiedItemCondition(int ItemId);// 0x36e0508
	TriggerCondition* CreateSpecifiedAreaCondition(byte SpecifiedArea);// 0x36e0474
	TriggerAction* CreateRedoAction(byte ActionType);// 0x36e03e0
	TriggerCondition* CreateORCondition(TriggerCondition*[] ChildConditions);// 0x36e02a4
	TriggerCondition* CreateOperatorCondition(class TriggerCondition_Operator OperatorClass, TriggerCondition*[] ChildConditions);// 0x36e0120
	TriggerCondition* CreateKillPlayerCondition();// 0x36e00ec
	TriggerCondition* CreateGameModeCondition(enum GameModeType);// 0x36e0060
	TriggerAction* CreateDoAction(byte ActionType);// 0x36dffcc
	TriggerCondition* CreateCondition(class TriggerCondition ConditionClass);// 0x36dff40
	TriggerCondition* CreateCollectItemCondition(int ItemId, int CollectCount);// 0x36dfe7c
	TriggerCondition* CreateANDCondition(TriggerCondition*[] ChildConditions);// 0x36dfd40
	TriggerAction* CreateAction(byte ActionType);// 0x36dfcac
	bool ConstructTask(int InTaskID, int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x36dfaac
	byte[] ConstructRedoActions();// 0x4033584
	byte[] ConstructEvents();// 0x4033584
	TriggerCondition* ConstructConditions();// 0x4033584
	byte[] ConstructActions();// 0x4033584
	void AddEventTypes(byte[] EventTypes);// 0x36df978
	bool ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x36df89c

--------------------------------
Class: TriggerCondition_Operator.TriggerCondition_Task.TriggerCondition.Object

--------------------------------
Class: TriggerCondition_Task.TriggerCondition.Object
	byte TaskConditionType;//[Offset: 0x58, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool bIsConfigurable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	void SetTargetParam(int Value);// 0x3692f2c
	void SetConditionParam(int Value);// 0x3692ea8
	bool IsSatisfy(const TriggerEvent* Event);// 0x3692e10
	bool IsSameCondition(byte InTaskConditionType);// 0x3692d78
	bool FillDataSource(VariableSet* InDataSource);// 0x3692ce0
	bool DeactiveCondition(VariableSet* InDataSource);// 0x3692c48
	bool CompareParam(VariableSet* InDataSource);// 0x3692bb0
	bool ActiveCondition(VariableSet* InDataSource);// 0x3692b18

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0, Size: 16]
	byte gender;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PlayerBaseInfoInOB
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 12]
	int Health;//[Offset: 0xc, Size: 4]
	int HealthMax;//[Offset: 0x10, Size: 4]
	int LiveState;//[Offset: 0x14, Size: 4]
	int KillNum;//[Offset: 0x18, Size: 4]
	int KillNumBeforeDie;//[Offset: 0x1c, Size: 4]
	float SignalHP;//[Offset: 0x20, Size: 4]
	uint32 PlayerKey;//[Offset: 0x24, Size: 4]
	int GotAirDropNum;//[Offset: 0x28, Size: 4]
	int MaxKillDistance;//[Offset: 0x2c, Size: 4]
	int Damage;//[Offset: 0x30, Size: 4]
	int InDamage;//[Offset: 0x34, Size: 4]
	int Heal;//[Offset: 0x38, Size: 4]
	int HeadShotNum;//[Offset: 0x3c, Size: 4]
	int KillNumInVehicle;//[Offset: 0x40, Size: 4]
	int SurvivalTime;//[Offset: 0x44, Size: 4]
	int DriveDistance;//[Offset: 0x48, Size: 4]
	int marchDistance;//[Offset: 0x4c, Size: 4]
	int MonsterCatchupDistance;//[Offset: 0x50, Size: 4]
	int Assists;//[Offset: 0x54, Size: 4]
	int KillNumByGrenade;//[Offset: 0x58, Size: 4]
	int Rank;//[Offset: 0x5c, Size: 4]
	bool IsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x64, Size: 4]
	int Knockouts;//[Offset: 0x68, Size: 4]
	int rescueTimes;//[Offset: 0x6c, Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x70, Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x74, Size: 4]
	int CurWeaponID;//[Offset: 0x78, Size: 4]

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	uint64 UId;//[Offset: 0x80, Size: 8]
	FString PlayerName;//[Offset: 0x88, Size: 16]
	FString PlayerOpenID;//[Offset: 0x98, Size: 16]
	FString PicUrl;//[Offset: 0xa8, Size: 16]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int TeamID;//[Offset: 0xbc, Size: 4]
	FString TeamName;//[Offset: 0xc0, Size: 16]
	Pawn* Character;//[Offset: 0xd0, Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bHasDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]

--------------------------------
Class: AIPlayerInfoInOB
	FString PlayerKey;//[Offset: 0x0, Size: 16]
	int TeamID;//[Offset: 0x10, Size: 4]
	Pawn* Character;//[Offset: 0x14, Size: 8]

--------------------------------
Class: AllStarReportData
	bool bShowReportFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int BeReportedNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0, Size: 4]
	FString TeamName;//[Offset: 0x8, Size: 16]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	FString LogoPicUrl;//[Offset: 0x20, Size: 16]
	int KillNum;//[Offset: 0x30, Size: 4]
	int LiveMemberNum;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0, Size: 16]
	FString PicUrl;//[Offset: 0x10, Size: 16]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	int TeamID;//[Offset: 0x24, Size: 4]
	uint64 UId;//[Offset: 0x28, Size: 8]
	Vector[] PosList;//[Offset: 0x30, Size: 16]

--------------------------------
Class: AirDropBoxInOb
	int boxId;//[Offset: 0x0, Size: 4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Vector pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: OwnerClientCreateWeaponCache
	ItemDefineID[] IDList;//[Offset: 0x0, Size: 16]
	uint32 CharacterGUID;//[Offset: 0x10, Size: 4]
	int SyncTicket;//[Offset: 0x14, Size: 4]

--------------------------------
Class: WeaponMgrInfo
	ItemDefineID[] ItemList;//[Offset: 0x0, Size: 16]
	WeaponManagerComponent* WeaponMgr;//[Offset: 0x10, Size: 8]

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0x158, Size: 80]
	FName LeftLogicSocketName;//[Offset: 0x1a8, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x1b0, Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x1b8, Size: 80]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x208, Size: 80]
	<FName,class STExtraWeapon> GrenadeLogicSocketToWeaponClassMap;//[Offset: 0x258, Size: 80]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x2a8, Size: 4]
	bool ShowMainWeaponModelOnBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	FName CurUseWeaponLogicSocket;//[Offset: 0x2b0, Size: 8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x2b8, Size: 8]
	FName NextUseWeaponLogicSocket;//[Offset: 0x2c0, Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x2d0, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x2d8, Size: 8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 1]
	bool EnableResyncSpawnPolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e2, Size: 1]
	float ResyncTimeBias;//[Offset: 0x2e4, Size: 4]
	float NextResyncTimestamp;//[Offset: 0x2e8, Size: 4]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x2f0, Size: 16]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x300, Size: 16]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x310, Size: 16]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x320, Size: 16]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x330, Size: 16]
	delegate SimulatedWeaponChangedDelegate;//[Offset: 0x340, Size: 16]
	delegate NextUseWeaponChangedDelegate;//[Offset: 0x360, Size: 16]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x370, Size: 80]
	<FName,ItemDefineID> GrenadeLogicSlotAndDefineIDData;//[Offset: 0x3c0, Size: 80]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x410, Size: 16]
	WeaponCreateInstance[] TargetCreateArray;//[Offset: 0x428, Size: 16]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x440, Size: 16]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x450, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x488, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x4c0, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x4f8, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x530, Size: 56]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x570, Size: 8]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x578, Size: 8]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x580, Size: 8]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x588, Size: 8]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x590, Size: 8]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x5d0, Size: 8]
	void WeaponSystemDataChangedDelegate__DelegateSignature(out WeaponSystemDataOnSimulateClient TargetChangeSlot);// 0x4033584
	void UpdateOwnerClientCreateWeapon();// 0x374c534
	void TickHideWeapon();// 0x374c520
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x374c460
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x374c44c
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0x4033584
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x374c244
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0x4033584
	void SetNextUseWeaponSlot(byte Slot);// 0x374c1c8
	void SetGrenadeLogicSocketToWeaponClassMap(<FName,class STExtraWeapon> GrenadeLogicToWeaponClass);// 0x374c070
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x374bfb0
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x374bf34
	void PushAutoTriggerWeaponEventTaskWhenEquipWeapon(out const AutoTriggerWeaponEventParam Param);// 0x374be5c
	int OverrideShootWeaponInitClip__DelegateSignature(int nWeaponSlot, int nSpecificID);// 0x4033584
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x374be48
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x374be34
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x374be20
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x374be0c
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x374bdf8
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x374bd7c
	void OnRep_NextUseWeaponLogicSocket();// 0x374bd68
	void OnRep_CurrentWeaponReplicated();// 0x374bd4c
	void OnRep_CurrentWeaponLogicSocket();// 0x374bd38
	void OnRep_CurrentShieldWeaponReplicated();// 0x374bd24
	void OnReconnectOnServer();// 0x374bd08
	void OnReconnectOnClient();// 0x374bcec
	void NextUseWeaponChangedDelegate__DelegateSignature();// 0x4033584
	void LogInventoryDataInfo();// 0x374bcd8
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x374bbc8
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x374bb1c
	void LocalForceFinishSwitchWeapon();// 0x374bb08
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x4033584
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x374baf4
	bool LocalDestroyWeapon(FName SocketName, bool bEnableBroadcast);// 0x374ba18
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x374ba04
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x4033584
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x374b9e0
	bool IsCreatingWeaponOnServer();// 0x374b9a8
	static void InitializeTable(FString MainWeaponTableName);// 0x374b884
	void HideAllWeapon(bool Hidden, byte HideMask, STExtraWeapon* IgnoreWeapon);// 0x374b780
	void HandleGetWeaponFinished(byte Slot);// 0x374b6fc
	FName GetShieldWeaponSlot();// 0x374b6c8
	STExtraWeapon* GetShieldWeapon();// 0x374b694
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x374b608
	byte GetNextUseWeaponSlot();// 0x374b5d4
	static MainWeaponTableStruct GetMainWeaponTableRow(int ID);// 0x374b4e8
	FName GetLogicSocketBySlot(byte Slot);// 0x374b45c
	STExtraWeapon* GetLastUsedWeapon();// 0x374b424
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x374b398
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x374b30c
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x374b280
	STExtraWeapon* GetInventoryWeaponByDefineID(ItemDefineID DefineID);// 0x374b1e4
	FName GetGrenadeSpecificSlotNameByWeapon(STExtraWeapon* Weapon);// 0x374b158
	ItemDefineID GetGrenadeDefindIDBySlot(FName LogicSlot);// 0x374b0bc
	STExtraWeapon* GetCurrentUsingWeapon();// 0x374b088
	byte GetCurrentUsingPropSlot();// 0x374b054
	FName GetCurrentUsingLogicSocketOnServer();// 0x374b020
	FName GetCurrentUsingLogicSocket();// 0x374afec
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x374afb8
	int GetBagLevel();// 0x374af7c
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x374ae80
	ItemDefineID[] GetAllInventoryWeaponIDList(bool bForceUseMapData);// 0x374ad84
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x374ad70
	void EnableAllBroadcast(bool bEnable);// 0x374acf0
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x374ac30
	void DeleteGrenadeSlotAndDefindID(FName LogicSlot);// 0x374abb4
	void DebugReconnectToClientOnServer();// 0x374aba0
	void DebugDisconnetToServerOnClient();// 0x374ab8c
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot, byte EChangeType);// 0x4033584
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0x4033584
	void AddOrSetGrenadeSlotAndDefindID(FName LogicSlot, ItemDefineID ID);// 0x374aac0

--------------------------------
Class: WeaponCreateInstance
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int SyncTicket;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 8]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ClientResetBulletNum;//[Offset: 0x34, Size: 4]
	int OperationIndex;//[Offset: 0x38, Size: 4]
	Actor* WeaponOwnerActor;//[Offset: 0x40, Size: 8]
	FString OwnerCharacterName;//[Offset: 0x48, Size: 16]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int SyncTicket;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 8]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	int OperationIndex;//[Offset: 0x30, Size: 4]
	int BagLevel;//[Offset: 0x34, Size: 4]

--------------------------------
Class: AutoTriggerWeaponEventParam
	int TargetOwnerRole;//[Offset: 0x0, Size: 4]
	enum TargetEvent;//[Offset: 0x4, Size: 1]
	ItemDefineID TargetWeaponID;//[Offset: 0x8, Size: 24]
	bool bIgnoreItemIDInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	enum[] ForceExitPawnStateList;//[Offset: 0x28, Size: 16]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x3c8, Size: 8]
	Rotator TargetKillerRotation;//[Offset: 0x3d0, Size: 12]
	Actor* ReturnActor;//[Offset: 0x3e0, Size: 8]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x408, Size: 8]
	CameraComponent* ObservingCamera;//[Offset: 0x410, Size: 8]
	delegate OnTrackingEnd;//[Offset: 0x418, Size: 16]
	float MinMovingSpeed;//[Offset: 0x428, Size: 4]
	float MaxMovingTime;//[Offset: 0x42c, Size: 4]
	float ObservingTime;//[Offset: 0x430, Size: 4]
	float TrackingDelay;//[Offset: 0x434, Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x438, Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x43c, Size: 4]
	float TrackerToTargetMaxTime;//[Offset: 0x444, Size: 4]
	bool bAdjustTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	float MinRotatingngSpeed;//[Offset: 0x44c, Size: 4]
	static KillerTracker* StartTrackingKiller(class KillerTracker Template, Actor* Killer, PlayerController* PC, Vector InitLocation, Rotator InitRotation);// 0x33f5388
	void ForceEnd();// 0x33f5374

--------------------------------
Class: VehicleUserComponent.LuaActorComponent.ActorComponent.Object
	bool bGameModeHasMobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	ItemDefineID LastUsedItemDefineID;//[Offset: 0x1d8, Size: 24]
	float LastFinishCD;//[Offset: 0x1f0, Size: 4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f6, Size: 1]
	delegate OnClosestVehicleChanged;//[Offset: 0x1f8, Size: 16]
	STExtraVehicleBase* Vehicle;//[Offset: 0x208, Size: 8]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0x210, Size: 8]
	STExtraPlayerCharacter* Character;//[Offset: 0x218, Size: 8]
	enum VehicleUserState;//[Offset: 0x220, Size: 1]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0x228, Size: 8]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0x230, Size: 4]
	float UpdateClosestVehicleInterval;//[Offset: 0x238, Size: 4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x248, Size: 16]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x258, Size: 16]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x268, Size: 8]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x284, Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x298, Size: 4]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x2a8, Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x2b8, Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x2bc, Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x2c0, Size: 4]
	float MaxCanAimAngle;//[Offset: 0x2c4, Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool EnableTestPawnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x2cc, Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x2d0, Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x2d4, Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x2d8, Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x2e0, Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x2f0, Size: 8]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x2f8, Size: 8]
	Rotator InputExtraRot;//[Offset: 0x300, Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x30c, Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x31c, Size: 4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x325, Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x358, Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x360, Size: 4]
	float ControllerYawClampMin;//[Offset: 0x368, Size: 4]
	float ControllerYawClampMax;//[Offset: 0x36c, Size: 4]
	enum CurrentSeatType;//[Offset: 0x370, Size: 1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x3a8, Size: 8]
	float FastestAllowDistance;//[Offset: 0x3b0, Size: 4]
	float NearVehicleTickRate;//[Offset: 0x3b4, Size: 4]
	int VehicleIconID;//[Offset: 0x3b8, Size: 4]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x3d4, Size: 4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	bool bIgnoreVehicleLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e3, Size: 1]
	delegate OnReceiveReqQuickSwitchSeat;//[Offset: 0x3e8, Size: 16]
	delegate OnReceiveReqDriverLostSwitchSeat;//[Offset: 0x3f8, Size: 16]
	delegate OnRefuseExchangeVehicleSeat;//[Offset: 0x408, Size: 16]
	void UseVehicleWeaponOrNot();// 0x3723a34
	void UpdateVehWeaponPassengerViewLimit();// 0x3723a20
	void UpdatePassengerViewPitchLimit();// 0x3723a0c
	void TurnVehicle(float Rate);// 0x3723990
	void TryUseHorn(bool bUse);// 0x372390c
	void TryShutDownUnmannedVehicle();// 0x37238f8
	void TryPauseUnmannedVehicle();// 0x37238e4
	bool TryLeanOutOrIn(bool bAutoLeanOut, bool bForce);// 0x3723808
	void TryLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x372378c
	void TryLaunchCurrentUnmannedVehicle();// 0x372376c
	void TryExitVehicle();// 0x3723758
	void TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x37236a0
	void TryChangeVehicleSeat();// 0x372368c
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x37235fc
	bool TryChangeFreeFireSeatAndScopeIn();// 0x37235c4
	bool TryChangeFreeFireSeatAndLeanOut();// 0x372358c
	void TryAutonomousDriving(bool bEnable);// 0x3723508
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x4033584
	void TestMoveVehicleRight(float Rate);// 0x372348c
	void TestMoveVehicleForward(float Rate);// 0x3723410
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x3723350
	void StopFireVehicleWeapon();// 0x372333c
	bool ShowVehicleWeaponUI();// 0x3723304
	void SetVehicleUserState(enum UserState);// 0x372328c
	void SetVehicleIgnoreLookInput(bool bNewIgnore);// 0x3723208
	void SetLastDriveVehicle(STExtraVehicleBase* LastVehicle);// 0x372318c
	void SetIsAutoMoveForward(bool IsEnable);// 0x3723108
	void SetClosestVehicle(STExtraVehicleBase* InVehicle);// 0x3723090
	void SetBrake(float Rate);// 0x3723014
	void SetBoosting(bool bEnabled);// 0x3722f90
	void SetAirControlF(float Rate);// 0x3722f14
	void SetAirControlB(float Rate);// 0x3722e98
	void ServerUseVehicleWeaponOrNot(int SeatId, bool bUse);// 0x3722d94
	void ServerStopFireVehicleWeapon();// 0x3722d34
	void ServerReqQuickSwitchSeat(STExtraPlayerCharacter* ReqTarget);// 0x3722c84
	bool ServerForceEnterVehicle(STExtraVehicleBase* InVehicle, int SeatIdx);// 0x3722bb8
	void ServerDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x3722b3c
	void ServerAgreeQuickSwitchSeat(bool bIsAgree);// 0x3722a78
	void Server_JoystickCenterClickHandler();// 0x3722a18
	void SendToServerUnmannedVehicleUse();// 0x37229b8
	void SendToServerUnmannedVehicleRecall();// 0x3722958
	void SendToServerUnmannedVehiclePause();// 0x37228f8
	void RspShutDownUnmannedVehicle(bool bSucceed);// 0x372286c
	void RspRefuseExchangeVehicleSeat(STExtraPlayerCharacter* acceptPlayer);// 0x37227e8
	void RspPauseUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x3722720
	void RspLeanOut(bool bOut);// 0x3722694
	void RspLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x37225cc
	void RspExitVehicle(bool bSuccess);// 0x3722540
	void RspExchangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd);// 0x372243c
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x37222f4
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn, int FailTips);// 0x372211c
	void RspAutonomousDriving(bool bEnable, bool bSucceed);// 0x3722044
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x3721f5c
	void ReqShutDownUnmannedVehicle();// 0x3721efc
	void ReqQuickSwitchSeat();// 0x3721ee8
	void ReqPauseUnmannedVehicle();// 0x3721e88
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x3721da0
	void ReqLeanOut(bool IsLeanOut);// 0x3721cdc
	void ReqLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x3721c2c
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x3721b78
	void ReqExchangeVehicleSeat();// 0x3721b18
	void ReqEraseLastDriveVehicle();// 0x3721ab8
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x37219c8
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x3721918
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x3721854
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x3721790
	void ReqAutonomousDriving(bool bEnable);// 0x37216cc
	void ReqAcceptExchangeVehicleSeat(bool IsAccept);// 0x3721608
	void OnUnmannedVehicleDriverDead(enum EnteredState);// 0x372158c
	void OnUnmannedVehicle_Standby_Reconnet();// 0x4033584
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x4033584
	void OnServerReconnected();// 0x3721578
	void OnScopeInAfterChangeSeat();// 0x3721564
	void OnRep_DefineID();// 0x3721550
	void OnRep_BornInVehicle();// 0x372153c
	void OnRefuseExchangeVehicleSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x4033584
	void OnReceiveReqQuickSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* OrignChar);// 0x4033584
	void OnReceiveReqDriverLostSwitchSeatDelegate__DelegateSignature(STExtraPlayerCharacter* Driver);// 0x4033584
	void OnPauseUnmannedVehicleCompleted();// 0x4033584
	void OnLeanOutAfterChangeSeat();// 0x3721528
	void OnLaunchUnmannedVehicleCompleted();// 0x4033584
	void OnInputAxisMoveRight(float Rate);// 0x4033584
	void OnInputAxisMoveForward(float Rate);// 0x4033584
	void OnExitVehicleCompleted();// 0x4033584
	void OnEnterVehicleCompleted(enum SeatType);// 0x4033584
	void OnCurrrentClosestVehicleChanged();// 0x4033584
	void OnClientReconnected();// 0x3721514
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x4033584
	void NotifyLeaveVehicleFailed();// 0x37214f8
	void MoveVehicleUp(float Rate);// 0x372147c
	void MoveVehicleRight(float Rate);// 0x3721400
	void MoveVehicleForward(float Rate);// 0x3721384
	void MaintenanceVehicle(float addpercenthp, bool fixtire);// 0x37212c4
	bool IsControllingUnmannedVehicle();// 0x3721294
	bool IsAutoDriving();// 0x372125c
	bool IgnoreVehicleLookInput();// 0x3721224
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x37211a8
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x3721194
	void HandleLocalBackpackCurrentWeaponFinished();// 0x3721180
	bool HandleClientReconnecting();// 0x3721148
	enum GetVehicleUserState();// 0x372112c
	STExtraVehicleBase* GetVehicle();// 0x3721110
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x37210f4
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x37210c0
	bool GetAssistantState();// 0x3721088
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x3720f4c
	void FobidRspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd);// 0x3720e04
	void FlipTrackVehicleDirection();// 0x3720df0
	void FireVehicleWeapon();// 0x3720ddc
	void DoExitVehicle(bool bApplyVehicleVelocity, bool bMustExit);// 0x3720d0c
	void ClosestVehicleDelegate__DelegateSignature();// 0x4033584
	void ClientReqQuickSwitchSeat(STExtraPlayerCharacter* ReqOrign);// 0x3720c5c
	void ClientDriverLostReqSwitchSeat(STExtraPlayerCharacter* Driver);// 0x3720bd8
	void Client_UnbindTouchEvents();// 0x3720b78
	void Client_ShouldBindTouchEvents();// 0x3720b18
	bool CheckCanLeanOutVehicle();// 0x3720ae0
	void ChangeAssistantState(bool bEnter);// 0x3720a5c
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x37209cc
	bool CanUseVehicleHorn();// 0x3720994
	bool CanShowEnterBtn(STExtraVehicleBase* InVehicle);// 0x4033584
	bool CanLeanOutVehicle(STExtraVehicleBase* InVehicle, STExtraPlayerCharacter* InCharacter, int InSeatIndex);// 0x3720890
	bool CanEnterVehicle(STExtraVehicleBase* InVehicle, enum InSeatType);// 0x4033584
	bool CanChangeSeat(STExtraVehicleBase* InVehicle);// 0x4033584
	bool CanAutoDriving();// 0x3720858
	void BrakeTrackVehicle(bool bIsBrake);// 0x37207d4
	void AgreeQuickSwitchSeat(bool bIsAgree);// 0x3720750
	void AddVehicleFuel(float amount);// 0x37206d4

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x3c8, Size: 80]
	ParticleSystem* DefaultFX;//[Offset: 0x418, Size: 8]
	ParticleSystem* ConcreteFX;//[Offset: 0x420, Size: 8]
	ParticleSystem* DirtFX;//[Offset: 0x428, Size: 8]
	ParticleSystem* WaterFX;//[Offset: 0x430, Size: 8]
	ParticleSystem* MetalFX;//[Offset: 0x438, Size: 8]
	ParticleSystem* WoodFX;//[Offset: 0x440, Size: 8]
	ParticleSystem* GlassFX;//[Offset: 0x448, Size: 8]
	ParticleSystem* GrassFX;//[Offset: 0x450, Size: 8]
	ParticleSystem* FleshFX;//[Offset: 0x458, Size: 8]
	ParticleSystem* SteelFX;//[Offset: 0x460, Size: 8]
	ParticleSystem* SandbagFX;//[Offset: 0x468, Size: 8]
	ParticleSystem* SandFX;//[Offset: 0x470, Size: 8]
	ParticleSystem* ClothFX;//[Offset: 0x478, Size: 8]
	ParticleSystem* PlasticFX;//[Offset: 0x480, Size: 8]
	ParticleSystem* LeatherFX;//[Offset: 0x488, Size: 8]
	ParticleSystem* CeramicsFX;//[Offset: 0x490, Size: 8]
	ParticleSystem* PaperFX;//[Offset: 0x498, Size: 8]
	ParticleSystem* StoneFX;//[Offset: 0x4a0, Size: 8]
	ParticleSystem* SnowFX;//[Offset: 0x4a8, Size: 8]
	ParticleSystem* PopCanFX;//[Offset: 0x4b0, Size: 8]
	ParticleSystem* PyreflyFX;//[Offset: 0x4b8, Size: 8]
	ParticleSystem* LeafFX;//[Offset: 0x4c0, Size: 8]
	ParticleSystem* CarFX;//[Offset: 0x4c8, Size: 8]
	ParticleSystem* AsphaltFX;//[Offset: 0x4d0, Size: 8]
	ParticleSystem* IceFX;//[Offset: 0x4d8, Size: 8]
	ParticleSystem* FleshFXNormal;//[Offset: 0x4e0, Size: 8]
	ParticleSystem* FleshFXExpand;//[Offset: 0x4e8, Size: 8]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x4f8, Size: 8]
	AkAudioEvent* ConcreteSound;//[Offset: 0x500, Size: 8]
	AkAudioEvent* DirtSound;//[Offset: 0x508, Size: 8]
	AkAudioEvent* WaterSound;//[Offset: 0x510, Size: 8]
	AkAudioEvent* MetalSound;//[Offset: 0x518, Size: 8]
	AkAudioEvent* WoodSound;//[Offset: 0x520, Size: 8]
	AkAudioEvent* GlassSound;//[Offset: 0x528, Size: 8]
	AkAudioEvent* GrassSound;//[Offset: 0x530, Size: 8]
	AkAudioEvent* FleshSound;//[Offset: 0x538, Size: 8]
	AkAudioEvent* SteelSound;//[Offset: 0x540, Size: 8]
	AkAudioEvent* SandbagSound;//[Offset: 0x548, Size: 8]
	AkAudioEvent* SandSound;//[Offset: 0x550, Size: 8]
	AkAudioEvent* ClothSound;//[Offset: 0x558, Size: 8]
	AkAudioEvent* PlasticSound;//[Offset: 0x560, Size: 8]
	AkAudioEvent* LeatherSound;//[Offset: 0x568, Size: 8]
	AkAudioEvent* CeramicsSound;//[Offset: 0x570, Size: 8]
	AkAudioEvent* PaperSound;//[Offset: 0x578, Size: 8]
	AkAudioEvent* StoneSound;//[Offset: 0x580, Size: 8]
	AkAudioEvent* SnowSound;//[Offset: 0x588, Size: 8]
	AkAudioEvent* PopCanSound;//[Offset: 0x590, Size: 8]
	AkAudioEvent* PyreflySound;//[Offset: 0x598, Size: 8]
	AkAudioEvent* LeafSound;//[Offset: 0x5a0, Size: 8]
	AkAudioEvent* CarSound;//[Offset: 0x5a8, Size: 8]
	AkAudioEvent* AsphaltSound;//[Offset: 0x5b0, Size: 8]
	AkAudioEvent* IceSound;//[Offset: 0x5b8, Size: 8]
	AkAudioEvent* WindBreakSound;//[Offset: 0x5c0, Size: 8]
	AkAudioEvent* ShootFeedbackSound;//[Offset: 0x5c8, Size: 8]
	AkAudioEvent* ShootShieldFeedbackSound;//[Offset: 0x5d0, Size: 8]
	DecalData DefaultDecal;//[Offset: 0x5d8, Size: 32]
	DecalData ConcreteDecal;//[Offset: 0x5f8, Size: 32]
	DecalData DirtDecal;//[Offset: 0x618, Size: 32]
	DecalData WaterDecal;//[Offset: 0x638, Size: 32]
	DecalData MetalDecal;//[Offset: 0x658, Size: 32]
	DecalData WoodDecal;//[Offset: 0x678, Size: 32]
	DecalData GrassDecal;//[Offset: 0x698, Size: 32]
	DecalData GlassDecal;//[Offset: 0x6b8, Size: 32]
	DecalData FleshDecal;//[Offset: 0x6d8, Size: 32]
	DecalData SteelDecal;//[Offset: 0x6f8, Size: 32]
	DecalData SandbagDecal;//[Offset: 0x718, Size: 32]
	DecalData SandDecal;//[Offset: 0x738, Size: 32]
	DecalData ClothDecal;//[Offset: 0x758, Size: 32]
	DecalData PlasticDecal;//[Offset: 0x778, Size: 32]
	DecalData LeatherDecal;//[Offset: 0x798, Size: 32]
	DecalData CeramicsDecal;//[Offset: 0x7b8, Size: 32]
	DecalData PaperDecal;//[Offset: 0x7d8, Size: 32]
	DecalData StoneDecal;//[Offset: 0x7f8, Size: 32]
	DecalData SnowDecal;//[Offset: 0x818, Size: 32]
	DecalData PopCanDecal;//[Offset: 0x838, Size: 32]
	DecalData PyreflyDecal;//[Offset: 0x858, Size: 32]
	DecalData LeafDecal;//[Offset: 0x878, Size: 32]
	DecalData CarDecal;//[Offset: 0x898, Size: 32]
	DecalData AsphaltDecal;//[Offset: 0x8b8, Size: 32]
	DecalData IceDecal;//[Offset: 0x8d8, Size: 32]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x900, Size: 272]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10, Size: 1]
	bool bIgnoreDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa11, Size: 1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa12, Size: 1]
	DecalComponent* ImpactDecalComp;//[Offset: 0xa18, Size: 8]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0xa20, Size: 8]
	Vector DecalScale;//[Offset: 0xa2c, Size: 12]
	SceneComponent* TargetImpactComp;//[Offset: 0xa48, Size: 8]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0xad0, Size: 8]
	<int,ParticleSystem*> WeaponAvatarSpecialFleshFX;//[Offset: 0xad8, Size: 80]
	bool LoadNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 1]
	bool UseNewImpactFxAysnc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2d, Size: 1]
	void TimerHideDecal();// 0x3540aec
	void OnLoadImpactFxAsyncCallBack(SoftObjectPath ImpactFxPath, float DistanceScaler, byte HitSurfaceType);// 0x3540938
	void OnHandleImpactFx(ParticleSystem* ImpactFX, float DistanceScaler, byte HitSurfaceType);// 0x3540844
	SoftObjectPath GetDirectionImpactFXPath(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x3540688
	bool GetDirectionImpactFXAsync(byte SurfaceType, float NormalDegree, float DistanceScaler, byte HitSurfaceType, const Actor* ImpactCauser);// 0x3540504

--------------------------------
Class: HitEffectItemDataList
	<byte,ParticleSystem*> ItemDataListMap;//[Offset: 0x0, Size: 80]

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 4]
	float LifeSpan;//[Offset: 0x4, Size: 4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 8]
	float ImpactEffectStartScaleDistance;//[Offset: 0x10, Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x14, Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x18, Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize VictimLocation;//[Offset: 0x24, Size: 12]
	Vector_NetQuantize BulletPos;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x3c, Size: 12]
	Vector2D ShootDir2D;//[Offset: 0x48, Size: 8]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	uint32 ShootID;//[Offset: 0x54, Size: 4]
	int BulletTypeSpecialID;//[Offset: 0x58, Size: 4]
	uint16 CompensationTime;//[Offset: 0x5c, Size: 2]
	Actor* Actor;//[Offset: 0x60, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x68, Size: 8]
	int TimeStamp;//[Offset: 0x70, Size: 4]
	int ClientShootTime;//[Offset: 0x74, Size: 4]
	byte SpecialBulletID;//[Offset: 0x78, Size: 1]
	byte HitBodyType;//[Offset: 0x79, Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x7c, Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x80, Size: 4]
	Vector_NetQuantize WeaponOwnerHeadPos;//[Offset: 0x84, Size: 12]
	float DamageRate;//[Offset: 0x90, Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	Vector_NetQuantize GunTailPos;//[Offset: 0x98, Size: 12]
	FName BoneName;//[Offset: 0xa8, Size: 8]
	Transform BoneTrans;//[Offset: 0xb0, Size: 48]
	byte ImpactEffectMask;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x2d0, Size: 8]
	int SortOrder;//[Offset: 0x2d8, Size: 4]
	float FadeScreenSize;//[Offset: 0x2dc, Size: 4]
	float FadeStartDelay;//[Offset: 0x2e0, Size: 4]
	float FadeDuration;//[Offset: 0x2e4, Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	Vector DecalSize;//[Offset: 0x2ec, Size: 12]
	void SetSortOrder(int Value);// 0x5b22060
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x5b21fe4
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x5b21eec
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x5b21e70
	float GetFadeStartDelay();// 0x5b21e3c
	float GetFadeDuration();// 0x5b21e08
	MaterialInterface* GetDecalMaterial();// 0x5b21dd4
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x5b21d98

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0x110, Size: 16]
	enum StartStateType;//[Offset: 0x120, Size: 1]
	enum FinishStateType;//[Offset: 0x121, Size: 1]
	State* CurrentState;//[Offset: 0x128, Size: 8]
	enum CurrentStateType;//[Offset: 0x130, Size: 1]
	enum LastStateType;//[Offset: 0x131, Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x5f8, Size: 16]
	FString TreasureBoxName;//[Offset: 0x608, Size: 16]
	float TotalHP;//[Offset: 0x618, Size: 4]
	float BrokenHPPropotion;//[Offset: 0x61c, Size: 4]
	float TotalTime;//[Offset: 0x620, Size: 4]
	int boxId;//[Offset: 0x624, Size: 4]
	Vector GroupLoc;//[Offset: 0x628, Size: 12]
	float DestroyTime;//[Offset: 0x634, Size: 4]
	float OperationalDistance;//[Offset: 0x638, Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x63c, Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x640, Size: 8]
	Transform StandbyEffectTrans;//[Offset: 0x650, Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x680, Size: 8]
	Transform OpenningEffectTrans;//[Offset: 0x690, Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x6c0, Size: 8]
	Transform OpennedEffectTrans;//[Offset: 0x6d0, Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x700, Size: 8]
	Transform BrokenEffect1Trans;//[Offset: 0x710, Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x740, Size: 8]
	Transform BrokenEffect2Trans;//[Offset: 0x750, Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x780, Size: 8]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x788, Size: 8]
	SceneComponent* DefaultRoot;//[Offset: 0x790, Size: 8]
	class Controller[] InstigatorList;//[Offset: 0x798, Size: 16]
	class Actor[] DamageCauserList;//[Offset: 0x7a8, Size: 16]
	enum PickUpBoxType;//[Offset: 0x7b8, Size: 1]
	bool bFixBoxName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b9, Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ba, Size: 1]
	int IconID;//[Offset: 0x7bc, Size: 4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 1]
	bool bRegisterRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83a, Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83b, Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x83c, Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x840, Size: 4]
	int HideLightColumn;//[Offset: 0x844, Size: 4]
	float GoUpAnimationWait;//[Offset: 0x848, Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x84c, Size: 4]
	float GoUpAnimationHight;//[Offset: 0x850, Size: 4]
	bool GoUpAnimationHightEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854, Size: 1]
	float GoUpAnimationYawSpeed;//[Offset: 0x858, Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x85c, Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x860, Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x86c, Size: 12]
	bool bImmediateOpenBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 1]
	bool IsForbidOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x879, Size: 1]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87a, Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x880, Size: 8]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x888, Size: 8]
	float StartedTime;//[Offset: 0x8a8, Size: 4]
	enum CurState;//[Offset: 0x8ac, Size: 1]
	uint32 StartedPlayerKey;//[Offset: 0x8b0, Size: 4]
	int StartedTeamId;//[Offset: 0x8b4, Size: 4]
	float CountdownTime;//[Offset: 0x8b8, Size: 4]
	float StartDestroytime;//[Offset: 0x8bc, Size: 4]
	int MonsterBoxId;//[Offset: 0x8c0, Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x8c4, Size: 4]
	<FString,FString> DataStrs;//[Offset: 0x8c8, Size: 80]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x920, Size: 8]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x928, Size: 8]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x930, Size: 8]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x938, Size: 8]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x940, Size: 8]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x948, Size: 8]
	Object* TriggerActionHost;//[Offset: 0x988, Size: 8]
	void ShowMonsterTreasureBoxSkelemesh(bool IsShow);// 0x4033584
	void ShowMonsterTreasureBox(PlayerController* PC);// 0x3420b64
	void SetDropItems(out const DropPropData[] DropItems, STExtraPlayerState* PlayerState);// 0x4033584
	void SetClientClientAutoActiveBoxCD(int CD);// 0x3420ae8
	void SetAutoActiveBoxCD(int leftTime);// 0x3420a6c
	void OnTreasureBoxPicked__DelegateSignature();// 0x4033584
	void OnSomeonePickItem(uint32 InPC);// 0x34209f0
	void OnRep_HideLightColumn();// 0x34209dc
	void OnRep_CurState();// 0x34209c8
	void OnBoxEmpty();// 0x34209b4
	void OnAnimationStop();// 0x34209a0
	bool IsShowIcon();// 0x3420968
	int GetMonsterBoxId();// 0x3420934
	enum[] GetDamageableGameObjectType();// 0x3420888
	enum GetCurState();// 0x3420854
	int GetClientClientAutoActiveBoxCD();// 0x3420820
	void DeActiveMonsterTreasureBox();// 0x342080c
	bool CanBeDamaged();// 0x34207d4
	void BPRepCurState();// 0x4033584
	void BPOnStopMonsterTreasureBox();// 0x4033584
	void BPOnStartMonsterTreasureBox();// 0x4033584
	void BPOnHideLightColumn();// 0x4033584
	void BPOnCountdownEnd();// 0x4033584
	void BPOnBreakMonsterTreasureBox();// 0x4033584
	void BPOnAnimationStop();// 0x4033584
	void BPOnAnimationAkAudioStop();// 0x4033584
	void BPOnAnimationAkAudioStart();// 0x4033584
	FString BPGetTreasureBoxName();// 0x4033584

--------------------------------
Class: UAEHouseActor.UAENetActor.LuaActor.Actor.Object
	int iRegionHouse;//[Offset: 0x4a0, Size: 4]
	float WindowHideDistanceSquared;//[Offset: 0x4a4, Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x4a8, Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x4ac, Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x4b0, Size: 4]
	UAEWindowRepData[] WindowList;//[Offset: 0x4b8, Size: 16]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x4c8, Size: 80]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	bool bShouldConsiderDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 1]
	bool SerializeDataUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool IsStickToTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	byte[] SerializeData;//[Offset: 0x588, Size: 16]
	static void ProcessWindowCreateList();// 0x3c55384
	void OnRep_WindowList();// 0x3c55370
	void ClearWindowList();// 0x3c5535c
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x3c551d4

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0, Size: 48]
	FString PathToLoad;//[Offset: 0x30, Size: 16]
	int ID;//[Offset: 0x40, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x48, Size: 8]

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x830, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x834, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x838, Size: 8]
	StaticMesh* BrokenMesh;//[Offset: 0x840, Size: 8]
	ParticleSystem* BrokenEffect;//[Offset: 0x848, Size: 8]
	void NotifyServerBroken();// 0x4033584
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x3c66ad0
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x4033584
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x3c66a00
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x3c66940
	UAEWindowRepData GetRepData();// 0x3c66874

--------------------------------
Class: ProduceDropItemComponent.ActorComponent.Object
	CustomDropRule CustomDropRule;//[Offset: 0x118, Size: 3]
	HitResult GroundHitInfo;//[Offset: 0x120, Size: 136]
	int produceID;//[Offset: 0x1a8, Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0x1ac, Size: 4]
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	PickUpWrapperActor*[] GenerateActorList;//[Offset: 0x1b8, Size: 16]
	int GridStep;//[Offset: 0x1c8, Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0x1d0, Size: 8]
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	int[] DropPlanIDList;//[Offset: 0x1e0, Size: 16]
	int[] NightDropPlanIDList;//[Offset: 0x1f0, Size: 16]
	int[] DayDropPlanIDList;//[Offset: 0x200, Size: 16]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x210, Size: 8]
	float TombBoxLifeTime;//[Offset: 0x228, Size: 4]
	ParticleSystem* DropGroundEffect;//[Offset: 0x230, Size: 40]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	Transform DropGroundEffectTransform;//[Offset: 0x260, Size: 48]
	float DropGroundItemLifeOverride;//[Offset: 0x290, Size: 4]
	bool IsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	float startHeight;//[Offset: 0x298, Size: 4]
	bool bIsIgonreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	float DropGroundEffectLifeSpan;//[Offset: 0x2a0, Size: 4]
	bool DropGroundInRandomCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	Vector DropGroundCenterOffest;//[Offset: 0x2a8, Size: 12]
	float DropGroundOuterCircleRadius;//[Offset: 0x2b4, Size: 4]
	float DropGroundInnerCircleRadius;//[Offset: 0x2b8, Size: 4]
	float DropGroundStartAndgle;//[Offset: 0x2bc, Size: 4]
	float DropGroundEndAngle;//[Offset: 0x2c0, Size: 4]
	bool bDropGroundAngleRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 1]
	Vector2D[] DropGroundAngleRangeList;//[Offset: 0x2c8, Size: 16]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bHideDeadTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	int OpenDropGroundEffect;//[Offset: 0x2dc, Size: 4]
	int RandomDropGroundEffect;//[Offset: 0x2e0, Size: 4]
	float MaxTraceDist;//[Offset: 0x2e4, Size: 4]
	bool bUseDropCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	bool bUseDropCurveAnim_DropToTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 1]
	delegate OnItemSpawned;//[Offset: 0x2f0, Size: 16]
	DropItemCurveAnimComponent* DropItemCurveAnimComponent;//[Offset: 0x300, Size: 8]
	bool IsFoeceNotTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	void StartDropToPosition(Vector DestinPos, Character* KillerPawn, Actor* DeadPawn, bool InTraceGround);// 0x349a0d8
	void StartDrop(Actor* DeadCharacter, Controller* Killer);// 0x349a024
	void SetProduceID(int produceID);// 0x3499fac
	void SetNightDropPlanIDList(out int[] DayIdList, out int[] NightIdList);// 0x3499e70
	void SetDropPlanIDList(out int[] IDList);// 0x3499db8
	void SetDropItemLifeSpan(int ItemTime);// 0x3499d3c
	void RandomCircleDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x3499ba8
	void OnOwnerPawnDead(STExtraSimpleCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x34999d4
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans);// 0x34998b4
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x34997a8
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x3499704
	PickUpWrapperActor*[] GetGenerateWrapperList();// 0x3499604
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x34994d0
	int GetCountStrNum(FString CountStr);// 0x3499394
	FString GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x3499268
	FString GenerateDropItemByCfg(out DropPropData[] FinalDropItems);// 0x349913c
	bool DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector Offset, bool bIsAutoExpand, bool bFixBoxName);// 0x3498e24
	void DropToTombBox(out const PickUpItemData[] PropData, Character* DeadPawn);// 0x3498d2c
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* backpack);// 0x3498c20
	Actor* DropToGround(out const PickUpItemData PropData, Transform WrapperTrans, Vector StartPos, bool ShowGroundEffect);// 0x34989f8
	void DropToCommonTreasureBox(Actor* Producer);// 0x3498974
	void DropToCommonLootBox(Actor* Producer, Transform BoxTrans, CommonTreasureBox* CommonTreasureBox);// 0x3498850
	void DropOutPropsNearActor(out const DropPropData[] PropDataList, Actor* StartActor);// 0x3498744
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn);// 0x3498600
	void CalcDropItemListByDropRuleByCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList);// 0x34984dc
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x34983d0

--------------------------------
Class: CustomDropRule
	bool bTraceIgnorePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bTraceIgnoreWarteringArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAttachToTargetActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: DropItemCurveAnimComponent.ActorComponent.Object
	Vector2D RangeHigh;//[Offset: 0x110, Size: 8]
	Vector CustomStartOffset;//[Offset: 0x118, Size: 12]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	bool UseTrailParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 1]
	bool ClientDropOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126, Size: 1]
	float ClientDropOneByOneInterval;//[Offset: 0x128, Size: 4]
	float CustomGravity;//[Offset: 0x12c, Size: 4]
	float TrailParticleDelayTime;//[Offset: 0x130, Size: 4]
	float LandDirectlyAfterTheReplicatedTime;//[Offset: 0x134, Size: 4]
	float ParticleScale;//[Offset: 0x138, Size: 4]
	ParticleSystem* DropTailsParticle;//[Offset: 0x140, Size: 40]
	ParticleSystem* DropTailsParticleSystem;//[Offset: 0x168, Size: 8]
	bool bUseDropGroundParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	float DropGroundParticleLifeTime;//[Offset: 0x174, Size: 4]
	ParticleSystem* DropGroundParticle;//[Offset: 0x178, Size: 40]
	ParticleSystem* DropGroundParticleSystem;//[Offset: 0x1a0, Size: 8]
	DropGroupContainer[] ItemGroupList;//[Offset: 0x1a8, Size: 16]
	CurveFloat* AnimCurve;//[Offset: 0x1b8, Size: 8]
	bool bUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	void OnDropTailsLoadFinsh2(int GroupID);// 0x334569c
	void OnDropGroundLoadFinsh();// 0x3345688
	void AddItemClient(int Group, Vector InStartPos, Vector InEndPos, Actor* Target);// 0x3345558
	void AddDropActorServer(Actor* PickUpWrapper, Vector InStartPos, int UserAddr);// 0x3345464

--------------------------------
Class: DropGroupContainer
	int GroupIndex;//[Offset: 0x0, Size: 4]
	float GroupTime;//[Offset: 0x4, Size: 4]
	ItemCurveAnim[] List;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ItemCurveAnim
	enum CurState;//[Offset: 0x0, Size: 1]
	bool ShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float DropDuration;//[Offset: 0x4, Size: 4]
	float CurrentTime;//[Offset: 0x8, Size: 4]
	float DropStartSpeed;//[Offset: 0xc, Size: 4]
	float DelayDestroyParticleTime;//[Offset: 0x10, Size: 4]
	float DelayStartTime;//[Offset: 0x14, Size: 4]
	float DelayDestroyGroundParticleTime;//[Offset: 0x18, Size: 4]
	Vector StartPos;//[Offset: 0x1c, Size: 12]
	Vector EndPos;//[Offset: 0x28, Size: 12]
	Actor* TargetActor;//[Offset: 0x34, Size: 8]
	ParticleSystemComponent* TailParticleComponent;//[Offset: 0x40, Size: 8]
	ParticleSystemComponent* GroundParticleComponent;//[Offset: 0x48, Size: 8]

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int iRegionSimpleCharacter;//[Offset: 0x1178, Size: 4]
	int ForceLifePeriodTime;//[Offset: 0x117c, Size: 4]
	bool bClientRegionForceClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1180, Size: 1]
	bool bDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1181, Size: 1]
	bool bIsPreClientDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1182, Size: 1]
	delegate OnDeath;//[Offset: 0x1188, Size: 16]
	float DelayHideDuration;//[Offset: 0x1198, Size: 4]
	float AnimDeathLifeSpan;//[Offset: 0x119c, Size: 4]
	bool bForcePlayDeadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a0, Size: 1]
	float DelayHideDurationByHeadShoot;//[Offset: 0x11a4, Size: 4]
	float AnimDeathLifeSpanByHeadShoot;//[Offset: 0x11a8, Size: 4]
	float DelayHideDurationByVehicleHit;//[Offset: 0x11ac, Size: 4]
	float AnimDeathLifeSpanByVehicleHit;//[Offset: 0x11b0, Size: 4]
	ParticleSystem* HeadShootFX_Red;//[Offset: 0x11b8, Size: 8]
	ParticleSystem* HeadShootFX_Green;//[Offset: 0x11c0, Size: 8]
	class PlayerTombBox* DropTomb;//[Offset: 0x11c8, Size: 8]
	int MonsterSpawnTime;//[Offset: 0x11d0, Size: 4]
	int MonsterDeathTime;//[Offset: 0x11d4, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0x11d8, Size: 4]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11dc, Size: 1]
	float AnimBornLifeSpan;//[Offset: 0x11e0, Size: 4]
	bool BornOnCeiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e4, Size: 1]
	float AnimLand_Hard_VelocitySquared_Threshold;//[Offset: 0x11e8, Size: 4]
	float AnimLand_Hard_LifeSpan;//[Offset: 0x11ec, Size: 4]
	float AnimLand_Light_LifeSpan;//[Offset: 0x11f0, Size: 4]
	float AnimActiveLifeSpan;//[Offset: 0x11f4, Size: 4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0x1210, Size: 88]
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x1268, Size: 4]
	float MinTimeLockTarget;//[Offset: 0x126c, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x1270, Size: 4]
	float SensedRadius;//[Offset: 0x1274, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0x1278, Size: 4]
	float HeardRadius;//[Offset: 0x127c, Size: 4]
	float EnableAnimOnDSDistanceSq;//[Offset: 0x1280, Size: 4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0x1288, Size: 8]
	MobAdvancedMovement* MobAdvancedMovement;//[Offset: 0x1290, Size: 8]
	MobPerceptionController* MobPerceptionController;//[Offset: 0x1298, Size: 8]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0x12a0, Size: 8]
	UnitAttrComponent* UnitAttrComp;//[Offset: 0x12a8, Size: 8]
	CircleMgrComponent* CircleMgr;//[Offset: 0x12c0, Size: 8]
	int SyncAIState;//[Offset: 0x12c8, Size: 4]
	int AIState;//[Offset: 0x12d4, Size: 4]
	float HurtAnimTime;//[Offset: 0x12d8, Size: 4]
	float BackAnimPerc;//[Offset: 0x12dc, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x12e0, Size: 4]
	delegate OnEnterAIState;//[Offset: 0x12f0, Size: 16]
	delegate OnLeaveAIState;//[Offset: 0x1300, Size: 16]
	delegate OnBPEnterAIState;//[Offset: 0x1310, Size: 16]
	delegate OnBPLeaveAIState;//[Offset: 0x1320, Size: 16]
	delegate OnChangeAnimParam;//[Offset: 0x1330, Size: 16]
	delegate OnAnimInstanceAssetLoaded;//[Offset: 0x1340, Size: 16]
	delegate OnAnimListComponentAssetLoaded;//[Offset: 0x1350, Size: 16]
	delegate OnCharacterHitPointDelgate;//[Offset: 0x1378, Size: 16]
	bool bCanSkillSpeedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1388, Size: 1]
	int FlowId;//[Offset: 0x138c, Size: 4]
	FString MonsterName;//[Offset: 0x1390, Size: 16]
	FString MonsterNameID;//[Offset: 0x13a0, Size: 16]
	int MonsterSyncID;//[Offset: 0x13b0, Size: 4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b4, Size: 1]
	int Gold;//[Offset: 0x13b8, Size: 4]
	int SuperGold;//[Offset: 0x13bc, Size: 4]
	int[] BornSkill;//[Offset: 0x13c0, Size: 16]
	int[] AloneSkillIdList;//[Offset: 0x13d0, Size: 16]
	int HealthBarCount;//[Offset: 0x13e0, Size: 4]
	bool bIsCrawlChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e4, Size: 1]
	int NeedSendAttackFlow;//[Offset: 0x13e8, Size: 4]
	float TakeDamageScale;//[Offset: 0x13ec, Size: 4]
	float DamageScale;//[Offset: 0x13f0, Size: 4]
	Actor* AttackTarget;//[Offset: 0x13f4, Size: 8]
	int[] DecalIndexArray;//[Offset: 0x1400, Size: 16]
	<byte,ParticleSystem*> ImpactFXMap;//[Offset: 0x1410, Size: 80]
	<byte,AkAudioEvent*> ImpactSoundMap;//[Offset: 0x1460, Size: 80]
	byte HitPartJudgment;//[Offset: 0x14b0, Size: 1]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x14b8, Size: 80]
	BodyTypeDef StandBodyDef;//[Offset: 0x1508, Size: 8]
	PVELagCompensationComponent* PVELagCompensationComponent;//[Offset: 0x1510, Size: 8]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0x1518, Size: 8]
	float IdleWalkSpeedRatio;//[Offset: 0x1520, Size: 4]
	float AttackWalkSpeedRatio;//[Offset: 0x1524, Size: 4]
	float SprintRunSpeedRatio;//[Offset: 0x1528, Size: 4]
	float SidewaysSpeedRatio;//[Offset: 0x152c, Size: 4]
	float MaxSpeedModeRatio;//[Offset: 0x1530, Size: 4]
	float[] CircleDamageRate;//[Offset: 0x1538, Size: 16]
	int ObjectPoolSize;//[Offset: 0x1548, Size: 4]
	int LifePeriodTime;//[Offset: 0x154c, Size: 4]
	float KilledDisCircleEdge;//[Offset: 0x1550, Size: 4]
	int MaxHPStageForBroadcast;//[Offset: 0x1554, Size: 4]
	bool bEnableMaxAllowedDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1558, Size: 1]
	float MaxAllowedDistanceFromSpawnPoint;//[Offset: 0x155c, Size: 4]
	bool bMaxAllowedDistanceCheckIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1560, Size: 1]
	bool IsHeadShootDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1568, Size: 1]
	int RageLevel;//[Offset: 0x158c, Size: 4]
	float AloneRageTimerRate;//[Offset: 0x1598, Size: 4]
	float ImpluseScale;//[Offset: 0x159c, Size: 4]
	float ImpluseZScale;//[Offset: 0x15a0, Size: 4]
	bool EnableOverlapImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a4, Size: 1]
	bool EnableOverlapDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a5, Size: 1]
	float OverlapVehicleDamageRate;//[Offset: 0x15a8, Size: 4]
	float OverlapAgainstVehicleDamageRate;//[Offset: 0x15ac, Size: 4]
	float MinDamageInterval;//[Offset: 0x15b0, Size: 4]
	float MovementTickInterval;//[Offset: 0x15b4, Size: 4]
	float DsActorTickInterval;//[Offset: 0x15b8, Size: 4]
	bool IsNavWalkMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15bc, Size: 1]
	AkAudioEvent* MonsterBornSound;//[Offset: 0x15c8, Size: 8]
	AkAudioEvent* MonsterDeadSound;//[Offset: 0x15d0, Size: 8]
	AkAudioEvent* MonsterIdleSound;//[Offset: 0x15d8, Size: 8]
	AkAudioEvent* MonsterRunSound;//[Offset: 0x15e0, Size: 8]
	float NoPathToTargetTimer;//[Offset: 0x15e8, Size: 4]
	enum AnimGroupMask;//[Offset: 0x15ec, Size: 1]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ed, Size: 1]
	bool bEnableDSTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ee, Size: 1]
	bool ExplodeBeforeDieEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15f8, Size: 1]
	int ExplodeSkillID;//[Offset: 0x15fc, Size: 4]
	float ExplodeSkillDuration;//[Offset: 0x1600, Size: 4]
	bool CloseCollisionForMeshOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1604, Size: 1]
	AkComponent* SoundComp;//[Offset: 0x1608, Size: 8]
	float LagCompensationRecordInterval;//[Offset: 0x16d8, Size: 4]
	float HearRadius;//[Offset: 0x16e0, Size: 4]
	float MinTimeLockHeardPos;//[Offset: 0x16e4, Size: 4]
	bool bIgnoreNetRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ec, Size: 1]
	bool bSimulateMovementByCharacterMovementComponentOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ed, Size: 1]
	bool bEnableSimulateSyncSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ee, Size: 1]
	bool bNotifyLuaDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ef, Size: 1]
	bool TestPathSyncToLocation(Vector Location);// 0x3633a38
	bool TestPathSyncToActor(Actor* Actor);// 0x36339a8
	void StopMovementMode();// 0x363398c
	void StartMovementMode();// 0x3633970
	void ShowHeadShootDeadEffect();// 0x363395c
	void SetCopyBoneSimpleChar(STExtraSimpleCharacter* InSimpleChar);// 0x36338e0
	void ResetCharAnimParam();// 0x36338cc
	void OnSmoothComponentSnapshotPreReplicate();// 0x36338b8
	void OnRep_SyncAIState();// 0x36338a4
	void OnRep_ReplicatedMovement();// 0x3633888
	void OnRep_RageLevel();// 0x3633874
	void OnRep_MonsterSyncID();// 0x3633860
	void OnRep_MonsterNameID();// 0x363384c
	void OnRep_IsLeftRightMove();// 0x3633830
	void OnRep_IdleBlendSpaceValue();// 0x363381c
	void NotifyInitial();// 0x3633808
	void MulticastPlayerSoundByID(int SoundID);// 0x3633758
	void LeaveAIState(enum NewState, bool bIsNotify);// 0x3633698
	bool IsSameTeam(Pawn* Other);// 0x3633600
	bool IsInActiveState();// 0x36335c8
	bool IsEnableBroadcastDamage(out const DamageEvent DamageEvent, float Damage);// 0x36334dc
	bool IsCanCopyBone();// 0x36334a4
	bool IsBoss();// 0x363346c
	bool IsBigBoss();// 0x3633434
	bool IsBehemoth();// 0x36333fc
	void InitCharAnimParam();// 0x36333e8
	bool HasAIState(enum NewState);// 0x3633358
	void HandleHitByBullet(Actor* Causer);// 0x36332dc
	void GotoEarthAndDie();// 0x36332c0
	Vector GetVelocity();// 0x3633280
	AkComponent* GetSoundComponent();// 0x363324c
	Vector GetServerHeadLocation();// 0x3633214
	STExtraPlayerController* GetPlayerControllerSafety();// 0x36331d8
	int GetMonsterType();// 0x36331bc
	FString GetMonsterName();// 0x3633110
	float GetHitBoxRadius();// 0x36330f4
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x3632f90
	ExFootIKComponent* GetExFootIKComponent();// 0x3632f54
	class PlayerTombBox GetDropTomb();// 0x3632f18
	int GetDeactiveMonsterCount();// 0x3632ee4
	byte GetCurHitPartJugementType();// 0x3632eb0
	STExtraSimpleCharacter* GetCopyBoneSimpleChar();// 0x3632e7c
	SimpleCharAnimParamList GetAnimParam();// 0x3632e0c
	int GetAliveTimeSeconds();// 0x3632df0
	int GetActiveMonsterCount();// 0x3632dbc
	void ExplodeBeforeDie(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, Vector _hitImpulseDir, HitResult _hitInfo, bool bIsHeadshot);// 0x3632b38
	void EnterAIState(enum NewState, bool bIsNotify);// 0x3632a78
	void EnableDSAnim(bool bEnable);// 0x36329f4
	void DisappearOnDeath();// 0x36329e0
	void DieAfterExplode();// 0x36329cc
	void DelayHidden();// 0x36329b0
	void ClearOnDeath(Controller* EventInstigater, out const DamageEvent DamageEvent);// 0x36328dc
	bool CheckPlayerNeedUpdateAnimation();// 0x36328a4
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x36327b0
	void ChangeSourceType(byte NewSourceType);// 0x3632734
	void BroadcastReliableLeaveAIState(enum NewState, bool bIsNotify);// 0x3632630
	void BroadcastReliableEnterAIState(enum NewState, bool bIsNotify);// 0x363252c
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x36322e8
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3632070
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3631e2c
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3631be8
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3631990
	void BroadcastClientsSimulateLastPointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x363174c
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3631508
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x36312c4
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3631074
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3630df8
	void BroadcastClientsGMTestDamage(float Damage, float CurHealth, int DamageClassID, byte HitPart);// 0x3630c90
	void BroadcastClientsDebugSpeed(float Speed);// 0x3630be0
	void BroadcastClientsDebugOutputDamage(float OutputDmg);// 0x3630b30
	void BPSetEyeEffect(float Switch, LinearColor Color);// 0x4033584
	void BPPreRespawned();// 0x3630b14
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4033584
	void BPNotifyInitial();// 0x4033584
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4033584
	void BPMonsterInitTableDone();// 0x4033584
	byte BPGetReplicatedMovementMode();// 0x3630af8
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x36309a8
	bool BP_HasAIState(enum NewState);// 0x3630918
	RoadPointInfo[] BleCallGetRoadPoints();// 0x363086c
	bool AllowAIState(enum NewState);// 0x36307dc
	void AddWeaponDamageAddition(byte WeaponType);// 0x3630760

--------------------------------
Class: SimpleCharAnimParamList
	Vector Velocity;//[Offset: 0x0, Size: 12]
	Vector movedir;//[Offset: 0xc, Size: 12]
	byte MovementMode;//[Offset: 0x18, Size: 1]
	Rotator ViewRotation;//[Offset: 0x1c, Size: 12]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector HurtDir;//[Offset: 0x2c, Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b, Size: 1]
	bool IsLeftRightMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int RandomAnimID;//[Offset: 0x40, Size: 4]
	int IdleBlendSpaceValue;//[Offset: 0x44, Size: 4]
	float AdditiveYaw;//[Offset: 0x48, Size: 4]

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0x110, Size: 56]
	RepSnapshot Snapshot;//[Offset: 0x148, Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x180, Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x184, Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x188, Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x18c, Size: 4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x190, Size: 4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x194, Size: 4]
	float FindFloorUpOffset;//[Offset: 0x198, Size: 4]
	float FindFloorDownOffset;//[Offset: 0x19c, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x1a0, Size: 4]
	bool bUseFindFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	int CurrentDeviceLevel;//[Offset: 0x1a8, Size: 4]
	int FindFloorDeviceLevel;//[Offset: 0x1ac, Size: 4]
	delegate OnSnapshotPreReplicate;//[Offset: 0x1b0, Size: 16]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x1c4, Size: 212]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299, Size: 1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a, Size: 1]
	bool bOnlyUpdateRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b, Size: 1]
	bool bAutonomousProxyEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	bool bIsReplayRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 1]
	delegate OnActorTeleportFinish;//[Offset: 0x2a0, Size: 16]
	bool bEnableTurnAnimationNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 1]
	bool FlipTurnRightFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 1]
	float MoveMaxSpeedWhenTuring;//[Offset: 0x2b4, Size: 4]
	bool bAutoUpdateVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	float TurnThreshold;//[Offset: 0x2e0, Size: 4]
	CurveFloat* TurnTimeCurve;//[Offset: 0x2e8, Size: 8]
	float TurnSpeed;//[Offset: 0x2f0, Size: 4]
	void TeleportNextSync();// 0x34e1944
	void StopPredict();// 0x34e1930
	void SetVelocity(out const Vector Velocity);// 0x34e18a8
	void SetEnable(bool bInEnable, bool bForceReinit);// 0x34e17d8
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x34e16e8
	void OnRep_Snapshot();// 0x34e16d4
	Vector GetVelocity();// 0x34e169c
	bool GetEnable();// 0x34e1680
	Vector FindFloor(const Vector InLocation);// 0x34e15f0

--------------------------------
Class: RepSnapshot
	float TimeStamp;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]
	Vector_NetQuantize LinearVelocity;//[Offset: 0x1c, Size: 12]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x28, Size: 12]
	bool IsTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: SimulateSyncSmooth
	float MaxPredictMoveTime;//[Offset: 0x0, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x4, Size: 4]
	float SmoothNetUpdateTime;//[Offset: 0x8, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MobAdvancedMovement.ActorComponent.Object
	float WallClimb_AcceptableFaceAngle;//[Offset: 0x110, Size: 4]
	float WallClimb_TurnFaceSpeed;//[Offset: 0x114, Size: 4]
	float WallClimb_KeepDistanceToWall;//[Offset: 0x118, Size: 4]
	float WallClimb_JumpToWallSpeed;//[Offset: 0x11c, Size: 4]
	float WallClimb_JumpToWallHeightOffset;//[Offset: 0x120, Size: 4]
	float WallClimb_MoveUpSpeed;//[Offset: 0x124, Size: 4]
	float WallClimb_MoveUpHeightOffset;//[Offset: 0x128, Size: 4]
	float WallClimb_ClimbToStand_Duration;//[Offset: 0x12c, Size: 4]
	CurveFloat* Curve_ClimbToStand_Forward;//[Offset: 0x130, Size: 8]
	CurveFloat* Curve_ClimbToStand_Height;//[Offset: 0x138, Size: 8]
	float WallJump_JumpSpeed;//[Offset: 0x140, Size: 4]
	float WallJump_JumpAngle;//[Offset: 0x144, Size: 4]
	float WallJump_ZVelocity;//[Offset: 0x148, Size: 4]
	float Stride_AcceptableFaceAngle;//[Offset: 0x14c, Size: 4]
	float Stride_Duration;//[Offset: 0x150, Size: 4]
	float Stride_KeepDistanceToWall;//[Offset: 0x154, Size: 4]
	float Stride_HeightOffset;//[Offset: 0x158, Size: 4]
	float Stride_ForwardOffset;//[Offset: 0x15c, Size: 4]
	float Stride_LineTraceOffset;//[Offset: 0x160, Size: 4]
	CurveFloat* Curve_Stride_Forward;//[Offset: 0x168, Size: 8]
	CurveFloat* Curve_Stride_Height;//[Offset: 0x170, Size: 8]
	bool Stride_JumpInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	int iWallClimbState;//[Offset: 0x17c, Size: 4]
	int iWallJumpState;//[Offset: 0x180, Size: 4]
	int iStrideState;//[Offset: 0x184, Size: 4]
	void WindowJump(Vector DstLoacation, Vector originLocation, float WindowHeight);// 0x3418688
	void WallJump(Vector DstLocation);// 0x341860c
	void WallClimbExit();// 0x34185f8
	void WallClimb(Vector DstLocation, Vector originLocation, float WindowHeight);// 0x3418504
	void TickWallJump_Turn(float DeltaTime);// 0x3418488
	void TickWallJump(float DeltaTime);// 0x341840c
	void TickWallClimb_Turn(float DeltaTime);// 0x3418390
	void TickWallClimb_JumpToWall(float DeltaTime);// 0x3418314
	void TickWallClimb_ClimbUp(float DeltaTime);// 0x3418298
	void TickWallClimb_ClimbToStand(float DeltaTime);// 0x341821c
	void TickWallClimb(float DeltaTime);// 0x34181a0
	void TickStride_Turn(float DeltaTime);// 0x3418124
	void TickStride_Stride(float DeltaTime);// 0x34180a8
	void TickStride_MoveToWall(float DeltaTime);// 0x341802c
	void TickStride(float DeltaTime);// 0x3417fb0
	void StrideJump();// 0x3417f9c
	void StrideExit();// 0x3417f88
	void Stride(out Vector DstLocation, out Vector originLocation);// 0x3417eac
	void OnMobDie();// 0x3417e98
	void NotifyClientsWallClimbSyncState(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x3417d9c
	void NotifyClientsWallClimbStartClimbToStand(Vector pos, Rotator Rotator, int nowWallClimbState);// 0x3417ca0
	void NotifyClientsStrideState(Vector pos, Rotator Rotator, int nowStrideState);// 0x3417ba4
	void NotifyClientsStartStride(Vector pos, Rotator Rotator, int nowStrideState, Vector originLocation, Vector DstLocation, float heightLength, float forwardLength);// 0x34179a4
	bool IsInAdvancedMovement();// 0x341796c
	int GetWallJumpState();// 0x3417938
	int GetWallClimbState();// 0x3417904
	int GetStrideState();// 0x34178d0
	void BPWallJump(Vector DstLocation);// 0x341784c
	void BPWallClimb(Vector DstLocation);// 0x34177c8

--------------------------------
Class: MobPerceptionController.ActorComponent.Object
	float AcceptableNoiseLoudness;//[Offset: 0x110, Size: 4]
	enum[] AcceptableNoiseType;//[Offset: 0x118, Size: 16]
	enum NoiseAttenuationModel;//[Offset: 0x128, Size: 1]
	int NoisePoolSize;//[Offset: 0x12c, Size: 4]
	float NoiseRememberTime;//[Offset: 0x130, Size: 4]
	float NoiseUpdateFrequency;//[Offset: 0x134, Size: 4]
	bool SearchNoise(out NoiseInfo NoiseInfo, enum searchType, BehaviorTreeComponent* BehaviorTree, bool CheckDistance, bool CheckDeadOrDestoryed);// 0x341c924
	void OnPerceptionSenseUpdated(AIPerceptionComponent* PerceptionComponent, out Actor*[] UpdatedActors);// 0x341c82c
	void OnMobDie();// 0x341c818
	void ClearNoisePool();// 0x341c804
	NoiseCheckResult CheckNoise(out AIStimulus Stimulus);// 0x341c6a0
	float Attenuation(out AIStimulus Stimulus);// 0x341c53c
	void AddToNoisePool(Actor* Instigator, out AIStimulus Stimulus, float LoudnessHeard);// 0x341c360

--------------------------------
Class: NoiseInfo
	enum NoiseType;//[Offset: 0x0, Size: 1]
	Actor* Instigator;//[Offset: 0x4, Size: 8]
	Vector NoiseLocation;//[Offset: 0xc, Size: 12]
	float LoudnessAtStart;//[Offset: 0x18, Size: 4]
	float LoudnessHeard;//[Offset: 0x1c, Size: 4]
	float HeardTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x190, Size: 16]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x50e64cc
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x50e6440
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x50e6344

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0x118, Size: 8]
	AIController* AIOwner;//[Offset: 0x120, Size: 8]
	void StopLogic(FString Reason);// 0x50ea3d0
	void RestartLogic();// 0x50ea3b4
	bool IsRunning();// 0x50ea374
	bool IsPaused();// 0x50ea334

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0x110, Size: 8]
	BlackboardData* BlackboardAsset;//[Offset: 0x118, Size: 8]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0x140, Size: 16]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x50e818c
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x50e7ff8
	void SetValueAsRotator(out const FName KeyName, Rotator RotatorValue);// 0x50e7f1c
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x50e7e40
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x50e7d64
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x50e7c88
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x50e7bac
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x50e7ad0
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x50e79f4
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x50e7910
	bool IsVectorValueSet(out const FName KeyName);// 0x50e7870
	Vector GetValueAsVector(out const FName KeyName);// 0x50e77d0
	FString GetValueAsString(out const FName KeyName);// 0x50e76cc
	Rotator GetValueAsRotator(out const FName KeyName);// 0x50e762c
	Object* GetValueAsObject(out const FName KeyName);// 0x50e7590
	FName GetValueAsName(out const FName KeyName);// 0x50e74f4
	int GetValueAsInt(out const FName KeyName);// 0x50e7458
	float GetValueAsFloat(out const FName KeyName);// 0x50e73bc
	byte GetValueAsEnum(out const FName KeyName);// 0x50e7320
	class Object GetValueAsClass(out const FName KeyName);// 0x50e7284
	bool GetValueAsBool(out const FName KeyName);// 0x50e71e4
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x50e70f8
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x50e700c
	void ClearValue(out const FName KeyName);// 0x50e6f80

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 8]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 16]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 8]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 16]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 8]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 8]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x28, Size: 8]
	BlackboardData* BlackboardAsset;//[Offset: 0x30, Size: 8]
	BTDecorator*[] RootDecorators;//[Offset: 0x38, Size: 16]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x48, Size: 16]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 16]
	BTService*[] Services;//[Offset: 0x68, Size: 16]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 8]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 8]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 16]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 16]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 16]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float interval;//[Offset: 0x58, Size: 4]
	float RandomDeviation;//[Offset: 0x5c, Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 1]
	byte FlowAbortMode;//[Offset: 0x59, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 2]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x468, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x468, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x468, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x468, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x468, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x468, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x470, Size: 8]
	BrainComponent* BrainComponent;//[Offset: 0x478, Size: 8]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x480, Size: 8]
	PawnActionsComponent* ActionsComp;//[Offset: 0x488, Size: 8]
	BlackboardComponent* Blackboard;//[Offset: 0x490, Size: 8]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x498, Size: 8]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x4a0, Size: 8]
	delegate ReceiveMoveCompleted;//[Offset: 0x4a8, Size: 16]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9, Size: 1]
	bool bShareNavigationSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba, Size: 1]
	Vector ShareNavSysOffset;//[Offset: 0x4bc, Size: 12]
	bool bEnableActiveRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x50daf28
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x50daeac
	void SetMoveBlockDetection(bool bEnable);// 0x50dae28
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x50dad90
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x4033584
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x4033584
	void OnPossess(Pawn* PossessedPawn);// 0x4033584
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x50dacd0
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x50daa58
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x50da83c
	void K2_SetFocus(Actor* NewFocus);// 0x50da7c0
	void K2_SetFocalPoint(Vector FP);// 0x50da744
	void K2_ClearFocus();// 0x50da730
	bool HasPartialPath();// 0x50da6f8
	PathFollowingComponent* GetPathFollowingComponent();// 0x50da6dc
	byte GetMoveStatus();// 0x50da6a8
	Vector GetImmediateMoveDestination();// 0x50da670
	Actor* GetFocusActor();// 0x50da63c
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x50da5a4
	Vector GetFocalPoint();// 0x50da56c
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x50da550
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x50da4d4

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x158, Size: 8]
	NavigationData* MyNavData;//[Offset: 0x168, Size: 8]
	void OnNavDataRegistered(NavigationData* NavData);// 0x5101ef4
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x5101d9c
	Vector GetPathDestination();// 0x5101d64
	byte GetPathActionType();// 0x5101d30

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0x110, Size: 16]
	class AISense* DominantSense;//[Offset: 0x120, Size: 8]
	AIController* AIOwner;//[Offset: 0x138, Size: 8]
	delegate OnPerceptionUpdated;//[Offset: 0x1c0, Size: 16]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x1d0, Size: 16]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x50dccf4
	void RequestStimuliListenerUpdate();// 0x50dcce0
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x50dcc28
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x50dcb70
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x50dca78
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x50dc980
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x50dc888
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x50dc76c

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 4]
	float MaxAge;//[Offset: 0x2c, Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 4]
	enum NotifyType;//[Offset: 0x2c, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x30, Size: 8]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x80, Size: 16]
	float PerceptionAgingRate;//[Offset: 0x90, Size: 4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x50ddcc4
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x50ddc48
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x50ddb54
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x50dda9c
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x50dd908

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 4]
	float ExpirationAge;//[Offset: 0x4, Size: 4]
	float Strength;//[Offset: 0x8, Size: 4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 12]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 12]
	FName Tag;//[Offset: 0x28, Size: 8]
	int iExtraData;//[Offset: 0x40, Size: 4]
	int iExtraData;//[Offset: 0x44, Size: 4]
	int iExtraData;//[Offset: 0x48, Size: 4]
	float fExtraData;//[Offset: 0x4c, Size: 4]
	float fExtraData;//[Offset: 0x50, Size: 4]
	float fExtraData;//[Offset: 0x54, Size: 4]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 8]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 16]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0x110, Size: 8]
	PawnActionStack[] ActionStacks;//[Offset: 0x118, Size: 16]
	PawnActionEvent[] ActionEvents;//[Offset: 0x128, Size: 16]
	PawnAction* CurrentAction;//[Offset: 0x138, Size: 8]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x5103750
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x5103654
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x51035c8
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x510353c

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 8]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 8]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 8]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 8]
	Object* Instigator;//[Offset: 0x40, Size: 8]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 8]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 1]
	byte GetActionPriority();// 0x5102574
	void Finish(byte WithResult);// 0x51024e8
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x5102434

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 8]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0x118, Size: 16]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0x128, Size: 16]
	GameplayTask*[] TickingTasks;//[Offset: 0x148, Size: 16]
	GameplayTask*[] KnownTasks;//[Offset: 0x158, Size: 16]
	delegate OnClaimedResourcesChange;//[Offset: 0x170, Size: 16]
	void OnRep_SimulatedTasks();// 0x502d158
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x502ce60

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x58, Size: 8]
	void ReadyForActivation();// 0x502b214
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x4033584
	void EndTask();// 0x502b200

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 4]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: NoiseCheckResult
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum NoiseType;//[Offset: 0x1, Size: 1]
	float LoudnessHeard;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	float VelocityDampingOnGround;//[Offset: 0x110, Size: 4]
	float VelocityDampingInMidAir;//[Offset: 0x114, Size: 4]
	float StepHeight;//[Offset: 0x118, Size: 4]
	float VehicleHitFeedBack;//[Offset: 0x11c, Size: 4]
	float VehicleImpluseScale;//[Offset: 0x120, Size: 4]
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0x124, Size: 4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0x128, Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x168, Size: 8]
	bool StopSkillSimulate();// 0x363a2e8
	bool StartSkillSimulate(Vector InVelocity, bool PreventPenetration);// 0x363a214
	void SetVelocity(Vector InVelocity);// 0x363a198
	void SetSimulatePhysics(bool bInEnabled);// 0x363a118
	void SetEnabled(bool InEnabled);// 0x363a098
	void SetCharacterMovementActive(bool _bIsActive);// 0x363a014
	bool IsOnGround();// 0x3639fdc
	Vector GetVelocity();// 0x3639fa4
	bool FindGround();// 0x3639f6c
	void AddVelocity(Vector InVelocity);// 0x3639ef0
	void ActivatePhysics();// 0x3639edc

--------------------------------
Class: UnitAttrComponent.ActorComponent.Object
	byte Category;//[Offset: 0x110, Size: 1]
	byte Type;//[Offset: 0x111, Size: 1]
	int TypeId;//[Offset: 0x114, Size: 4]
	void SetActorVisible(bool bEnable);// 0x36ee4c8

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x1c8, Size: 16]
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 1]
	bool bIsNotMultiCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da, Size: 1]
	bool bMakePainToHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1db, Size: 1]
	bool bUseDIYCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 1]
	int CustomBeginIndex;//[Offset: 0x1e0, Size: 4]
	bool IsCustomWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x1e8, Size: 16]
	float DestinyThreshold;//[Offset: 0x1f8, Size: 4]
	int RoundNum;//[Offset: 0x1fc, Size: 4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool bEnableLowProbCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	Vector2D LowProbCenter;//[Offset: 0x204, Size: 8]
	float LowProbCenterRadius;//[Offset: 0x20c, Size: 4]
	float LowProbRatio;//[Offset: 0x210, Size: 4]
	bool bEnableInnerCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	class Actor* InnerCircleClass;//[Offset: 0x218, Size: 8]
	float TimeForForbidMakePain;//[Offset: 0x220, Size: 4]
	Actor* InnerCircle;//[Offset: 0x228, Size: 8]
	Vector InnerCircleInfo;//[Offset: 0x230, Size: 12]
	bool bEnablePrecalculateCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	Vector BlueCircle;//[Offset: 0x274, Size: 12]
	Vector WhiteCircle;//[Offset: 0x280, Size: 12]
	int CurrentIndex;//[Offset: 0x28c, Size: 4]
	Actor* ContainActor;//[Offset: 0x290, Size: 8]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	delegate OnCircleBegin;//[Offset: 0x3b8, Size: 16]
	delegate OnCircleSizeAndPosChanged;//[Offset: 0x3c8, Size: 16]
	delegate OnCircleInitSizeAndPosChanged;//[Offset: 0x3d8, Size: 16]
	delegate OnCircleInfoChanged;//[Offset: 0x3e8, Size: 16]
	delegate OnWaveEnded;//[Offset: 0x3f8, Size: 16]
	delegate OnCircleEnded;//[Offset: 0x408, Size: 16]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x418, Size: 8]
	bool bPreCalculateFirstWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	delegate OnFinishedPreCalculateFirstWhiteCircle;//[Offset: 0x428, Size: 16]
	bool WhitCircleIsOutOfBlueCircle();// 0x33178e8
	void StartCircleFromBegin();// 0x33178d4
	void SetGMCicleTime(float cdTime, float LastTime);// 0x33177ec
	void RetriveGetCircleInfo(out GetCircleInfo CurInfo);// 0x3317734
	void RetriveCircleInfo(out ReConnectGameStateInfo CurInfo);// 0x3317670
	void OverrideDestinyChanceByIndex(bool bOverride, float InChance, int CircleIndex);// 0x331756c
	void OverrideDestinyChance(bool bOverride, float InChance);// 0x33174a4
	void MakePain(Actor* _actor, float _desireDamage);// 0x33173ec
	void MakeDesiredCircle(Vector circleInfo, int CircleType);// 0x3317334
	bool MakeCurrentWhiteCircle(int Index);// 0x331729c
	bool IsUseCustomWhiteCircle();// 0x3317264
	bool IsPositionInBlueCircle(out const Vector Position);// 0x33171c8
	bool IsInBlueCircle(Actor* _actor);// 0x3317138
	bool HasDoubleCircleEnabled();// 0x331711c
	void GMBeginCircle(int CurIndex, float PosX, float PosY, float PosZ);// 0x3316ff0
	Vector GetWhiteCircle(int Index);// 0x3316f60
	float GetNeedTotalTimeToCircleIndex(int CircleIndex);// 0x3316ed4
	Vector GetInnerCircleInfo();// 0x3316eac
	Vector GetCustomWhiteCircleConfigByIndex(int CircleIndex, int RandomIndex);// 0x3316de4
	Vector GetCustomBlueCircleConfigByIndex(int CircleIndex);// 0x3316d54
	Vector GetCurrentWhiteCircle();// 0x3316d2c
	int GetCurrentCircleIndex();// 0x3316cf8
	Vector GetCurrentBlueCircle();// 0x3316cd0
	void ApplyCircleOffset(Vector InOffset);// 0x3316c54

--------------------------------
Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0x118, Size: 16]
	FString TimerName;//[Offset: 0x128, Size: 16]

--------------------------------
Class: CirCleCfg
	int CircleID;//[Offset: 0x0, Size: 4]
	float DelayTime;//[Offset: 0x4, Size: 4]
	float RadiusWhenDestoryMap;//[Offset: 0x8, Size: 4]
	float SafeZoneAppeartime;//[Offset: 0xc, Size: 4]
	bool bIsCircleWarningUseFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float[] BlueCirclePreWarning;//[Offset: 0x18, Size: 16]
	CircleWarningConfig[] BlueCirclePreWarningWithFilter;//[Offset: 0x28, Size: 16]
	float LastTime;//[Offset: 0x38, Size: 4]
	float Pain;//[Offset: 0x3c, Size: 4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Vector2D bluepoint;//[Offset: 0x44, Size: 8]
	float blueradius;//[Offset: 0x4c, Size: 4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bUseCustomWhiteStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	Vector[] Whitepoints;//[Offset: 0x58, Size: 16]
	float whiteradius;//[Offset: 0x68, Size: 4]
	float Alpha;//[Offset: 0x6c, Size: 4]
	bool bUseContainActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	float DestinyChance;//[Offset: 0x74, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x7c, Size: 4]
	float ExtraRadius;//[Offset: 0x80, Size: 4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	float DamageMagnifierRange;//[Offset: 0x88, Size: 4]
	float DamageMagnifier;//[Offset: 0x8c, Size: 4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x90, Size: 8]
	Vector[] AvoidPoints;//[Offset: 0x98, Size: 16]
	float EdgeDistance;//[Offset: 0xa8, Size: 4]
	bool bUseAvoidPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]

--------------------------------
Class: CircleWarningConfig
	float WarningTime;//[Offset: 0x0, Size: 4]
	enum WarningState;//[Offset: 0x4, Size: 1]

--------------------------------
Class: RegisterTimer
	int waveIndex;//[Offset: 0x0, Size: 4]
	float[] Times;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x3c8, Size: 8]
	bool bUseRandomPointIfNotFindAValidCircleCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	bool bFixMayBeInOcean;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 1]
	bool IsInWater(Vector Position);// 0x33186d0
	Vector GetRandomPointInArea(Vector Origin, float Radius, bool bTry);// 0x33185c0

--------------------------------
Class: GetCircleInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	int CurrentCircleIndex;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ReConnectGameStateInfo
	bool bIsLessning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CircleStateStartServerWorldSecond;//[Offset: 0x4, Size: 4]
	float CircleStatusLastTime;//[Offset: 0x8, Size: 4]
	float CircleStatusElapsedTime;//[Offset: 0xc, Size: 4]
	byte CircleStatus;//[Offset: 0x10, Size: 1]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector OriginalBlueCircle;//[Offset: 0x20, Size: 12]
	Vector WhiteCircle;//[Offset: 0x2c, Size: 12]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x3c, Size: 4]
	float ExtraRadius;//[Offset: 0x40, Size: 4]
	byte AirAttackStatus;//[Offset: 0x44, Size: 1]
	Vector AirAttackArea;//[Offset: 0x48, Size: 12]
	int AirAttackWave;//[Offset: 0x54, Size: 4]
	int BossCountDown;//[Offset: 0x58, Size: 4]
	Vector BossBornPos;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0, Size: 4]
	int DownThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PVELagCompensationComponent.LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	float SimulatedCharacterServerTime();// 0x34abb24
	enum ShootSimpleCharacterVerify(STExtraShootWeapon* Weapon, STExtraBaseCharacter* Shooter, out const BulletHitInfoUploadData ShootData);// 0x34ab9e0

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	int KeepStillMinTime;//[Offset: 0x3bc, Size: 4]
	float StillMaxSpeed;//[Offset: 0x3c0, Size: 4]
	Vector StandStillBoundBoxExtent;//[Offset: 0x3c4, Size: 12]
	Vector StandStillHeadBoundBoxExtent;//[Offset: 0x3d0, Size: 12]
	Vector StandStillHeadBoxOffset;//[Offset: 0x3dc, Size: 12]
	Vector CrouchStillBoundBoxExtent;//[Offset: 0x3e8, Size: 12]
	Vector CrouchStillHeadBoundBoxExtent;//[Offset: 0x3f4, Size: 12]
	Vector CrouchStillHeadBoxOffset;//[Offset: 0x400, Size: 12]
	float WeaponOffsetStillScale;//[Offset: 0x40c, Size: 4]
	Vector StandStillBoundBoxExtentPicth;//[Offset: 0x410, Size: 12]
	Vector StandStillHeadBoundBoxExtentPicth;//[Offset: 0x41c, Size: 12]
	Vector CrouchStillBoundBoxExtentPicth;//[Offset: 0x428, Size: 12]
	Vector CrouchStillHeadBoundBoxExtentPicth;//[Offset: 0x434, Size: 12]
	DistanceContinueHitCheck DistanceContinueHitCheck;//[Offset: 0x440, Size: 44]
	void PostServerMoveDelegate();// 0x33f5b00

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113, Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116, Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117, Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	bool bVerifyMuzzleImpactDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 1]
	bool bVerifyShootPosInHistory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b, Size: 1]
	bool bVerifyMuzzleLocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e, Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f, Size: 1]
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	bool bVerifyHistoryLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 1]
	int TolerateMuzzleAndCharacterDisSquare;//[Offset: 0x124, Size: 4]
	int TolerateMuzzleAndVehicleDisSquare;//[Offset: 0x128, Size: 4]
	float TolerateShootPointDistanceSqured;//[Offset: 0x12c, Size: 4]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0x130, Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0x134, Size: 4]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x13c, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x140, Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x144, Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x148, Size: 4]
	float MaxGunPosZHeight;//[Offset: 0x14c, Size: 4]
	float MaxGunPosLength;//[Offset: 0x150, Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x154, Size: 4]
	float TolerateOwnerAndBulletDist;//[Offset: 0x158, Size: 4]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0x15c, Size: 16]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x16c, Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x174, Size: 4]
	float TolerateShootRange;//[Offset: 0x178, Size: 4]
	float StatisHitDataDelayTime;//[Offset: 0x17c, Size: 4]
	float TolerateHitDataDelayTime;//[Offset: 0x180, Size: 4]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	float TolerateLocusSingle;//[Offset: 0x188, Size: 4]
	float TolerateLocusDist;//[Offset: 0x18c, Size: 4]
	float TolerateLocusSegment;//[Offset: 0x190, Size: 4]
	float TolerateBoxExpand;//[Offset: 0x194, Size: 4]
	float TolerateLocusZOffsetUp;//[Offset: 0x198, Size: 4]
	float TolerateLocusZOffsetDown;//[Offset: 0x19c, Size: 4]
	float LocusSearchBackTime;//[Offset: 0x1a0, Size: 4]
	float LocusZHistoryUpInVehicle;//[Offset: 0x1a4, Size: 4]
	float BonePointTorelate;//[Offset: 0x1a8, Size: 4]
	Vector VerifiedBoneScale;//[Offset: 0x1ac, Size: 12]
	float TolerateMaxWeaponAimAndOwnerHeadHeight;//[Offset: 0x1b8, Size: 4]
	float TolerateMinWeaponAimAndOwnerHeadHeight;//[Offset: 0x1bc, Size: 4]
	float TolerateMinMuzzleFloorHeight;//[Offset: 0x1c0, Size: 4]
	float TolerateWeaponAimAndOwnerHeadDis;//[Offset: 0x1c4, Size: 4]
	float TolerateWeaponAndOwnerHeadDis;//[Offset: 0x1c8, Size: 4]
	float VerifyMuzImpDirIgnoreDis;//[Offset: 0x1cc, Size: 4]
	float TolMuzImpDir2BulletDir;//[Offset: 0x1d0, Size: 4]
	float TolMuzImpDir2ControlRot;//[Offset: 0x1d4, Size: 4]
	int VerifyMuzImpDirRecordTime;//[Offset: 0x1d8, Size: 4]
	float TolShootPos2History;//[Offset: 0x1dc, Size: 4]
	int VerifyShootPosInHistoryRecordTime;//[Offset: 0x1e0, Size: 4]
	float VerifyMuzzleLocusIgnoreDis;//[Offset: 0x1e4, Size: 4]
	float TolMuzLocusXMin;//[Offset: 0x1e8, Size: 4]
	float TolMuzLocusXMax;//[Offset: 0x1ec, Size: 4]
	float TolMuzLocusYMin;//[Offset: 0x1f0, Size: 4]
	float TolMuzLocusYMax;//[Offset: 0x1f4, Size: 4]
	float TolMuzLocusZMin;//[Offset: 0x1f8, Size: 4]
	float TolMuzLocusZMax;//[Offset: 0x1fc, Size: 4]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	int MaxBlockLineTraceTimes;//[Offset: 0x204, Size: 4]
	float TolerateFlyDis;//[Offset: 0x208, Size: 4]
	float VehiclePosCheckInterval;//[Offset: 0x20c, Size: 4]
	float MaxVehicleSpeed;//[Offset: 0x210, Size: 4]
	float TolerateVehicleDis;//[Offset: 0x214, Size: 4]
	float MaxTolerateVehicleDis;//[Offset: 0x218, Size: 4]
	float CharacterPosCheckInterval;//[Offset: 0x21c, Size: 4]
	float MaxCharacterSpeed;//[Offset: 0x220, Size: 4]
	float TolerateCharacterDis;//[Offset: 0x224, Size: 4]
	float MaxTolerateCharacterDis;//[Offset: 0x228, Size: 4]
	float SimVehiclePosCheckInterval;//[Offset: 0x22c, Size: 4]
	float SimTolerateVehicleDis;//[Offset: 0x230, Size: 4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x234, Size: 4]
	float SimCharacterPosCheckInterval;//[Offset: 0x238, Size: 4]
	float SimTolerateCharacterDis;//[Offset: 0x23c, Size: 4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x240, Size: 4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x244, Size: 4]
	float TolerateNetDelay;//[Offset: 0x248, Size: 4]
	float TolerateMaxVictmPosDis;//[Offset: 0x24c, Size: 4]
	float GrayWeaponAndShootAngle;//[Offset: 0x250, Size: 4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x254, Size: 4]
	float GrayImpactPointChangeMinSqured;//[Offset: 0x258, Size: 4]
	float GrayBulletImpactOffsetMaxDist;//[Offset: 0x25c, Size: 4]
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0x260, Size: 16]
	ServerCheckBox[] PoseCheckBoxesHighPrecision;//[Offset: 0x270, Size: 16]
	float fBoundBoxScaleMillisecondMin;//[Offset: 0x280, Size: 4]
	float fBoundBoxScaleMillisecondMax;//[Offset: 0x284, Size: 4]
	Character* CharacterOwner;//[Offset: 0x288, Size: 8]
	WeaponAntiData CacheWeaponAntiData;//[Offset: 0x290, Size: 24]
	Vector LastImpactPoint;//[Offset: 0x2a8, Size: 12]
	<enum,IndefiniteVerifyCfg> IndefiniteVerifyCfg;//[Offset: 0x2c8, Size: 80]
	<enum,int> IndefiniteVerifyPassCount;//[Offset: 0x318, Size: 80]
	<enum,int> IndefiniteVerifyFailCount;//[Offset: 0x368, Size: 80]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9, Size: 1]
	static float Stat_SimulatedCharacterServerTime(const Character* InChara);// 0x33f6dac
	float SimulatedCharacterServerTime();// 0x33f6d70
	void SetIndefiniteVerifyCfg(enum Type, int InCountThreshold, float InPercentThreshold);// 0x33f6c7c
	float ServerLatestTransformUpdateTimeStamp();// 0x33f6c40
	float ServerLatestTimeStamp();// 0x33f6c04
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x33f6b40
	void GrayVerify(STExtraShootWeapon* Weapon, out const BulletHitInfoUploadData ShootData);// 0x33f6a44
	float GetTolerateSimuPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x33f697c
	float GetTolerateServerVictmPosTolerateByNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x33f68b8
	float GetTolerateServerVictmPosByNearMaxNetDelay(Pawn* AttackerPawn, Pawn* VictmPawn);// 0x33f67f4
	float GetTolerateServerShooterPosDisByNetDelay(Pawn* AttackerPawn);// 0x33f6768
	float GetTolerateAutonomousPosOffsetByNetDelay(Pawn* TargetPawn, float NetDelay);// 0x33f66a0
	float GetNearMaxNetDelay(Pawn* TargetPawn, float NearTime);// 0x33f65d8
	int GetIndefiniteVerifyCount(enum VerifyType, bool IsPass);// 0x33f6508
	static float GetCharacterPredictionSeconds(const Character* InChara);// 0x33f648c
	void ConditionChanggeIndefiniteVerify(out const ShootVerifyParameter VerifyData, out enum VerifyType);// 0x33f63a4
	int ChangeIndefiniteVerifyCount(enum VerifyType, bool IsPass, int Var);// 0x33f6298
	float AuthorityCharacterServerTime();// 0x33f6264

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8, Size: 4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DistanceContinueHitCheck
	float CheckDisSquared;//[Offset: 0x0, Size: 4]
	int MaxContinueTimes;//[Offset: 0x4, Size: 4]
	float ShootIntervalBuff;//[Offset: 0x8, Size: 4]
	float MaxCheatTimes;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0, Size: 1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 12]
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 12]
	Vector Offset;//[Offset: 0x1c, Size: 12]
	Vector PitchOffset;//[Offset: 0x28, Size: 12]
	float ReferenceHSlope;//[Offset: 0x34, Size: 4]
	float ReferenceVSlope;//[Offset: 0x38, Size: 4]
	float HMinScale;//[Offset: 0x3c, Size: 4]
	float VMinScale;//[Offset: 0x40, Size: 4]
	float HMaxScale;//[Offset: 0x44, Size: 4]
	float VMaxScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: IndefiniteVerifyCfg
	int CountThreshold;//[Offset: 0x0, Size: 4]
	float PercentThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Box BoundBox;//[Offset: 0x18, Size: 28]
	Box HeadBoundBox;//[Offset: 0x34, Size: 28]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	Vector VehicleLocation;//[Offset: 0x54, Size: 12]
	enum MoveBaseState;//[Offset: 0x60, Size: 1]

--------------------------------
Class: ShootVerifyParameter
	STExtraShootWeapon* Weapon;//[Offset: 0x0, Size: 8]
	STExtraCharacter* Shooter;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ExFootIKComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	float UpwardDetectionDistance;//[Offset: 0x704, Size: 4]
	float DownwardDetectionDistance;//[Offset: 0x708, Size: 4]
	float DetectionSphereRadius;//[Offset: 0x70c, Size: 4]
	byte DetectionCollisionChannel;//[Offset: 0x710, Size: 1]
	float InterpSpeed;//[Offset: 0x714, Size: 4]
	bool bEnableIKEffectorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 1]
	bool bEnableKEffectorOffsetMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x719, Size: 1]
	float ScaleOfPawn;//[Offset: 0x71c, Size: 4]
	<FName,ExFootIKInfo> FootIKInfos;//[Offset: 0x720, Size: 80]
	bool bEnableOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	float TickFrequencyPerSecond;//[Offset: 0x774, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	Vector IKEffectorOffsetMinValue;//[Offset: 0x77c, Size: 12]
	void GetIKEffectorRotation(out Rotator OutIKEffectorRotation, out bool bOutIsValid, out const FName InFootIKName);// 0x33818d8
	Vector GetIKEffectorOffsetMinValue();// 0x33818b0
	void GetIKEffectorOffset(out Vector OutIKEffectorOffset, out bool bOutIsValid, out const FName InFootIKName);// 0x33816d8

--------------------------------
Class: ExFootIKInfo
	FName IKBoneOrSocketName;//[Offset: 0x0, Size: 8]
	FName FixedBoneOrSocketName;//[Offset: 0x8, Size: 8]
	Vector IKBoneOrSocketOffset;//[Offset: 0x10, Size: 12]
	Vector IKEffectorOffset;//[Offset: 0x1c, Size: 12]
	Rotator IKEffectorRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent
	int ItemId;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x10, Size: 4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0x14, Size: 12]
	HitResult HitInfo;//[Offset: 0x20, Size: 136]

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x10, Size: 20]
	Vector Origin;//[Offset: 0x24, Size: 12]
	HitResult[] ComponentHits;//[Offset: 0x30, Size: 16]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 4]
	float MinimumDamage;//[Offset: 0x4, Size: 4]
	float InnerRadius;//[Offset: 0x8, Size: 4]
	float OuterRadius;//[Offset: 0xc, Size: 4]
	float DamageFalloff;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: RoadPointInfo
	int ID;//[Offset: 0x0, Size: 4]
	int Radius;//[Offset: 0x4, Size: 4]
	Vector pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0, Size: 4]
	int ItemDropRuleID;//[Offset: 0x4, Size: 4]
	int RandomCount;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DropPropData
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]
	int DropMode;//[Offset: 0x8, Size: 4]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: CommonTreasureBox.PlayerTombBox.LuaActor.Actor.Object
	void RegisterToCurveAnimComponent();// 0x331f210

--------------------------------
Class: AvatarCapture.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x3c8, Size: 8]
	MeshComponent* WeaponMesh;//[Offset: 0x3d0, Size: 8]
	STExtraPlayerController* ASTPC;//[Offset: 0x3d8, Size: 8]
	int[] IgnoreDisplayWeaponIDList;//[Offset: 0x3e0, Size: 16]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x3f0, Size: 80]
	class AnimInstance* animBP;//[Offset: 0x440, Size: 8]
	<int,class AnimInstance> AnimBP_SpecialMap;//[Offset: 0x448, Size: 80]
	class AnimInstance* AnimBP_Real;//[Offset: 0x498, Size: 8]
	delegate OnWeaponBlendAnim;//[Offset: 0x4a0, Size: 16]
	int CurUseWeaponSkinID;//[Offset: 0x4b0, Size: 4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	<int,FName> SlotToSocket;//[Offset: 0x4b8, Size: 80]
	FName OBPlayerName;//[Offset: 0x508, Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x510, Size: 8]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x518, Size: 8]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x520, Size: 8]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x528, Size: 16]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x538, Size: 16]
	SkeletalMeshComponent* PendantComponent;//[Offset: 0x548, Size: 8]
	FName[] HideBoneNames;//[Offset: 0x550, Size: 16]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x560, Size: 16]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x570, Size: 16]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x580, Size: 8]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x588, Size: 8]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent2* AvatarComp, WeaponManagerComponent* WeaponMgr);// 0x3267d1c
	void SetEnable(bool IsEnable);// 0x3267c98
	void ResetWeaponPendant(int WeaponId);// 0x3267c1c
	void ResetBackpackPendant(CharacterAvatarComponent2* AvatarComponent);// 0x3267ba0
	void RenderCaptureScene();// 0x3267b8c
	void RefreshAvatar();// 0x3267b78
	void OnWeaponSystemDataChanged(out WeaponSystemDataOnSimulateClient WeaponSystemData);// 0x3267ad4
	void OnWeaponAvatarEquipped(int SlotID, ItemDefineID NewItemID);// 0x3267a08
	void OnSimulatedWeaponChanged();// 0x32679f4
	void OnAvatarEquipped(enum SlotType, bool IsEquipped, int ItemId);// 0x32678f0
	void OnAvatarAllMeshLoaded();// 0x32678dc
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x32677d0
	int[] GetWeaponSkinIDs();// 0x326772c
	CharacterAvatarComponent2* GetOBAvatarComponent();// 0x32676f8
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x32675b4
	void EquipWeapon();// 0x32675a0
	void EquipPlayerAvatar(CharacterAvatarComponent2* AvatarComponent);// 0x3267524
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x326745c
	void CreateWeapon(bool IsSkeletalMesh);// 0x32673d8
	void BluePrintSetEnable(bool IsEnable);// 0x4033584
	void ApplyAnimation();// 0x32673c4

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0, Size: 8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 40]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 40]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 40]

--------------------------------
Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<enum,FName> SlotTypeToSocket;//[Offset: 0x908, Size: 80]
	<enum,FName> SubSlotTypeToSocket;//[Offset: 0x958, Size: 80]
	int gender;//[Offset: 0x9a8, Size: 4]
	delegate OnAvatarEquipped;//[Offset: 0x9b0, Size: 16]
	AvatarSlotNameConfig DefaultSlotNameConfig;//[Offset: 0x9c0, Size: 160]
	<enum,AvatarSlotNameConfig> SlotNameMap;//[Offset: 0xa60, Size: 80]
	int HeadAvatarID;//[Offset: 0xac0, Size: 4]
	int PreHeadAvatarID;//[Offset: 0xac4, Size: 4]
	SoftObjectPath HeadMeshSoftPath;//[Offset: 0xac8, Size: 24]
	class AnimInstance* HeadAniminstanceClass;//[Offset: 0xae0, Size: 8]
	bool isEnable2PassHairMarkDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae9, Size: 1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00, Size: 1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb01, Size: 1]
	<FName> HadHideBoneNames;//[Offset: 0xb08, Size: 80]
	enum[] OpenResetHideBone;//[Offset: 0xb58, Size: 16]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0xb68, Size: 80]
	int[] ignoreSlots;//[Offset: 0xbb8, Size: 16]
	int WholeBodyModelID;//[Offset: 0xbc8, Size: 4]
	int CurrentClothID;//[Offset: 0xbcc, Size: 4]
	int[] NeedRemoveSlot;//[Offset: 0xbd0, Size: 16]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe0, Size: 1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0xbe8, Size: 80]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0xc38, Size: 80]
	<enum,BackpackAvatarItemColor*> RunningColorHandle;//[Offset: 0xc88, Size: 80]
	<enum,BackpackAvatarItemPattern*> RunningPatternHandle;//[Offset: 0xcd8, Size: 80]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0xd28, Size: 80]
	delegate OnAvatarAttachEquipped;//[Offset: 0xd78, Size: 16]
	delegate OnClothParticleEquipped;//[Offset: 0xd88, Size: 16]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0xd98, Size: 80]
	int ConfigMinDistFromMainChar;//[Offset: 0xde8, Size: 4]
	int ConfigMaxDistFromMainChar;//[Offset: 0xdec, Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0xdf0, Size: 4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0xdf8, Size: 16]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0xe08, Size: 16]
	int EnableEquipAvatarPendant;//[Offset: 0xe18, Size: 4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1c, Size: 1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1d, Size: 1]
	<int,AdditonalAvatarStruct> AdditionalAvatarMap;//[Offset: 0xe20, Size: 80]
	FakeHeadInfo FakeHeadInfo;//[Offset: 0xe70, Size: 56]
	class AnimInstance* SoftAnimBPClass;//[Offset: 0xea8, Size: 40]
	bool EnableCachedAvatarRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 1]
	bool bEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed3, Size: 1]
	bool HasVehicleAjustHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed4, Size: 1]
	int BodySlotStateChangeCount;//[Offset: 0xed8, Size: 4]
	float CutPlaneW;//[Offset: 0xedc, Size: 4]
	bool EnableClothPlaneCut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 1]
	SkinnedMeshComponent* ClothSkinMeshTobeCut;//[Offset: 0xf00, Size: 8]
	bool bEnableAvatarReAttachFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf08, Size: 1]
	bool bVisibleChangeRefreshAvatarReAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf09, Size: 1]
	enum[] AlwaysResetReAttachSlotList;//[Offset: 0xf10, Size: 16]
	<enum,AvatarReAttachConfigCollection> PendingAvatarReAttachCollectionMap;//[Offset: 0xf20, Size: 80]
	<enum,ReAttachConfig> FinalWorkingAvatarReAttachMap;//[Offset: 0xf70, Size: 80]
	int TypeToInt(enum InSlotType);// 0x3304e68
	void TemporarySetHidedBonesVisibility(bool Visible);// 0x3304de4
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x3304cc4
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x3304c04
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x3304b44
	bool SetSkinMaterial(int SlotID, out const ItemDefineID DefineID, BackpackAvatarHandle* InAvatarHandle);// 0x3304a24
	void SetNormalMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, int SlotID, BackpackAvatarHandle* InAvatarHandle);// 0x33048b8
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x330474c
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x33046d0
	void SetClothParticleVisibility(int SlotID, bool Visible, bool IsForCE);// 0x33045c4
	void SetCastPhotonShadow(bool Enable);// 0x3304540
	bool SetBodySuitsMaterial(out const MeshPackage MeshPack, MeshComponent* MeshComp, BackpackAvatarHandle* InAvatarHandle);// 0x3304400
	void SetAvatarVisibility(enum SlotType, bool Visible, bool IsForCE);// 0x33042f4
	void SetAvatarGender(int AGender);// 0x3304278
	void SetAvatarForceLOD(enum SlotType, int LODLevel);// 0x33041c0
	void SetAllMeshCharMode(bool bMainChar);// 0x330413c
	void ResetOnReCycle();// 0x3304128
	void ResetBackpackPendant(int InSlotID, BackpackAvatarHandle* AvatarHandle);// 0x3304070
	void ResetAnimDynamicsByMeshComp(MeshComponent* MeshComp);// 0x3303fec
	void ResetAllAnimDynamics();// 0x3303fd0
	void RequestSyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x3303f18
	void RemoveForceReplaceOnVehicle(int SlotID);// 0x3303e9c
	void RemoveClothParticleEffect(int SlotID);// 0x3303e20
	void RemoveAvatarReAttach(const enum InTriggerSlot);// 0x3303da4
	void RemoveAttachMesh(int SlotID);// 0x3303d28
	void RefreshAvatarReAttachForAssociatedSlot(const enum InScaledSlot, const enum InAssociatedSlot);// 0x3303c70
	void RefreshAvatarReAttach();// 0x3303c5c
	void ProcessClothSuits();// 0x3303c40
	void ProcessChangedVehicleSeat();// 0x4033584
	void ProcessAvatarRectify();// 0x3303c24
	void PreProcessBeforeLoadMesh();// 0x3303c08
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x4033584
	void PostProcessAfterLoadMesh();// 0x3303bec
	void OnSyncLoadBattleHandlesDone(out const BattleItemHandleBase*[] AvatarHandles);// 0x3303b34
	void OnRespawned();// 0x3303b18
	void OnRep_EnableClothPlaneCut();// 0x3303b04
	void OnRep_BodySlotStateChangedInternal();// 0x3303af0
	void OnRep_BodySlotStateChanged();// 0x3303ad4
	void OnRecycled();// 0x3303ab8
	void OnPlayerLeaveState(enum State);// 0x3303a3c
	void OnPlayerEnterState(enum State);// 0x33039c0
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x33038f0
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x3303830
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x3303784
	void OnEnterOrLeaveVehicle();// 0x4033584
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x330366c
	void OnClothParticleEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x4033584
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x330354c
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x3303478
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x3303348
	void OnAvatarEquippedCall(enum SlotType, bool bEquipped, int ItemId);// 0x3303244
	void OnAvatarEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x4033584
	void OnAvatarAttachEquipped__DelegateSignature(enum SlotType, bool IsEquipped, int ItemId);// 0x4033584
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x33031c0
	void OnAsyncLoadBattleHandlesDone_Download(int InAsyncLoadIndex, out const BattleItemHandleBase*[] AvatarHandles);// 0x33030c0
	void OnAsyncLoadBattleHandlesDone(int InBodySlotStateChangeCount, out const BattleItemHandleBase*[] AvatarHandles);// 0x3302fc0
	void MarkAvatarBoneRetargetLODFeature(const enum InAvatarSlot, const bool InIsUseEnable);// 0x3302ef8
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x3302dd4
	bool IsWearingAvatarNeedParachuteWind();// 0x4033584
	bool IsUseDefaultReplaceModel(int InSlotID, out const ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle);// 0x3302cac
	bool IsTeammate();// 0x3302c6c
	bool IsSelf();// 0x3302c2c
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x3302b2c
	bool IsSameAvatarHandle(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x3302a2c
	bool IsPendantExistAndBackpackHided(int SlotType);// 0x330299c
	bool IsNeedModifyVehicle(int TemplateID);// 0x330290c
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x3302838
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x3302708
	bool IsInVehicleTemplateConfig(int VehicleID, int TemplateID);// 0x3302640
	bool IsCutPlaneOnVehicleOpen();// 0x4033584
	enum IntToType(int InSlotID);// 0x33025c8
	void InitMasterComponent();// 0x33025b4
	void Initialize();// 0x3302598
	void InitialAvatarParam(int AGender);// 0x330251c
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x33024a0
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x33023b0
	bool InitBodyMeshByHead(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x33022c4
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh);// 0x4033584
	bool HandleUnEquipCloth(out const ItemDefineID InItemID);// 0x3302220
	bool HandleUnEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x330213c
	void HandleHeadEquipped(BattleItemHandleBase* Handle);// 0x33020c0
	void HandleEquipInitalCloth(BattleItemHandleBase* InItemHandle);// 0x3302044
	bool HandleEquipCloth(out const ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle);// 0x3301f60
	bool HandleEquipAdditionalCloth(out const ItemDefineID InItemID, int InSlotID);// 0x3301e7c
	StaticMesh* GetStaticMesh(out const MeshPackage MeshPack);// 0x3301dc0
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x3301cb8
	SkeletalMesh* GetSkeletalMesh(out const MeshPackage MeshPack);// 0x3301bfc
	int GetRepalceIDOnVehicle(int OriginID);// 0x4033584
	enum GetPendantSlotType();// 0x3301bc0
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x3301b2c
	MaterialInstanceDynamic* GetMaterialBySlotName(enum InSlotType, FName SlotName);// 0x3301a64
	MaterialInstance* GetMaterial(out const MeshPackage MeshPack);// 0x33019a8
	BackpackAvatarHandle* GetLoadedHandle(int SlotID);// 0x330191c
	int GetEquipmentSkinItemID(int InItemID);// 0x3301888
	bool GetEquimentMeshBySlot(int Slot, out MeshData MeshPack);// 0x330178c
	int[] GetDefaultBodyItemIDList();// 0x33016e8
	FName GetClothMaterialSkinName(enum SlotType, bool bSuit);// 0x3301618
	FName GetClothMaterialColorName(enum SlotType, bool bSuit);// 0x3301548
	MaterialInterface* GetCharSkinMaterial(MeshComponent* MasterMesh, enum SlotType, BackpackAvatarHandle* InAvatarHandle);// 0x3301444
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle);// 0x4033584
	BackpackAvatarItemPattern* GetAvatarItemPattern(enum InSlotType, int InPatternID, int InNumID);// 0x3301344
	BackpackAvatarItemColor* GetAvatarItemColor(enum InSlotType, int InColorID);// 0x330127c
	int GetAvatarIDBySlotID(int SlotID);// 0x33011f0
	enum GetAttachPartSlotType();// 0x33011b4
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x3301120
	bool GetAttachMeshResRef(out const AvatarAttachMeshData MeshPack, out SoftObjectPath OutAssetRef);// 0x3300fb8
	void GetAllEquipItems(out int[] EquipItems);// 0x3300f00
	void GenerateVehicleTemplateConfig();// 0x4033584
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle);// 0x4033584
	void ForceReplaceAvatarOnVehicle(int SlotID);// 0x3300e84
	void FillVehicleTemplateConfig(int TemplateID, int VehicleID);// 0x3300dd0
	bool EnableEquipAvatarPendantFeature();// 0x3300d98
	bool DeleteAvatarMeshData(int InSlotID, bool MeshChanged);// 0x3300cbc
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID);// 0x4033584
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID);// 0x4033584
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x3300bd4
	void ClearAvatarHandlerFromPool(out const ItemDefineID InItemID);// 0x3300b3c
	bool CheckShouldEquipDefaultItem(int InSlotID);// 0x3300aa4
	bool CheckIsHiddenByOther(int InItemResID);// 0x3300a14
	void CheckAvatarReAttachForSlotAssociation(const enum InSlot);// 0x3300998
	void CheckAvatarReAttachForSlot(const enum InScaledSlot);// 0x330091c
	void CheckAvatarReAttachCancelForSlotAssociation(const enum InScaledSlot);// 0x33008a0
	void CancelAvatarReAttach(out const ReAttachConfig InAvatarReAttachInfo);// 0x3300744
	void BPOnRemoveAvatarReAttach();// 0x4033584
	void BPOnDeleteAvatarMeshData(int InSlotID, bool MeshChanged);// 0x4033584
	bool BPIsNeedModifyVehicle(int VehicleID, int TemplateID, int SeatIdx);// 0x4033584
	void AsyncLoadClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x330068c
	void AsyncLoadAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x33005d4
	void ApplyMeshCompCollision(int SlotID);// 0x3300558
	bool ApplyMaterial(MeshComponent* InMeshComponent, ItemHandleBase* InItemHandle);// 0x3300488
	void ApplyClothParticleEffect(int SlotID, BackpackAvatarHandle* Handle);// 0x33003d0
	void ApplyAvatarReAttach(out const ReAttachConfig InAvatarReAttachInfo);// 0x3300274
	void ApplyAvatarCustomInfo(int InSlotID, MaterialInstanceDynamic* InMatDynamic, BackpackAvatarItemColor* InColorHandle, BackpackAvatarItemPattern* InPatternHandle);// 0x3300148
	void ApplyAttachMesh(int SlotID, BackpackAvatarHandle* Handle);// 0x3300090
	void ApplyAnimListOverride(ItemHandleBase* InItemHandle, bool IsPutOn);// 0x32fffc8
	void AddAvatarReAttach(const enum InTriggerSlot, out const AvatarReAttachConfigCollection InAvatarReAttachCollection);// 0x32ffee4
	void AddAvatarHandleToPool(ItemHandleBase* InHandle);// 0x32ffe60

--------------------------------
Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,FName> SlotToSocket;//[Offset: 0x548, Size: 80]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x598, Size: 80]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x5e8, Size: 80]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x638, Size: 80]
	delegate OnAvatarBeginLoadMesh;//[Offset: 0x688, Size: 16]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x698, Size: 16]
	delegate OnAvatarMeshEquipped;//[Offset: 0x6a8, Size: 16]
	delegate OnAvatarMeshMaterialApplyed;//[Offset: 0x6b8, Size: 16]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 1]
	bool EnableMeshOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 1]
	bool IsGameStateValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ca, Size: 1]
	ItemHandleBase*[] LoadedAvatarHandlerPool;//[Offset: 0x6d0, Size: 16]
	int AsyncLoadReqID;//[Offset: 0x7b0, Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x7b4, Size: 4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	AvatarEntity*[] EntityTickList;//[Offset: 0x7d0, Size: 16]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x7e0, Size: 80]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x830, Size: 8]
	bool bLoadWithBatchBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 1]
	enum[] LoadWithBatchBodyFilterTypes;//[Offset: 0x840, Size: 16]
	int[] LoadWithBatchBodyFilterTemplateIDs;//[Offset: 0x850, Size: 16]
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x34f5a8c
	void Streamable_RequestAsyncLoadHandles_Download(out const ItemDefineID[] InHandleList);// 0x34f59cc
	void Streamable_RequestAsyncLoadHandles(out const ItemDefineID[] InHandleList);// 0x34f590c
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x34f57a0
	void SetLoadMeshWithBatchBody(bool bFlag);// 0x34f571c
	void ResetSlotSyncData();// 0x34f5700
	void RequestSyncLoadMeshesWithPath(out const SoftObjectPath[] AssetPathList);// 0x34f55e8
	void RequestSyncLoadMeshes();// 0x34f55d4
	void RequestBatchDownloadItemInBattle(out const uint32[] RequestItemIDS);// 0x34f5514
	void RequestAsyncLoadMeshes();// 0x34f5500
	void RequestAsyncLoadHandles();// 0x34f54ec
	void RemoveEquippedAvatar(int InSlotID);// 0x34f5468
	void RemoveAllEquippedAvatar(bool bClearMasterMesh);// 0x34f53dc
	void ReloadLogicAvatar(int SlotID, enum ReloadType, bool bReBuild);// 0x34f52d8
	void ReloadAllLogicAvatar(enum ReloadType);// 0x34f5254
	void ReloadAllEquippedAvatar(enum ReloadType);// 0x34f51d0
	bool PutOnEquipmentByResID(int resID);// 0x34f5138
	bool PutOffEquimentByResID(int resID);// 0x34f50a0
	void PreProcessBeforeLoadMesh();// 0x34f5084
	void PostProcessAfterLoadMesh();// 0x34f5068
	void OnSyncLoadMeshesDone();// 0x34f5054
	void OnRespawned();// 0x34f5038
	void OnRep_BodySlotStateChanged();// 0x34f501c
	void OnRecycled();// 0x34f5000
	void OnItemsDownloaded(out const uint32[] InDownloadItemIDs);// 0x34f4f40
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x34f4e94
	void OnAvatarMeshMaterialApplyed__DelegateSignature(MeshComponent* MeshComponent);// 0x4033584
	void OnAvatarMeshEquippedEvent(int InSlotID, bool bEquipped, out const ItemDefineID InItemDefineID);// 0x34f4d74
	void OnAvatarMeshEquipped__DelegateSignature(int SlotID, bool bEquipped, int ItemId);// 0x4033584
	void OnAvatarBeginLoadMesh__DelegateSignature();// 0x4033584
	void OnAvatarAllMeshLoaded__DelegateSignature();// 0x4033584
	void OnAsyncLoadMeshesDone(int AsyncLoadID);// 0x34f4cf0
	void OnAsyncLoadHandlesDone_Download(out const ItemHandleBase*[] AvatarHandles);// 0x34f4c30
	void OnAsyncLoadHandlesDone(out const ItemHandleBase*[] AvatarHandles);// 0x34f4b70
	void OnAllAvatarHandleLoadedDoneSync();// 0x34f4b5c
	void OnAllAvatarHandleLoadedDone();// 0x34f4b48
	bool NeedToHandleSlotState(out const ItemDefineID InItemID);// 0x34f4a9c
	bool LoadAvatarMeshData(out const AvatarSlotDesc InSlotDesc, bool bForce);// 0x34f4978
	bool IsValidStateToRequestDownload();// 0x34f4940
	bool IsSlotHasEquipped(int InSlotID, bool bIngnoreDefault);// 0x34f486c
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x34f4798
	bool IsItemHasEquipped(int InItemID);// 0x34f4708
	bool IsForceRecreateMeshBoneRetargetAdaptSlot(const enum InTestSlot);// 0x34f4670
	bool IsEnableItemDownload(int ItemId);// 0x4033584
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x34f45c4
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x34f452c
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x34f4494
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x34f43d4
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x34f42cc
	enum GetMeshTypeBySlot(int InSlotID);// 0x34f4240
	MeshComponent* GetMeshCompBySlotID(int InSlotID);// 0x34f41b4
	MeshComponent* GetMeshCompBySlot(enum SlotType);// 0x34f4120
	ItemHandleBase*[] GetLoadedItemHandlePool();// 0x34f4094
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID);// 0x34f3f8c
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID);// 0x34f3e84
	AvatarEntityFactory* GetEntityFactory();// 0x34f3e48
	SoftObjectPath GetBatchDefaultBodyPath();// 0x4033584
	ItemHandleBase* GetAvatarHandleExternal(out const ItemDefineID InItemID, bool bDirectCreate);// 0x34f3d60
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int SubSlotID);// 0x34f3c5c
	MeshComponent* GetAttachParentMesh(int SlotID);// 0x34f3bc8
	MeshComponent*[] GetAllMeshComponents(bool CheckVisible);// 0x34f3acc
	int GetAdvanceVehicleInsideSlotID();// 0x34f3a90
	bool GenerateDefaultAvatarConfig(int InBaseSkinID);// 0x4033584
	bool DeleteAvatarMeshData(int InSlotID, bool DestroyComp);// 0x34f39b4
	ItemHandleBase* CreateAvatarHandle(out const ItemDefineID InItemID, Object* Outer);// 0x34f38cc
	AvatarEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x34f3808
	bool CheckSlotInfo(int InSlotID, out bool isHide, out bool isReplace, out bool bVisable, out ItemDefineID OutItemID);// 0x34f3630
	bool CanLoadItemWithBatchBody(out const ItemDefineID InItemID);// 0x34f358c
	void BuildLoadHandleList(out ItemDefineID[] RequestItemList);// 0x34f34cc
	void BuildDownloadLoadHandleList(out const uint32[] DownloadItemIDs, out ItemDefineID[] OutRequestItemList);// 0x34f3388
	enum BPGetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x34f3280
	void BPCreateAvatarCustomHandle(int SlotID, int ItemId, out const AvatarCustom InCostomInfo, out AvatarCustomBase*[] OutCustomHandle);// 0x4033584
	void BatchDownloadItemInBattleCallBack(uint32[] ItemIDs, uint32[] ErrorCodes);// 0x34f3068

--------------------------------
Class: SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0x290, Size: 80]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x2e0, Size: 80]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x330, Size: 32]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x350, Size: 16]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x360, Size: 16]
	delegate OnAvatarEquippedEvent;//[Offset: 0x370, Size: 16]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x380, Size: 16]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x390, Size: 16]
	int itemType;//[Offset: 0x3a0, Size: 4]
	enum CustomType;//[Offset: 0x3a4, Size: 1]
	<int,ForceEquipSlotInfo> ForceEquipItemLogic;//[Offset: 0x3a8, Size: 80]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x402, Size: 1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x403, Size: 1]
	int SubSlotStartNum;//[Offset: 0x404, Size: 4]
	int SubSlotIntervalNum;//[Offset: 0x408, Size: 4]
	<int,enum> SlotHideStateMap;//[Offset: 0x410, Size: 80]
	int[] AlawysHideResetOperation;//[Offset: 0x510, Size: 16]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	delegate OnAvatarConflictProcess;//[Offset: 0x528, Size: 16]
	void SetForceHideState(int InSlotID, enum InForceHideState);// 0x34ef058
	void RemoveForceEquipItem(int SlotID);// 0x34eefdc
	void RemoveAllEquippedItem();// 0x34eefc8
	void OnRespawned();// 0x34eefac
	void OnRep_BodySlotStateChanged();// 0x34eef90
	void OnRecycled();// 0x34eef74
	void OnLoadAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc);// 0x34eeea4
	void OnHandleUnequipSlot(int InSlotID);// 0x34eee28
	void OnHandleUnequipItem(out const AvatarSyncData InSyncData);// 0x34eed84
	void OnHandleEquipItem(out const AvatarSyncData InSyncData);// 0x34eecd8
	void OnDeleteAvatarSlotDesc(out const AvatarSlotDesc InSlotDesc, bool bDelayDelete);// 0x34eebc0
	void OnAvatarUnequippedEvent__DelegateSignature(int SlotID, ItemDefineID OldItemID);// 0x4033584
	void OnAvatarLogicUnequippedEvent(int InSlotID, out const ItemDefineID OldItemID);// 0x34eeaec
	void OnAvatarLogicEquippedEvent(int InSlotID, out const ItemDefineID NewItemID, out const ItemDefineID OldItemID);// 0x34ee9bc
	void OnAvatarEquippedFailedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID);// 0x4033584
	void OnAvatarEquippedEvent__DelegateSignature(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x4033584
	void OnAvatarConflictProcess__DelegateSignature(int SlotID, ItemDefineID NewItemID, int[] ConflictSlotID);// 0x4033584
	bool NeedToHandleSlotState(out const ItemDefineID InItemID);// 0x34ee910
	bool ModifyViewDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x34ee804
	bool ModifyViewDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x34ee6f8
	bool ModifyViewDataByForceHide(int InSlotID, bool bHide);// 0x34ee624
	bool ModifySyncDataByReplace(int InSlotIDA, int InSlotIDB, bool bReplace);// 0x34ee518
	bool ModifySyncDataByHide(int InSlotIDA, int InSlotIDB, bool bHide);// 0x34ee40c
	bool ModifySyncDataByForceHide(int InSlotID, enum HideState);// 0x34ee340
	int MakeStateInfo(out const int[] InSlotDesc);// 0x34ee278
	AvatarTableData MakeAvatarTableData(out const ItemDefineID InItemID);// 0x34ee1a8
	bool IsSameAvatarItem(out const ItemDefineID DefineID1, out const ItemDefineID DefineID2);// 0x34ee0a8
	bool IsItemHasMutilReplaceMesh(int InSlotID, out const ItemDefineID InItemID);// 0x34edfc0
	bool IsItemBlueprintExist(int InSlotID, out const ItemDefineID InItemID, bool bWithLog);// 0x34ede90
	bool IsEquippedThoseItemList(out const int[] InItemListID);// 0x34eddc4
	bool IsEquippedItemID(int InItemID);// 0x34edd34
	bool IsEquippedItemDefineID(out const ItemDefineID InItemID);// 0x34edc90
	bool IsDefautlAvatarID(out const ItemDefineID InItemID);// 0x34edbe4
	bool HasLogicEquipped(out const ItemDefineID InItemID);// 0x34edb40
	bool HandleUnequipSlot(int InSlotID);// 0x34edab0
	bool HandleUnequipItem(out const ItemDefineID InItemID);// 0x34eda0c
	void HandleItemSlotState(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x34ed878
	void HandleItemResetOrderDesc();// 0x34ed864
	void HandleItemResetOperation();// 0x34ed850
	void HandleItemReplaceRelation();// 0x34ed83c
	void HandleItemHideRelation();// 0x34ed828
	bool HandleEquipItem(out const ItemDefineID InItemID, out const AvatarCustom InCustomInfo);// 0x34ed72c
	void GetViewDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x34ed5b4
	void GetViewDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x34ed43c
	bool GetViewDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x34ed35c
	bool GetViewDataBySlot(const int InSlotID, out AvatarSlotDesc OutSlotDesc);// 0x34ed24c
	void GetSyncDataStateFor(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x34ed0d4
	void GetSyncDataStateBy(const int InSlotID, out int[] OutHideSlotID, out int[] OutReplaceSlotID);// 0x34ecf5c
	bool GetSyncDataItemID(const int InSlotID, out ItemDefineID OutItemDefineID);// 0x34ece7c
	bool GetSyncDataBySlot(const int InSlotID, out AvatarSyncData OutSlotDesc);// 0x34ecd88
	int GetLogicEquippedSlot(out const ItemDefineID InItemID);// 0x34ecce8
	int GetItemTemplateID(out const ItemDefineID InItemID);// 0x34ecc40
	enum GetForceHideState(int InSlotID);// 0x34ecbac
	void GetEquippedItemDefineID2(int InSlotID, out ItemDefineID ItemDefineID, out ItemDefineID RealShowItemDefineID);// 0x34eca84
	ItemDefineID GetEquippedItemDefineID(int InSlotID);// 0x34ec9e8
	int GetAvatarSlotID(int InSubSlotID);// 0x34ec95c
	void ClientPostProcessViewDataMiddle();// 0x34ec940
	void ClientPostProcessViewDataBefore();// 0x34ec924
	void ClientPostProcessViewDataAfter();// 0x34ec908
	void ClientBuildAvatarRelationData();// 0x34ec8f4
	void ClientBodySlotStateChanged();// 0x34ec8e0
	bool CheckItemConflictRule(out const ItemDefineID InItemID, out const AvatarTableData InAvatarData);// 0x34ec7c4
	void BuildAvatarItemMap(out <int,int> OutHideMap, out <int,int> OutReplaceMap);// 0x34ec630
	bool BPClientPostProcessViewDataMiddle();// 0x34ec5f0
	bool BPClientPostProcessViewDataBefore();// 0x34ec5b0
	bool BPClientPostProcessViewDataAfter();// 0x34ec570
	void AddForceEquipItem(int SlotID, int ItemId, enum HideState);// 0x34ec480

--------------------------------
Class: AvatarSlotDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	ItemDefineID ItemDefineID;//[Offset: 0x8, Size: 24]
	ItemDefineID RealShowItemDefineID;//[Offset: 0x20, Size: 24]
	int gender;//[Offset: 0x38, Size: 4]
	int HideState;//[Offset: 0x3c, Size: 4]
	int ReplaceState;//[Offset: 0x40, Size: 4]
	bool IsExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x48, Size: 20]
	bool bForceHideState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	enum SlotDescDiff;//[Offset: 0x5d, Size: 1]
	ItemDefineID OldItemDefineID;//[Offset: 0x60, Size: 24]

--------------------------------
Class: AvatarCustom
	enum CustomType;//[Offset: 0x0, Size: 1]
	int ColorID;//[Offset: 0x4, Size: 4]
	int PatternID;//[Offset: 0x8, Size: 4]
	int NumID;//[Offset: 0xc, Size: 4]
	int ParticleID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NetAvatarSyncData
	AvatarSyncData[] SlotSyncData;//[Offset: 0x0, Size: 16]
	int gender;//[Offset: 0x10, Size: 4]
	int BaseID;//[Offset: 0x14, Size: 4]
	int UpdateFlag;//[Offset: 0x18, Size: 4]

--------------------------------
Class: AvatarSyncData
	int ItemId;//[Offset: 0x0, Size: 4]
	int AdditionalItemID;//[Offset: 0x4, Size: 4]
	int SlotID;//[Offset: 0x8, Size: 4]
	int SubSlotID;//[Offset: 0xc, Size: 4]
	int HideState;//[Offset: 0x10, Size: 4]
	int ReplaceState;//[Offset: 0x14, Size: 4]
	int FakeItemID;//[Offset: 0x18, Size: 4]
	enum ForceDescDiff;//[Offset: 0x1c, Size: 1]
	enum OperationType;//[Offset: 0x1d, Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x20, Size: 20]
	enum ForceHideState;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ForceEquipSlotInfo

--------------------------------
Class: AvatarTableData
	int SlotID;//[Offset: 0x0, Size: 4]
	int SubSlotID;//[Offset: 0x4, Size: 4]
	int[] HideFlags;//[Offset: 0x8, Size: 16]
	int[] ReplaceFlags;//[Offset: 0x18, Size: 16]
	int[] RecoverHideFlagsWhenSelfHidden;//[Offset: 0x28, Size: 16]
	int[] RecoverReplaceFlagsWhenSelfHidden;//[Offset: 0x38, Size: 16]
	int[] RecoverHideFlagsWhenSelfReplaced;//[Offset: 0x48, Size: 16]
	int[] RecoverReplaceFlagsWhenSelfReplaced;//[Offset: 0x58, Size: 16]
	int[] ConflictConfig;//[Offset: 0x68, Size: 16]
	int[] ConflictConfigWhenSelfReplaced;//[Offset: 0x78, Size: 16]
	int HideBoneSlotID;//[Offset: 0x88, Size: 4]
	int HideBoneType;//[Offset: 0x8c, Size: 4]
	FName[] HideBoneNames;//[Offset: 0x90, Size: 16]

--------------------------------
Class: SlotMeshDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	MeshComponent* MeshComp;//[Offset: 0x4, Size: 8]
	ParticleGroup ParticleGroup;//[Offset: 0x10, Size: 48]

--------------------------------
Class: ParticleGroup
	ParticleSystem*[] ParticleSystemList;//[Offset: 0x0, Size: 16]
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x10, Size: 16]
	ParticleAsset[] ParticleAssetList;//[Offset: 0x20, Size: 16]

--------------------------------
Class: ParticleAsset
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x68, Size: 16]
	bool bLimitCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]

--------------------------------
Class: SlotHandleDesc
	int SlotID;//[Offset: 0x0, Size: 4]
	ItemHandleBase* EquipHandle;//[Offset: 0x4, Size: 8]
	AvatarCustomBase*[] CustomHandles;//[Offset: 0x10, Size: 16]
	SoftObjectPath EquipMeshAssetPath;//[Offset: 0x20, Size: 24]

--------------------------------
Class: AvatarCustomBase.CustomBase.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x40, Size: 16]
	void SetCustomMatParam(MaterialInterface* InMaterial, out const CustomMatConfig InMatConfig, bool bSetTexture);// 0x3324bd4
	void AsyncLoadCustomAssetDone();// 0x3324bc0
	bool ApplyCustomInfo();// 0x3324b80

--------------------------------
Class: CustomBase.Object
	int CustomID;//[Offset: 0x28, Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x2c, Size: 8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x34, Size: 8]
	void SetCustomID(int InCustomID);// 0x3324854
	MeshComponent* GetOwnerMeshComp();// 0x3324820
	ActorComponent* GetOwnerComp();// 0x33247ec
	bool ClearCustomInfo();// 0x33247ac
	bool ApplyCustomInfo();// 0x332476c

--------------------------------
Class: CustomMatConfig
	FName SlotName;//[Offset: 0x0, Size: 8]
	CustomMatScalar[] ScalarConfig;//[Offset: 0x8, Size: 16]
	CustomMatColor[] ColorConfig;//[Offset: 0x18, Size: 16]
	CustomMatTextrue[] TextrueConfig;//[Offset: 0x28, Size: 16]

--------------------------------
Class: CustomMatScalar
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	float Scalar;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CustomMatColor
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	LinearColor Color;//[Offset: 0x10, Size: 16]

--------------------------------
Class: CustomMatTextrue
	FName ParamName;//[Offset: 0x0, Size: 8]
	FName Tips;//[Offset: 0x8, Size: 8]
	Texture* Textrue;//[Offset: 0x10, Size: 40]
	FString TextruePath;//[Offset: 0x38, Size: 16]

--------------------------------
Class: AvatarSlotNameConfig
	<enum,FString> MaleSlotName;//[Offset: 0x0, Size: 80]
	<enum,FString> FemaleSlotName;//[Offset: 0x50, Size: 80]

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x28, Size: 4]
	int SubSlotID;//[Offset: 0x2c, Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x30, Size: 8]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x38, Size: 8]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x40, Size: 8]
	MeshComponent* MeshComponent;//[Offset: 0x48, Size: 8]
	MeshData EntityMeshData;//[Offset: 0x50, Size: 128]
	MeshData CachedEntityMeshData;//[Offset: 0xd0, Size: 128]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 1]
	FName SocketName;//[Offset: 0x158, Size: 8]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x160, Size: 16]
	SoftObjectPath MeshAssetPath;//[Offset: 0x170, Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x188, Size: 24]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x1a0, Size: 80]
	void UpdateVisibility();// 0x3276f78
	void UnRegisterTick();// 0x3276f5c
	void TickEntity();// 0x3276f40
	void SetSocketName();// 0x3276f24
	void SetParentDefineID(ItemDefineID ParentID);// 0x3276e90
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x3276db8
	void RevertEntityMeshData();// 0x3276da4
	void RenderEntity(out SoftObjectPath SoftPath);// 0x3276cdc
	void RegisterTick();// 0x3276cc0
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x3276c28
	void PutOnDefaultEquipment(enum SlotType);// 0x3276ba4
	void OnPostRender();// 0x3276b88
	bool IsEntityAvailable(enum VisibilityType);// 0x3276af0
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x3276a24
	void Init(int SlotID, int SubSlotID, SlotViewAvatarComponent* AvatarComponent);// 0x327692c
	enum GetMeshType();// 0x32768f0
	MeshData GetMeshData();// 0x327688c
	BattleItemHandleBase* GetLoadedHandle();// 0x3276858
	ItemDefineID GetDefineID();// 0x3276804
	void EnterRenderPipeline();// 0x32767e8
	void EnterLogicPipeline();// 0x32767cc
	void DrawOutline(bool bEnable);// 0x3276740
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x3276664
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x327659c
	void ClearEquipmentLogic(bool putDefault);// 0x3276510
	void ClearEntity(bool ForceClear);// 0x3276484
	void ApplyAnimation();// 0x3276468
	void ApplaySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x32763e4

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum SlotID;//[Offset: 0x140, Size: 1]
	enum SubSlot;//[Offset: 0x141, Size: 1]
	enum specialType;//[Offset: 0x142, Size: 1]
	enum ForceMeshType;//[Offset: 0x143, Size: 1]
	enum ForceLODMeshType;//[Offset: 0x144, Size: 1]
	<enum,int> SuitConfig;//[Offset: 0x148, Size: 80]
	MeshPackage MeshPack;//[Offset: 0x198, Size: 600]
	MeshPackage replacedMeshPack;//[Offset: 0x3f0, Size: 600]
	MeshPackage[] MutilReplacedMeshPack;//[Offset: 0x648, Size: 16]
	enum[] hiddenFlags;//[Offset: 0x658, Size: 16]
	enum[] subHiddenFlags;//[Offset: 0x668, Size: 16]
	enum[] ReplaceFlags;//[Offset: 0x678, Size: 16]
	enum[] ignoreFlags;//[Offset: 0x688, Size: 16]
	AvatarPostOperation[] postOperation;//[Offset: 0x698, Size: 16]
	BackpackComponent* pBackpackComp;//[Offset: 0x6a8, Size: 8]
	int ItemCapacity;//[Offset: 0x6b0, Size: 4]
	int Durability;//[Offset: 0x6b4, Size: 4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x6c0, Size: 56]
	enum hideBoneSlot;//[Offset: 0x6f8, Size: 1]
	FName hideBoneName;//[Offset: 0x700, Size: 8]
	FName[] hideBoneNameArray;//[Offset: 0x708, Size: 16]
	enum HideBoneType;//[Offset: 0x718, Size: 1]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x720, Size: 80]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x770, Size: 16]
	int PendantConfigIndex;//[Offset: 0x780, Size: 4]
	float PendantScale;//[Offset: 0x784, Size: 4]
	int DefaultExtendPendantID;//[Offset: 0x788, Size: 4]
	AvatarAnimOverrideData[] CharacterAnimListOverrideList;//[Offset: 0x790, Size: 16]
	byte CharacterAnimOverrideType;//[Offset: 0x7a0, Size: 1]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x7a8, Size: 88]
	BattleItemAdditionalData[] ArmorAttachmentAdditionalDataList;//[Offset: 0x800, Size: 16]
	ArmorAttachItemUnit[] CachedArmorAttachmentListBeforeDrop;//[Offset: 0x810, Size: 16]
	AvatarReAttachConfigCollection AvatarReAttachCollection;//[Offset: 0x820, Size: 16]
	bool bForceUseClothAnimBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 1]
	void SetItemDurability(int InDurability);// 0x32888d4
	void SetItemCapacity(int InCapacity);// 0x3288858
	void PreLocalHandleDisuse();// 0x3288844
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x32886e8
	bool HasCustomInfo();// 0x32886b0
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x32885b4
	bool HandleRealShowMeshpack(out const AvatarSlotDesc InSlotDesc, Object* Outer);// 0x32884a0
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x32881ec
	bool HandleMutilReplaceMeshPack(int ReplaceState, out MeshPackage OutMeshPack, Object* Outer);// 0x32880a0
	bool HandleMutilMeshPack(out MeshPackage OutMeshPack, Object* Outer);// 0x3287f90
	bool HandleMeshpackPostProcess(out const MeshPackage InMeshPack, out MeshPackage OutMeshPack, Object* Outer);// 0x3287e14
	bool HandleMeshAttached(MeshComponent* SkeletalMeshComp, Object* Outer);// 0x3287d44
	bool HandleEnable(bool bEnable);// 0x3287ca4
	bool HandleDrop(int InCount, enum Reason);// 0x3287bd0
	bool HandleDisuse(enum Reason);// 0x3287b38
	BackpackComponent* GetBackpackComponent();// 0x3287b04
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity, enum Reason, enum DisuseReason);// 0x32879b8
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason);// 0x3287920
	void AutoEquipChips();// 0x3287904

--------------------------------
Class: MeshPackage.AssetPackage
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 40]
	StaticMesh* maleLODStMesh;//[Offset: 0x58, Size: 40]
	StaticMesh* femaleLODStMesh;//[Offset: 0x80, Size: 40]
	SkeletalMesh* maleSkMesh;//[Offset: 0xa8, Size: 40]
	SkeletalMesh* femaleSkMesh;//[Offset: 0xd0, Size: 40]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xf8, Size: 40]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0x120, Size: 40]
	MaterialInterface* maleMat;//[Offset: 0x148, Size: 40]
	MaterialInterface* femaleMat;//[Offset: 0x170, Size: 40]
	MaterialSet[] additionalMaleMats;//[Offset: 0x198, Size: 16]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x1a8, Size: 16]
	MaterialInterface* baseMat;//[Offset: 0x1b8, Size: 8]
	class AnimInstance* animBP;//[Offset: 0x1c0, Size: 8]
	AnimSequence* LobbyIdleAnim;//[Offset: 0x1c8, Size: 40]
	bool IsEffectOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	enum EffectCreateType;//[Offset: 0x1f1, Size: 1]
	AvatarEffectData[] EffectDataList;//[Offset: 0x1f8, Size: 16]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x208, Size: 16]
	class AnimInstance* animBPClass;//[Offset: 0x218, Size: 40]

--------------------------------
Class: AssetPackage

--------------------------------
Class: MaterialSet
	MaterialInterface* targetMat;//[Offset: 0x0, Size: 40]
	enum targetSlot;//[Offset: 0x28, Size: 1]
	MaterialInterface* targetBaseMat;//[Offset: 0x30, Size: 40]

--------------------------------
Class: AvatarEffectData
	Transform Transform;//[Offset: 0x0, Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	FName ComponentTag;//[Offset: 0x60, Size: 8]
	enum ValidMethod;//[Offset: 0x68, Size: 1]
	enum ValidDevice;//[Offset: 0x69, Size: 1]
	bool bIsActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x70, Size: 16]

--------------------------------
Class: AvatarAttachMeshData.AssetPackage
	Transform Transform;//[Offset: 0x10, Size: 48]
	FName AttachSocket;//[Offset: 0x40, Size: 8]
	FName SlotName;//[Offset: 0x48, Size: 8]
	StaticMesh* StaticMesh;//[Offset: 0x50, Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78, Size: 40]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0, Size: 40]
	MaterialInterface* MatInstance;//[Offset: 0xc8, Size: 40]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0, Size: 8]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]

--------------------------------
Class: AvatarPostOperation
	enum SlotID;//[Offset: 0x0, Size: 1]
	enum operationWhenReplaced;//[Offset: 0x1, Size: 1]
	enum operationWhenHidden;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 24]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0x18, Size: 16]
	FString BodyDurabilityIndexName;//[Offset: 0x28, Size: 16]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 16]
	enum Op;//[Offset: 0x10, Size: 1]
	float ModifyValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0, Size: 8]
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0, Size: 16]
	Transform SocketRelativeTransform;//[Offset: 0x10, Size: 48]
	Vector AngularLimitsMin;//[Offset: 0x40, Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: AvatarAnimOverrideData
	byte Layer;//[Offset: 0x0, Size: 1]
	class UAECharAnimListCompBase* AnimListCompClass;//[Offset: 0x8, Size: 8]
	UAECharAnimListCompBase* AnimListCompInstance;//[Offset: 0x10, Size: 8]

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x208, Size: 16]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x178, Size: 80]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x1c8, Size: 16]
	bool bDisableAnimListOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 4]
	AnimationAsset* Animation;//[Offset: 0x8, Size: 8]

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 1]
	FString AnimsCatorgeryName;//[Offset: 0x8, Size: 16]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x18, Size: 96]

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 16]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0x10, Size: 80]

--------------------------------
Class: ArmorAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	FName SlotName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: AvatarReAttachConfigCollection
	ReAttachConfig[] AvatarReAttachList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: ReAttachConfig
	enum ReAttachSlot;//[Offset: 0x0, Size: 1]
	enum TriggerSlot;//[Offset: 0x1, Size: 1]
	int Priority;//[Offset: 0x4, Size: 4]
	bool bForceRecreateAdaptSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	enum SlotAdaptSpace;//[Offset: 0x9, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	bool bForceRecreateAdaptAssociatedSlotMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	enum AssociatedSlotAdaptSpace;//[Offset: 0x41, Size: 1]
	Transform AssociatedSlotAdaptTransform;//[Offset: 0x50, Size: 48]
	enum[] AssociatedSlotList;//[Offset: 0x80, Size: 16]
	<FName,Transform> WingClothScaleTransformMap;//[Offset: 0x90, Size: 80]

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* CreateEntity(int SlotID, int SubSlotID);// 0x3277acc

--------------------------------
Class: AvatarHideBonesDesc
	HideBoneData[] hideBoneSlots;//[Offset: 0x0, Size: 16]

--------------------------------
Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x30, Size: 16]
	void SetCustomColorDeffered(MaterialInterface* InMaterial, out const SlotToMatColor InMatColor);// 0x3289af4
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x3289a3c

--------------------------------
Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x28, Size: 8]
	void SetMaterialTexture(MaterialInterface* InMaterial, FName InName, Texture* InTexture);// 0x3289510
	void SetMaterialScalar(MaterialInterface* InMaterial, FName InName, float InValue);// 0x3289420
	void SetMaterialColor(MaterialInterface* InMaterial, FName InName, LinearColor InColor);// 0x3289330
	CharacterAvatarComponent2* GetOwnerComponent();// 0x32892fc

--------------------------------
Class: SlotToMatColor
	enum SlotID;//[Offset: 0x0, Size: 1]
	LinearColor[] MaskColor;//[Offset: 0x8, Size: 16]
	float GrayScale;//[Offset: 0x18, Size: 4]
	Texture* MaskGrayTexture;//[Offset: 0x20, Size: 40]

--------------------------------
Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x30, Size: 16]
	SoftObjectPath SoftRefPath1;//[Offset: 0x40, Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x58, Size: 24]
	void SetCustomPatternDeffered(MaterialInterface* InMaterial, out const SlotToMatPattern InMatPattern);// 0x328a2e8
	void SetAvatarCustomInfo(enum InSlotType, MaterialInterface* InMaterial);// 0x328a230
	bool IsPatternNumMode();// 0x328a20c
	void InitPatternNumID(int InNumID);// 0x328a194
	void GetPatternNumTexturePath(int InNumID, out SoftObjectPath OutTexture1, out SoftObjectPath OutTexture2);// 0x4033584

--------------------------------
Class: SlotToMatPattern
	enum SlotID;//[Offset: 0x0, Size: 1]
	Texture* PatternTexture;//[Offset: 0x8, Size: 40]
	float IconScale;//[Offset: 0x30, Size: 4]
	Texture* PatternTexture;//[Offset: 0x38, Size: 40]
	float IconScale;//[Offset: 0x60, Size: 4]
	LinearColor IconOffset;//[Offset: 0x64, Size: 16]

--------------------------------
Class: AvatarEffectGroup
	ParticleSystemComponent*[] ParticleCompList;//[Offset: 0x0, Size: 16]
	AvatarEffectData[] EffectDataList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: AvatarAttachMeshGroup
	MeshComponent*[] AttachMeshCompList;//[Offset: 0x0, Size: 16]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: AvatarAttachMeshFrameSkipMap
	int LODLevel;//[Offset: 0x0, Size: 4]
	int SkipFrame;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AdditonalAvatarStruct
	int ItemId;//[Offset: 0x0, Size: 4]
	int[] SlotIDList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: FakeHeadInfo
	bool bEnableFakeHead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	SkeletalMesh* SoftFakeHeadMesh;//[Offset: 0x8, Size: 40]
	class AnimInstance* FakeHeadAnimBPClass;//[Offset: 0x30, Size: 8]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x350, Size: 1]
	float FOVAngle;//[Offset: 0x354, Size: 4]
	float OrthoWidth;//[Offset: 0x358, Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x360, Size: 8]
	byte CaptureSource;//[Offset: 0x368, Size: 1]
	byte CompositeMode;//[Offset: 0x369, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x370, Size: 1376]
	float PostProcessBlendWeight;//[Offset: 0x8d0, Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d4, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x8e0, Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x924, Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x930, Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x93c, Size: 1]
	void CaptureScene();// 0x5c51728
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5c515e8

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x2c9, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x2d0, Size: 16]
	Actor*[] HiddenActors;//[Offset: 0x2e0, Size: 16]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x2f0, Size: 16]
	Actor*[] ShowOnlyActors;//[Offset: 0x300, Size: 16]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x312, Size: 1]
	float LODDistanceFactor;//[Offset: 0x314, Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x318, Size: 4]
	int CaptureSortPriority;//[Offset: 0x31c, Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x320, Size: 16]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x5c5106c
	void ShowOnlyActorComponents(Actor* InActor);// 0x5c50ff0
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x5c50f74
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x5c50ef8
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x5c50e7c
	void HideComponent(PrimitiveComponent* InComponent);// 0x5c50e00
	void HideActorComponents(Actor* InActor);// 0x5c50d84
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x5c50d08
	void ClearHiddenComponents();// 0x5c50cf4

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 16]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f9, Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x3fc, Size: 4]
	float OcclusionDepthRange;//[Offset: 0x400, Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x404, Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x410, Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x414, Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x418, Size: 4]
	int DynamicShadowCascades;//[Offset: 0x41c, Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x420, Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x424, Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x428, Size: 4]
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42c, Size: 1]
	float ShadowCenterOffset;//[Offset: 0x430, Size: 4]
	float ShadowIndependentRadius;//[Offset: 0x434, Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x43c, Size: 4]
	float FarShadowDistance;//[Offset: 0x440, Size: 4]
	float DistanceFieldShadowDistance;//[Offset: 0x444, Size: 4]
	float LightSourceAngle;//[Offset: 0x448, Size: 4]
	float TraceDistance;//[Offset: 0x44c, Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x450, Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460, Size: 1]
	bool bCastsLandscapeShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x460, Size: 1]
	float LandscapeShadowColor;//[Offset: 0x464, Size: 4]
	float LandscapeShadowOffset;//[Offset: 0x468, Size: 4]
	float LandscapeShadowSoftHeight;//[Offset: 0x46c, Size: 4]
	float LandscapeShadowPixelPrecision;//[Offset: 0x470, Size: 4]
	LandscapeGeometryAsset* LandscapeGeometry;//[Offset: 0x478, Size: 8]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x480, Size: 1]
	float SoftShadowSoftness;//[Offset: 0x484, Size: 4]
	float ShadowBlendFactor;//[Offset: 0x488, Size: 4]
	float BoundsScale;//[Offset: 0x48c, Size: 4]
	float NearPlaneOffset;//[Offset: 0x490, Size: 4]
	float FarPlaneOffset;//[Offset: 0x494, Size: 4]
	float SplitNearOffset;//[Offset: 0x498, Size: 4]
	float SplitFarOffset;//[Offset: 0x49c, Size: 4]
	float ShadowMapResolution;//[Offset: 0x4a0, Size: 4]
	Color ModulatedShadowColor;//[Offset: 0x4a4, Size: 4]
	ACESParameter[] ACESParameters;//[Offset: 0x4a8, Size: 16]
	bool bUsedShadowControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b8, Size: 1]
	float ShadowControl;//[Offset: 0x4bc, Size: 4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c0, Size: 1]
	int AtmosphereSunLightIndex;//[Offset: 0x4c4, Size: 4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x4c8, Size: 16]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d8, Size: 1]
	bool bCastsCloudShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4d8, Size: 1]
	Texture* CloudShadowTexture;//[Offset: 0x4e0, Size: 8]
	float CloudShadowTileSize;//[Offset: 0x4e8, Size: 4]
	float CloudShadowDensity;//[Offset: 0x4ec, Size: 4]
	Vector2D CloudShadowWinSpeed;//[Offset: 0x4f0, Size: 8]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x5b28bf0
	void SetOcclusionMaskDarkness(float NewValue);// 0x5b28b74
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x5b28af8
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x5b28a74
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x5b289f8
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x5b2897c
	void SetDynamicShadowCascades(int NewValue);// 0x5b28900
	void SetCloudShadowWinSpeed(out const Vector2D InWinSpeed);// 0x5b28878
	void SetCloudShadowTileSize(float InValue);// 0x5b287fc
	void SetCloudShadowTexture(Texture* InTexture);// 0x5b28780
	void SetCloudShadowDensity(float InDensity);// 0x5b28704
	void SetCastsCloudShadow(bool InValue);// 0x5b28680
	void SetCascadeTransitionFraction(float NewValue);// 0x5b28604
	void SetCascadeDistributionExponent(float NewValue);// 0x5b28588
	void SetAtmosphereSunLight(bool bNewValue);// 0x5b28504

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LandscapeGeometryAsset.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x30, Size: 16]
	Vector[] Normals;//[Offset: 0x40, Size: 16]
	Vector2D[] UV;//[Offset: 0x50, Size: 16]
	int[] Indices;//[Offset: 0x60, Size: 16]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x70, Size: 80]
	int ComponentIndexCount;//[Offset: 0xc0, Size: 4]
	int ComponentVertexCount;//[Offset: 0xc4, Size: 4]
	<FString,LevelComponentMapValue> SubLevelComponentMap;//[Offset: 0xc8, Size: 80]
	StaticMesh* HighQualityMesh;//[Offset: 0x118, Size: 40]
	float HighQualityMeshDestroyHight;//[Offset: 0x140, Size: 4]
	<IntPoint,int> ComponentVertexIndexOffset;//[Offset: 0x148, Size: 80]

--------------------------------
Class: LevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 16]
	int[] IndexOffsetArray;//[Offset: 0x10, Size: 16]
	int[] IndexCountArray;//[Offset: 0x20, Size: 16]
	int[] VertexOffsetIndex;//[Offset: 0x30, Size: 16]
	int[] BorderIndex1;//[Offset: 0x40, Size: 16]
	int[] BorderIndex2;//[Offset: 0x50, Size: 16]
	int[] BorderIndex3;//[Offset: 0x60, Size: 16]
	int[] BorderIndex4;//[Offset: 0x70, Size: 16]
	int[] UnderBorderIndex1;//[Offset: 0x80, Size: 16]
	int[] UnderBorderIndex2;//[Offset: 0x90, Size: 16]
	int[] UnderBorderIndex3;//[Offset: 0xa0, Size: 16]
	int[] UnderBorderIndex4;//[Offset: 0xb0, Size: 16]
	int[] BorderIndicesBuffer1;//[Offset: 0xc0, Size: 16]
	int[] BorderIndicesBuffer2;//[Offset: 0xd0, Size: 16]
	int[] BorderIndicesBuffer3;//[Offset: 0xe0, Size: 16]
	int[] BorderIndicesBuffer4;//[Offset: 0xf0, Size: 16]
	FString Sibling1Name;//[Offset: 0x100, Size: 16]
	FString Sibling2Name;//[Offset: 0x110, Size: 16]
	FString Sibling3Name;//[Offset: 0x120, Size: 16]
	FString Sibling4Name;//[Offset: 0x130, Size: 16]
	int Sibling1Idx;//[Offset: 0x140, Size: 4]
	int Sibling2Idx;//[Offset: 0x144, Size: 4]
	int Sibling3Idx;//[Offset: 0x148, Size: 4]
	int Sibling4Idx;//[Offset: 0x14c, Size: 4]

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 16]
	float Bright;//[Offset: 0x10, Size: 4]
	float Gray;//[Offset: 0x14, Size: 4]
	float ShoulderStrength;//[Offset: 0x18, Size: 4]
	float ToeStrength;//[Offset: 0x1c, Size: 4]
	float LinearStrength;//[Offset: 0x20, Size: 4]
	float LinearAngle;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x8, Size: 16]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x20, Size: 16]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x30, Size: 16]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x40, Size: 16]

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte QualityLevel;//[Offset: 0x0, Size: 1]
	class Actor[] TargetClassConfigList;//[Offset: 0x8, Size: 16]
	class Object[] CachedClassList;//[Offset: 0x18, Size: 16]

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0, Size: 1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 40]

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x3c8, Size: 8]

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 80]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x50, Size: 8]

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 16]
	TrailMarkActor*[] AssignableList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x3c8, Size: 80]
	class Actor[] IgnoreActorClass;//[Offset: 0x418, Size: 16]
	float DecalLongestDistance;//[Offset: 0x428, Size: 4]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x430, Size: 16]
	RuntimeMeshComponent* Decal;//[Offset: 0x440, Size: 8]
	void RemoveDecalOnTimer(int[] DecalIdArray);// 0x33dcd7c
	bool RemoveDecal(const int ID);// 0x33dccec
	int[] CreateNewDecal(out const Transform DecalTrans, MaterialInstanceDynamic* DecalMaterialInstance, out const Vector2D DecalUVOffset, out const Vector2D DecalUVScale, float AutoDisappearTime, byte TraceAxis, bool bNegativeDir, bool bIgnoreTransForEndPosition);// 0x33dc9e8

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 8]
	Texture* DecalTexure;//[Offset: 0x8, Size: 8]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x140, Size: 8]
	Texture* DecalTexure;//[Offset: 0x148, Size: 8]
	int CoordX;//[Offset: 0x150, Size: 4]
	int CoordY;//[Offset: 0x154, Size: 4]
	Vector2D DecalSize;//[Offset: 0x158, Size: 8]
	bool bIsGifDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	bool bIsMusicDecal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 1]
	int GifDecalFrameNum;//[Offset: 0x164, Size: 4]
	float GifDecalFrameTime;//[Offset: 0x168, Size: 4]
	AkAudioEvent* DecalSound;//[Offset: 0x170, Size: 8]
	float AttenuationRadius;//[Offset: 0x178, Size: 4]
	float OutputVolume;//[Offset: 0x17c, Size: 4]

--------------------------------
Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x3c8, Size: 4]
	int RemainSupplyTimes;//[Offset: 0x3cc, Size: 4]
	int SupplyBulletNum;//[Offset: 0x3d0, Size: 4]
	float ValidDistance;//[Offset: 0x3d4, Size: 4]
	delegate SupplySpotTimesChange;//[Offset: 0x3d8, Size: 16]
	void ReqUseSupplySpot(STExtraPlayerController* InController);// 0x366a51c

--------------------------------
Class: EnhancerSpot.Actor.Object
	EnhancerSpotPlayerSkill[] SkillIdConfig;//[Offset: 0x3c8, Size: 16]
	int AddMonsterExpNum;//[Offset: 0x3d8, Size: 4]
	int RemainEnhancerTimesConfig;//[Offset: 0x3dc, Size: 4]
	int RemainEnhancerTimes;//[Offset: 0x3e0, Size: 4]
	int UseSuccessTipsId;//[Offset: 0x3e4, Size: 4]
	float ValidDistance;//[Offset: 0x3e8, Size: 4]
	float SelfResetTime;//[Offset: 0x3ec, Size: 4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	enum EnhancerState;//[Offset: 0x3f1, Size: 1]
	float ReadyTime;//[Offset: 0x3f4, Size: 4]
	float FixReadyTime;//[Offset: 0x3f8, Size: 4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x400, Size: 16]
	void StateChangeDelegate();// 0x3360df4
	void SetReadyTime(float SReadyTime);// 0x3360d78
	void SetEState(enum EState);// 0x3360cfc
	void RPC_Broadcast_NotifyReadyTime(enum SEnhancerState, float SReadyTime);// 0x3360c0c
	void ResetTimes();// 0x3360bf8
	void ResetSelf();// 0x3360be4
	void ReqUseEnhancerSpot(STExtraPlayerController* InController);// 0x3360b60
	void ReadyTimeChangeDelegate();// 0x3360b44
	void OpenEffect();// 0x3360b28
	void OnRep_StateChange();// 0x3360b14
	void OnRep_ReadyTimeChange();// 0x3360b00
	void OnRep_FixReadyTimeChange();// 0x3360aec
	enum GetSpotState();// 0x3360ad0
	void DelayResetSelf();// 0x3360abc
	void CloseEffect();// 0x3360aa0

--------------------------------
Class: EnhancerSpotPlayerSkill
	enum PawnSubType;//[Offset: 0x0, Size: 1]
	int SkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRevivalComponent.LuaActorComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0x1d4, Size: 4]
	int GotoSpectatingTime;//[Offset: 0x1d8, Size: 4]
	int64 FinishRevivalTime;//[Offset: 0x1e0, Size: 8]
	int64 StartObserverTime;//[Offset: 0x1e8, Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0x1f0, Size: 8]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0x1f8, Size: 8]
	GameBaseInfo GameBaseInfo;//[Offset: 0x200, Size: 128]
	DateTime BePickupTime;//[Offset: 0x280, Size: 8]
	void TickRevival(float DeltaSeconds);// 0x34829b8
	void SetRemainingRevivalTime(int InValue);// 0x348293c
	void SetCaptureIDCardStatus(bool InValue);// 0x34828b8
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x348283c
	void OnPlayerQuitSpectating();// 0x3482828
	void OnPlayerGotoSpectating();// 0x3482814
	void OnPlayerExitGame();// 0x3482800
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x348277c
	void LeaveRevivalState(uint32 SaviorKey);// 0x3482700
	bool IsInWaittingRevivalState();// 0x34826c8
	int GetRevivalCountDownTime();// 0x34826ac
	int GetRemainingRevivalTime();// 0x3482678
	bool GetCaptureIDCardStatus();// 0x3482640
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x34825b4
	void EnterRevivalState();// 0x34825a0
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x34824c0
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x34823e0

--------------------------------
Class: RevivalPointActor.LuaActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x490, Size: 8]
	float SmokeStartScaleDistance;//[Offset: 0x49c, Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x4a0, Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x4a4, Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x4a8, Size: 4]
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	float RevivalCDTime;//[Offset: 0x4b0, Size: 4]
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	int RevivalCount;//[Offset: 0x4b8, Size: 4]
	delegate OnHaveRevivedTeammates;//[Offset: 0x4c0, Size: 16]
	int ID;//[Offset: 0x4d0, Size: 4]
	enum CurState;//[Offset: 0x4d4, Size: 1]
	enum PreState;//[Offset: 0x4d5, Size: 1]
	int RevivalTime;//[Offset: 0x4d8, Size: 4]
	bool bCanBroadcastFatalDamageInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	int CurRevivalTime;//[Offset: 0x4e0, Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 1]
	int OperationalDistance;//[Offset: 0x4e8, Size: 4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x4f0, Size: 80]
	Transform PTowEleTransform;//[Offset: 0x540, Size: 48]
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x570, Size: 80]
	FString ExParticleComponentTag;//[Offset: 0x5c0, Size: 16]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x5d0, Size: 80]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x620, Size: 8]
	int SmokingdisappearTime;//[Offset: 0x628, Size: 4]
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	int IconID;//[Offset: 0x630, Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x638, Size: 16]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x648, Size: 8]
	float RevivalCDTimeCur;//[Offset: 0x650, Size: 4]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x668, Size: 8]
	void UpdateRevivalPointEffect();// 0x34be72c
	void StartRevival();// 0x34be718
	void ShowOperatorUIByState();// 0x34be6fc
	void SetDisableMapUI();// 0x34be6e8
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x34be658
	bool RecheckCurrentRevivingPlayers();// 0x34be620
	void OnRep_ShowSmoking();// 0x34be60c
	void OnRep_RevivalPointState(enum LastPreState);// 0x34be588
	void OnRep_RevivalCDTimeCur();// 0x34be56c
	void OnRep_CurrentRevivingPlayers();// 0x34be558
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x34be4c8
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x34be438
	float GetRevivalCDTimeCurPercent();// 0x34be404
	float GetRevivalCDTimeCur();// 0x34be3d0
	float GetRevivalCDTime();// 0x34be39c
	int GetId();// 0x34be368
	void DistanceChangedEvent(float Scale);// 0x4033584
	void CheckOverlap();// 0x34be34c
	bool CanOperatorMe(STExtraPlayerController* InPC);// 0x34be2bc

--------------------------------
Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0, Size: 4]
	uint32 DroperPlayerID;//[Offset: 0x4, Size: 4]
	int64 PickupTime;//[Offset: 0x8, Size: 8]
	int64 DroperTime;//[Offset: 0x10, Size: 8]
	FString PickUpName;//[Offset: 0x18, Size: 16]
	FString DroperPlayerName;//[Offset: 0x28, Size: 16]

--------------------------------
Class: FloatingTextComponent.ActorComponent.Object
	int MaxWidgetNum;//[Offset: 0x128, Size: 4]
	CurveFloat* OffsetXCurve;//[Offset: 0x130, Size: 8]
	CurveFloat* OffsetYCurve;//[Offset: 0x138, Size: 8]
	Vector RandomVector;//[Offset: 0x140, Size: 12]
	float TextScale;//[Offset: 0x14c, Size: 4]
	LinearColor NormalTextColor;//[Offset: 0x150, Size: 16]
	float HeadShotTextScale;//[Offset: 0x160, Size: 4]
	LinearColor HeadShotTextColor;//[Offset: 0x164, Size: 16]
	float BigDamageTextScale;//[Offset: 0x174, Size: 4]
	float BigDamage;//[Offset: 0x178, Size: 4]
	LinearColor BigDamageTextColor;//[Offset: 0x17c, Size: 16]
	float MaxWidgetRemianTime;//[Offset: 0x18c, Size: 4]
	int FloatTextZorder;//[Offset: 0x190, Size: 4]
	bool bIgnoreZeorDamageSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 1]
	UserWidget*[] IdleWidgetList;//[Offset: 0x198, Size: 16]
	ShowTextWidgetData[] ShowWidgetList;//[Offset: 0x1a8, Size: 16]
	float[] RecycleTimeList;//[Offset: 0x1b8, Size: 16]
	float RecycleTime;//[Offset: 0x1c8, Size: 4]
	STExtraPlayerController* PC;//[Offset: 0x1d0, Size: 8]
	void UpdateTextWidgetPos(out ShowTextWidgetData ShowTextWidgetData);// 0x338fa64
	void ShowFloatingText(out const FloatingTextData FloatingTextData);// 0x338f9d4
	void SetFloatingText(UserWidget* FloatingTextWidget, int Damage);// 0x4033584
	void ReycleFloatingTextWidget();// 0x338f9c0
	void PlayFloatingTextAnim(out ShowTextWidgetData ShowTextWidgetData, int Damage, bool IsHeadShot);// 0x338f8a4
	void OnFloatingDamageText(float BaseDamage, bool IsHeadShot, out const DamageEvent DamageEvent, out const HitResult HitResult, const Actor* Victim);// 0x338f6d8
	ShowTextWidgetData GetShowTextWidgetData(out const FloatingTextData FloatingTextData);// 0x338f620
	void ClientHandleFloatingTextArray(const FloatingTextData[] FloatingTextArray);// 0x338f544

--------------------------------
Class: ShowTextWidgetData
	UserWidget* FloatingTextWidget;//[Offset: 0x0, Size: 8]
	float RecycleTime;//[Offset: 0x8, Size: 4]
	Vector ShowWorldPos;//[Offset: 0xc, Size: 12]
	Vector RandomOffset;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FloatingTextData
	float BaseDamage;//[Offset: 0x0, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ParachuteAnimAssetData
	<byte,AnimationAsset*> AnimAssetCache;//[Offset: 0x0, Size: 80]
	bool IsAnimCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	WeatherInfo WeatherLevelInfo;//[Offset: 0x118, Size: 24]
	FString LastLoadedWeatherLevelName;//[Offset: 0x130, Size: 16]
	FString DefaultWeatherLevelName;//[Offset: 0x140, Size: 16]
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	void UnloadStreamLevel(FString LevelName);// 0x3c6c398
	void SyncWeatherLevelInfo();// 0x3c6c384
	void OnWeatherLevelChanged();// 0x4033584
	void OnUnLoadStreamLevelCompleted();// 0x3c6c370
	void OnRep_WeatherSyncCount();// 0x3c6c35c
	void OnLoadStreamLevelCompleted();// 0x3c6c348
	void LoadWeatherLevel();// 0x3c6c334
	void LoadStreamLevel(FString LevelName, int WeatherID);// 0x3c6c1c4
	void LoadDefaultWeatherLevel();// 0x3c6c1b0
	void Init();// 0x3c6c194

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	int CircleIndex;//[Offset: 0x520, Size: 4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x524, Size: 28]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x540, Size: 28]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x560, Size: 40]
	float TickOBPlayerCD;//[Offset: 0x588, Size: 4]
	float TickWeatherFogCD;//[Offset: 0x58c, Size: 4]
	DynamicWeatherController* SrcController;//[Offset: 0x590, Size: 8]
	DynamicWeatherController* DstController;//[Offset: 0x598, Size: 8]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x5a0, Size: 8]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x5b0, Size: 80]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x610, Size: 16]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x620, Size: 16]
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x334ae08
	void BlendToWeather(bool bDstWeather);// 0x334ad84

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x3c8, Size: 80]
	int CurUseFixWeatherIndex;//[Offset: 0x418, Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x41c, Size: 28]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x438, Size: 80]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x488, Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x4a4, Size: 28]
	float ServerElapsedTime;//[Offset: 0x4c0, Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	enum NextWeatherStatus;//[Offset: 0x4c9, Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x4cc, Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x4d8, Size: 16]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x500, Size: 8]
	enum UICountDownType;//[Offset: 0x51a, Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51b, Size: 1]
	void StartTransition();// 0x334bc40
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x334bbc4
	void RPCRequireControl();// 0x334bbb0
	void RPCRequire();// 0x334bb9c
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x334bb18
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x334bafc
	void ReinitInDemoReplay();// 0x334bae8
	void RefreshWeatherPredictionUI();// 0x334bad4
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x334ba44
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x334b9b4
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x334b924
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x334b894
	void OnRep_NextWeatherCountDownTime();// 0x334b880
	void OnRep_ControllerDataForReplay();// 0x334b86c
	void OnRep_ControllerData();// 0x334b858
	void OnRep_bEnableWeatherPredictionUI();// 0x334b844
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0x4033584
	void HandleClientHasReactivated();// 0x334b830
	void GotoSpecificWeather(int WeatherIndex);// 0x334b7b4
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x334b6d4
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x334b634
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x334b5a8
	float GetInProgressElapsedTimeSecWithWeather();// 0x334b574
	float GetGlobalWeatherSystemTimeOnServer();// 0x334b540
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x334b508
	void ForceStopDynamicWeatherChangeOnServer();// 0x334b4f4
	void ForceStartNextWeatherChangeOnServer();// 0x334b4e0
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x334b43c

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0, Size: 1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float ElapsedTime;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float SaturateTime;//[Offset: 0x10, Size: 4]
	float TimeMultiplier;//[Offset: 0x14, Size: 4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0, Size: 4]
	float StartTimeMax;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float DurationTimeMin;//[Offset: 0x10, Size: 4]
	float DurationTimeMax;//[Offset: 0x14, Size: 4]
	enum LastWeatherStatus;//[Offset: 0x18, Size: 1]
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x28, Size: 16]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x38, Size: 16]
	float TimeMultiplier;//[Offset: 0x48, Size: 4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]

--------------------------------
Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0, Size: 1]
	float Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0, Size: 1]
	float StartTime;//[Offset: 0x4, Size: 4]
	float TotalDurationTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 4]
	float ElapsedTime;//[Offset: 0x8, Size: 4]
	enum NextWeather;//[Offset: 0xc, Size: 1]
	float NextDuration;//[Offset: 0x10, Size: 4]
	float WeatherTotalWeight;//[Offset: 0x14, Size: 4]
	float TimelineOffset;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ScreenAppearanceName;//[Offset: 0x8, Size: 16]
	byte ParticleType;//[Offset: 0x18, Size: 1]
	float ScreenAppearanceConcentration;//[Offset: 0x1c, Size: 4]
	FName ShaderName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0x110, Size: 16]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0x120, Size: 16]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0x130, Size: 16]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0x140, Size: 16]
	delegate WeatherRecover;//[Offset: 0x150, Size: 16]
	enum DynamicWeatherType;//[Offset: 0x160, Size: 1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0x168, Size: 8]
	CurveFloat* LightCurve;//[Offset: 0x170, Size: 8]
	float TargetLightValue;//[Offset: 0x178, Size: 4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x180, Size: 8]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x188, Size: 8]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x190, Size: 8]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x198, Size: 8]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x1a0, Size: 8]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x1a8, Size: 8]
	float UINotifyTimeBeforeStart;//[Offset: 0x1b0, Size: 4]
	FString UINotifyModuleName;//[Offset: 0x1b8, Size: 16]
	int ChangeStartUINotifyID;//[Offset: 0x1c8, Size: 4]
	int ChangeQuitUINotifyID;//[Offset: 0x1cc, Size: 4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x1d0, Size: 4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x1d8, Size: 8]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x1e0, Size: 8]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x1e8, Size: 8]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x1f4, Size: 28]
	float RuningDirection;//[Offset: 0x210, Size: 4]
	float RuningTime;//[Offset: 0x214, Size: 4]
	float LerpTotalTime;//[Offset: 0x218, Size: 4]
	FString WeatherName;//[Offset: 0x220, Size: 16]
	DirectionalLight* MainLight;//[Offset: 0x230, Size: 8]
	SkyLight* SkyLight;//[Offset: 0x238, Size: 8]
	ExponentialHeightFog* Fog;//[Offset: 0x240, Size: 8]
	WeatherObject ObjectValues;//[Offset: 0x248, Size: 104]
	WeatherObject WeatherObjectSrc;//[Offset: 0x2b0, Size: 104]
	WeatherObject WeatherObjectLerp;//[Offset: 0x31c, Size: 104]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x384, Size: 12]
	void UINotifyCallbackOnServer();// 0x334a5a4
	void OnUserQualitySettingChanged(int renderlevel);// 0x334a520

--------------------------------
Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0, Size: 4]
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 16]
	float MainLight_Temperature;//[Offset: 0x14, Size: 4]
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 12]
	float SkyLight_Density;//[Offset: 0x24, Size: 4]
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 16]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 16]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 16]
	float HeightFallOff;//[Offset: 0x60, Size: 4]
	float StartDistance;//[Offset: 0x64, Size: 4]

--------------------------------
Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0, Size: 1]
	float CurrentElapsedTime;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 16]
	ExponentialHeightFog* Fog;//[Offset: 0x10, Size: 8]
	WeatherDstFog DstWeatherFog;//[Offset: 0x18, Size: 20]
	WeatherSrcFog SrcWeatherFog;//[Offset: 0x2c, Size: 12]
	float blendTime;//[Offset: 0x38, Size: 4]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0x40, Size: 16]

--------------------------------
Class: WeatherDstFog
	bool UseStartDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float StartDistance;//[Offset: 0x4, Size: 4]
	bool UseDensityCoefficient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeatherSrcFog
	float StartDistance;//[Offset: 0x0, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x4, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 8]

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0, Size: 1]
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 1]

--------------------------------
Class: WeaponHitDetailInfo
	int TotalShootNum;//[Offset: 0x0, Size: 4]
	int[] HitNumEveryBodys;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LastGameRemainItemData
	FName TombName;//[Offset: 0x0, Size: 8]
	Vector DropGroundPoint;//[Offset: 0x8, Size: 12]
	FString TargetPlayerUID;//[Offset: 0x18, Size: 16]
	RemainItemData[] RemainItemDataList;//[Offset: 0x28, Size: 16]

--------------------------------
Class: RemainItemData
	int ItemId;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x8, Size: 16]
	int SlotID;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ParachuteData
	uint64 UId;//[Offset: 0x0, Size: 8]
	float SlideDuration;//[Offset: 0x8, Size: 4]
	byte FollowState;//[Offset: 0xc, Size: 1]
	Vector ClientLandLocation;//[Offset: 0x10, Size: 12]
	Vector ClientLocation;//[Offset: 0x1c, Size: 12]
	Vector ServerLandLocation;//[Offset: 0x28, Size: 12]
	float SlideStartTime;//[Offset: 0x34, Size: 4]
	float SlideEndTime;//[Offset: 0x38, Size: 4]
	FString InputCount;//[Offset: 0x40, Size: 16]
	FString PositionCheck;//[Offset: 0x50, Size: 16]
	FString ClientPositionDiff;//[Offset: 0x60, Size: 16]
	float LastCorrectionTime;//[Offset: 0x70, Size: 4]
	float LastCorrectionHeight;//[Offset: 0x74, Size: 4]
	Vector LastCorrectionLocation;//[Offset: 0x78, Size: 12]
	Vector LastCorrectedLocation;//[Offset: 0x84, Size: 12]

--------------------------------
Class: VehicleMoveDragData
	VehicleMoveDrag[] MoveDrag;//[Offset: 0x0, Size: 16]
	VehicleMoveDrag[] SimulatedMoveDrag;//[Offset: 0x10, Size: 16]

--------------------------------
Class: VehicleMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	byte VehicleType;//[Offset: 0x4, Size: 1]
	byte[] Reasons;//[Offset: 0x8, Size: 16]
	int[] Counters;//[Offset: 0x18, Size: 16]

--------------------------------
Class: BattleOpenSequencerInfo
	Transform StartPosition;//[Offset: 0x0, Size: 48]
	VehicleWarStartVehicleInfo[] VehicleInfoList;//[Offset: 0x30, Size: 16]
	float Time;//[Offset: 0x40, Size: 4]
	float ServerStartTimestamp;//[Offset: 0x44, Size: 4]

--------------------------------
Class: VehicleWarStartVehicleInfo
	Vector Position;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	STExtraVehicleBase* Vehicle;//[Offset: 0x18, Size: 8]
	VehicleWarStartVehiclePlayerInfo DriverInfo;//[Offset: 0x20, Size: 16]
	VehicleWarStartVehiclePlayerInfo PassengerInfo;//[Offset: 0x30, Size: 16]

--------------------------------
Class: VehicleWarStartVehiclePlayerInfo
	int upassLevel;//[Offset: 0x0, Size: 4]
	int upassScore;//[Offset: 0x4, Size: 4]
	STExtraBaseCharacter* BasePlayer;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PlayerDecalData
	int DecalId;//[Offset: 0x0, Size: 4]
	Transform DecalTransform;//[Offset: 0x10, Size: 48]
	int DecalInstanceId;//[Offset: 0x40, Size: 4]
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x48, Size: 16]

--------------------------------
Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x618, Size: 16]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x628, Size: 16]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x638, Size: 16]
	bool StopFireFilter(STExtraShootWeapon* ShootWeapon);// 0x3749d70
	void StopFire(STExtraShootWeapon* ShootWeapon);// 0x3749cf4
	bool StartFireFilter(STExtraShootWeapon* ShootWeapon);// 0x3749c5c
	void StartFireBySlot(byte Slot, byte ShootMode);// 0x3749ba4
	STExtraWeapon* SpawnWeaponOnServer(class STExtraWeapon Template, int WeaponType, int WeaponId, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x3749994
	STExtraWeapon* SpawnAndBackpackWeaponOnServer(class STExtraWeapon Template, ItemDefineID ID, FName LogicSocket, bool bAutoUse, bool bNeedSwitch, bool bResetBulletNum);// 0x374978c
	bool ReloadWeaponFilter(STExtraShootWeapon* ShootWeapon);// 0x37496f4
	bool ReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x3749664
	void OnRep_CurrentWeaponReplicated();// 0x3749648
	void OnReconnectOnServer();// 0x374962c
	void LocalStopFire(STExtraShootWeapon* ShootWeapon);// 0x37495b0
	void LocalStartFire(STExtraShootWeapon* ShootWeapon, byte ShootMode, Vector SimpleShootTarget, Vector2D ClientScreenSize);// 0x3749484
	void LocalStartBarrel(STExtraShootWeapon* ShootWeapon);// 0x3749408
	void LocalHandleWeaponSystemDataOnSimulate(out WeaponSystemDataOnSimulateClient Data);// 0x374935c
	void LocalEquipWeapon(STExtraWeapon* Weapon, byte Slot);// 0x37492a4
	void DoAutoReloadCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x3749228
	void DelayFire(float DelayTime, byte ShootMode);// 0x3749168

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 128]
	STExtraWeapon* Weapon;//[Offset: 0x80, Size: 8]

--------------------------------
Class: WeaponReconnectReplicateData
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0, Size: 8]
	Actor* WeaponOwner;//[Offset: 0x8, Size: 8]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	FString OwnerPlayerName;//[Offset: 0x18, Size: 16]
	FName WeaponInventoryLogicSocket;//[Offset: 0x28, Size: 8]
	BulletInClip WeaponBulletInClip;//[Offset: 0x30, Size: 24]
	uint32 WeaponShootID;//[Offset: 0x48, Size: 4]
	uint32 WeaponClipID;//[Offset: 0x4c, Size: 4]
	byte CurWeaponState;//[Offset: 0x50, Size: 1]
	byte CurShootType;//[Offset: 0x51, Size: 1]
	int CurShootTotalType;//[Offset: 0x54, Size: 4]
	ItemDefineID DefineID;//[Offset: 0x58, Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x70, Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	int OperationIndex;//[Offset: 0x78, Size: 4]

--------------------------------
Class: BulletInClip
	int CurBulletNumInClip;//[Offset: 0x0, Size: 4]
	BulletInWeapon[] CurBulletIDList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: BulletInWeapon
	int BulletID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DefaultWeaponHolderInfo
	class STExtraWeapon* WeaponClass;//[Offset: 0x0, Size: 8]
	FName WeaponSocket;//[Offset: 0x8, Size: 8]
	int WeaponSepcificID;//[Offset: 0x10, Size: 4]
	int WeaponTypeID;//[Offset: 0x14, Size: 4]

--------------------------------
Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0, Size: 4]
	uint32 CurClipID;//[Offset: 0x4, Size: 4]
	int CurBulletNumInClip;//[Offset: 0x8, Size: 4]
	byte ShootMode;//[Offset: 0xc, Size: 1]
	byte ShootType;//[Offset: 0xd, Size: 1]
	float StartFireTime;//[Offset: 0x10, Size: 4]
	double StartFireSysTime;//[Offset: 0x18, Size: 8]

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x3c8, Size: 8]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x3d0, Size: 8]
	float NearToFarDistance;//[Offset: 0x3d8, Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x3e0, Size: 8]
	float PlayEffectDelayTime;//[Offset: 0x3e8, Size: 4]
	HitResult SurfaceHit;//[Offset: 0x3f0, Size: 136]
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]

--------------------------------
Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 16]
	BulletHitInfoUploadBinaray[] HitBinarayArray;//[Offset: 0x10, Size: 16]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0x20, Size: 16]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x30, Size: 16]
	int ShootTimes;//[Offset: 0x40, Size: 4]
	byte[] TssSdkAntiData;//[Offset: 0x48, Size: 16]
	int TssSdkAntiDataLen;//[Offset: 0x58, Size: 4]
	int NetworkStatus;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: BulletHitInfoUploadBinaray
	byte[] Data;//[Offset: 0x0, Size: 16]
	uint16 CompensationTime;//[Offset: 0x10, Size: 2]
	Actor* Actor;//[Offset: 0x14, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 12]
	int BulletFlyDistance;//[Offset: 0x1c, Size: 4]
	int BulletDown;//[Offset: 0x20, Size: 4]
	int8 CurBullet;//[Offset: 0x24, Size: 1]
	int ShootInterval;//[Offset: 0x28, Size: 4]
	int BulletFlyTime;//[Offset: 0x2c, Size: 4]
	int BulletShootTime;//[Offset: 0x30, Size: 4]
	int BulletHitTime;//[Offset: 0x34, Size: 4]
	int AimFov;//[Offset: 0x38, Size: 4]
	byte bulletDamageReduceRatio;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40, Size: 12]
	int64 ClientStartTime;//[Offset: 0x50, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x58, Size: 16]
	int AutoAimSpeed;//[Offset: 0x68, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x6c, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x70, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x74, Size: 4]

--------------------------------
Class: ShootTimeData
	Vector_NetQuantize ShootPos;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize GunPos;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 12]
	uint32 ShootID;//[Offset: 0x24, Size: 4]
	uint64 CurrentStates;//[Offset: 0x28, Size: 8]
	byte CapsuleHalfHeight;//[Offset: 0x30, Size: 1]
	float SkeletonLength;//[Offset: 0x34, Size: 4]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x40, Size: 64]
	double ShootSystemTime;//[Offset: 0x80, Size: 8]
	byte ShootTimeConDelta;//[Offset: 0x88, Size: 1]
	float ShootLevelTime;//[Offset: 0x8c, Size: 4]
	Vector_NetQuantize GunTailPos;//[Offset: 0x90, Size: 12]
	byte ShotFlags;//[Offset: 0x9c, Size: 1]

--------------------------------
Class: Vector_NetQuantizeNormalSv.Vector

--------------------------------
Class: ShootTimeInfo_NetQuantize

--------------------------------
Class: BulletHitInfoWithoutDamage
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	byte SurfaceType;//[Offset: 0x30, Size: 1]
	uint32 ShootID;//[Offset: 0x34, Size: 4]
	Actor* Actor;//[Offset: 0x38, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x40, Size: 8]
	byte HitBodyType;//[Offset: 0x48, Size: 1]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	byte ImpactEffectMask;//[Offset: 0x4a, Size: 1]

--------------------------------
Class: HitTargetExtraData
	byte PlatForm;//[Offset: 0x0, Size: 1]
	int CharacterReplicatID;//[Offset: 0x4, Size: 4]
	int CharacterMovementReplicatID;//[Offset: 0x8, Size: 4]
	float LastReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xc, Size: 4]
	float LastReplicatedTimePass;//[Offset: 0x10, Size: 4]
	float CapsulePreMoveDistance;//[Offset: 0x14, Size: 4]
	float MeshOffsetDistance;//[Offset: 0x18, Size: 4]
	float AverageFPS;//[Offset: 0x1c, Size: 4]
	float ImpactFrameDeltaTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: STExtraFireBalloon.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x438, Size: 8]
	StaticMeshComponent* BalloonMesh;//[Offset: 0x440, Size: 8]
	FireBalloonMovementComponent* Movement;//[Offset: 0x448, Size: 8]
	int MapMarkTypeID;//[Offset: 0x450, Size: 4]
	enum MapMarkFlag;//[Offset: 0x454, Size: 1]
	Pawn* Driver;//[Offset: 0x460, Size: 8]
	float MoveUpValue;//[Offset: 0x468, Size: 4]
	byte MovementSmoothMode;//[Offset: 0x4a0, Size: 1]
	float MovementSmoothAlpha;//[Offset: 0x4a4, Size: 4]
	float MoveUpScale;//[Offset: 0x4a8, Size: 4]
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	float AutoFallOffSpeed;//[Offset: 0x4b0, Size: 4]
	Vector ControlInputVector;//[Offset: 0x4b4, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x4c0, Size: 12]
	float TickInterval;//[Offset: 0x4cc, Size: 4]
	FString LuaFilePath;//[Offset: 0x4d8, Size: 16]
	Vector2D FObservationArea;//[Offset: 0x4e8, Size: 8]
	bool bIsInObservationArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x35a50cc
	void SetMoveUpValue(float InMoveUpValue);// 0x35a5050
	void SetDriver(Pawn* InPawn);// 0x35a4fcc
	void OnRep_Driver(Pawn* PrevDriver);// 0x35a4f48
	Pawn* GetDriver();// 0x35a4f2c
	void CheckWishTask();// 0x4033584
	bool CanBeDriver(Pawn* InPawn);// 0x35a4e94
	void BPUpdateUIVisible();// 0x4033584
	void BPUpdateObservationArea();// 0x4033584
	void BPSetPlayCameraOffsetData(float FAlpha, bool IsUpdateCameraLocation);// 0x4033584
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x4033584

--------------------------------
Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x1a1, Size: 1]
	float MaxFlyHeight;//[Offset: 0x1a4, Size: 4]
	float InitialMaxTarceDist;//[Offset: 0x1a8, Size: 4]
	Vector InitialLocation;//[Offset: 0x1ac, Size: 12]
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x1b8, Size: 16]
	Actor* ActorOwner;//[Offset: 0x1c8, Size: 8]
	void SetSkipUpdate(bool bNewValue);// 0x35a4970
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0x4033584
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x4033584
	float GetMaxFlyHeight();// 0x35a493c

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x190, Size: 4]
	float Acceleration;//[Offset: 0x194, Size: 4]
	float Deceleration;//[Offset: 0x198, Size: 4]
	float TurningBoost;//[Offset: 0x19c, Size: 4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a0, Size: 1]

--------------------------------
Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0, Size: 16]
	FString GLVersion;//[Offset: 0x10, Size: 16]
	FString OSVersion;//[Offset: 0x20, Size: 16]
	FString DeviceMake;//[Offset: 0x30, Size: 16]
	FString DeviceModel;//[Offset: 0x40, Size: 16]
	FString VulkanVersion;//[Offset: 0x50, Size: 16]
	FString MemorySizeInGB;//[Offset: 0x60, Size: 16]
	FString OpenID;//[Offset: 0x70, Size: 16]

--------------------------------
Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0, Size: 1]
	Actor* SeekAndLockTarget;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PlayerRemainTombBox.PlayerTombBox.LuaActor.Actor.Object
	FString TargetPlayerUID;//[Offset: 0x5c0, Size: 16]
	int MiniMapIconID;//[Offset: 0x5d0, Size: 4]
	int MiniMapInstanceID;//[Offset: 0x5d4, Size: 4]
	bool bIsSearchedRemainBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 1]
	void OnRep_IsSearchedRemainBox();// 0x34803b8
	void HandleBoxIsSearched();// 0x348039c

--------------------------------
Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector ImpactNormal;//[Offset: 0xc, Size: 12]
	float BulletHitTime;//[Offset: 0x18, Size: 4]
	float BulletLaunchTime;//[Offset: 0x1c, Size: 4]
	float BulletMovedDistance;//[Offset: 0x20, Size: 4]

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f1, Size: 1]
	Vector ServerShootPos;//[Offset: 0x6f4, Size: 12]
	float ServerShootTime;//[Offset: 0x700, Size: 4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x710, Size: 96]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x789, Size: 1]
	Controller* CachedInstigator;//[Offset: 0x790, Size: 8]
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x349b7d0
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x349b754
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x349b680
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x349b5d8
	void OnImpact(out const HitResult _ImpactResult);// 0x349b530
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x349b358

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x410, Size: 8]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x41c, Size: 4]
	float LaunchGravityScale;//[Offset: 0x420, Size: 4]
	int PunctureTimes;//[Offset: 0x424, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x428, Size: 8]
	class DamageType* DamageType;//[Offset: 0x430, Size: 8]
	ParticleSystem* NormalTailFX;//[Offset: 0x438, Size: 8]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x448, Size: 8]
	Vector RootScale;//[Offset: 0x450, Size: 12]
	bool bUseOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 1]
	Vector ShootDir;//[Offset: 0x460, Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 1]
	float ShowBulletEffectMinDistance;//[Offset: 0x470, Size: 4]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x560, Size: 8]
	delegate OnResetBullet;//[Offset: 0x568, Size: 16]
	delegate OnBulletImpact;//[Offset: 0x578, Size: 16]
	delegate OnLaunchBullet;//[Offset: 0x588, Size: 16]
	delegate OnRecycleBullet;//[Offset: 0x598, Size: 16]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x5a8, Size: 8]
	Actor* WeaponOwnerPawn;//[Offset: 0x5b0, Size: 8]
	float WeaponFloorHeight;//[Offset: 0x678, Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x67c, Size: 12]
	byte CachedOwnerRole;//[Offset: 0x688, Size: 1]
	uint32 OwnerPlayerKey;//[Offset: 0x68c, Size: 4]
	bool bEnableClientBlockVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 1]
	bool bEnableUpdateBulletTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 1]
	int MaxTraceTimes;//[Offset: 0x694, Size: 4]
	bool bEnableFillSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 1]
	void ResetBulletDelegate__DelegateSignature();// 0x4033584
	void ReloadNoEncodeAttr();// 0x362ccf0
	void OnShowBulletEffect();// 0x4033584
	void OnRecycleBulletDelegate__DelegateSignature();// 0x4033584
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x362cc48
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x4033584
	void OnImpact(out const HitResult _ImpactResult);// 0x362cba0
	bool NeedCheckBulletFlySound();// 0x362cb60
	void LaunchBulletDelegate__DelegateSignature();// 0x4033584
	float GetMaxBulletFlySpeed();// 0x362cb24
	Controller* GetInstigatorControllerSafe();// 0x362caf0
	STExtraBaseCharacter* GetInstigatorCharacter();// 0x362cabc
	bool ConditionalDestroyBullet(out const HitResult _ImpactResult);// 0x362ca08
	bool ClientVerifyBlock(out const Vector MuzzlePos, out const Vector ImpactPoint, Actor* Weapon, Actor* ImpactActor);// 0x362c8a0

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Actor* OwningWeapon;//[Offset: 0x40, Size: 8]
	Actor* Instigator;//[Offset: 0x48, Size: 8]
	uint32 ShootID;//[Offset: 0x50, Size: 4]

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb, Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x1c0, Size: 8]
	void ResumeMoveAfterImpactWithNoLost();// 0x32f5cc4
	void ResetTickDelay();// 0x32f5cac
	void IgnoreBounceReflectOnce();// 0x32f5c90
	void ForceStop();// 0x32f5c7c

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x150, Size: 4]
	float MaxSpeed;//[Offset: 0x154, Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x158, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x158, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x158, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x158, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x158, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x158, Size: 1]
	float PreviousHitTime;//[Offset: 0x15c, Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x160, Size: 12]
	float ProjectileGravityScale;//[Offset: 0x16c, Size: 4]
	float Buoyancy;//[Offset: 0x170, Size: 4]
	float Bounciness;//[Offset: 0x174, Size: 4]
	float Friction;//[Offset: 0x178, Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x17c, Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x180, Size: 16]
	delegate OnProjectileStop;//[Offset: 0x190, Size: 16]
	float HomingAccelerationMagnitude;//[Offset: 0x1a0, Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x1a4, Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x1ac, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x1b0, Size: 4]
	int BounceAdditionalIterations;//[Offset: 0x1b4, Size: 4]
	void StopSimulating(out const HitResult HitResult);// 0x5c449a8
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x5c44924
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x4033584
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x4033584
	Vector LimitVelocity(Vector NewVelocity);// 0x5c44894

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x5e8, Size: 4]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x5ec, Size: 44]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x618, Size: 16]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	float CurShootLockInterval;//[Offset: 0x630, Size: 4]
	void UpdateShootLockCD(float DeltaTime);// 0x3449e0c
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0x4033584

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Actor*[] BulletCacheList;//[Offset: 0x5d8, Size: 16]

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float LastCalcShootTime;//[Offset: 0x170, Size: 4]
	HitResult CalcShootHitRet;//[Offset: 0x178, Size: 136]
	bool bShootIDNotMatchReportKillflow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x208, Size: 8]
	<int,ShootWeaponCustomDamageList> CustomBulletDamage;//[Offset: 0x210, Size: 80]
	FName NormalBulletsTrackCompTag;//[Offset: 0x260, Size: 8]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0x268, Size: 8]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x270, Size: 8]
	delegate OnShoot;//[Offset: 0x278, Size: 16]
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x5a0, Size: 16]
	void UpdateVolleyShootParameters(Vector TargetLoc, out Vector StartLoc, out Rotator BulletRot, out Vector BulletDir);// 0x362d890
	void ShootDelegate__DelegateSignature();// 0x4033584
	void OnWeaponClipMaxBulletChanged();// 0x362d87c
	void OnWeaponBulletChanged();// 0x362d868
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x4033584
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x4033584
	void GetBulletPosAndVelocity(out Vector StartPos, out Vector Velocity);// 0x362d78c
	HitResult ConditionPreCalcShootHitRet(bool WithDeviation, float ToleranceTime);// 0x362d66c

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0x158, Size: 8]
	STExtraPlayerController* GlobalController;//[Offset: 0x168, Size: 8]
	void UpdateComponentTick();// 0x3748a50
	STExtraWeapon* TryGetOwnerWeapon();// 0x3748a1c
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x37489e8
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x3748928
	bool IsWeaponOwnerOBTarget();// 0x37488f0
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x3748860
	bool IsWeaponLogicComponentTickEnabled();// 0x3748828
	bool IsLocalOrSpectorPlayer();// 0x37487f0
	FString GetWeaponDetailInfo();// 0x374874c
	byte GetOwnerPawnRole();// 0x3748718

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14, Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ShootWeaponCustomDamageList
	<enum,ShootWeaponCustomDamage> Data;//[Offset: 0x0, Size: 80]

--------------------------------
Class: ShootWeaponCustomDamage
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 40]
	float DamageRate;//[Offset: 0x28, Size: 4]

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x170, Size: 8]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x178, Size: 8]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x180, Size: 8]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x1f0, Size: 112]
	SDeviation DeviationInfo_NoTss;//[Offset: 0x260, Size: 68]
	void SetUseTss(bool bUse);// 0x32f64f4
	void OnWeaponStopFire();// 0x32f64e0
	void OnWeaponStartFire();// 0x32f64cc
	void OnWeaponShoot();// 0x32f64b8
	void GetDataFromWeaponEntity();// 0x32f64a4
	Vector GetCurRecoilInfo();// 0x32f646c
	float GetCurDeviation();// 0x32f6438
	void CheckComponentTick();// 0x32f6424

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 4]
	float LeftMax;//[Offset: 0x18, Size: 4]
	float RightMax;//[Offset: 0x1c, Size: 4]
	float HorizontalTendency;//[Offset: 0x20, Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x28, Size: 8]
	int BulletPerSwitch;//[Offset: 0x30, Size: 4]
	float TimePerSwitch;//[Offset: 0x34, Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x3c, Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x40, Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x44, Size: 4]
	float RecoilValueClimb;//[Offset: 0x48, Size: 4]
	float RecoilValueFail;//[Offset: 0x4c, Size: 4]
	float RecoilModifierStand;//[Offset: 0x50, Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x54, Size: 4]
	float RecoilModifierProne;//[Offset: 0x58, Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x5c, Size: 4]
	float BurstEmptyDelay;//[Offset: 0x60, Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x68, Size: 4]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 4]
	float DeviationMax;//[Offset: 0x18, Size: 4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 4]
	float DeviationShoulderMultiplier;//[Offset: 0x40, Size: 4]

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x4c8, Size: 8]
	float BulletFireSpeed;//[Offset: 0x4d0, Size: 4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x4d8, Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0x4dc, Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0x4e0, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4e4, Size: 4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x4e8, Size: 16]
	float ShootInterval;//[Offset: 0x4f8, Size: 4]
	int ShootIntervalShowNumber;//[Offset: 0x4fc, Size: 4]
	float ExtraShootInterval;//[Offset: 0x500, Size: 4]
	int ExtraShootIntervalShowNumber;//[Offset: 0x504, Size: 4]
	<int,float> VolatileShootIntervalMap;//[Offset: 0x508, Size: 80]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x559, Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55a, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55b, Size: 1]
	int BurstShootBulletsNum;//[Offset: 0x55c, Size: 4]
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	int VolleyShootBulletsNum;//[Offset: 0x564, Size: 4]
	float VolleyBulletSpreadFactor;//[Offset: 0x568, Size: 4]
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0x570, Size: 16]
	float BurstShootInterval;//[Offset: 0x580, Size: 4]
	float BurstShootCD;//[Offset: 0x584, Size: 4]
	int BulletNumSingleShot;//[Offset: 0x588, Size: 4]
	FName MuzzleSocketName;//[Offset: 0x590, Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0x598, Size: 8]
	FName SilencerSocketName;//[Offset: 0x5a0, Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0x5a8, Size: 8]
	FName ShellDropSocketName;//[Offset: 0x5b0, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x5b8, Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0x5c0, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x5c4, Size: 4]
	byte ShootType;//[Offset: 0x5c8, Size: 1]
	int ShootTotalType;//[Offset: 0x5cc, Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	float WeaponWarnUpTime;//[Offset: 0x5d4, Size: 4]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x5d8, Size: 20]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x5ec, Size: 20]
	float BaseImpactDamage;//[Offset: 0x600, Size: 4]
	float VehicleDamageScale;//[Offset: 0x604, Size: 4]
	float BulletMomentum;//[Offset: 0x608, Size: 4]
	float BulletRange;//[Offset: 0x60c, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x610, Size: 8]
	byte ImpactDirType;//[Offset: 0x618, Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x620, Size: 16]
	float RangeModifier;//[Offset: 0x630, Size: 4]
	float ReferenceDistance;//[Offset: 0x634, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x638, Size: 4]
	class DamageType* DamageType;//[Offset: 0x640, Size: 8]
	ItemDefineID BulletType;//[Offset: 0x648, Size: 24]
	ItemDefineID ReplaceBulletType;//[Offset: 0x660, Size: 24]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x679, Size: 1]
	int InitBulletInClip;//[Offset: 0x67c, Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 1]
	float TraceDistance;//[Offset: 0x684, Size: 4]
	float MaxValidHitTime;//[Offset: 0x688, Size: 4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x690, Size: 80]
	FName SpesificWeaponBulletCanBreakThroughTargetTag;//[Offset: 0x6e0, Size: 8]
	float MaxDamageRate;//[Offset: 0x6e8, Size: 4]
	<byte,int> BreakThroughMaxNumConfig;//[Offset: 0x6f0, Size: 80]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x740, Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x748, Size: 8]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x750, Size: 176]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x800, Size: 8]
	Vector2D LocalSimulateBulletLaunchRangeFromMuzzle;//[Offset: 0x808, Size: 8]
	float BulletTrackDistanceFix;//[Offset: 0x810, Size: 4]
	float DamageImpulse;//[Offset: 0x814, Size: 4]
	byte ReloadType;//[Offset: 0x818, Size: 1]
	float PreFireTime;//[Offset: 0x81c, Size: 4]
	float PreFireAnimScale;//[Offset: 0x820, Size: 4]
	float PostFireTime;//[Offset: 0x824, Size: 4]
	float PostReloadTime;//[Offset: 0x828, Size: 4]
	float ReloadDurationStart;//[Offset: 0x82c, Size: 4]
	float ReloadDurationStartTacticalOffset;//[Offset: 0x830, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x834, Size: 4]
	float ReloadTime;//[Offset: 0x838, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x83c, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x840, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x844, Size: 4]
	float ReloadRate;//[Offset: 0x848, Size: 4]
	FName ReloadAllTIDName;//[Offset: 0x850, Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0x858, Size: 8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	int ReloadSpecificBulletNum;//[Offset: 0x864, Size: 4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 1]
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x869, Size: 1]
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86a, Size: 1]
	bool bAutoSwitchWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86b, Size: 1]
	float DropDuration;//[Offset: 0x86c, Size: 4]
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0x874, Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x878, Size: 272]
	AutoAimingConfigByGameMode[] AdjustAutoAimingConfigByModeList;//[Offset: 0x988, Size: 16]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x998, Size: 1]
	SRecoilInfo RecoilInfo;//[Offset: 0x9a0, Size: 112]
	float AccessoriesVRecoilFactor;//[Offset: 0xa10, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0xa14, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0xa18, Size: 4]
	SDeviation DeviationInfo;//[Offset: 0xa1c, Size: 68]
	float ShotGunCenterPerc;//[Offset: 0xa60, Size: 4]
	float ShotGunVerticalSpread;//[Offset: 0xa64, Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0xa68, Size: 4]
	float GameDeviationFactor;//[Offset: 0xa6c, Size: 4]
	float GameDeviationAccuracy;//[Offset: 0xa70, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0xa74, Size: 4]
	byte CrossHairType;//[Offset: 0xa78, Size: 1]
	float CrossHairInitialSize;//[Offset: 0xa7c, Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0xa80, Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0xa84, Size: 4]
	float VehicleWeaponDeviationAngle;//[Offset: 0xa88, Size: 4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8c, Size: 1]
	FName DefaultScopeSocket;//[Offset: 0xa90, Size: 8]
	FName DefaultGripSocket;//[Offset: 0xa98, Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0xaa0, Size: 8]
	FName DefaultMagSocket;//[Offset: 0xaa8, Size: 8]
	float WeaponBodyLength;//[Offset: 0xab0, Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0xab8, Size: 16]
	float WeaponAimFOV;//[Offset: 0xacc, Size: 4]
	float WeaponAimInTime;//[Offset: 0xad0, Size: 4]
	float WeaponAimPitchRate;//[Offset: 0xad4, Size: 4]
	float WeaponAimYawRate;//[Offset: 0xad8, Size: 4]
	float GameMotionYawRate;//[Offset: 0xadc, Size: 4]
	float GameMotionPitchRate;//[Offset: 0xae0, Size: 4]
	float ForegripParam;//[Offset: 0xae4, Size: 4]
	float MagParam;//[Offset: 0xae8, Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaec, Size: 1]
	float SensitiveFireYawRate;//[Offset: 0xaf0, Size: 4]
	byte SightType;//[Offset: 0xaf4, Size: 1]
	float SensitiveFirePitchRate;//[Offset: 0xaf8, Size: 4]
	byte SightVisionType;//[Offset: 0xafc, Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0xb00, Size: 24]
	float MaxBulletImpactFXClampDistance;//[Offset: 0xb18, Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0xb1c, Size: 4]
	float RecoilKickADS;//[Offset: 0xb20, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0xb24, Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0xb28, Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c, Size: 1]
	enum ReleaseFireType;//[Offset: 0xb2d, Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2e, Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2f, Size: 1]
	float LockAnimPitchDegree;//[Offset: 0xb30, Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0xb34, Size: 4]
	float AnimationKick;//[Offset: 0xb38, Size: 4]
	int ReloadAnimSlot;//[Offset: 0xb3c, Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 1]
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb41, Size: 1]
	float HandleFolderFactorScale;//[Offset: 0xb44, Size: 4]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb48, Size: 1]
	bool bRecordHitDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb49, Size: 1]
	int ConstantWeaponDurability;//[Offset: 0xb4c, Size: 4]
	int ShootReduceDurabilityAmount;//[Offset: 0xb50, Size: 4]
	Rotator[] RearSightRotConfig;//[Offset: 0xb58, Size: 16]
	FName[] RearSightSocketConfig;//[Offset: 0xb68, Size: 16]
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0xb78, Size: 16]
	int RearSightRotIndex;//[Offset: 0xb88, Size: 4]
	bool bForceUseShootIntervalConsistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c, Size: 1]
	int MaxFireNumPerFrame;//[Offset: 0xb90, Size: 4]
	byte[] CoronaEffectCfg;//[Offset: 0x1140, Size: 16]
	ItemDefineID GetBulletType();// 0x34dbda8

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponId;//[Offset: 0x170, Size: 4]
	int SkillID;//[Offset: 0x174, Size: 4]
	byte WeaponType;//[Offset: 0x178, Size: 1]
	byte weaponTypeNew;//[Offset: 0x179, Size: 1]
	byte WeaponHoldType;//[Offset: 0x17a, Size: 1]
	FName WeaponAttachSocket;//[Offset: 0x180, Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0x190, Size: 8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x19c, Size: 4]
	float LaunchGravityScale;//[Offset: 0x1a0, Size: 4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0x1a8, Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad, Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ae, Size: 1]
	bool bEnableShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1af, Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0x1b0, Size: 4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	int UnablePeekTipID;//[Offset: 0x1b8, Size: 4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x1c0, Size: 80]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x210, Size: 80]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x260, Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x264, Size: 4]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x268, Size: 16]
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x278, Size: 4]
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x27c, Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x280, Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x2b0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x2e0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x310, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x340, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x370, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x3a0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x3d0, Size: 48]
	<int,Transform> AttachToBackRelativeTransform_BagL_Map;//[Offset: 0x400, Size: 80]
	<int,Transform> AttachToBackRelativeTransform_BagR_Map;//[Offset: 0x450, Size: 80]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x4a0, Size: 8]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 1]
	bool bHasTurnAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4aa, Size: 1]
	byte[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x4b0, Size: 16]
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 432]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x1b0, Size: 32]

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0x10, Size: 1]
	SlateBrush SmallProfileImage;//[Offset: 0x18, Size: 184]
	SlateBrush LargerProfileImage;//[Offset: 0xd0, Size: 184]
	FString Name;//[Offset: 0x188, Size: 16]
	FString Description;//[Offset: 0x198, Size: 16]
	int DisplayPriority;//[Offset: 0x1a8, Size: 4]

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x8, Size: 4]
	int PickUpSoundID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0x10, Size: 4]
	byte Type;//[Offset: 0x14, Size: 1]
	StaticMesh* ShowMesh;//[Offset: 0x18, Size: 8]

--------------------------------
Class: ExtendBulletNumAttachment
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0, Size: 4]
	float Body;//[Offset: 0x4, Size: 4]
	float Limbs;//[Offset: 0x8, Size: 4]
	float Hand;//[Offset: 0xc, Size: 4]
	float Foot;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 4]
	int rangeEnd;//[Offset: 0x4, Size: 4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 48]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x30, Size: 48]
	WeaponVisualBulletCameraModeConfig ReplayPawnPerspectiveClientSetting;//[Offset: 0x60, Size: 48]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x90, Size: 16]
	WeaponVisualBulletItemConfig ReplayDefaultSetting;//[Offset: 0xa0, Size: 16]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 16]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x10, Size: 16]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x20, Size: 16]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x8, Size: 8]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 76]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x4c, Size: 76]
	AutoAimingRangeConfig ScopeRange;//[Offset: 0x98, Size: 76]
	float followTimeMax;//[Offset: 0xe4, Size: 4]
	bool TriggerBeforeFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	CurveFloat* SpeedCurve;//[Offset: 0xf0, Size: 8]
	CurveFloat* DistanceSpeedCurve;//[Offset: 0xf8, Size: 8]
	CurveFloat* SensitiveSpeedCurve;//[Offset: 0x100, Size: 8]
	float MaxAngle;//[Offset: 0x108, Size: 4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0, Size: 4]
	float CenterSpeedRate;//[Offset: 0x4, Size: 4]
	float RangeRate;//[Offset: 0x8, Size: 4]
	float SpeedRate;//[Offset: 0xc, Size: 4]
	float RangeRateSight;//[Offset: 0x10, Size: 4]
	float SpeedRateSight;//[Offset: 0x14, Size: 4]
	float CrouchRate;//[Offset: 0x18, Size: 4]
	float ProneRate;//[Offset: 0x1c, Size: 4]
	float DyingRate;//[Offset: 0x20, Size: 4]
	float DriveVehicleRate;//[Offset: 0x24, Size: 4]
	float InVehicleRate;//[Offset: 0x28, Size: 4]
	float FreeFallRate;//[Offset: 0x2c, Size: 4]
	float OpeningRate;//[Offset: 0x30, Size: 4]
	float LandingRate;//[Offset: 0x34, Size: 4]
	float adsorbMaxRange;//[Offset: 0x38, Size: 4]
	float adsorbMinRange;//[Offset: 0x3c, Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x40, Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x44, Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x48, Size: 4]

--------------------------------
Class: AutoAimingConfigByGameMode
	class GameStateBase* GameStateClass;//[Offset: 0x0, Size: 8]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x8, Size: 272]

--------------------------------
Class: VolleyShootInfoCache
	Vector StartLoc;//[Offset: 0x0, Size: 12]
	Vector ShootDir;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 16]
	FString AttrModifyItemName;//[Offset: 0x10, Size: 16]
	FString AttrName;//[Offset: 0x20, Size: 16]
	int AttrId;//[Offset: 0x30, Size: 4]
	int CompareId;//[Offset: 0x34, Size: 4]
	enum ModifierOp;//[Offset: 0x38, Size: 1]
	float ModifierValue;//[Offset: 0x3c, Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 8]
	float FinalAddValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WarPlayerStateScore
	int Rank;//[Offset: 0x0, Size: 4]
	int Score;//[Offset: 0x4, Size: 4]
	enum ScoreChangeReason;//[Offset: 0x8, Size: 1]
	int ScoreChangeCauserPlayerID;//[Offset: 0xc, Size: 4]
	int HighestScore;//[Offset: 0x10, Size: 4]
	int FollowScore;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AirAttackOrder
	int waveIndex;//[Offset: 0x0, Size: 4]
	float FlightHeight;//[Offset: 0x4, Size: 4]
	float SeaLevelHeight;//[Offset: 0x8, Size: 4]
	uint16[] bombsInterval;//[Offset: 0x10, Size: 16]
	uint16 BombBaseDamage;//[Offset: 0x20, Size: 2]
	uint16 BombMinDamage;//[Offset: 0x22, Size: 2]
	Vector2D[] bombsPosition2D;//[Offset: 0x28, Size: 16]

--------------------------------
Class: VehicleMoveFlow
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	FString OpenID;//[Offset: 0x8, Size: 16]
	int8 PlatID;//[Offset: 0x18, Size: 1]
	uint16 AreaID;//[Offset: 0x1a, Size: 2]
	FString ZoneID;//[Offset: 0x20, Size: 16]
	VehicleMovePoint[] PointList;//[Offset: 0x30, Size: 16]

--------------------------------
Class: VehicleMovePoint
	uint32 UniqueId;//[Offset: 0x0, Size: 4]
	int8 Type;//[Offset: 0x4, Size: 1]
	int X;//[Offset: 0x8, Size: 4]
	int Y;//[Offset: 0xc, Size: 4]
	int Z;//[Offset: 0x10, Size: 4]
	int Speed;//[Offset: 0x14, Size: 4]
	int8 VehicleN2oUse;//[Offset: 0x18, Size: 1]
	int8 VehicleCarPetUse;//[Offset: 0x19, Size: 1]
	int VehicleMoveDistance;//[Offset: 0x1c, Size: 4]
	int TimeStamp;//[Offset: 0x20, Size: 4]
	int8 RoleType;//[Offset: 0x24, Size: 1]

--------------------------------
Class: WeaponHitDisanceSectionArray
	int[] SectionArray;//[Offset: 0x0, Size: 16]
	int CaculateType;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SIslandInactiveClearComponent.ActorComponent.Object
	float ComponentTickInterval;//[Offset: 0x110, Size: 4]
	float InactiveCheckGap;//[Offset: 0x114, Size: 4]
	float InactiveTimeForTipPreTime;//[Offset: 0x11c, Size: 4]
	float PreActiveTime;//[Offset: 0x120, Size: 4]
	float ClientSendActiveRPCGap;//[Offset: 0x128, Size: 4]
	bool bIsClientActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	enum SIslandActiveType;//[Offset: 0x12d, Size: 1]
	Vector PrePawnLoc;//[Offset: 0x130, Size: 12]
	Rotator PreControllerRotation;//[Offset: 0x13c, Size: 12]
	delegate OnInactiveTipInSocialIslandDelegate;//[Offset: 0x148, Size: 16]
	void ServerMarkPlayerActive();// 0x34e7ebc
	void OnInactiveTipInSocialIslandDelegate__DelegateSignature(float RemainTime);// 0x4033584
	void MarkPlayerActive();// 0x34e7ea8
	void KickOutPlayer();// 0x34e7e94
	void ClientShowKickOutTip(float RemainTime);// 0x34e7e10
	void ClientCachedActiveState();// 0x34e7dfc
	bool CheckForMovement();// 0x34e7dc4
	void CheckForInactive();// 0x34e7da8

--------------------------------
Class: CharacterParachuteComponent.LuaInstancedActorComponent.ActorComponent.Object
	float CurrentDiveRate;//[Offset: 0x1dc, Size: 4]
	float FreeFall_InputForwardTriggerThreshold;//[Offset: 0x1f0, Size: 4]
	float FreeFall_InputRightTriggerThreshold;//[Offset: 0x1f4, Size: 4]
	float FreeFall_AcceFall;//[Offset: 0x1f8, Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0x1fc, Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0x200, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0x204, Size: 4]
	float FreeFall_MinForwardSpeed;//[Offset: 0x208, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x20c, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x210, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0x214, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x218, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x21c, Size: 4]
	float FreeFall_MinPitchForwardAngle;//[Offset: 0x220, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x224, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x228, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x22c, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x230, Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x234, Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x238, Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x23c, Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	float Opened_AcceFall;//[Offset: 0x244, Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x248, Size: 4]
	float Opened_AcceForward;//[Offset: 0x24c, Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x250, Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x254, Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x258, Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x25c, Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x260, Size: 4]
	float Opened_AcceRight;//[Offset: 0x264, Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x268, Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x26c, Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x270, Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x274, Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x278, Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x27c, Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x280, Size: 4]
	float ReliableRPCInterval;//[Offset: 0x284, Size: 4]
	float UseNewVerifyHeightInParachuteOpen;//[Offset: 0x288, Size: 4]
	float AdjustClientDistanceMinSq;//[Offset: 0x2b8, Size: 4]
	Vector Launch_InitSpeed;//[Offset: 0x2c8, Size: 12]
	Vector Launch_SpeedRandomDelta;//[Offset: 0x2d4, Size: 12]
	Vector Launch_Accel;//[Offset: 0x2e0, Size: 12]
	bool Launch_AutoExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	float Launch_YawRandomDelta;//[Offset: 0x2f0, Size: 4]
	float Launch_WingUpAngle;//[Offset: 0x2f4, Size: 4]
	float Launch_WingForwardDecreaseRate;//[Offset: 0x2f8, Size: 4]
	float Launch_WingForwardDecreaseConstRate;//[Offset: 0x2fc, Size: 4]
	float Launch_WingForwardEnterFreeFallSpeed;//[Offset: 0x300, Size: 4]
	float Launch_WingForwardToUpRate;//[Offset: 0x304, Size: 4]
	float Launch_WingUpDampingRate;//[Offset: 0x308, Size: 4]
	float Launch_WingUpDampingConstRate;//[Offset: 0x30c, Size: 4]
	float Launch_MaxWingUpSpeed;//[Offset: 0x310, Size: 4]
	float Launch_WingUpDropPlus;//[Offset: 0x314, Size: 4]
	delegate OnInitLaunch;//[Offset: 0x318, Size: 16]
	delegate OnResetLaunch;//[Offset: 0x328, Size: 16]
	delegate OnChangeMovementModeWhenLaunch;//[Offset: 0x338, Size: 16]
	delegate OnLanded;//[Offset: 0x348, Size: 16]
	float CurrentFallSpeed;//[Offset: 0x358, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x35c, Size: 4]
	float AllowMaxDistanceSqInParachuteOpen;//[Offset: 0x360, Size: 4]
	float MaxZAllowDistance;//[Offset: 0x364, Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	float FollowerDist;//[Offset: 0x390, Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x394, Size: 4]
	bool bGmSetUseServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	bool bGmSetUseMaxForwardInputValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 1]
	bool bEanbleRadiouBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool bEanbleRadiouBlurDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	MaterialInterface* RadiouBlurMat;//[Offset: 0x3f8, Size: 40]
	MaterialInterface* RadiouBlurMatCache;//[Offset: 0x420, Size: 8]
	float DistanceToJumpPlaneLoc;//[Offset: 0x42c, Size: 4]
	float AutoParachuteStopMoveForwardDistance;//[Offset: 0x430, Size: 4]
	float AutoParachuteMoveForwardRate;//[Offset: 0x434, Size: 4]
	float AutoParachuteOpenMoveForwardRate;//[Offset: 0x438, Size: 4]
	float AutoParachutePitchOffset;//[Offset: 0x43c, Size: 4]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x330c418
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x330c2a4
	void UpdateRadiouBlurState(float DeltaTime, float ThrottleInput, float SteerInput, enum State);// 0x330c178
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, enum State, out const Rotator CameraRotation);// 0x330c004
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x330bf14
	void UpdateLaunchRotation(float InputForward, float InputRight, float DeltaTime);// 0x330be24
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x330bcf8
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator CameraRotation);// 0x330bbc0
	void StopParachute();// 0x330bbac
	void StartParachute();// 0x330bb98
	void SetParachuteVelocity(out const Vector NewVelocity);// 0x330bb10
	void SetAutoParachuteLocation(out const Vector Location);// 0x330ba88
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x330ba04
	void ResetVelocity();// 0x330b9f0
	void RemoveRadiouBlur();// 0x330b9dc
	void PostNetReceiveNewState();// 0x330b9c8
	void OnPreReconnectOnServer();// 0x330b9b4
	void OnAsyncLoadRadiouBlurDone();// 0x330b9a0
	static bool IsParachuteWindEnable();// 0x330b968
	bool IsAutoParachutePathPlanningEnable();// 0x330b930
	bool IsAutoParachuteEnable();// 0x330b8f8
	void InvalidateAdjustFollowerLocation();// 0x330b8e4
	void InitRadiouBlurMat();// 0x330b8d0
	void GMParachuteAddServerPos(float X, float Y, float Z);// 0x330b7e0
	float GetReplicatedRightInput();// 0x330b7ac
	float GetReplicatedForwardInput();// 0x330b778
	Vector GetParachuteVelocity();// 0x330b740
	Vector GetLaunchInitVelocity();// 0x330b700
	Vector GetCurVelocity();// 0x330b6c8
	float GetAutoParachuteMoveForwardRate();// 0x330b694
	Vector GetAutoParachuteLocation();// 0x330b65c
	void EnableAutoParachutePathPlanning(bool bEnable);// 0x330b5d8
	void EnableAutoParachute(bool bEnable);// 0x330b554
	void ClearParachuteStatusCache();// 0x330b540
	Vector CalWingUpVelocity(float InputForward, float InputRight, float DeltaTime);// 0x330b434
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x330b330
	Vector CalLaunchVelocity(float InputForward, float InputRight, float DeltaTime);// 0x330b224
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x330b120
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x330afe8
	void AdjustFollowerLocation();// 0x330afd4
	void AddRadiouBlur(float InWeight);// 0x330af58

--------------------------------
Class: LuaInstancedActorComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x178, Size: 16]
	void UnRegistLuaTick();// 0x6a08740
	void RegistLuaTick(float TickInterval);// 0x6a086c4

--------------------------------
Class: ObservingReplay.GameReplay.Object
	delegate OnRequestStreamsComplete;//[Offset: 0x110, Size: 16]
	delegate OnKillInfoDownloadComplete;//[Offset: 0x120, Size: 16]
	<FString,uint32> ReportSequenceMap;//[Offset: 0x148, Size: 80]
	FString ReplayServerURL;//[Offset: 0x1b8, Size: 16]
	byte TlogBatchVersion;//[Offset: 0x1c8, Size: 1]
	int64 TlogBatchMaxSize;//[Offset: 0x1d0, Size: 8]
	uint32 SendTlogInterval;//[Offset: 0x1e0, Size: 4]
	RecordTlogBatch RecordTlogBatch;//[Offset: 0x1e8, Size: 24]
	void RequestReplaysFromServer(FString URLString);// 0x344ddbc
	void ClearStreams();// 0x344dda8

--------------------------------
Class: GameReplay.Object
	UserWidget* GMUI;//[Offset: 0x38, Size: 8]
	class UserWidget* GMUIClass;//[Offset: 0x40, Size: 40]
	enum ReplayType;//[Offset: 0x68, Size: 1]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	STExtraPlayerController* PlayerController;//[Offset: 0xf8, Size: 8]
	KillInfoRecordData[] RecordKillInfoDataArray;//[Offset: 0x100, Size: 16]
	bool StopRecordingReplay();// 0x33af3ac
	bool StopPlay();// 0x33af36c
	bool StartRecordingReplay();// 0x33af32c
	void SetSpectatorName(FString SpectatorName, bool bGM);// 0x33af1b4
	bool SetReplayTimeDilation(float InDilation);// 0x33af124
	void SetReplayStreamer(FString InReplayStreamer);// 0x33aefb0
	void SetIsGMSpectator(bool bGM);// 0x33aef30
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x33aeeb4
	void SetCanChangeViewTarget(bool bCanChange);// 0x33aee30
	void ResetPlaybackData();// 0x33aee1c
	void ReplayUnbindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x33aeda0
	void ReplayOnWeaponChanged();// 0x33aed8c
	void ReplayOnSimulatedWeaponChanged();// 0x33aed78
	void ReplayOnBulletNumChanged();// 0x33aed64
	void ReplayBindBulletNumChangedDelegate(STExtraBaseCharacter* pCharacter);// 0x33aece8
	bool PlayReplay();// 0x33aeca8
	bool PauseReplay(bool bPaused);// 0x33aec08
	bool IsInRecordState();// 0x33aebd0
	bool IsInPlayState();// 0x33aeb98
	bool IsGMSpectator();// 0x33aeb7c
	bool IsFastForwarding();// 0x33aeb44
	bool HaveRecordingData();// 0x33aeb04
	void HandleChangeStatePC();// 0x33aeaf0
	STExtraBaseCharacter* GetViewCharacter();// 0x33aeabc
	FString GetSpectatorName();// 0x33aea18
	float GetReplayRecordStartTime();// 0x33ae9e4
	PlayerCameraManager* GetPlayerCameraManager();// 0x33ae9b0
	float GetCurrentReplayTotalTimeInSeconds();// 0x33ae97c
	float GetCurrentReplayCurTimeInSeconds();// 0x33ae948
	bool GetCanChangeViewTarget();// 0x33ae910
	void CreateGMUIIfNotExists();// 0x33ae8fc

--------------------------------
Class: RecordTlogBatch
	byte Version;//[Offset: 0x0, Size: 1]
	RecordTlog[] TlogArray;//[Offset: 0x8, Size: 16]

--------------------------------
Class: RecordTlog
	FString UId;//[Offset: 0x0, Size: 16]
	byte EventId;//[Offset: 0x10, Size: 1]
	FString OpenID;//[Offset: 0x18, Size: 16]
	int64 TimeStamp;//[Offset: 0x28, Size: 8]
	float DSElapsedSeconds;//[Offset: 0x30, Size: 4]
	<FString,FString> KeyValueMap;//[Offset: 0x38, Size: 80]

--------------------------------
Class: KillInfoRecordData
	FString Killer;//[Offset: 0x0, Size: 16]
	FString Victim;//[Offset: 0x10, Size: 16]
	bool bKillDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	uint64 KillTimeStampDemoTime;//[Offset: 0x28, Size: 8]
	uint64 KillTimeStampGameTime;//[Offset: 0x30, Size: 8]
	FString SafeLabel;//[Offset: 0x38, Size: 16]
	int SafeParam1;//[Offset: 0x48, Size: 4]
	int SafeParam2;//[Offset: 0x4c, Size: 4]
	float RecordTimestamp;//[Offset: 0x50, Size: 4]

--------------------------------
Class: DailyTaskReportInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]
	uint32 TaskSyncToDsTs;//[Offset: 0xc, Size: 4]
	DailyTaskStoreInfo[] TaskInfo;//[Offset: 0x10, Size: 16]
	DailyTaskAwardInfo[] RewardInfo;//[Offset: 0x20, Size: 16]

--------------------------------
Class: DailyTaskAwardInfo
	int TaskId;//[Offset: 0x0, Size: 4]
	TaskAwardItemInfo[] AwardList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TaskAwardItemInfo
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0, Size: 8]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: DeathReplayData
	bool IsValidDeathReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsForCE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	FString SelfName;//[Offset: 0x8, Size: 16]
	FString PlayerName;//[Offset: 0x18, Size: 16]
	uint64 PlayerUID;//[Offset: 0x28, Size: 8]
	int DamageType;//[Offset: 0x30, Size: 4]
	int SubType;//[Offset: 0x34, Size: 4]
	FString CauseName;//[Offset: 0x38, Size: 16]
	FString CauseActionName;//[Offset: 0x48, Size: 16]
	bool IsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool IsSuicide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	int AliasID;//[Offset: 0x5c, Size: 4]
	FString AliasTitle;//[Offset: 0x60, Size: 16]
	FString AliasNation;//[Offset: 0x70, Size: 16]
	int AliasRank;//[Offset: 0x80, Size: 4]
	FString AliasPartnerName;//[Offset: 0x88, Size: 16]
	int AliasPartnerRelation;//[Offset: 0x98, Size: 4]
	int AliasRankID;//[Offset: 0x9c, Size: 4]
	int SegmentLevel;//[Offset: 0xa0, Size: 4]
	float KDNum;//[Offset: 0xa4, Size: 4]
	int GameCount;//[Offset: 0xa8, Size: 4]
	int WinCount;//[Offset: 0xac, Size: 4]
	int TopTenCount;//[Offset: 0xb0, Size: 4]
	int KillNum;//[Offset: 0xb4, Size: 4]
	float Distance;//[Offset: 0xb8, Size: 4]
	DeathReplayHitInfo OtherHitInfo;//[Offset: 0xbc, Size: 32]
	DeathReplayHitInfo SelfHitInfo;//[Offset: 0xdc, Size: 32]

--------------------------------
Class: DeathReplayHitInfo
	float Damage;//[Offset: 0x0, Size: 4]
	int HitCount;//[Offset: 0x4, Size: 4]
	int HeadShoot;//[Offset: 0x8, Size: 4]
	int LimbsShoot;//[Offset: 0xc, Size: 4]
	int BodyShoot;//[Offset: 0x10, Size: 4]
	int HandShoot;//[Offset: 0x14, Size: 4]
	int FootShoot;//[Offset: 0x18, Size: 4]
	float GunHitRate;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: FatalDamageParameter
	FatalDamageStringParameter String;//[Offset: 0x0, Size: 112]
	int DamageType;//[Offset: 0x70, Size: 4]
	int AdditionalParam;//[Offset: 0x74, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	int ResultHealthStatus;//[Offset: 0x7c, Size: 4]
	int Relationship;//[Offset: 0x80, Size: 4]
	int PreviousHealthStatus;//[Offset: 0x84, Size: 4]
	int realKillerNewKillNum;//[Offset: 0x88, Size: 4]
	uint32 causerKey;//[Offset: 0x8c, Size: 4]
	uint32 victimKey;//[Offset: 0x90, Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x94, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x98, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x9c, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0xa0, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0xa4, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0xa8, Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0xac, Size: 4]
	int CauserClothAvatarID;//[Offset: 0xb0, Size: 4]
	int CauserType;//[Offset: 0xb4, Size: 4]
	int VictimType;//[Offset: 0xb8, Size: 4]
	byte[] ExpandDataContent;//[Offset: 0xc0, Size: 16]

--------------------------------
Class: FatalDamageStringParameter
	FString CauserName;//[Offset: 0x0, Size: 16]
	FString VictimName;//[Offset: 0x10, Size: 16]
	FString FuzzyCauserName;//[Offset: 0x20, Size: 16]
	FString FuzzyVictimName;//[Offset: 0x30, Size: 16]
	FString RealKillerName;//[Offset: 0x40, Size: 16]
	FString CauserNation;//[Offset: 0x50, Size: 16]
	FString VictimNation;//[Offset: 0x60, Size: 16]

--------------------------------
Class: WeaponSpecificHandler.WeaponLogicBaseComponent.ActorComponent.Object
	ItemDefineID ItemDefineID;//[Offset: 0x170, Size: 24]
	FName LogicSocket;//[Offset: 0x188, Size: 8]
	FName AttachSocket;//[Offset: 0x190, Size: 8]
	byte SurviveWeaponPropSlot;//[Offset: 0x198, Size: 1]
	float AIMinAttackDist;//[Offset: 0x19c, Size: 4]
	float AIMaxAttackDist;//[Offset: 0x1a0, Size: 4]
	float AIAttackDist;//[Offset: 0x1a4, Size: 4]
	ItemHandleBase* GetBackpackItemHandle();// 0x3753d30
	int GetAvailableBulletsNumInBackpack();// 0x3753cfc

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x3c8, Size: 12]
	Vector LowThrowOffset;//[Offset: 0x3d4, Size: 12]
	byte ThrowMode;//[Offset: 0x3e0, Size: 1]
	float PredictLineVelocityScale;//[Offset: 0x3e4, Size: 4]
	float MaxSimTime;//[Offset: 0x3e8, Size: 4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x3f0, Size: 48]
	float GrenadeRadius;//[Offset: 0x420, Size: 4]
	Vector PredictLineStartLocation;//[Offset: 0x424, Size: 12]
	Vector PredictLineStartVelocity;//[Offset: 0x430, Size: 12]
	Vector LauncheVelocity;//[Offset: 0x43c, Size: 12]

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 16]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Vector HitActorLocation;//[Offset: 0x14, Size: 12]
	Rotator HitActorRotation;//[Offset: 0x20, Size: 12]

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<FName,FString> CrossHairNameAndTextureMap;//[Offset: 0x170, Size: 80]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x1c0, Size: 16]
	LinearColor MainTargetColor;//[Offset: 0x1d0, Size: 16]
	LinearColor SecondaryTargetColor;//[Offset: 0x1e0, Size: 16]
	LinearColor WeaponSightLockColor;//[Offset: 0x1f0, Size: 16]
	LinearColor WeaponSightLockHDRColor;//[Offset: 0x200, Size: 16]
	<int,int> SightTypeToIndex;//[Offset: 0x210, Size: 80]
	<byte,SightMaterialModify> SightMaterialModifyMap;//[Offset: 0x260, Size: 80]
	WeaponCrossHairPerformData[] CrossHairDataOverride;//[Offset: 0x2b0, Size: 16]
	float PistolCenterDownDis;//[Offset: 0x2c0, Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x2c8, Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x2d0, Size: 4]
	bool bForceHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	float RotateAngle;//[Offset: 0x2d8, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x2e0, Size: 8]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x2f0, Size: 8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x2f8, Size: 8]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x300, Size: 8]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x308, Size: 8]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x310, Size: 8]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x318, Size: 8]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x320, Size: 8]
	Texture2D* CrossHairShotGun;//[Offset: 0x328, Size: 8]
	bool bInitAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x353, Size: 1]
	void UpdateComponentTick();// 0x3321e88
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x3321dc8
	void DrawSpreadEnd();// 0x3321db4
	void DrawDebugPointEnd();// 0x3321da0

--------------------------------
Class: SightMaterialModify
	SightMaterialModifyItem[] AimMaterialModify;//[Offset: 0x0, Size: 16]
	SightMaterialModifyItem[] NoAimMaterialModify;//[Offset: 0x10, Size: 16]

--------------------------------
Class: SightMaterialModifyItem
	int MaterialID;//[Offset: 0x0, Size: 4]
	FName ParameterName;//[Offset: 0x8, Size: 8]
	LinearColor Value;//[Offset: 0x10, Size: 16]

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x28, Size: 4]
	Vector2D Position;//[Offset: 0x2c, Size: 8]
	Vector2D Size;//[Offset: 0x34, Size: 8]
	Vector2D Origin;//[Offset: 0x3c, Size: 8]
	Vector2D ScreenPosition;//[Offset: 0x44, Size: 8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	float Opacity;//[Offset: 0x50, Size: 4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	SurviveHUD* HUDOwner;//[Offset: 0x58, Size: 8]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x60, Size: 8]
	Pawn* CharacterOwner;//[Offset: 0x68, Size: 8]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 1]
	float LastRenderTime;//[Offset: 0x74, Size: 4]
	Vector2D RenderPosition;//[Offset: 0x78, Size: 8]
	Vector2D RenderSize;//[Offset: 0x80, Size: 8]
	float RenderScale;//[Offset: 0x88, Size: 4]
	Vector2D CanvasCenter;//[Offset: 0x8c, Size: 8]
	Canvas* Canvas;//[Offset: 0x98, Size: 8]
	float AspectScale;//[Offset: 0xa0, Size: 4]
	Vector2D CanvasClip;//[Offset: 0xa4, Size: 8]
	StructProperty*[] RenderObjectList;//[Offset: 0xb0, Size: 16]
	bool ShouldDraw(bool bShowScores);// 0x33dae8c
	void SetHidden(bool bIsHidden);// 0x33dae00
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x33dabf4
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x33daa98
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x33da95c
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x33da85c
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x33da488
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x33d9ec8
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x33d9b38
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x33d9a7c
	void Draw(float DeltaTime);// 0x33d99f8
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x33d9960

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4b0, Size: 1]
	Vector MarkerPosition;//[Offset: 0x4b4, Size: 12]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	bool bDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 1]
	bool ShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c2, Size: 1]
	bool OBShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c3, Size: 1]
	HitPerformData HitPerform;//[Offset: 0x4c8, Size: 144]
	Texture2D* HUDMainTexture;//[Offset: 0x558, Size: 8]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x560, Size: 8]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x568, Size: 8]
	bool PlayHudHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x578, Size: 16]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x588, Size: 16]
	SimpleCrossHairData[] PriorCrossHairList;//[Offset: 0x598, Size: 16]
	Texture2D* HUDPlayerTexture;//[Offset: 0x5b8, Size: 8]
	CanvasIcon Crosshair;//[Offset: 0x5c0, Size: 24]
	CanvasIcon ProgreesBar;//[Offset: 0x638, Size: 24]
	CanvasIcon BKProgreesBar;//[Offset: 0x650, Size: 24]
	CanvasIcon ProgressBarPlayer;//[Offset: 0x668, Size: 24]
	CanvasIcon Marker;//[Offset: 0x698, Size: 24]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x6b0, Size: 8]
	CanvasIcon WORLDMAP;//[Offset: 0x6b8, Size: 24]
	Texture2D* AimCrosshairTextrue;//[Offset: 0x6d0, Size: 8]
	float DateDrawOffsetX;//[Offset: 0x704, Size: 4]
	void SetShowDebugInfo(bool bNewDebugShow);// 0x366c398
	void OnAsyncLoadingFinished();// 0x366c384
	bool IsValidDamageNumber(const Actor* DamageCauser, int DamageTypeId);// 0x366c2b0
	LinearColor GetPlayerNameColorByTeamID(int TeamID);// 0x366c218
	LinearColor GetColorByTeamID(int TeamID);// 0x366c180
	void EnableCrosshair(bool bEnable);// 0x366c100
	void DrawScreenString(FText Text, float X, float Y);// 0x366be7c
	void DrawCircleUFunction(Vector2D Center, float Radius, LinearColor Color);// 0x366bd8c
	void AddHitDamageNumberWithConfig(float Damage, const Actor* HitTarget, const STExtraPlayerController* PC, int ConfigIndex, bool bIsHeadshot, bool bIsDeadlyShot, bool bIsCareTeam);// 0x366bb8c
	void AddHitDamageNumber(float Damage, const Actor* HitTarget, bool IsHeadShot, int MyTeamID, int EnemyTeamID, int PlayerNumPerTeam);// 0x366b9d8

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0, Size: 16]
	float DefaultSpread;//[Offset: 0x10, Size: 4]
	float SpreadMax;//[Offset: 0x14, Size: 4]
	float HeadExtraScale;//[Offset: 0x18, Size: 4]
	float AddSpreadScale;//[Offset: 0x1c, Size: 4]
	float SpreadDecreaseSpeed;//[Offset: 0x20, Size: 4]
	float DefaultOffset;//[Offset: 0x24, Size: 4]
	float DefaultAlpha;//[Offset: 0x28, Size: 4]
	float AlphaDecreaseSpeed;//[Offset: 0x2c, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	LinearColor HitBodyDrawColor;//[Offset: 0x34, Size: 16]
	LinearColor HitHeadDrawColor;//[Offset: 0x44, Size: 16]
	LinearColor HitToDeathDrawColor;//[Offset: 0x54, Size: 16]
	AkAudioEvent* HeadShotSound;//[Offset: 0x68, Size: 8]
	AkAudioEvent* BodyShotSound;//[Offset: 0x70, Size: 8]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x78, Size: 8]
	float CurCrosshairSpread;//[Offset: 0x80, Size: 4]

--------------------------------
Class: SimpleCrossHairData
	FString Tag;//[Offset: 0x0, Size: 16]
	Texture2D* CrossHairTexture;//[Offset: 0x10, Size: 8]
	float Scale;//[Offset: 0x18, Size: 4]
	int Priority;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 8]
	float U;//[Offset: 0x8, Size: 4]
	float V;//[Offset: 0xc, Size: 4]
	float UL;//[Offset: 0x10, Size: 4]
	float VL;//[Offset: 0x14, Size: 4]

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x38, Size: 8]
	TextureUVs UVs;//[Offset: 0x40, Size: 16]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x58, Size: 16]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69, Size: 1]
	Vector2D RenderOffset;//[Offset: 0x6c, Size: 8]
	float Rotation;//[Offset: 0x74, Size: 4]
	Vector2D RotPivot;//[Offset: 0x78, Size: 8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float RenderPriority;//[Offset: 0xc, Size: 4]
	Vector2D Position;//[Offset: 0x10, Size: 8]
	Vector2D Size;//[Offset: 0x18, Size: 8]
	LinearColor RenderColor;//[Offset: 0x20, Size: 16]
	float RenderOpacity;//[Offset: 0x30, Size: 4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 4]
	float V;//[Offset: 0x4, Size: 4]
	float UL;//[Offset: 0x8, Size: 4]
	float VL;//[Offset: 0xc, Size: 4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x48, Size: 24]
	Font* Font;//[Offset: 0x60, Size: 8]
	float TextScale;//[Offset: 0x68, Size: 4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	Vector2D ShadowDirection;//[Offset: 0x70, Size: 8]
	LinearColor ShadowColor;//[Offset: 0x78, Size: 16]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x8c, Size: 16]
	byte HorzPosition;//[Offset: 0x9c, Size: 1]
	byte VertPosition;//[Offset: 0x9d, Size: 1]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 36]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 16]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0x170, Size: 4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175, Size: 1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176, Size: 1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177, Size: 1]
	bool bDisableDsAntiDataReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableAddSPCShootData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x180, Size: 8]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x200, Size: 8]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	void HandleOnWeaponStopFire();// 0x32f4ba8
	void HandleOnWeaponStartFire();// 0x32f4b94
	bool CheckCloseDSTick();// 0x32f4b5c

--------------------------------
Class: MultiBulletComponent.WeaponLogicBaseComponent.ActorComponent.Object
	int FirstAddBulletID;//[Offset: 0x170, Size: 4]
	SupportUpBullet[] MultiBulletList;//[Offset: 0x178, Size: 16]
	ItemDefineID OriginalBulletDefineID;//[Offset: 0x188, Size: 24]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1a0, Size: 8]
	void SetFirstAddBullet(int BulletID);// 0x342f848
	void SetBulletIDListInClip(out BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x342f6d0
	void SetBulletAttr(int ReloadBulletID);// 0x342f654
	void RemoveBulletIDListInClip(int RemoveNum, out BulletInClip CurBulletInClip, bool IsRevert);// 0x342f50c
	void RefreshBulletIDListInClip(int Count, out BulletInClip CurBulletInClip);// 0x342f414
	void PreSetBulletIDListInClip(out BulletInClip NewBulletInClip, out BulletInClip CurBulletInClip);// 0x342f2d8
	bool HasMultiBullet();// 0x342f2a0
	int GetShootBulletType();// 0x342f26c
	int GetNextCostBulletIDFromBackpack(BackpackComponent* InBackPack);// 0x342f1e0
	int GetNextBulletID();// 0x342f1ac
	BackpackComponent* GetBackpackComponent();// 0x342f178
	float GetAdjustBulletMomentum();// 0x342f144
	float GetAdjustBulletDamage();// 0x342f110
	int CostBulletFromBackpack(BackpackComponent* backpack, int WantReloadNum, out BulletInWeapon[] CostBulletList);// 0x342efcc
	void AddBulletIDListInClip(BulletInWeapon[] InCurBulletList, int Count, out BulletInClip CurBulletInClip);// 0x342ede4

--------------------------------
Class: SupportUpBullet
	int UpBulletID;//[Offset: 0x0, Size: 4]
	int DefaultPriority;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GrenadeLaunchComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x170, Size: 8]
	float BulletSpeed;//[Offset: 0x178, Size: 4]
	int CurBulletNum;//[Offset: 0x17c, Size: 4]
	bool bUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	int MaxBulletNumInClip;//[Offset: 0x184, Size: 4]
	ItemDefineID BulletType;//[Offset: 0x188, Size: 24]
	bool CanUseGrenadeLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0x1a8, Size: 16]
	class CameraShake* ShootCameraShake;//[Offset: 0x1b8, Size: 8]
	float CameraShakeInnerRadius;//[Offset: 0x1c0, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x1c4, Size: 4]
	float CameraShakFalloff;//[Offset: 0x1c8, Size: 4]
	AkAudioEvent* ShootSound;//[Offset: 0x1d0, Size: 8]
	float ReloadTime;//[Offset: 0x1d8, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x1dc, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x1e0, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x1e4, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x1e8, Size: 8]
	BackpackComponent* OwnerBackPack;//[Offset: 0x1f0, Size: 8]
	void ShootGrenadeBullet(Vector StartLoc, Rotator StartRot, uint32 ShootID);// 0x33cb1e4
	void SetUseGreanadeLaunch(bool bIsUse);// 0x33cb160
	void RemoveBullet(int RemoveNum);// 0x33cb0e4
	int ReloadGrenadeLaunch();// 0x33cb0b0
	void OnRep_UseGrenadeLaunchState();// 0x33cb09c
	void OnRep_CurBulletNum();// 0x33cb088
	void OnRep_CanUseGrenadeLaunch();// 0x33cb074
	void LaunchGrenadeBullet(Transform Trans, uint32 ShootID);// 0x33caf94
	bool JudgeMustReload();// 0x33caf5c
	bool IsUseGreanadeLaunch();// 0x33caf24
	void HandleGrenadeLaunchEquip(bool bIsEquip);// 0x33caea0
	BackpackComponent* GetBackpackComp();// 0x33cae6c
	void DoGrenadeLaunchStartReload();// 0x33cae58
	bool CheckCanReload();// 0x33cae20

--------------------------------
Class: FillGasComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UpGasSpeed;//[Offset: 0x170, Size: 4]
	float DownGasSpeed;//[Offset: 0x174, Size: 4]
	float CostGasOneShoot;//[Offset: 0x178, Size: 4]
	float MaxGas;//[Offset: 0x17c, Size: 4]
	float GasAddDamageRate;//[Offset: 0x180, Size: 4]
	float MaxGasAngle;//[Offset: 0x184, Size: 4]
	float PostFillGasTime;//[Offset: 0x188, Size: 4]
	float GasUpdateInterval;//[Offset: 0x18c, Size: 4]
	int CurGas;//[Offset: 0x190, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x198, Size: 8]
	void OnRep_CurGas();// 0x338d5b0
	void CostGassByShoot();// 0x338d59c
	void CheckNeedRep();// 0x338d588
	void AddFillGass(float AddFillGasTime);// 0x338d50c

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<enum,AkAudioEvent*> ShootModeFireShotSoundDataMap;//[Offset: 0x1e8, Size: 80]
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x238, Size: 8]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x240, Size: 8]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x248, Size: 8]
	float CameraShakeInnerRadius;//[Offset: 0x250, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x254, Size: 4]
	float CameraShakFalloff;//[Offset: 0x258, Size: 4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	bool bNeedOptimizeMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 1]
	ParticleSystem* MuzzleFX;//[Offset: 0x260, Size: 8]
	Vector LocalMuzzelFXScale;//[Offset: 0x268, Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x278, Size: 8]
	Vector ScopeMuzzelFXScale;//[Offset: 0x280, Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x290, Size: 8]
	Vector RemoteMuzzelFXScale;//[Offset: 0x298, Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x2a4, Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x2b8, Size: 8]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x2c0, Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x2d0, Size: 8]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x2d8, Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x2e8, Size: 8]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x2f0, Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x2fc, Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x310, Size: 8]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x318, Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x328, Size: 8]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x330, Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x340, Size: 8]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x348, Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x354, Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x368, Size: 8]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x370, Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x380, Size: 8]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x388, Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x398, Size: 8]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x3a0, Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x3b0, Size: 8]
	Vector ShellDropFXScale;//[Offset: 0x3b8, Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x3c8, Size: 8]
	Vector FPPShellDropFXScale;//[Offset: 0x3d0, Size: 12]
	float ShootLightCD;//[Offset: 0x3dc, Size: 4]
	float LastShootLightTime;//[Offset: 0x3e0, Size: 4]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x3e8, Size: 8]
	int MaxOBBulletTrackCompNum;//[Offset: 0x3f0, Size: 4]
	float MaxFlyAngel;//[Offset: 0x3f4, Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x3f8, Size: 8]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x400, Size: 8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x408, Size: 8]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x410, Size: 8]
	ParticleSystemComponent*[] OBBulletTrackFXCompsArray;//[Offset: 0x418, Size: 16]
	Vector MuzzleFXOriginalScale;//[Offset: 0x428, Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x434, Size: 4]
	float LastMuzzleEffectTime;//[Offset: 0x438, Size: 4]
	float MuzzleEffectTimeInterval;//[Offset: 0x43c, Size: 4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x450, Size: 16]
	bool bChangeShellDropRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	Rotator ShellDropRot;//[Offset: 0x464, Size: 12]
	FName ChangeShellDropSocket;//[Offset: 0x470, Size: 8]
	bool bSimulateBulletOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	float bSimulateBulletMaxDistance;//[Offset: 0x47c, Size: 4]
	float SnipperStayDistance;//[Offset: 0x480, Size: 4]
	float bSimulateBulletRadius;//[Offset: 0x484, Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488, Size: 1]
	bool ShellDropRotHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489, Size: 1]
	void ReloadAttr(int WeaponId);// 0x34db654
	void OnWeaponUnEquiped();// 0x34db640
	void OnWeaponEuiped();// 0x34db62c
	void HandleWeaponAction(byte Action);// 0x34db5a8
	STExtraShootWeapon* GetOwnerShootWeapon();// 0x34db574
	OBEffectBullet* GetOBEffectBullet();// 0x34db540
	int GetAvailableOBEffectBulletNum();// 0x34db50c
	void CheckOptimizeMuzzleFX();// 0x34db4f0
	void ChangeShellDropFx();// 0x34db4dc
	void ActiveShootLight();// 0x34db4c8
	void ActiveLocalShellDropFX();// 0x34db4b4

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0x170, Size: 80]
	AkAudioEvent* ShellDropSound;//[Offset: 0x1c0, Size: 8]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x1c8, Size: 8]
	AkAudioEvent* DurabilityLossShootSound;//[Offset: 0x1d0, Size: 8]
	AkAudioEvent* ScopeSound;//[Offset: 0x1d8, Size: 8]
	AkAudioEvent* ScopeOutSound;//[Offset: 0x1e0, Size: 8]
	void HandleWeaponAction(byte Action);// 0x3745fa0

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x3c8, Size: 4]
	bool bIgnoreEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x3d0, Size: 16]
	ParticleSystem* CurFXTemplate;//[Offset: 0x3e8, Size: 8]
	float CurMovingTime;//[Offset: 0x418, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x420, Size: 8]

--------------------------------
Class: ShootWeaponAutoTestHandle.Object
	void OnWeaponShootBullet(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0x34dafd4
	void OnBulletImpact(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, out const HitResult HitRet);// 0x34daec0
	FString GenerateBulletsImpactJsonStringAndClearData();// 0x34dae1c

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	delegate OnAttrModified;//[Offset: 0x160, Size: 16]
	uint32 AttrModifyStateList;//[Offset: 0x170, Size: 4]
	RepAttributeModify DynamicModifierRep;//[Offset: 0x178, Size: 24]
	RepAttributeModify DynamicModifierRepOnlyOwner;//[Offset: 0x190, Size: 24]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x1c0, Size: 16]
	AttributeExpand[] AttributeExpands;//[Offset: 0x398, Size: 16]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x3a8, Size: 168]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x450, Size: 80]
	enum ActorAttrType;//[Offset: 0x4a0, Size: 1]
	ModAttrSimulateSyncItem[] ModSimulateSyncList;//[Offset: 0x5b0, Size: 16]
	void SetValueToAttributeSafety(FString AttrName, float Value);// 0x382eb3c
	void SetOrignalValueToAttribute(FString AttrName, float Value);// 0x382ea54
	void SetAttrModifyStateValue(int Index, bool Value);// 0x382e994
	void SetAttributeMaxValue(FString AttrName, float MaxValue);// 0x382e8ac
	void ResponeAttrValue(FString AttrName, float FinalValue);// 0x382e78c
	void RequestAttrValue(FString AttrName);// 0x382e6b0
	void RemoveDynamicModifyItemForLua(uint32 ModifyUID);// 0x382e634
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x382e4c8
	void OnRep_ModSimulateSyncList();// 0x382e4b4
	void OnRep_DynamicModifier();// 0x382e4a0
	void OnRep_AttrModifyStateList();// 0x382e48c
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x4033584
	bool IsAttrModifyStateValidIndex(int Index);// 0x382e3fc
	bool HasDynamicModifier(FString AttrModifyId);// 0x382e340
	AttrModifyModDataSubsystem* GetSubsystem();// 0x382e30c
	FString GetMaxAttrName(FString AttrName);// 0x382e1f0
	bool GetAttrModifyStateValue(int Index);// 0x382e160
	int GetAttrModifyStateNum();// 0x382e144
	AttrModifyItem GetAttrModifyItemByItemName(FString ItemName);// 0x382def8
	float GetAttributeValue(FString AttrName);// 0x382de40
	float GetAttributeOrignalValue(FString AttrName);// 0x382dd88
	bool EnableAttrModifierByIndex(int ModifyConfigIndex);// 0x382dcf8
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x382dbb8
	bool DisableAttrModifierByIndex(int ModifyConfigIndex);// 0x382db28
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x382d9e8
	bool DisableAllAttrModifier();// 0x382d9b0
	void AddValueToAttribute(FString AttrName, float Value);// 0x382d8c8
	uint32 AddDynamicModifyItemForLua(FString AttrName, byte ModifyType, float Value, bool bEnable, Object* Causer);// 0x382d714
	uint32 AddDynamicModifyForLua(FString AttrName, byte ModifyType, float Value);// 0x382d5e0
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem, bool RepOnlyOwner);// 0x382d46c

--------------------------------
Class: RepAttributeModify

--------------------------------
Class: AttributeExpand
	FString AttrName;//[Offset: 0x0, Size: 16]
	FString AttrDesc;//[Offset: 0x10, Size: 16]
	int RelateTypeId;//[Offset: 0x20, Size: 4]
	FString RelateGroup;//[Offset: 0x28, Size: 16]
	float Value;//[Offset: 0x38, Size: 4]

--------------------------------
Class: AttrDynamicModifier
	<FString,AttrDynamicModifyTarget> ModifyAttrs;//[Offset: 0x0, Size: 80]
	<FString,AttrDynamicModifyConfig> ModifyConfigs;//[Offset: 0x50, Size: 80]
	AttrModifyComponent* Component;//[Offset: 0xa0, Size: 8]

--------------------------------
Class: AttrDynamicModifyTarget
	AttrDynamicModifyItem[] List;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AttrDynamicModifyItem
	Object* Causer;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: AttrDynamicModifyConfig
	bool IsOneceModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool HasLimitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool HasMaxAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	FString AttrName;//[Offset: 0x8, Size: 16]
	FString LimitAttrName;//[Offset: 0x18, Size: 16]
	FString MaxAttrName;//[Offset: 0x28, Size: 16]

--------------------------------
Class: RelateAttributeGroup
	<int,FString> RelateAttributes;//[Offset: 0x0, Size: 80]

--------------------------------
Class: ModAttrSimulateSyncItem
	int AttrId;//[Offset: 0x0, Size: 4]
	float FinalValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AttrRegisterItem
	FString AttrName;//[Offset: 0x0, Size: 16]
	enum AttrVariableType;//[Offset: 0x10, Size: 1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 16]
	Actor* AffectedActor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: AttrModifyModDataSubsystem.GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: GameInstanceSubsystem.Subsystem.Object

--------------------------------
Class: Subsystem.Object

--------------------------------
Class: WeaponAttrModifyConfig
	int ID;//[Offset: 0x0, Size: 4]
	FString ModifyConfigID;//[Offset: 0x8, Size: 16]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0x18, Size: 16]

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 16]
	enum Op;//[Offset: 0x10, Size: 1]
	float ModifyValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x170, Size: 8]
	float ShootRateCheckInterval;//[Offset: 0x188, Size: 4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	float ShootRateCheckMulCoff;//[Offset: 0x190, Size: 4]
	bool ShootHitTargetIntervalCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 1]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x198, Size: 4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x1f4, Size: 4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x1f8, Size: 4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x1fc, Size: 4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x200, Size: 4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x204, Size: 4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x208, Size: 4]
	float ShootTimeMuzzleDistThres;//[Offset: 0x20c, Size: 4]
	float ShootTimeMuzzleZThres;//[Offset: 0x210, Size: 4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]
	float TimeLineCheckDnBorder;//[Offset: 0x218, Size: 4]
	float TimeLineCheckUpBorder;//[Offset: 0x21c, Size: 4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x220, Size: 4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x228, Size: 4]
	float TolerateFlyTime;//[Offset: 0x22c, Size: 4]
	float TolerateFlyDis;//[Offset: 0x230, Size: 4]
	float DeCon6SpanTime;//[Offset: 0x314, Size: 4]
	void OnWeaponShootHit(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x373ea54

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte AvatarDamagePosition;//[Offset: 0xad, Size: 1]
	float DamageImpulse;//[Offset: 0xc8, Size: 4]

--------------------------------
Class: SimulateBulletHitInfoData
	Vector_NetQuantize10 ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantize RelativeImpactPoint;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x18, Size: 12]
	Vector_NetQuantize10 ShootMomentMuzzlePos;//[Offset: 0x24, Size: 12]
	byte SurfaceType;//[Offset: 0x30, Size: 1]
	Actor* Actor;//[Offset: 0x34, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x3c, Size: 8]
	byte HitBodyType;//[Offset: 0x44, Size: 1]
	byte ImpactEffectMask;//[Offset: 0x45, Size: 1]

--------------------------------
Class: WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x3755538
	static int GetWeaponSkillID(STExtraWeapon* Weapon);// 0x37554bc

--------------------------------
Class: WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x3754f14
	void ProcessTriggerEvent(enum Event);// 0x3754e90

--------------------------------
Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	uint32 ClipID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0x170, Size: 8]
	WeaponStateBase* DefaultState;//[Offset: 0x178, Size: 8]
	<byte,WeaponStateBase*> StateMap;//[Offset: 0x180, Size: 80]
	WeaponStateBase* GetCurrentState();// 0x375443c
	byte GetCurrentFreshWeaponStateType();// 0x3754408

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0x170, Size: 16]
	delegate OnEndState;//[Offset: 0x180, Size: 16]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	byte FreshWeaponStateType;//[Offset: 0x191, Size: 1]

--------------------------------
Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate GrenadeAvatarEqiuped;//[Offset: 0x478, Size: 16]
	void PreChangeGrenadeAvatar(int InItemID);// 0x33ca91c
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x33ca890
	FString GetItemAvatarHandlePath(int ItemId);// 0x4033584
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x4033584
	int GetDefaultAvatarID(int InAvatarID);// 0x4033584
	void AddAssetSoftObject(out SoftObjectPath[] FSoftObjectPathList);// 0x33ca770

--------------------------------
Class: ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate VehicleEquipedDefaultAvatarEvent;//[Offset: 0x290, Size: 16]
	bool bNeedCheckResExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	ItemDefineID DefaultCfg;//[Offset: 0x2a8, Size: 24]
	bool bEnableLobbyMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	MeshComponent* ItemBodyMesh;//[Offset: 0x2c8, Size: 8]
	NetItemAvatarData NetAvatarData;//[Offset: 0x2d0, Size: 32]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x3c0, Size: 8]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x3c8, Size: 8]
	int itemType;//[Offset: 0x3d0, Size: 4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x3d8, Size: 40]
	StaticMesh* MasterStaticMesh;//[Offset: 0x400, Size: 40]
	<FString,Object*> AssetObjectMap;//[Offset: 0x428, Size: 80]
	void VehicleEquipedDefaultAvatar__DelegateSignature(int AvatarID, int DefaultAvatarID);// 0x4033584
	void SyncChangeItemAvatar(int InItemID);// 0x33ed234
	void SetMasterStaticMeshPath(FString InPath, bool bForce);// 0x33ed144
	void SetMasterSkeletalMeshPath(FString InPath, bool bForce);// 0x33ed054
	void ResetItemAvatar();// 0x33ed040
	void RequestDownloadItemInBattle(int InItemID);// 0x33ecfbc
	void PreChangeItemAvatar(int InItemID);// 0x33ecf38
	void OnRep_ItemAvatarChanged();// 0x33ecf24
	bool IsValidAvatar();// 0x33eceec
	BackpackCommonAvatarHandle* GetValidAvatarHandle();// 0x33eceb0
	Object* GetSoftRefObj(out SoftObjectPath AssetRef);// 0x33ecde0
	MeshComponent* GetItemBodyMesh();// 0x33ecdc4
	MaterialInterface* GetDynamicMaterial(MaterialInstance* MatInstance, MaterialInterface* MatBase);// 0x33ecd00
	void DownloadItemInBattleCallBack(uint32 ItemId, uint32 ErrorCode);// 0x33ecc44
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x33ecb24
	void ChangeItemAvatar(int InItemID, bool bUpdateFlag);// 0x33eca5c
	void AsyncChangeItemAvatar(int InItemID);// 0x33ec9d8
	bool ApplyMesh(MeshComponent* MeshComp, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x33ec8cc
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x33ec7cc
	void AddAssetSoftObject(out SoftObjectPath[] ObjectPathList);// 0x33ec6ac

--------------------------------
Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0x140, Size: 16]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0x150, Size: 40]
	StaticMesh* ItemStaticMesh;//[Offset: 0x178, Size: 40]
	class AnimInstance* ItemAnimBPPath;//[Offset: 0x1a0, Size: 40]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x328ae08
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x328ab54
	bool HandleDrop(int InCount, enum Reason);// 0x328aa80
	bool HandleDisuse(enum Reason);// 0x328a9e8
	BackpackComponent* GetBackpackComponent();// 0x328a9b4
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x328a8e8

--------------------------------
Class: ItemAvatarData
	FName SlotID;//[Offset: 0x0, Size: 8]
	MaterialInterface* MatInstance;//[Offset: 0x8, Size: 40]
	MaterialInterface* LobbyMatInstance;//[Offset: 0x30, Size: 40]

--------------------------------
Class: NetItemAvatarData
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 24]
	int UpdateFlag;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ItemAvatarMatPath
	FName SlotID;//[Offset: 0x0, Size: 8]
	SoftObjectPath MatInstancePath;//[Offset: 0x8, Size: 24]
	SoftObjectPath MatBasePath;//[Offset: 0x20, Size: 24]

--------------------------------
Class: CharacterCompOutOfVisionOptimizationItem
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 16]

--------------------------------
Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0, Size: 8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	float HitSelfModifier;//[Offset: 0x3dc, Size: 4]
	float HitSelfImpactReduce;//[Offset: 0x3e0, Size: 4]
	float HitOthersModifier;//[Offset: 0x3e4, Size: 4]
	float HitOthersImpactRaise;//[Offset: 0x3e8, Size: 4]
	float HitCharacterModifier;//[Offset: 0x3ec, Size: 4]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0x1d8, Size: 8]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0x1e0, Size: 4]
	float ImpactModifier;//[Offset: 0x1e4, Size: 4]
	float ImpactAbsorption;//[Offset: 0x1e8, Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0x1ec, Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0x1f0, Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0x1f4, Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0x1f8, Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0x1fc, Size: 4]
	class Actor[] HitIgnoreClasses;//[Offset: 0x200, Size: 16]
	bool PushCharacterSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	float PushCharacterForwardVectorStrength;//[Offset: 0x214, Size: 4]
	float PushCharacterRightVectorStrength;//[Offset: 0x218, Size: 4]
	float PushCharacterTopVectorStrength;//[Offset: 0x21c, Size: 4]
	float ApplyImpluseSpeed;//[Offset: 0x220, Size: 4]
	<Actor*,float> VehicleImpluseCharacterTimes;//[Offset: 0x228, Size: 80]
	float VehicleImpluseCharacterCooldownTime;//[Offset: 0x278, Size: 4]
	float DamageCharacterCD;//[Offset: 0x27c, Size: 4]
	float PassengerProtectTime;//[Offset: 0x280, Size: 4]
	float DamageSelfCD;//[Offset: 0x288, Size: 4]
	bool bIgnoreVehicleSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	float HitDamageSelfMaxFactor;//[Offset: 0x294, Size: 4]
	float HitDamagePassengerMaxHP;//[Offset: 0x298, Size: 4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x2a0, Size: 4]
	float DamageReduce;//[Offset: 0x2a4, Size: 4]
	float fHitEventInterval;//[Offset: 0x2a8, Size: 4]
	delegate OnVehicleHitOthers;//[Offset: 0x2b0, Size: 16]
	float ExplosionBaseDamage;//[Offset: 0x2c0, Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0x2c4, Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x2c8, Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x2cc, Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x2d0, Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x2d4, Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x2d8, Size: 8]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x2e8, Size: 8]
	<Actor*,float> VehicleDamageCharacterTimes;//[Offset: 0x2f0, Size: 80]
	bool bProcessVehicleDamageCharacterOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	float VehicleDamageCharacterCooldownTime;//[Offset: 0x344, Size: 4]
	float HitStoneVelocityDamp;//[Offset: 0x348, Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x350, Size: 64]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x398, Size: 8]
	Vector2D ImpactModifierVehicle;//[Offset: 0x3a0, Size: 8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x3a8, Size: 8]
	float ImpactAbsorptionVehicle;//[Offset: 0x3b0, Size: 4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x3b4, Size: 4]
	float DotProductFrontThreshold;//[Offset: 0x3b8, Size: 4]
	float DotProductRearThreshold;//[Offset: 0x3bc, Size: 4]
	float ImpactModifierFront;//[Offset: 0x3c0, Size: 4]
	float ImpactModifierRear;//[Offset: 0x3c4, Size: 4]
	float ImpactModifierFrontSide;//[Offset: 0x3c8, Size: 4]
	float ImpactModifierRearSide;//[Offset: 0x3cc, Size: 4]
	Vector2D DamageCorrection;//[Offset: 0x3d0, Size: 8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x3d8, Size: 4]
	float SameCampDamangeLimit;//[Offset: 0x3dc, Size: 4]
	<Actor*,float> CustomImpulseHitTimes;//[Offset: 0x3e0, Size: 80]
	bool bProcessCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool bOnlyPlayerCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	float CustomImpulseCooldownTime;//[Offset: 0x434, Size: 4]
	<FString,VehicleCustomImpulse> CustomImpulseComponentMap;//[Offset: 0x438, Size: 80]
	VehicleCustomImpulseFilter mFilter;//[Offset: 0x488, Size: 40]
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x370bd68
	bool ScriptShouldCauseDamage(float InDamage, PrimitiveComponent* InPrimComp, STExtraBaseCharacter* InCharacter);// 0x4033584
	void OnCustomImpulseComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x370bbd4
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x370ba84

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 12]
	Quat Quaternion;//[Offset: 0x10, Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 12]
	byte Flags;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleCustomImpulse
	class Actor[] IgnoreClasses;//[Offset: 0x0, Size: 16]
	VehicleCustomImpulseFilter[] ImpulseFilters;//[Offset: 0x10, Size: 16]
	class DamageType* DamageType;//[Offset: 0x20, Size: 8]
	bool bApplyImpulseWhileDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bApplyImpulseWhileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bUseHitActorAsDamageInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: VehicleCustomImpulseFilter
	class Actor* ImpulseAbsorberType;//[Offset: 0x0, Size: 8]
	bool bApplyRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bApplyImpulseAsVelocityChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	float MaxDamagingImpulseMagnituge;//[Offset: 0xc, Size: 4]
	float MaxImpulseDamage;//[Offset: 0x10, Size: 4]
	float ImpulseStrength;//[Offset: 0x14, Size: 4]
	float RadialImpulseStrength;//[Offset: 0x18, Size: 4]
	float ImpulseRadius;//[Offset: 0x1c, Size: 4]
	byte ImpulseFalloffType;//[Offset: 0x20, Size: 1]

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0x1d8, Size: 16]
	delegate VehicleFuelChangedDelegate;//[Offset: 0x1e8, Size: 16]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0x1f8, Size: 16]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0x208, Size: 16]
	delegate OnHPPreChange;//[Offset: 0x218, Size: 16]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0x228, Size: 16]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0x238, Size: 16]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	float HPMax;//[Offset: 0x24c, Size: 4]
	float HP;//[Offset: 0x250, Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0x258, Size: 16]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	float FuelMax;//[Offset: 0x26c, Size: 4]
	float Fuel;//[Offset: 0x270, Size: 4]
	float DelayDestroySeconds;//[Offset: 0x274, Size: 4]
	float FuelConsumeFactor;//[Offset: 0x278, Size: 4]
	MaterialDamage[] MaterialDamageConfig;//[Offset: 0x280, Size: 16]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x290, Size: 16]
	VehicleDamageRecord[] DamageRecords;//[Offset: 0x2a0, Size: 16]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x37097cc
	void TranslateFuelToReplicatedRatio();// 0x37097b8
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x37095e0
	void TakeDamageByBoneNameInner(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x37093ec
	void TakeDamageByBoneName(float Damage, out FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x37091f8
	void SetHPFuel(float InHp, float InFuel);// 0x3709144
	void SetFuel(float InFuel);// 0x37090c8
	void RPC_Multicast_VehicleTakeDamage(float Damage, int LeftHP, int DamageType, Actor* DamageCauser);// 0x3708f94
	void RefreshWheelState();// 0x3708f80
	void OnRep_WheelsCurrentHP();// 0x3708f6c
	void OnRep_HP();// 0x3708f58
	void OnRep_Fuel();// 0x3708f44
	bool NoFuel();// 0x3708f0c
	void Maintenance(float addpercenthp, bool fixtire);// 0x3708e4c
	bool IsDontDamage();// 0x3708e30
	bool IsDontConsumeFuel();// 0x3708e14
	bool IsDestroyed();// 0x3708ddc
	int GetWheelsHPNum();// 0x3708da8
	float GetWheelHPMax(int WheelIdx);// 0x3708d1c
	float GetWheelHP(int WheelIdx);// 0x3708c90
	float GetVehicleHPMax();// 0x3708c5c
	float GetVehicleHP();// 0x3708c28
	float GetFuelMax();// 0x3708bf4
	float GetFuelConsumeFactor();// 0x3708bc0
	float GetFuel();// 0x3708b8c
	void CalculateDestroyVehicleWheelFlow(Controller* Instigator);// 0x3708b10

--------------------------------
Class: MaterialDamage
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 8]
	float DamageScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0, Size: 4]
	bool DontDamageWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 8]
	FName[] AssociationBoneName;//[Offset: 0x10, Size: 16]

--------------------------------
Class: VehicleDamageRecord
	Controller* Instigator;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]
	float Damage;//[Offset: 0xc, Size: 4]
	int DamageType;//[Offset: 0x10, Size: 4]
	int AdditionalParam;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	delegate OnContactWater;//[Offset: 0x2d0, Size: 16]
	delegate OnEnterWater;//[Offset: 0x2e0, Size: 16]
	bool bUseBuoyancyEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	OceanManager* OceanManager;//[Offset: 0x2f8, Size: 8]
	float MeshDensity;//[Offset: 0x300, Size: 4]
	float FluidDensity;//[Offset: 0x304, Size: 4]
	float FluidLinearDamping;//[Offset: 0x308, Size: 4]
	float FluidAngularDamping;//[Offset: 0x30c, Size: 4]
	Vector VelocityDamper;//[Offset: 0x310, Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x320, Size: 4]
	float TestPointRadius;//[Offset: 0x324, Size: 4]
	Vector[] TestPoints;//[Offset: 0x328, Size: 16]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33a, Size: 1]
	float[] PointDensityOverride;//[Offset: 0x340, Size: 16]
	StructBoneOverride[] BoneOverride;//[Offset: 0x350, Size: 16]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool DrawDebugSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x362, Size: 1]
	float StayUprightStiffness;//[Offset: 0x364, Size: 4]
	float StayUprightDamping;//[Offset: 0x368, Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x36c, Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	float WaveForceMultiplier;//[Offset: 0x37c, Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x380, Size: 8]
	byte TickGroup;//[Offset: 0x388, Size: 1]
	bool EnableCustomWaveForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	Vector CustomWaveForceTestPointOffset;//[Offset: 0x38c, Size: 12]
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x398, Size: 16]
	PhysicsConstraintComponent* UprightConstraintComp;//[Offset: 0x560, Size: 8]
	void TickBuoyancyForce(float DeltaTime);// 0x66e8e88
	void OnEnterWaterDelegate__DelegateSignature(bool IsUnderWater);// 0x4033584
	void OnContactWaterDelegate__DelegateSignature(bool IsContactingWater);// 0x4033584
	void NativeSetEnableCustomWaveForce(bool bEnable);// 0x66e8e04
	bool IsEntirelyUnderWater();// 0x66e8dc8
	bool IsContactedWater();// 0x66e8da4
	void EndableUprightConstraint(bool bEnable);// 0x66e8d20
	bool CheckPointInWater(Vector Point, bool isWorldPosition);// 0x66e8c4c

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	Vector GlobalWaveDirection;//[Offset: 0x3cc, Size: 12]
	float GlobalWaveSpeed;//[Offset: 0x3d8, Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x3dc, Size: 4]
	float DistanceCheckAbove;//[Offset: 0x3e0, Size: 4]
	float DistanceCheckBelow;//[Offset: 0x3e4, Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x3e8, Size: 16]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x3f8, Size: 16]
	float NetWorkTimeOffset;//[Offset: 0x408, Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	float ModulationStartHeight;//[Offset: 0x410, Size: 4]
	float ModulationMaxHeight;//[Offset: 0x414, Size: 4]
	float ModulationPower;//[Offset: 0x418, Size: 4]
	Landscape* Landscape;//[Offset: 0x420, Size: 8]
	Texture2D* HeightmapTexture;//[Offset: 0x428, Size: 8]
	bool bShouldCorrectTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	float CorrectTimeInterval;//[Offset: 0x45c, Size: 4]
	float ReplicatedWorldRealTimeSeconds;//[Offset: 0x464, Size: 4]
	float ServerWorldRealTimeSecondsDelta;//[Offset: 0x468, Size: 4]
	delegate OnReplicatedWorldRealTimeSeconds;//[Offset: 0x470, Size: 16]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	Box[] WaterBoxes;//[Offset: 0x488, Size: 16]
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 1]
	Transform[] WaterTransforms;//[Offset: 0x4a0, Size: 16]
	Vector[] WaterBoxExtends;//[Offset: 0x4b0, Size: 16]
	void OnRep_ReplicatedWorldRealTimeSeconds();// 0x66ea39c
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x66ea320
	LinearColor GetHeightmapPixel(float U, float V);// 0x66ea258

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0, Size: 4]
	float Length;//[Offset: 0x4, Size: 4]
	float Amplitude;//[Offset: 0x8, Size: 4]
	float Steepness;//[Offset: 0xc, Size: 4]
	float TimeScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0, Size: 20]
	WaveParameter Wave02;//[Offset: 0x14, Size: 20]
	WaveParameter Wave03;//[Offset: 0x28, Size: 20]
	WaveParameter Wave04;//[Offset: 0x3c, Size: 20]
	WaveParameter Wave05;//[Offset: 0x50, Size: 20]
	WaveParameter Wave06;//[Offset: 0x64, Size: 20]
	WaveParameter Wave07;//[Offset: 0x78, Size: 20]
	WaveParameter Wave08;//[Offset: 0x8c, Size: 20]

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0, Size: 8]
	float Density;//[Offset: 0x8, Size: 4]
	float TestRadius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WaterBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AcceptHigherZ;//[Offset: 0x72c, Size: 4]
	Vector Direction;//[Offset: 0x730, Size: 12]
	float SpeedValue;//[Offset: 0x73c, Size: 4]
	float WaveForceMultiplier;//[Offset: 0x740, Size: 4]
	TrippleWaveParameter[] TrippleWaveClusters;//[Offset: 0x748, Size: 16]
	float TimeScaleOffset;//[Offset: 0x758, Size: 4]
	float Offset;//[Offset: 0x75c, Size: 4]
	bool UseSplineDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x760, Size: 1]
	float SpeedAttenuationFromSpline;//[Offset: 0x764, Size: 4]
	bool UseSplineZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	float ZOffset;//[Offset: 0x76c, Size: 4]
	float CellSizeX;//[Offset: 0x770, Size: 4]
	float CellSizeY;//[Offset: 0x774, Size: 4]
	<float,WaterBoxCell> Cells;//[Offset: 0x778, Size: 80]
	int KeyFactor;//[Offset: 0x7c8, Size: 4]

--------------------------------
Class: TrippleWaveParameter
	WaveParameter WaveCluster0;//[Offset: 0x0, Size: 20]
	WaveAdjust WaveAdjust0;//[Offset: 0x14, Size: 8]
	WaveParameter WaveCluster1;//[Offset: 0x1c, Size: 20]
	WaveAdjust WaveAdjust1;//[Offset: 0x30, Size: 8]
	WaveParameter WaveCluster2;//[Offset: 0x38, Size: 20]
	WaveAdjust WaveAdjust2;//[Offset: 0x4c, Size: 8]

--------------------------------
Class: WaveAdjust
	float TimeScaleOffset;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WaterBoxCell
	Vector WaveDirection;//[Offset: 0x0, Size: 12]
	float WaveZ;//[Offset: 0xc, Size: 4]
	Vector PushForceDirection;//[Offset: 0x10, Size: 12]
	float Speed;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x2d0, Size: 8]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x2d8, Size: 8]
	Actor* ConstraintActor2;//[Offset: 0x2e0, Size: 8]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x2e8, Size: 8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x300, Size: 8]
	delegate OnConstraintBroken;//[Offset: 0x308, Size: 16]
	ConstraintInstance ConstraintInstance;//[Offset: 0x318, Size: 440]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x5c1f9cc
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x5c1f948
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x5c1f890
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x5c1f7d8
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x5c1f720
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x5c1f698
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x5c1f584
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x5c1f4fc
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x5c1f3e8
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x5c1f2f8
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x5c1f230
	void SetDisableCollision(bool bDisableCollision);// 0x5c1f1ac
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x5c1f0e8
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x5c1efd0
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x5c1eef0
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x5c1edc8
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x5c1ed40
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x5c1ec70
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x5c1ebec
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x5c1eb1c
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x5c1ea64
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x5c1e9ac
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x5c1e8f4
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x5c1e86c
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x5c1e79c
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x5c1e6ac
	void SetAngularDriveMode(byte DriveMode);// 0x5c1e630
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x5c1e568
	bool IsBroken();// 0x5c1e530
	float GetCurrentTwist();// 0x5c1e4fc
	float GetCurrentSwing2();// 0x5c1e4c8
	float GetCurrentSwing1();// 0x5c1e494
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x5c1e3b8
	void BreakConstraint();// 0x5c1e3a4

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0x1d8, Size: 16]
	delegate OnActorHitFromClient;//[Offset: 0x1e8, Size: 16]
	float MinCorrectionInterval;//[Offset: 0x1f8, Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0x1fc, Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x200, Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0x204, Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0x208, Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0x20c, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x210, Size: 4]
	float AllowMaxLinearSpeedRatio;//[Offset: 0x214, Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0x218, Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0x21c, Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0x220, Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0x224, Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0x228, Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0x22c, Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0x230, Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x234, Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	float StaticFixLocation;//[Offset: 0x23c, Size: 4]
	float StaticFixAngel;//[Offset: 0x240, Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x244, Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x248, Size: 4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x250, Size: 4]
	float SimulatedFloorUpDistance;//[Offset: 0x254, Size: 4]
	float MaxAllowJumpHeight;//[Offset: 0x258, Size: 4]
	float MaxSyncSpeedZDelta;//[Offset: 0x25c, Size: 4]
	float MaxSyncSpeedZDeltaStep1;//[Offset: 0x260, Size: 4]
	STExtraVehicleBase* VehicleOwner;//[Offset: 0x268, Size: 8]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x370, Size: 88]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x371d8a0
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x371d700
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x371d530
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x371d360
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x371d114
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x371cf20
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x371cd24
	void SendClientHitToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x371ca78
	void SendClientHitToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x371c7cc
	void SendClientHitPointToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const Vector_NetQuantize100 HitPoint);// 0x371c530
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x371c3e0
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x371c290
	void OnDriverRide();// 0x371c27c
	void HandleProtectionEnable(bool InEnable);// 0x371c1f8
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x371c0fc
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x371bf88
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x371be8c
	Actor*[] GetRiders();// 0x371bde8
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x371bd50
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x371bc68
	void DragUnderGround();// 0x371bc54
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x371bb48
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x371ba18
	bool CheckAndLoadLandscape(float DeltaTime);// 0x371b988
	void ApplyRigidBodyState(out RigidBodyState NewState);// 0x371b8e4
	bool AdjustFloorPosition(out const Vector ClientLocation, out const Actor*[] Riders, out Vector OutLocation);// 0x371b774

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: VehBackpackItem
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 1]
	byte ViewYaw;//[Offset: 0x1, Size: 1]
	byte ViewRoll;//[Offset: 0x2, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x378, Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x37c, Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x380, Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	float ArmOriginProbeSize;//[Offset: 0x388, Size: 4]
	Rotator RelativeToOwnerRotator;//[Offset: 0x38c, Size: 12]
	Rotator SmartCamRotationExtra;//[Offset: 0x398, Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	float MinPitch;//[Offset: 0x3b0, Size: 4]
	float MaxPitch;//[Offset: 0x3b4, Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x3bc, Size: 4]
	float ResultMinPitch;//[Offset: 0x3fc, Size: 4]
	float ResultMaxPitch;//[Offset: 0x400, Size: 4]
	Vector ArmOriginOffset;//[Offset: 0x404, Size: 12]
	CameraComponent* CameraComponent;//[Offset: 0x410, Size: 8]
	bool bIsAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	float SocketOffsetInterpSpeed;//[Offset: 0x43c, Size: 4]
	float CurAdditiveOffsetFov;//[Offset: 0x440, Size: 4]
	float FieldOfViewInterpSpeed;//[Offset: 0x444, Size: 4]
	float LeaveMaxDistance;//[Offset: 0x448, Size: 4]
	float LeaveMaxTime;//[Offset: 0x44c, Size: 4]
	float MaxDistanceStayTime;//[Offset: 0x458, Size: 4]
	float ApproachTime;//[Offset: 0x460, Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x470, Size: 8]
	float FreeCamRotationReturnRate;//[Offset: 0x478, Size: 4]
	bool bUseReverseMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	void SetSmartCameraInput(float Yaw, float Pitch);// 0x37191c4
	void SetSmartCameraAutoReturn(bool bEnabled);// 0x3719140
	void SetFreeCameraInput(Rotator deltaRot);// 0x37190c4
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x3719040
	void ResetSmartCamera();// 0x371902c
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x3718ed4
	void DelayRotationLagEnabledEnd();// 0x3718ec0
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x3718dbc
	void AddSmartCameraInput(float Yaw, float Pitch);// 0x3718d08

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: ESTAINoiseEventParams
	enum NoiseType;//[Offset: 0x0, Size: 1]
	float Loudness;//[Offset: 0x4, Size: 4]
	float StartAttenuationDist;//[Offset: 0x8, Size: 4]
	float MaxRange;//[Offset: 0xc, Size: 4]

--------------------------------
Class: STBuffSystemComponent.ActorComponent.Object
	float RPCSyncInterval;//[Offset: 0x110, Size: 4]
	delegate OnClientAddBuffEvent;//[Offset: 0x118, Size: 16]
	delegate OnClientRemoveBuffEvent;//[Offset: 0x128, Size: 16]
	delegate OnClientUpdateBuffEvent;//[Offset: 0x138, Size: 16]
	STBuff*[] Buffs;//[Offset: 0x148, Size: 16]
	int SyncBriefNum;//[Offset: 0x158, Size: 4]
	ClientSyncBrief SyncBriefs;//[Offset: 0x160, Size: 40]
	ClientSyncBrief SyncRefBriefs;//[Offset: 0x250, Size: 40]
	<int,STBuff*> MaxPowerBuffs;//[Offset: 0x340, Size: 80]
	<int> BriefRemoveInstIds;//[Offset: 0x390, Size: 80]
	bool UpdateServerSyncBuff(STBuff* Buff, bool bRemove);// 0x384ce34
	void UpdateClientBuff(int InstID, int BuffID, int LayerCount, int CauseSkillID, Actor* CauseActor, float DSEndTime);// 0x384cc90
	void UpdateBriefs();// 0x384cc7c
	void RPC_Server_ReqBriefs();// 0x384cc1c
	void RPC_Client_SyncBrief(ClientSyncBrief Brief);// 0x384cb78
	void RPC_Client_RspBriefs(const ClientSyncBrief[] Briefs);// 0x384cac8
	void RemoveClientBuff(int InstID);// 0x384ca4c
	STBuff* RemoveBuffInner(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x384c910
	void RemoveBuff(int BuffID, int LayerCount, Actor* Causer, int CauseSkillID);// 0x384c7e0
	void RemoveAndFindMaxPowerBuff(STBuff* RemoveBuff);// 0x384c764
	void RemoveAllBuffs();// 0x384c750
	void OnRep_SyncBriefs();// 0x384c73c
	void OnClientUpdateBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x4033584
	void OnClientRemoveBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x4033584
	void OnClientBuffCreated(STBuff* Buff, int BuffID, int CauseSkillID, int InstID, float DSEndTime);// 0x384c5d4
	void OnClientAsyncLoaded(FString Path, int BuffID, Actor* Causer, int LayerCount, int CauseSkillID, int InstID, float DSEndTime);// 0x384c33c
	void OnClientAddBuffEvent__DelegateSignature(int BuffID, int SkillID, int InstID);// 0x4033584
	bool HasSkillID(int SkillID);// 0x384c2ac
	bool HasBuff(int BuffID);// 0x384c21c
	void HandleCauserSkill(STBuff* Buff, int SkillID);// 0x384c164
	bool HandleBuffTypeMutex(int BuffID);// 0x384c0d4
	void HandleBuffTypeExclude(int BuffID);// 0x384c058
	void HandleBuffLayer(STBuff* Buff, int AddLayerCount, bool IsNewBuff);// 0x384bf5c
	BuffConfigSubsystem* GetSubsystem();// 0x384bf28
	STBuff*[] GetBuffs();// 0x384be84
	float GetBuffDuration(int BuffID, int CauseSkillID);// 0x384bdc0
	STBuff* GetBuffByBuffID(int BuffID);// 0x384bd34
	void EnabledRemove(STBuff* Buff, int BuffArrayIndex);// 0x384bc7c
	STBuff* CreateBuffWithClass(class Object Class, int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x384bb04
	void CreateBuffAsync(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID, int InstID, float DSEndTime);// 0x384b960
	STBuff* CreateBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x384b824
	void CompareBuffPower(STBuff* Buff);// 0x384b7a8
	bool ClientGetBuffInfo(int BuffID, out ClientSyncBrief OutBuff);// 0x384b6c0
	void ClientEnabledRemove(STBuff* Buff, int BuffArrayIndex);// 0x384b608
	void ClearBuffs(bool IsClearAll);// 0x384b584
	bool CheckBuffTargetClient(STBuff* Buff);// 0x384b4f4
	bool AddBuff(int BuffID, Actor* Causer, int LayerCount, int CauseSkillID);// 0x384b3b4

--------------------------------
Class: STBuff.Object
	FString BuffName;//[Offset: 0x28, Size: 16]
	FString Desc;//[Offset: 0x38, Size: 16]
	int LayerMax;//[Offset: 0x48, Size: 4]
	int InitialLayerCount;//[Offset: 0x4c, Size: 4]
	float Duration;//[Offset: 0x50, Size: 4]
	float ClientSyncInterval;//[Offset: 0x54, Size: 4]
	enum ClientSyncType;//[Offset: 0x58, Size: 1]
	enum TargetType;//[Offset: 0x59, Size: 1]
	enum RefreshType;//[Offset: 0x5a, Size: 1]
	enum ReActionType;//[Offset: 0x5b, Size: 1]
	enum MultiCauserHandleType;//[Offset: 0x5c, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0x5d, Size: 1]
	bool IsExecuteOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	bool RemoveAllLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 1]
	STBuffAction*[] Actions;//[Offset: 0x60, Size: 16]
	bool bNeedShowBuffInBuffList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int LocalizeDescID;//[Offset: 0x74, Size: 4]
	FString IconPath;//[Offset: 0x78, Size: 16]
	int TipsOnAddBuff;//[Offset: 0x88, Size: 4]
	DataProviderBase*[] DataProviders;//[Offset: 0x90, Size: 16]
	int InstID;//[Offset: 0xa0, Size: 4]
	int BuffID;//[Offset: 0xa4, Size: 4]
	int LayerCount;//[Offset: 0xa8, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	float EndTime;//[Offset: 0xb0, Size: 4]
	float DSEndTime;//[Offset: 0xb4, Size: 4]
	Actor* Causer;//[Offset: 0xb8, Size: 8]
	Actor* Owner;//[Offset: 0xc0, Size: 8]
	int CauseSkillID;//[Offset: 0xc8, Size: 4]
	STBuffSystemComponent* OwnerSystem;//[Offset: 0xcc, Size: 8]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	float PowerValue;//[Offset: 0xd8, Size: 4]
	float LastSyncClientTime;//[Offset: 0xdc, Size: 4]
	bool IsNeedSyncClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	UAEBlackboard* Blackborad;//[Offset: 0xe8, Size: 8]
	int LastLayerCount;//[Offset: 0x190, Size: 4]
	void Tick(float DetalTime, float TimeSeconds);// 0x38484b8
	void ResetActionExecute();// 0x38484a4
	void RefreshEndTime();// 0x3848490
	void Initialize();// 0x384847c
	void HandleLayer(int AddLayerCount, bool IsNewBuff);// 0x38483bc
	void End();// 0x38483a8
	void EnabledRemove();// 0x3848394
	void Destroy();// 0x3848380
	bool CopyActions();// 0x3848348
	void CheckOnceBuffForClient();// 0x3848334
	void ChangeNotify();// 0x3848320
	void ChangeDuration(float NewDuration);// 0x38482a4

--------------------------------
Class: STBuffAction.Object
	float ExecuteDelay;//[Offset: 0x28, Size: 4]
	STBuff* OwnerBuff;//[Offset: 0x2c, Size: 8]
	int ArrayIndex;//[Offset: 0x34, Size: 4]
	void Tick(float DetalTime);// 0x3848f88
	void SetEnabled(bool Enabled);// 0x3848f04
	void ResetExecute(bool IgnoreEnd);// 0x3848e78
	void OnTick(float DetalTime);// 0x3848df4
	void OnInitialize();// 0x3848dd8
	void OnExecute();// 0x3848dbc
	void OnEnd();// 0x3848da0
	void OnDestroy();// 0x3848d84
	void OnChangeNotify();// 0x3848d68
	void Initialize();// 0x3848d54
	STBuff* GetOwnerBuff();// 0x3848d20
	Actor* GetOwner();// 0x3848cec
	bool GetIsExecute();// 0x3848cd0
	Actor* GetCauser();// 0x3848c9c
	void End();// 0x3848c88
	void Destroy();// 0x3848c74
	STBuffAction* CopyAction(Object* Outer);// 0x3848be0
	void ChangeNotify();// 0x3848bcc

--------------------------------
Class: DataProviderBase.Object

--------------------------------
Class: UAEBlackboard.Object
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x28, Size: 960]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x6b51e58
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x6b51d84
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x6b51c00
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0x6b51b2c
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x6b51a58
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x6b51984
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x6b518b0
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x6b517dc
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x6b51708
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x6b51634
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x6b51558
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x6b514b8
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x6b51418
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x6b51378
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x6b512d8
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x6b51238
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x6b51198
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x6b510f8
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x6b51058
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x6b50fb8
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x6b50f18
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x6b50e78
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x6b50ddc
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x6b50cf4
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x6b50c54
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x6b50b50
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x6b50ab0
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x6b50a14
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x6b50978
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x6b508dc
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x6b50840
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x6b507a4
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x6b50708
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x6b50668
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x6b50580
	void AddValueByParam(out const UAEBlackboardParameter NewParam);// 0x6b50434

--------------------------------
Class: UAEBlackboardContainer
	<FName,Object*> ObjectParamMap;//[Offset: 0x0, Size: 80]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x50, Size: 80]
	<FName,class Object> ClassParamMap;//[Offset: 0xa0, Size: 80]
	<FName,byte> EnumParamMap;//[Offset: 0xf0, Size: 80]
	<FName,int> IntParamMap;//[Offset: 0x140, Size: 80]
	<FName,uint32> UIntParamMap;//[Offset: 0x190, Size: 80]
	<FName,float> FloatParamMap;//[Offset: 0x1e0, Size: 80]
	<FName,bool> BoolParamMap;//[Offset: 0x230, Size: 80]
	<FName,FString> StringParamMap;//[Offset: 0x280, Size: 80]
	<FName,FName> NameParamMap;//[Offset: 0x2d0, Size: 80]
	<FName,Vector> VectorParamMap;//[Offset: 0x320, Size: 80]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x370, Size: 80]

--------------------------------
Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 8]
	byte Type;//[Offset: 0x8, Size: 1]
	UAEBlackboardParameterDefaultValue DefaultValue;//[Offset: 0x10, Size: 136]

--------------------------------
Class: UAEBlackboardParameterDefaultValue
	Object* DefaultObject;//[Offset: 0x0, Size: 40]
	class Class* DefaultClass;//[Offset: 0x28, Size: 40]
	byte DefaultEnum;//[Offset: 0x50, Size: 1]
	int DefaultInt;//[Offset: 0x54, Size: 4]
	float DefaultFloat;//[Offset: 0x58, Size: 4]
	bool DefaultBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FString DefaultString;//[Offset: 0x60, Size: 16]
	FName DefaultName;//[Offset: 0x70, Size: 8]
	Vector DefaultVector;//[Offset: 0x78, Size: 12]

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: ClientSyncBrief
	int InstID;//[Offset: 0x0, Size: 4]
	byte LayerCount;//[Offset: 0x4, Size: 1]
	int BuffID;//[Offset: 0x8, Size: 4]
	int CauseSkillID;//[Offset: 0xc, Size: 4]
	Actor* CauseActor;//[Offset: 0x10, Size: 8]
	float SyncTime;//[Offset: 0x18, Size: 4]
	float EndTime;//[Offset: 0x1c, Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: BuffConfigSubsystem.GameInstanceSubsystem.Subsystem.Object
	<int,BuffTableRow> Table;//[Offset: 0x60, Size: 80]
	<FString,class Object> BuffClassMap;//[Offset: 0xb0, Size: 80]

--------------------------------
Class: BuffTableRow
	int BuffID;//[Offset: 0x0, Size: 4]
	int MaxLayer;//[Offset: 0x4, Size: 4]
	float Duration;//[Offset: 0x8, Size: 4]
	FString BuffType;//[Offset: 0x10, Size: 16]
	FString Name;//[Offset: 0x20, Size: 16]
	FString IconPath;//[Offset: 0x30, Size: 16]
	FString BPPath;//[Offset: 0x40, Size: 16]
	FString Desc;//[Offset: 0x50, Size: 16]
	<FString> MutexBuffTypes;//[Offset: 0x60, Size: 80]
	<FString> ExcludeBuffTypes;//[Offset: 0xb0, Size: 80]
	enum RefreshType;//[Offset: 0x100, Size: 1]
	enum ReActionType;//[Offset: 0x101, Size: 1]
	enum TargetType;//[Offset: 0x102, Size: 1]
	enum MultiCauserHanleType;//[Offset: 0x103, Size: 1]
	enum MultiSkillHandleType;//[Offset: 0x104, Size: 1]
	enum ClientSyncType;//[Offset: 0x105, Size: 1]
	float ClientSyncInterval;//[Offset: 0x108, Size: 4]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool IsOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	bool IsClientOwnLife;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 1]
	bool bNeedShowInUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 1]
	int LocalizeDescID;//[Offset: 0x110, Size: 4]
	int TipsOnAddBuff;//[Offset: 0x114, Size: 4]
	int ModeOpen;//[Offset: 0x118, Size: 4]
	FString ModeStrings;//[Offset: 0x120, Size: 16]

--------------------------------
Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x4d8, Size: 16]
	delegate OnVehicleAvatarPreChange;//[Offset: 0x4e8, Size: 16]
	delegate OnEndChangeItemAvatar;//[Offset: 0x4f8, Size: 16]
	delegate OnServerAvatarEquiped;//[Offset: 0x508, Size: 16]
	bool bHasLightEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	bool CanChangeAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 1]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x520, Size: 16]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x538, Size: 16]
	FName FrontMatSlotName;//[Offset: 0x548, Size: 8]
	FName TailMatSlotName;//[Offset: 0x550, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x558, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x560, Size: 8]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x568, Size: 8]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x570, Size: 8]
	VehicleAvatarPropretyHandle* DefaultPropertyHandle;//[Offset: 0x578, Size: 8]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x580, Size: 8]
	bool MeshLODOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	void WakeUpVehicle();// 0x3702434
	void VehicleAvatarPreChangeDelegate__DelegateSignature(int AvatarID);// 0x4033584
	bool TriggerSelectRandomAvatar();// 0x37023f4
	void PreChangeVehicleBrokenAvatar();// 0x37023e0
	void PreChangeVehicleAvatar(int InItemID);// 0x3702364
	void PreChangeItemAvatar(int InItemID);// 0x37022e0
	void PreChangeAvatarFPP();// 0x37022cc
	void PostChangeItemAvatar(bool bProcessRenderPipeline);// 0x3702240
	void OverrideVehiclePhysX();// 0x370222c
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x4033584
	SoftObjectPath GetVehicleFPPStaticMeshPath();// 0x37021b4
	SoftObjectPath GetVehicleFPPSkeletalMeshPath();// 0x370213c
	ItemAvatarMatPath[] GetVehicleFPPMatPath();// 0x37020d8
	ItemAvatarMatPath[] GetVehicleBrokenMatPath();// 0x3702074
	FName GetReflectionCubeName_Lobby();// 0x4033584
	FName GetReflectionCubeName();// 0x3702040
	FString GetItemAvatarHandlePath(int ItemId);// 0x4033584
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId);// 0x4033584
	int GetDefaultAvatarID();// 0x370200c
	BackpackVehicleAvatarHandle* GetDefaultAvatarHandle();// 0x3701fd8
	int GetCurrentAvatarID();// 0x3701fbc
	void ExitFPPVehicle();// 0x3701fa8
	void EnterFPPVehicle(bool InEnterFPPInVehicle);// 0x3701f24
	void EndChangeItemAvatarDelegate__DelegateSignature();// 0x4033584
	void CollectLoadRes(out SoftObjectPath[] AssetRefArray);// 0x3701e04
	void ClearVehicleLightEffect();// 0x4033584
	bool CheckIsNeedEnterFPPVehicle();// 0x3701dcc
	bool CheckBrokenMesh();// 0x3701d94
	bool CheckAvatarChanged();// 0x3701d5c
	void AsyncLoadPropertyHandle();// 0x3701d48
	void ApplyReflectionCubemap(MeshComponent* MeshComp);// 0x3701ccc
	bool ApplyMaterial(MeshComponent* MeshComp, out const ItemAvatarMatPath[] AvatarMatArray);// 0x3701bcc

--------------------------------
Class: VehicleAvatarPropretyHandle.Object
	int AvatarID;//[Offset: 0x30, Size: 4]
	VehicleAvatarProperty AvatarProperty;//[Offset: 0x38, Size: 192]
	class STExtraVehicleBase* OwnerVehicleClass;//[Offset: 0xf8, Size: 40]

--------------------------------
Class: VehicleAvatarProperty
	SkeletalMesh* TPPMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* FPPMesh;//[Offset: 0x28, Size: 40]
	WheelSetup[] WheelSetups;//[Offset: 0x50, Size: 16]
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x60, Size: 16]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x70, Size: 16]
	VehicleTransmissionData GearSetup;//[Offset: 0x80, Size: 48]
	Vector CenterOfMassOffset;//[Offset: 0xb0, Size: 12]

--------------------------------
Class: BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum[] SupportChangeTypes;//[Offset: 0x1d0, Size: 16]
	ItemAvatarData[] BrokenMatData;//[Offset: 0x1e0, Size: 16]
	SkeletalMesh* SkeletalMeshBroken;//[Offset: 0x1f0, Size: 40]
	StaticMesh* StaticMeshBroken;//[Offset: 0x218, Size: 40]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x240, Size: 40]
	StaticMesh* FPPStaticMesh;//[Offset: 0x268, Size: 40]
	ItemAvatarData[] FPPMatData;//[Offset: 0x290, Size: 16]
	<FName,ParticleSoftWrapperArray> ParticleSfx;//[Offset: 0x2a0, Size: 80]
	ParticleSystem* ExplosionParticle;//[Offset: 0x2f0, Size: 40]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x318, Size: 40]
	ParticleSystem* LightEffect;//[Offset: 0x340, Size: 40]
	<FName,Texture*> RefelectionCubemaps;//[Offset: 0x368, Size: 80]
	bool IsLowDeviceLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	VehCharAnimDataWrapper[] VehCharAnimData;//[Offset: 0x3c0, Size: 16]
	class AnimInstance* VehicleAnim;//[Offset: 0x3d0, Size: 40]

--------------------------------
Class: VehCharAnimDataWrapper
	FName AnimCompTag;//[Offset: 0x0, Size: 8]
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: VehCharAnimData
	byte VehAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b9, Size: 1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ba, Size: 1]
	int MasterCompLODLevel;//[Offset: 0x8bc, Size: 4]
	int VehicleSkinID;//[Offset: 0x8c0, Size: 4]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x8c8, Size: 40]
	class AnimInstance* BaseAnimBP;//[Offset: 0x8f0, Size: 40]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x918, Size: 16]
	delegate OnStyleEquippedEvent;//[Offset: 0x928, Size: 16]
	delegate OnStyleUnequippedEvent;//[Offset: 0x938, Size: 16]
	delegate OnServerAvatarEquiped;//[Offset: 0x948, Size: 16]
	enum[] AccessoryPartSlotTypes;//[Offset: 0x958, Size: 16]
	FName FrontMatSlotName;//[Offset: 0x968, Size: 8]
	FName TailMatSlotName;//[Offset: 0x970, Size: 8]
	FName FPPMatSlotName;//[Offset: 0x978, Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x980, Size: 8]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x988, Size: 8]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x990, Size: 8]
	VehicleAvatarPropretyHandle* PropertyHandle;//[Offset: 0x998, Size: 8]
	void WakeUpVehicle();// 0x36fdfbc
	void UpdateStaticMeshLOD(int MasterLODLevel);// 0x36fdf40
	void Streamable_RequestAsyncLoadMeshes(out SoftObjectPath[] InAssetPathList);// 0x36fde20
	void SetVehicleAvatarNormalMode();// 0x36fde0c
	void SetVehicleAvatarFPPMode();// 0x36fddf8
	void SetVehicleAvatarBroken();// 0x36fdde4
	bool SetMeshVisibleByID(int InSlotID, bool IsVisible, bool bForceShow, bool bWithLog);// 0x36fdc78
	void SetMasterBaseMeshPath(FString InPath);// 0x36fdbd0
	void SetMasterBaseMeshAnimBP(FString InPath);// 0x36fdb28
	void ResetAdvanceVehicleSkinID();// 0x36fdb0c
	void RemoveAllEquippedStyle();// 0x36fdaf8
	bool ProcessHandleUnequip(enum InSlotType);// 0x36fda68
	bool ProcessHandleEquip(enum InSlotType);// 0x36fd9d8
	void PreProcessBeforeLoadMesh();// 0x36fd9bc
	void PostProcessAfterLoadMesh();// 0x36fd9a0
	void PerChangeVehicleAvatar_Old(int InVehicleSkinID);// 0x36fd924
	void PerChangeVehicleAvatar(int InVehicleSkinID);// 0x36fd8a8
	void OverrideVehiclePhysX();// 0x36fd894
	void OnStyleUnequippedEvent__DelegateSignature(int OldStyleID);// 0x4033584
	void OnStyleEquippedEvent__DelegateSignature(int NewStyleID, int OldStyleID);// 0x4033584
	void OnServerAvatarEquipedDelegate__DelegateSignature();// 0x4033584
	void OnRep_BodySlotStateChanged();// 0x36fd878
	VehicleStyleData MakeVehicleStyleData(int InStyleID);// 0x4033584
	bool IsValidAvatar();// 0x36fd840
	int IsStyleHasModelConfig(out const VehicleStyleData InStyleData);// 0x36fd76c
	bool IsAvatarFPPMode();// 0x36fd734
	bool IsAvatarBroken();// 0x36fd6fc
	bool IsAdvanceVehicleInsideSlot(int SlotID);// 0x36fd664
	bool IsAdvanceVehicleBodySlot(int SlotID);// 0x36fd5cc
	bool InitVehicleAvatarBySkinID_Old(int InVehicleSkinID);// 0x36fd534
	bool InitVehicleAvatarBySkinID(int InVehicleSkinID);// 0x36fd49c
	bool InitVehicleAvatar_Old(out const VehicleAvatarData InVehicleAvatarData);// 0x36fd3a4
	bool InitVehicleAvatar(out const VehicleAvatarData InVehicleAvatarData, bool bUpdateFlag);// 0x36fd264
	void InitMasterComponent();// 0x36fd250
	void Initialize();// 0x36fd234
	void InitialAvatarParam();// 0x36fd220
	int HasStyleEquipped(int InStyleID);// 0x36fd194
	int HasEquippedSameStyle(int InStyleID);// 0x36fd108
	bool HandleUnequipStyle(int InStyleID);// 0x36fd078
	void HandleMaterialDiff(int InSlotID, ItemHandleBase* InItemHandle);// 0x36fcfb8
	bool HandleEquipStyle(int InStyleID);// 0x36fcf28
	SkeletalMeshComponent* GetVehicleWheelMeshComp();// 0x36fcef4
	MeshComponent* GetVehicleBodyMeshComp();// 0x36fcec0
	enum GetSlotMeshType(int InSlotID, int InSubSlotID, ItemHandleBase* InItemHandle);// 0x36fcdb8
	FName GetReflectionCubeName_Lobby();// 0x4033584
	FName GetReflectionCubeName();// 0x36fcd84
	bool CanBeMeshMerge(int SlotID);// 0x36fccf4
	void ApplyReflectionCubemap(MeshComponent* MeshComp, ItemHandleBase* InItemHandle);// 0x36fcc40

--------------------------------
Class: VehicleStyleData
	int StyleID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	VehicleStyle[] MutilStyles;//[Offset: 0x8, Size: 16]

--------------------------------
Class: VehicleStyle
	enum StyleType;//[Offset: 0x0, Size: 1]
	int StyleValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: EffectComponent.ActorComponent.Object
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x334feb0
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x334fcd8
	void S2A_EndEffectGraph(int UId);// 0x334fc54
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x334fa44

--------------------------------
Class: VehicleAIComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate VehicleAINavStateChangedDelegate;//[Offset: 0x1d8, Size: 16]
	delegate VehicleAINavStateAllowableDistanceChangedDelegate;//[Offset: 0x1e8, Size: 16]
	STExtraVehicleAIController* VehicleAIController;//[Offset: 0x238, Size: 8]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x240, Size: 8]
	AINavStateData AutoDriver_AINavStateData;//[Offset: 0x248, Size: 56]
	bool AutoDriver_EnableNoDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	float AutoDriver_MaxAllowableDistanceSquared;//[Offset: 0x284, Size: 4]
	float CheckAllowableDistanceInter;//[Offset: 0x288, Size: 4]
	Vector[] AutoDrive_RouteList;//[Offset: 0x290, Size: 16]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x2a0, Size: 16]
	void StopMoveByHandrake();// 0x36ff3e4
	void StopAutoDriving();// 0x36ff3d0
	bool StartAutoDriving();// 0x36ff398
	void ServerSetAutoDriverTarget(Vector TargetPosition);// 0x36ff2e4
	void OnRep_AutoDriver_AINavStateData();// 0x36ff2d0
	bool IsReachDest();// 0x36ff298
	bool IsAutoDriving();// 0x36ff260
	bool HasAutoDriveTarget();// 0x36ff228
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x36ff1f4
	STExtraVehicleAIController* GetVehicleAIController();// 0x36ff1c0
	int GetCurrentTargetWaypointIdx();// 0x36ff18c
	Vector GetAutoDriveTarget();// 0x36ff154
	void EndAutoDriving();// 0x36ff140
	void ClearAutoDriveTarget();// 0x36ff12c
	bool CanAutoDrivingNoDriver();// 0x36ff0f4
	bool CanAutoDriving();// 0x36ff0bc
	bool AllowableDistanceAutoDriving(bool CheckDriveTarget);// 0x36ff024

--------------------------------
Class: STExtraVehicleAIController.AIController.Controller.Actor.Object
	FName IsDestroyedBlackboardKeyName;//[Offset: 0x4d0, Size: 8]
	FName AIPawnTag;//[Offset: 0x4d8, Size: 8]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x4e0, Size: 8]
	VehicleAIComponent* VehicleAIComp;//[Offset: 0x4e8, Size: 8]
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x3645bbc
	STExtraVehicleAIManager* GetVehicleAIManager();// 0x3645b88
	VehicleAIComponent* GetVehicleAIComp();// 0x3645b54

--------------------------------
Class: STExtraVehicleAIManager.Actor.Object
	bool bOnlySpawnInSafetyZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool bQueueSpawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	DataTable* VehicleSpawnDataTable;//[Offset: 0x3d0, Size: 40]
	FName AIPawnTag;//[Offset: 0x3f8, Size: 8]
	int MaxConcurrentVehicles;//[Offset: 0x400, Size: 4]
	int MaxVehiclesPerGame;//[Offset: 0x404, Size: 4]
	float SpawnPointCooldown;//[Offset: 0x40c, Size: 4]
	FName CurrentPathKeyName;//[Offset: 0x410, Size: 8]
	FName CurrentPathInputKeyKeyName;//[Offset: 0x418, Size: 8]
	FName PreviousPathInputKeyKeyName;//[Offset: 0x420, Size: 8]
	FName IsPathingInReverseKeyName;//[Offset: 0x428, Size: 8]
	FName IsStoppedKeyName;//[Offset: 0x430, Size: 8]
	FName IsDebugForceStoppedKeyName;//[Offset: 0x438, Size: 8]
	enum AvoidanceMode;//[Offset: 0x440, Size: 1]
	float InitRetryDelay;//[Offset: 0x444, Size: 4]
	int MaxInitRetries;//[Offset: 0x448, Size: 4]
	QueuedVehicleSpawn[] QueuedVehicleSpawns;//[Offset: 0x458, Size: 16]
	STExtraVehicleAISpawner*[] VehicleSpawns;//[Offset: 0x468, Size: 16]
	STExtraAIWaypointSegment*[] VehiclePaths;//[Offset: 0x478, Size: 16]
	<PathPoint,bool> PathPointPlayZoneStatus;//[Offset: 0x488, Size: 80]
	<PathPoint,PathInputPlayZoneDistanceQuery> PathPointPlayZoneDistances;//[Offset: 0x4d8, Size: 80]
	<STExtraVehicleAISpawner*,float> LastVehicleSpawnTimes;//[Offset: 0x528, Size: 80]
	<FString,float> AllVehiclesDestroyedTimeMap;//[Offset: 0x578, Size: 80]
	float PreviousMatchTime;//[Offset: 0x5c8, Size: 4]
	<FName,Object*> CacheUObjectMap;//[Offset: 0x5d0, Size: 80]
	<FString,ActiveVehicleList> ActiveVehiclesMap;//[Offset: 0x630, Size: 80]
	AutoDriveAIDataRow[] AutoDriveAIADataSet;//[Offset: 0x948, Size: 16]
	STExtraAIWaypointSegment* SegmentStart;//[Offset: 0x958, Size: 8]
	int SegmentPointIdxStart;//[Offset: 0x960, Size: 4]
	STExtraAIWaypointSegment* SegmentEnd;//[Offset: 0x968, Size: 8]
	int SegmentPointIdxEnd;//[Offset: 0x970, Size: 4]
	bool bVehicleAIForcecNoActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x974, Size: 1]
	bool bVehicleAIShowIconInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x975, Size: 1]
	float fVehicleHPScaleForTowTeam;//[Offset: 0x978, Size: 4]
	float fVehicleHPScaleForFourTeam;//[Offset: 0x97c, Size: 4]
	bool bSyncBuildPathGraph;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x980, Size: 1]
	bool bDebugAllWayPointKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x981, Size: 1]
	bool bDebugAllLinkPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x982, Size: 1]
	bool bDebugFindPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x983, Size: 1]
	int DSSwitchId_SemiTruck;//[Offset: 0x984, Size: 4]
	int DSSwitchId_ModelY;//[Offset: 0x988, Size: 4]
	void ProcessPathPlayZoneStatus();// 0x364689c
	void MulticastDrawPathPointDebug(Vector PointLocation, int ForwardPlayZoneDistance, int ReversePlayZoneDistance);// 0x36467a4

--------------------------------
Class: QueuedVehicleSpawn
	Guid ID;//[Offset: 0x0, Size: 16]
	FString SpawnId;//[Offset: 0x10, Size: 16]
	class Pawn* VehicleClass;//[Offset: 0x20, Size: 8]
	BehaviorTree* BehaviorTree;//[Offset: 0x28, Size: 8]
	BlackboardData* BlackboardData;//[Offset: 0x30, Size: 8]
	SpawnFilter SpawnSettings;//[Offset: 0x38, Size: 40]

--------------------------------
Class: SpawnFilter
	bool bLimitSpawnPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName[] ValidSpawnPoints;//[Offset: 0x8, Size: 16]
	FName[] InvalidSpawnPoints;//[Offset: 0x18, Size: 16]

--------------------------------
Class: STExtraVehicleAISpawner.Actor.Object
	Guid ID;//[Offset: 0x3c8, Size: 16]
	FString SpawnTag;//[Offset: 0x3d8, Size: 16]
	bool bIsSingleUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	SceneComponent* SpawnPoint;//[Offset: 0x3f0, Size: 8]
	WaypointNetworkConnection StartingPath;//[Offset: 0x3f8, Size: 16]
	float InitializeVehicleBehaviorDelay;//[Offset: 0x408, Size: 4]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	PathPoint[] spawnWayPaths;//[Offset: 0x410, Size: 16]
	STExtraVehicleAIManager* VehicleAIManager;//[Offset: 0x420, Size: 8]
	void PostSpawnAI(Pawn* SpawnedVehicle);// 0x3648bc0
	void OnSpawnAI(Pawn* SpawnedVehicle);// 0x3648b3c

--------------------------------
Class: WaypointNetworkConnection
	STExtraAIWaypointSegment* ConnectedSegment;//[Offset: 0x0, Size: 8]
	int WaypointIndex;//[Offset: 0x8, Size: 4]
	bool bPathSegmentInReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: STExtraAIWaypointSegment.Actor.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool bAlwaysDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	SplineComponent* WaypointsSpline;//[Offset: 0x3d0, Size: 8]
	<int,WaypointNetworkConnectionList> ConnectedSegments;//[Offset: 0x3d8, Size: 80]
	<int,NodeTargetSpeedOverrides> TargetSpeedOverridesMap;//[Offset: 0x428, Size: 80]
	Pawn*[] PawnsOnForwardPath;//[Offset: 0x478, Size: 16]
	Pawn*[] PawnsOnReversePath;//[Offset: 0x488, Size: 16]
	void DrawDebug(float DrawTime);// 0x3544f98

--------------------------------
Class: WaypointNetworkConnectionList
	WaypointNetworkConnection[] Connections;//[Offset: 0x0, Size: 16]

--------------------------------
Class: NodeTargetSpeedOverrides
	float ForwardTargetSpeedOverride;//[Offset: 0x0, Size: 4]
	float ForwardMaxSpeedOverride;//[Offset: 0x4, Size: 4]
	float ReverseTargetSpeedOverride;//[Offset: 0x8, Size: 4]
	float ReverseMaxSpeedOverride;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PathPoint
	STExtraAIWaypointSegment* Path;//[Offset: 0x0, Size: 8]
	int InputKey;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PathInputPlayZoneDistanceQuery
	int ForwardDistance;//[Offset: 0x0, Size: 4]
	bool bForwardQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int ReverseDistance;//[Offset: 0x8, Size: 4]
	bool bReverseQueryMade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: ActiveVehicleList
	Pawn*[] Vehicles;//[Offset: 0x10, Size: 16]

--------------------------------
Class: AutoDriveAIDataRow
	class Pawn* VehicleClass;//[Offset: 0x0, Size: 40]
	BehaviorTree* BehaviorTreeAsset;//[Offset: 0x28, Size: 40]
	BlackboardData* BlackboardDataAsset;//[Offset: 0x50, Size: 40]

--------------------------------
Class: AINavStateData
	int CurrentTargetWaypointIdx;//[Offset: 0x0, Size: 4]
	Vector TargetPosition;//[Offset: 0x4, Size: 12]
	Vector StartPosition;//[Offset: 0x10, Size: 12]
	int[] PathWayPoints;//[Offset: 0x20, Size: 16]
	int PathWayPointNum;//[Offset: 0x30, Size: 4]

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x2cc, Size: 4]
	float TriggerInterval;//[Offset: 0x2d0, Size: 4]
	float MaxAllowedValidationDiff;//[Offset: 0x2d4, Size: 4]
	void OnTriggered();// 0x4033584

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0x170, Size: 16]
	float SeekAreaPixelSize;//[Offset: 0x180, Size: 4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0x184, Size: 8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0x18c, Size: 8]
	float ScopeInDelayTime;//[Offset: 0x194, Size: 4]
	float InitialLockFrameLength;//[Offset: 0x198, Size: 4]
	float FinalLockFrameLength;//[Offset: 0x19c, Size: 4]
	float MaxSeekDeistance;//[Offset: 0x1a0, Size: 4]
	float LineTraceTargetMaxDistance;//[Offset: 0x1a4, Size: 4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x1a8, Size: 4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x1ac, Size: 4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x1b0, Size: 4]
	float TraceTargetInterval;//[Offset: 0x1b4, Size: 4]
	float TraceTargetIntervalNoLaserTrace;//[Offset: 0x1b8, Size: 4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x1c0, Size: 80]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x210, Size: 80]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x260, Size: 80]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x2b0, Size: 8]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x2b8, Size: 8]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x2c0, Size: 8]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x2c8, Size: 8]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x2d0, Size: 8]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x2e0, Size: 16]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x2f0, Size: 16]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x300, Size: 16]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x320, Size: 4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x324, Size: 4]
	float CurTraceTargetCountTime;//[Offset: 0x328, Size: 4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	bool bSeekAndLockAlwaysValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 1]
	bool bSeekAndLockToVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 1]
	bool bSeekAndLockToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32f, Size: 1]
	void ShowEnemyLaunchRocketTips();// 0x34d665c
	void SetCurrentLockTarget(Actor* InTarget);// 0x34d65e0
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x34d64f0
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x34d6440
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x34d6350
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x34d62a0
	void RemoveTargetList(Actor*[] TargetList);// 0x34d616c
	void RemoveTarget(Actor* Target);// 0x34d60f0
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0x4033584
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0x4033584
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0x4033584
	void InitComplete();// 0x34d60dc
	void HandleTargetOutOfSeekArea();// 0x34d60c8
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x34d6044
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x34d5fc0
	enum GetCurrentSeekAndLockStage();// 0x34d5f84
	Actor* GetCurrentLockTarget();// 0x34d5f50
	bool CheckTargetIsVisible(Actor* Target);// 0x34d5eb8
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x34d5e28
	void AddTarget(Actor* Target);// 0x34d5dac

--------------------------------
Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0, Size: 4]
	float ShrinkSpeed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0, Size: 1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x8, Size: 8]

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	delegate OnBuffAttached;//[Offset: 0x160, Size: 16]
	delegate OnBuffDetached;//[Offset: 0x170, Size: 16]
	UTBuffSynData[] BuffSyncList;//[Offset: 0x1d8, Size: 16]
	FString ServerBuffString;//[Offset: 0x1e8, Size: 16]
	float BuffSyncRemainingPeriod;//[Offset: 0x1f8, Size: 4]
	BuffInstancedItem[] AllBuffs;//[Offset: 0x200, Size: 16]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	bool SetBuffExpiry(FName BuffName, float ExpirySeconds);// 0x384768c
	void ResetForDeath();// 0x3847678
	void RepBuffSyncList();// 0x3847664
	bool RemoveBuffWithCauser(FName BuffName, bool RemoveLayerOnly, Controller* pCauser);// 0x3847554
	bool RemoveBuffByID(int BuffID, bool RemoveLayerOnly, Controller* pCauser, Actor* BuffApplierActor);// 0x384740c
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x38472fc
	void RefreshAllBuffs();// 0x38472e0
	bool IsBufferMutexed(FName NewBuffName);// 0x3847250
	bool HasBuffID(int BuffID);// 0x38471c0
	bool HasBuff(FName BuffName);// 0x3847130
	Pawn* GetPawnOwner();// 0x38470fc
	FName GetBuffName(int BuffID);// 0x3847070
	int GetBuffID(FName BuffName);// 0x3846fe4
	float GetBuffExpiry(out const FName BuffName);// 0x3846f48
	STBaseBuff* GetBuffByName(FName BuffName);// 0x3846ebc
	Actor* GetActorOwner();// 0x3846e88
	void ClientSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x3846d84
	void ClientSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x3846c58
	void ClientMulticastSimulateRemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x3846b54
	void ClientMulticastSimulateAddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x3846a28
	void ClientMulticastSetBuffExpiry(FName BuffName, float LeftSecondsAfterNow);// 0x3846970
	void ClearBuff(bool bDebuff, bool bGainBuff);// 0x38468a0
	bool CheckBuffStatus(class STBaseBuffStatusType Status, out bool Value);// 0x38467c4
	void BuffDetached__DelegateSignature(out const FName BuffName);// 0x4033584
	void BuffAttached__DelegateSignature(out const FName BuffName);// 0x4033584
	bool AddBuffLayer(FName BuffName, int layerNum);// 0x38466f8
	bool AddBuffExpiry(FName BuffName, float ExpirySeconds);// 0x384662c
	int AddBuffByID(int BuffID, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor);// 0x38464e4
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x3846370

--------------------------------
Class: UTBuffSynData
	FName BuffName;//[Offset: 0x0, Size: 8]
	Controller* BuffCauser;//[Offset: 0x8, Size: 8]
	int LayerCount;//[Offset: 0x10, Size: 4]
	Actor* BuffApplierActor;//[Offset: 0x18, Size: 8]
	float RemainingTime;//[Offset: 0x20, Size: 4]
	float ExpireTime;//[Offset: 0x24, Size: 4]

--------------------------------
Class: BuffInstancedItem
	FName BuffName;//[Offset: 0x0, Size: 8]
	int BuffID;//[Offset: 0x8, Size: 4]
	STBaseBuff* Buff;//[Offset: 0xc, Size: 8]
	int LayerCount;//[Offset: 0x14, Size: 4]
	Controller* CauserPawnController;//[Offset: 0x18, Size: 8]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	float Expiry;//[Offset: 0x24, Size: 4]
	Actor* Target;//[Offset: 0x28, Size: 8]
	Actor* BuffApplier;//[Offset: 0x30, Size: 8]
	int BuffIndex;//[Offset: 0x38, Size: 4]
	uint32 DamageCauseID;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: STBaseBuff.Object
	FString BuffName;//[Offset: 0x38, Size: 16]
	FString DisplayName;//[Offset: 0x48, Size: 16]
	FString Message;//[Offset: 0x58, Size: 16]
	Texture2D* Icon;//[Offset: 0x68, Size: 8]
	SoundBase* SoundData;//[Offset: 0x70, Size: 8]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool IgnoreMagicalImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool bAllowOtherPawnRefreshBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	bool StaysOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f, Size: 1]
	int LayerMax;//[Offset: 0x80, Size: 4]
	int InitialLayerCount;//[Offset: 0x84, Size: 4]
	int LayerCount;//[Offset: 0x88, Size: 4]
	float ValidityTime;//[Offset: 0x8c, Size: 4]
	float Internal;//[Offset: 0x90, Size: 4]
	UTSkillCondition*[] BuffConditions;//[Offset: 0x98, Size: 16]
	float Expiry;//[Offset: 0xa8, Size: 4]
	StatusChange[] StatusChanges;//[Offset: 0xb0, Size: 16]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	byte SimulateAddBuffRole;//[Offset: 0xc2, Size: 1]
	FName[] MutexBuffers;//[Offset: 0xc8, Size: 16]
	BuffActionItem[] BuffActions;//[Offset: 0xd8, Size: 16]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0xe8, Size: 16]
	float fADScale;//[Offset: 0xf8, Size: 4]
	float fAPScale;//[Offset: 0xfc, Size: 4]
	bool IsAlwaysExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	Controller* CauserPawnController;//[Offset: 0x108, Size: 8]
	Actor* CauserPawnActor;//[Offset: 0x110, Size: 8]
	UAEBlackboardParameter[] UAEBlackboardParamList;//[Offset: 0x128, Size: 16]
	Actor* BuffApplier;//[Offset: 0x138, Size: 8]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x140, Size: 80]
	int InstancedNodesTotalSize;//[Offset: 0x190, Size: 4]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.Object
	bool IsTargetOK(ActorComponent* SkillManagerComponent, Actor* Target);// 0x5d8c9ac
	bool IsOK_Internal();// 0x5d8c938
	bool IsOK(ActorComponent* SkillManagerComponent);// 0x5d8c848
	UTSkill* GetOwnerSkill();// 0x5d8c7e0

--------------------------------
Class: UTSkillBaseWidget.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	FString EffectName;//[Offset: 0x38, Size: 16]
	Actor* BuffTargetActor;//[Offset: 0x48, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x50, Size: 8]
	ActorComponent* CurOwnerActorComponent;//[Offset: 0x58, Size: 8]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x5d90274
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x5d900f8
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x5d8ff08
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator RotatorValue);// 0x5d8fd8c
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x5d8fc0c
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x5d8fa70
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x5d8f8f4
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x5d8f778
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x5d8f5f8
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x5d8f478
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x5d8f2d8
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x5d8f1bc
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x5d8f0a0
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x5d8ef84
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x5d8ee68
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x5d8ed4c
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x5d8ec30
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x5d8eb14
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x5d8e9f8
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x5d8e8dc
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x5d8e7c0
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x5d8e6a4
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x5d8e58c
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x5d8e424
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x5d8e2e4
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x5d8e1a0
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x5d8e060
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x5d8df48
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x5d8de20
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x5d8dd08
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x5d8dbf0
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x5d8dad8
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x5d8d9c0
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x5d8d8a4
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x5d8d73c
	UAEBlackboard* GetUAEBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x5d8d650
	UAEBlackboard* GetUAEBlackboard();// 0x5d8d5e0
	UTSkillManagerComponent* GetOwnerSkillManager();// 0x5d8d570
	Actor* GetOwnerPawn();// 0x5d8d500
	<Actor*,UAEBlackboard*> GetActorBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x5d8d3e4
	<Actor*,UAEBlackboard*> GetActorBlackboard();// 0x5d8d350

--------------------------------
Class: UTSkill.Actor.Object
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	FString SkillName;//[Offset: 0x3e0, Size: 16]
	FName SkillGroup;//[Offset: 0x3f0, Size: 8]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	enum SkillCastType;//[Offset: 0x3f9, Size: 1]
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 1]
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb, Size: 1]
	int SkillID;//[Offset: 0x3fc, Size: 4]
	int SkillTemplateID;//[Offset: 0x400, Size: 4]
	FString SkillDescription;//[Offset: 0x408, Size: 16]
	FString SkillDetailDes;//[Offset: 0x418, Size: 16]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 1]
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x430, Size: 392]
	int SkillCategory;//[Offset: 0x5b8, Size: 4]
	bool bUseNewSkillCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	UAEBlackboardParameter[] BlackboardParamList;//[Offset: 0x5c0, Size: 16]
	bool bSetBlackboardDefaultData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	bool bGsListener;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 1]
	FString SkillTimeScaleAttrName;//[Offset: 0x5d8, Size: 16]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x5e8, Size: 80]
	int InstancedNodesTotalSize;//[Offset: 0x638, Size: 4]
	FString[] ParentFolderPath;//[Offset: 0x640, Size: 16]
	int64 LastEditBluePrintTime;//[Offset: 0x650, Size: 8]
	int CurComponentNameIndex;//[Offset: 0x658, Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 1]
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x6b0, Size: 8]
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x6b8, Size: 8]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x5d83f34
	void SetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent, float Percentage);// 0x5d83df0
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x5d83c28
	bool IsEnableSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent);// 0x5d83b38
	bool IsCDOK(UTSkillManagerComponent* SkillManagerComponent);// 0x5d83a48
	UTSkillManagerComponent* GetSpecificSkillManager();// 0x5d839e0
	UAEBlackboard* GetSpecificBlackboard();// 0x5d83978
	float GetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent);// 0x5d83898
	UTSkillPhase* GetSkillPhaseByName(FString PhaseName);// 0x5d83768
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x5d83680
	UTSkillBaseWidget* GetSkillEffectByPhaseName(FString PhaseName, FString EffectName);// 0x5d834a4
	UTSkillBaseWidget* GetSkillEffectByPhaseIndex(int PhaseIndex, FString EffectName);// 0x5d83310
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x5d831c0
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowErrorMsg);// 0x5d83040

--------------------------------
Class: UTSkillCreateData
	bool bSkillActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int SkillGroupIndex;//[Offset: 0x4, Size: 4]
	float interval;//[Offset: 0x8, Size: 4]
	float IntervalSincePrevFinish;//[Offset: 0xc, Size: 4]
	FString CoolDownMessage;//[Offset: 0x10, Size: 16]
	int CoolDownMessageID;//[Offset: 0x20, Size: 4]
	UTSkillPhase*[] Phases;//[Offset: 0x28, Size: 16]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0x38, Size: 16]
	<int,UTSkillWidget*> SkillUIs;//[Offset: 0x48, Size: 80]
	<FString,int> SkillUIPathToHandle;//[Offset: 0x98, Size: 80]
	SoftClassPath SkillMainWidget;//[Offset: 0xe8, Size: 24]
	FName SkillWidgetAttachPanelName;//[Offset: 0x100, Size: 8]
	bool bInitMainSkillUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	<enum,SlateBrush> SkillIcons;//[Offset: 0x110, Size: 80]
	int SkillMainWidgetHandle;//[Offset: 0x160, Size: 4]
	FName[] AsyncLoadingSkillUI;//[Offset: 0x168, Size: 16]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x178, Size: 16]

--------------------------------
Class: UTSkillPhase.Object
	FString PhaseName;//[Offset: 0x30, Size: 16]
	FString PhaseDescription;//[Offset: 0x40, Size: 16]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0x54, Size: 8]
	int PhaseIndex;//[Offset: 0x5c, Size: 4]
	int ActionsTopHalfCount;//[Offset: 0x78, Size: 4]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x80, Size: 136]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x108, Size: 8]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseId);// 0x5dac528
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x5dac444
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x5dac360
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x5dac27c
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x5dac11c
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x5dabfbc
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x5dabed8
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x5dabd7c
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x5dabc20
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x5dabb40
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x5daba50
	bool ClearAttachments();// 0x5dab9e4
	void AfterStartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x5dab900
	void AddSkillConditionLua(UTSkill* InSkill, FString InLuaPath);// 0x5dab784
	void AddSkillActionLua(UTSkill* InSkill, FString InLuaPath);// 0x5dab608

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 4]
	FString TimeAdjustAttr;//[Offset: 0x8, Size: 16]
	float AltPhaseDuration;//[Offset: 0x18, Size: 4]
	float CacheMouseInputTime;//[Offset: 0x1c, Size: 4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	int CoolDownIndex;//[Offset: 0x24, Size: 4]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x28, Size: 16]
	UTSkillPicker* Picker;//[Offset: 0x38, Size: 8]
	UTSkillEffect*[] Actions;//[Offset: 0x40, Size: 16]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x50, Size: 16]
	enum PhaseType;//[Offset: 0x60, Size: 1]
	int JumpPhaseIndex;//[Offset: 0x64, Size: 4]
	FString EnterPhaseTipString;//[Offset: 0x68, Size: 16]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x78, Size: 16]

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x60, Size: 32]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x90, Size: 16]
	UTSkillPickerFilter*[] Filters;//[Offset: 0xa0, Size: 16]
	bool PickTargetsInner(Vector OriginPoint);// 0x5dada94
	bool PickTargets(Vector OriginPoint);// 0x5dad9b8

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 8]
	enum PickerTargetType;//[Offset: 0x10, Size: 1]
	enum PickerTargetRole;//[Offset: 0x11, Size: 1]
	int PickerMaxCount;//[Offset: 0x14, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 8]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte HitPos;//[Offset: 0x11, Size: 1]
	FName BoneName;//[Offset: 0x18, Size: 8]
	Vector HitEnvLocation;//[Offset: 0x20, Size: 12]
	float HitAngleCos;//[Offset: 0x2c, Size: 4]
	byte HitPhysMatType;//[Offset: 0x30, Size: 1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]

--------------------------------
Class: UTSkillPickerFilter.Object
	void HandleFilterArray(out UTSkillPickedTarget[] inArray, Actor* Owner);// 0x5dad57c

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.Object
	float fADScale;//[Offset: 0x60, Size: 4]
	float fAPScale;//[Offset: 0x64, Size: 4]
	Object*[] CacheSoftObject;//[Offset: 0x68, Size: 16]
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x5d91ad4
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x5d919f0
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x5d9189c
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x5d91748
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x5d915f4
	void OnAsyncLoadSoftPathDone();// 0x5d91594
	UTSkill* GetOwnerSkill();// 0x5d9152c
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x5d913d8
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x5d912e8

--------------------------------
Class: UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	Pawn* OwnerPawn;//[Offset: 0x230, Size: 8]
	bool bEnableSkillCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	Actor* OwnerActor;//[Offset: 0x250, Size: 8]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	<int,UTSkill*> SkillIDToSkills;//[Offset: 0x260, Size: 80]
	UAEUserWidget*[] AsyncLoadedSkillUI;//[Offset: 0x2b0, Size: 16]
	UAEUserWidget* SkillUIRoot;//[Offset: 0x2c0, Size: 8]
	PanelWidget* SkillUIRootPanel;//[Offset: 0x2c8, Size: 8]
	<UTSkill*,UAEBlackboard*> SkillsBlackboardMap;//[Offset: 0x2d0, Size: 80]
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x320, Size: 80]
	delegate ChangeActorBlackboard;//[Offset: 0x370, Size: 16]
	Actor* Target;//[Offset: 0x380, Size: 8]
	<int,UTSkillCreateData> SkillBaseDataMaps;//[Offset: 0x388, Size: 80]
	UTSkillLastCastInfo[] LastCastArray;//[Offset: 0x3d8, Size: 16]
	delegate OnSkillHit;//[Offset: 0x3e8, Size: 16]
	delegate OnSkillCast;//[Offset: 0x3f8, Size: 16]
	float PhasePercentage;//[Offset: 0x408, Size: 4]
	<int,int> IDToSyncSkillActiveStateData;//[Offset: 0x410, Size: 80]
	SkillActiveRepData[] SyncSkillActiveStateDatas;//[Offset: 0x460, Size: 16]
	<int,int> IDToSyncSkillCDDatas;//[Offset: 0x470, Size: 80]
	SkillDynamicRepData SyncDynamicRepData;//[Offset: 0x4c0, Size: 16]
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x4d0, Size: 16]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x4e8, Size: 48]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x518, Size: 48]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x548, Size: 16]
	FString LastESkillTargetDesc;//[Offset: 0x560, Size: 16]
	int SkillSynRandomSeed;//[Offset: 0x570, Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x574, Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x57c, Size: 4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x580, Size: 80]
	float ZombieModeUseSkillCD;//[Offset: 0x5d8, Size: 4]
	int ZombieModeMaxSkillPropLevel;//[Offset: 0x5e0, Size: 4]
	SkillParamater[] SkillParamaters;//[Offset: 0x5f8, Size: 16]
	UTMutilSkillSynData[] SkillSynData;//[Offset: 0x608, Size: 16]
	UTSkillSynSinglePhaseData[] SkillSynSinglePhaseData;//[Offset: 0x628, Size: 16]
	<UTSkill*,int> SkillCurPhaseIndexes;//[Offset: 0x650, Size: 80]
	<UTSkill*,int> LastPhaseIndexes;//[Offset: 0x6a0, Size: 80]
	delegate OnSkillInitSignature;//[Offset: 0x750, Size: 16]
	delegate SkillStartEvent;//[Offset: 0x760, Size: 16]
	delegate SkillStopEvent;//[Offset: 0x770, Size: 16]
	int[] PendingRemoveSkillID;//[Offset: 0x780, Size: 16]
	<int,byte> CurSKillLevels;//[Offset: 0x790, Size: 80]
	UTReplaceSkillData[] ReplacedSkillDatas;//[Offset: 0x7e0, Size: 16]
	void UpdateSyncSkillCDData(int SkillID);// 0x5da0914
	void UpdateSyncSkillActiveState(int SkillID);// 0x5da0840
	void UnRegisterActorBlackBorad(Actor* InActor);// 0x5da0768
	void TryDeleteOneSkill(int SkillID, bool IsImmediately);// 0x5da0604
	void TryAddOneSkill(int SkillID, bool bActive);// 0x5da04a0
	void TriggerEvent_WithID(int InSkillID, byte InEventType, out const UTSkillBBUploadData SkillBBUploadData);// 0x5da0288
	void TriggerEvent(int SkillID, byte EventType);// 0x5da013c
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x5d9fe48
	void SyncOneSkillState(bool RepSkillCD, bool RepSkillActiveState, int RequestID);// 0x5d9fc54
	bool StopSkillWithSlot(int SkillSlot, enum StopReason);// 0x5d9fafc
	void StopSkillSpecific(UTSkill* Skill, enum StopReason);// 0x5d9f9b4
	void StopSkillAll(enum StopReason);// 0x5d9f8d0
	int StopSkill_WithID(int SkillID, enum StopReason);// 0x5d9f778
	void StopSkill(int SkillID, enum StopReason);// 0x5d9f628
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x5d9f4d0
	bool SetupOwnerAndSystem();// 0x5d9f464
	void SetSkillState(out const UTSkillStateSyncData[] InSyncStateDatas);// 0x5d9f320
	void SetSkillOwner(Actor* tempActor);// 0x5d9f23c
	void SetSkillLevel(int SkillID, int SkillLevel);// 0x5d9f0fc
	void SetSkillLastPhase(UTSkill* Skill, int PhaseIndex);// 0x5d9efb8
	void SetSkillCurPhase(UTSkill* Skill, int PhaseIndex);// 0x5d9ee74
	bool SetSkillActive(int SkillID, bool bActive, bool bForceSet);// 0x5d9ec68
	void SetModSkillUIRoot(UAEUserWidget* ModSkillUIRoot);// 0x5d9eb90
	void SetCurSkill(int SkillID, int SkillSlot);// 0x5d9ea50
	void SetAutoSkillID(int InSkillID);// 0x5d9e97c
	void ServerTriggerEvent_WithParams(int SkillID, byte EventType, const UAEBlackboardKeySelector[] KeySelectors, const byte[] Content);// 0x5d9e638
	void ServerTriggerEvent_WithID(int SkillID, byte EventType);// 0x5d9e4bc
	void ServerTriggerEvent(int SkillID, byte EventType);// 0x5d9e340
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x5d9e1c4
	void ServerNotifyRandomSeed(int Seed);// 0x5d9e0b8
	void ResetSkillCollDown(int SkillID);// 0x5d9dfd8
	void ResetAllSkillCollDown();// 0x5d9df70
	void RequestSkillStates(bool RepSkillCD, bool RepSkillActiveState, const int[] RequestIDs);// 0x5d9dcc4
	void RepSkillHitInfo();// 0x5d9dc64
	void RepOneSkillSynData(int SkillSlot, int InLastSkillID);// 0x5d9db24
	void RepLastCastTime();// 0x5d9dac4
	void ReplaceSkill(int OldSkillID, int NewSkillID);// 0x5d9d984
	void RemoveSkillUIWidget(FString SkillClassName, SoftObjectPath ObjPath);// 0x5d9d774
	void RemoveReplacedSkill(int OldSkillID);// 0x5d9d6a0
	void RemoveAllSkillUIWidget();// 0x5d9d640
	void RegistSkillUIWidgetBP(FString SkillClassName, SoftObjectPath ObjPath);// 0x5d9d430
	void RegisterActorBlackBorad(Actor* InActor, UAEBlackboard* RegisterBlackboard);// 0x5d9d2e8
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x5d9d1a0
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x5d9d068
	void OnStopSkill(UTSkill* Skill, enum StopReason);// 0x5d9cf14
	static bool OnSameTeam(Actor* A, Actor* B);// 0x5d9cdcc
	void OnRespawned();// 0x5d9cd64
	void OnRep_SkillSynSinglePhaseData();// 0x5d9ccfc
	void OnRep_SkillSynData();// 0x5d9cc94
	void OnRep_SkillHitInfo();// 0x5d9cc2c
	void OnRep_SkillCDDatas();// 0x5d9cbcc
	void OnRep_SkillActiveState();// 0x5d9cb6c
	void OnRep_ReplaceSkill();// 0x5d9cb0c
	void OnRep_DynamicRepData();// 0x5d9caac
	void OnRecycled();// 0x5d9ca44
	void OnInterruptSkill(UTSkill* Skill, enum StopReason);// 0x5d9c8f0
	bool IsUsingSkill(int SkillID);// 0x5d9c810
	bool IsSkillCanUse();// 0x5d9c7a4
	bool IsSkillActived(int SkillID);// 0x5d9c6c4
	bool IsReadyToCastSkill(int SkillID);// 0x5d9c5d8
	bool IsEnableSkillCoolDown();// 0x5d9c564
	bool IsCurrentUseSkillID(int InSkillID);// 0x5d9c484
	bool IsCastingSkillID(int InSkillID);// 0x5d9c398
	bool IsCastingSkill();// 0x5d9c324
	bool HandleTriggerParamsEvent(int SkillID, byte EventType);// 0x4033584
	void HandleSkillStop(int SkillID, enum StopReason);// 0x5d9c1d4
	void HandleSkillStart(int SkillID);// 0x5d9c0f4
	UAEBlackboard* GetUAEBlackboardBySkillId(int SkillID);// 0x5d9c00c
	UAEBlackboard* GetUAEBlackboard(UTSkill* InSkill);// 0x5d9bf2c
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x5d9be44
	UTSkillStateSyncData[] GetSkillState();// 0x5d9bdb0
	int GetSkillSlotBySkillID(int SkillID);// 0x5d9bcd4
	int GetSkillSlotBySkill(UTSkill* Skill);// 0x5d9bbf4
	UTSkill*[] GetSkillsByGroup(FName SkillGroup);// 0x5d9babc
	int GetSkillLevel(int SkillID);// 0x5d9b9e0
	int GetSkillLastPhase(UTSkill* Skill);// 0x5d9b900
	int GetSkillIDFromSkillIndex(int InSkillIndex);// 0x5d9b818
	int GetSkillIDByClass(class Object SkillClass);// 0x5d9b72c
	int GetSkillCurPhase(UTSkill* Skill);// 0x5d9b64c
	UTSkill* GetSkillByName(FString SkillName);// 0x5d9b4e4
	UTSkill* GetSkillByClassName(FString SkillClassName);// 0x5d9b37c
	UTSkillCreateData GetSkillBaseData(int SkillID);// 0x5d9b288
	UTSkill* GetSkill(int SkillID);// 0x5d9b1a0
	int GetReplacedSkill(int OldSkillID);// 0x5d9b0c4
	byte GetRealOwnerRoleSafety();// 0x5d9b03c
	float GetLastCastTime(int SkillID);// 0x5d9af60
	float GetLastCastFinishTime(int SkillID);// 0x5d9ae84
	int[] GetCurUsingSkillIDS();// 0x5d9adf0
	UTSkill*[] GetCurSkills();// 0x5d9ad5c
	UTSkillPhase*[] GetCurSkillPhases();// 0x5d9acc8
	UTSkillPhase* GetCurSkillPhase(int InSkillSlot);// 0x5d9abec
	int[] GetCurSkillIDs();// 0x5d9ab6c
	int GetCurSkillID(UTSkill* Skill);// 0x5d9aa8c
	UTSkill* GetCurSkill(int InSkillSlot);// 0x5d9a9b0
	int[] GetCurMonopolizeSkills();// 0x5d9a91c
	int FindRelatedCurSkillID(int SkillID, out int OutRelatedSkillSlot, bool bPeekSlotIndex);// 0x5d9a710
	void DynamicRemoveSkill(int InSkillID);// 0x5d9a630
	void DynamicAddSkill(int InSkillID);// 0x5d9a550
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x5d9a3e0
	void ClearSkill();// 0x5d9a378
	void ClearRepParams();// 0x5d9a310
	void ClearInitParams();// 0x5d9a2a8

--------------------------------
Class: UTSkillLastCastInfo
	int SkillID;//[Offset: 0x0, Size: 4]
	float LastCastTime;//[Offset: 0x4, Size: 4]
	float LastCastFinishTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SkillActiveRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	int SkillLevel;//[Offset: 0x4, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkillDynamicRepData
	SkillDynamicState[] SkillData;//[Offset: 0x0, Size: 16]

--------------------------------
Class: SkillDynamicState
	int SkillID;//[Offset: 0x0, Size: 4]
	bool bAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: SkillCDRepData
	int SkillID;//[Offset: 0x0, Size: 4]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x8, Size: 16]

--------------------------------
Class: UTSkillSyncData_CD
	int SkillCDIndex;//[Offset: 0x0, Size: 4]
	float LastActiveTime;//[Offset: 0x4, Size: 4]
	bool bIsCDReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIsTickFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	float InitEnergy;//[Offset: 0xc, Size: 4]
	float MaxEnergy;//[Offset: 0x10, Size: 4]
	float CurEnergy;//[Offset: 0x14, Size: 4]
	float DeltaEnergy;//[Offset: 0x18, Size: 4]
	float SyncCount;//[Offset: 0x1c, Size: 4]
	float TickCountTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 16]
	Actor* FromPawn;//[Offset: 0x10, Size: 8]
	int SkillID;//[Offset: 0x18, Size: 4]
	int SkillPhaseID;//[Offset: 0x1c, Size: 4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	byte HitSurfaceType;//[Offset: 0x22, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x24, Size: 12]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 16]
	Actor* FromPawn;//[Offset: 0x10, Size: 8]
	int SkillID;//[Offset: 0x18, Size: 4]
	int SkillPhaseID;//[Offset: 0x1c, Size: 4]
	byte HitSurfaceType;//[Offset: 0x20, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x24, Size: 12]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 4]
	int Seed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SkillParamater
	bool bUseTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName SkillTag;//[Offset: 0x8, Size: 8]
	enum SkillType;//[Offset: 0x10, Size: 1]
	float CDRecoveryScale;//[Offset: 0x14, Size: 4]
	float SkillRuntimeScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: UTMutilSkillSynData
	int CurSkillID;//[Offset: 0x0, Size: 4]
	int Token;//[Offset: 0x4, Size: 4]
	int PhaseIndexes;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UTSkillSynSinglePhaseData
	int CurSkillID;//[Offset: 0x0, Size: 4]
	int CurSkillPhase;//[Offset: 0x4, Size: 4]
	byte UpdateFlag;//[Offset: 0x8, Size: 1]

--------------------------------
Class: UTReplaceSkillData
	int OldSkillID;//[Offset: 0x0, Size: 4]
	int NewSkillID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UTSkillBBUploadData
	UAEBlackboardKeySelector[] KeySelectors;//[Offset: 0x0, Size: 16]

--------------------------------
Class: UTSkillStateSyncData
	UTSkillStateSyncDataParam SyncParam;//[Offset: 0x0, Size: 2]
	int SkillID;//[Offset: 0x4, Size: 4]
	bool bSkillActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x10, Size: 16]

--------------------------------
Class: UTSkillStateSyncDataParam
	bool bSyncActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSyncCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: UTSkillWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* SkillManager;//[Offset: 0x448, Size: 8]
	int SkillID;//[Offset: 0x450, Size: 4]
	float TickInterval;//[Offset: 0x454, Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	void TriggerPassiveEvent(byte SkillEvent);// 0x5db0074
	void TriggerEvent(byte SkillEvent);// 0x5daff94
	void SetSkillManager(UTSkillManagerComponent* manager);// 0x5dafebc
	void SetSkillID(int InSkillID);// 0x5dafde8
	void RemoveSkillUI();// 0x5dafd80
	void OnSkillStopEvent(int InSkillID, enum InStopReason);// 0x5dafc30
	void OnSkillStartEvent(int InSkillID);// 0x5dafb50
	bool IsTickFinish();// 0x5dafae4
	bool IsCDReady();// 0x5dafa78
	FString GetSkillName();// 0x5daf9e4
	UTSkillManagerComponent* GetSkillManager();// 0x5daf97c
	int GetSkillID();// 0x5daf914
	float[] GetSkillCDProgess();// 0x5daf880
	UTSkillCDBase*[] GetSkillCDBases();// 0x5daf800
	UTSkill* GetSkill();// 0x5daf798
	float GetMaxEnergy();// 0x5daf730
	PlayerController* GetLocalPlayerController();// 0x5daf6c8
	float GetEnergyValue();// 0x5daf660
	float GetEnergyThreshold();// 0x5daf5f8
	float GetDeltaEnergy();// 0x5daf590
	void DoRemove();// 0x5daf530

--------------------------------
Class: LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	FString LuaFilePath;//[Offset: 0x430, Size: 16]
	bool bEnableBlueprintTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]

--------------------------------
Class: UTSkillCDBase.LuaObject.Object
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0xa0, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0xa8, Size: 8]
	enum cdType;//[Offset: 0xb0, Size: 1]
	FString cdTypeStr;//[Offset: 0xb8, Size: 16]
	UTSkillManagerComponent* CurOwnerManager;//[Offset: 0xc8, Size: 8]
	bool StopConsumCD();// 0x5d8bc98
	bool IsTickFinish();// 0x5d8bc24
	bool IsCDReady();// 0x5d8bbb0
	float GetCurrentTime();// 0x5d8bb40
	bool ForceConsumCD();// 0x5d8bacc
	bool ConsumCD();// 0x5d8ba58

--------------------------------
Class: LuaObject.Object
	FString LuaFilePath;//[Offset: 0x90, Size: 16]

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	byte SkillEventType;//[Offset: 0x60, Size: 1]
	FName[] InterestedOwnerTags;//[Offset: 0x68, Size: 16]
	FName PreEventActionTag;//[Offset: 0x78, Size: 8]
	UTSkillEffect* SkillEffect;//[Offset: 0x80, Size: 8]
	SkillConditionWarpper[] Conditions;//[Offset: 0x88, Size: 16]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x98, Size: 16]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 8]

--------------------------------
Class: StatusChange
	class STBaseBuffStatusType* StatusName;//[Offset: 0x0, Size: 8]
	bool StatusValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: STBaseBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	UTSkillAction* BuffAction;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.Object
	UTSkillActionCreateData BaseData;//[Offset: 0x78, Size: 4]
	UTSkillAction* OwnerPeriodAction;//[Offset: 0x80, Size: 8]
	bool bClearTimerAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	Object* EventObj;//[Offset: 0x90, Size: 8]
	void UpdateAction_Internal(float DeltaSeconds);// 0x5d8572c
	void UpdateAction(UTSkillManagerComponent* SkillManagerComponent, float DeltaSeconds);// 0x5d855e8
	void UndoAction_Internal();// 0x5d85580
	void UndoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x5d854a8
	void TimerRealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x5d853d0
	void Reset_Internal();// 0x5d85368
	void Reset(ActorComponent* SkillManagerComponent);// 0x5d85290
	bool RealDoAction_Internal();// 0x5d8521c
	bool RealDoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x5d85138
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x5d84fe4
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x5d84e90
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x5d84d3c
	void OnAsyncLoadAssetDone(UTSkillManagerComponent* SkillManagerComponent);// 0x5d84c64
	bool JudgeNeedPhaseWait();// 0x5d84bf0
	bool DoAction(UTSkillManagerComponent* SkillManagerComponent);// 0x5d84b00

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0, Size: 4]

--------------------------------
Class: BuffEventActionItem
	STBaseBuffEventType* EventType;//[Offset: 0x0, Size: 8]
	UTSkillAction* BuffEventAction;//[Offset: 0x8, Size: 8]

--------------------------------
Class: STBaseBuffEventType.Object

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110, Size: 1]
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0x114, Size: 4]
	int MaxCheatTimes;//[Offset: 0x118, Size: 4]
	float TolerateDistanceFractor;//[Offset: 0x11c, Size: 4]
	float MaxPacketLossRate;//[Offset: 0x120, Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0x124, Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0x128, Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0x12c, Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0x130, Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	int MaxShootPointPassWall;//[Offset: 0x138, Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x13c, Size: 4]
	float MaxSkeletonLength;//[Offset: 0x140, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x144, Size: 4]
	int MaxLocusFailTime;//[Offset: 0x148, Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x14c, Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x150, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x154, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x158, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x15c, Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x168, Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x174, Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x180, Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x18c, Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x198, Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x1a4, Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x1b0, Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x1bc, Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x1c8, Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x1d4, Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x1e0, Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x1ec, Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x1f8, Size: 12]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x278, Size: 144]
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x308, Size: 88]
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0x360, Size: 52]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x398, Size: 136]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x420, Size: 60]
	RealtimeMoveSpeedCheck RealtimeMoveSpeedCheck;//[Offset: 0x488, Size: 32]
	MoveCheatAntiStrategy6 MoveCheatAntiStrategy6;//[Offset: 0x4a8, Size: 1396]
	float MaxJumpHeight;//[Offset: 0xa20, Size: 4]
	Character* CharacterOwner;//[Offset: 0xa28, Size: 8]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa94, Size: 1]
	int ServerControlMaxThreshold;//[Offset: 0xa9c, Size: 4]
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x342e604
	void RefreshRealMaxJumpHeight();// 0x342e5f0
	void Ping2Server(float ServerTime, float ClientTime, const Vector_NetQuantize100 ClientLoc, float MaxSpeed);// 0x342e494
	void Ping2Client(float ServerTime);// 0x342e418
	void OnPreReconnectOnServer();// 0x342e404
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x342e1b0
	void DebugDrawLine(const Vector Start, const Vector End);// 0x342e100
	void ClearJumpLimit();// 0x342e0ec

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x4, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x8, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0xc, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x10, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x14, Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x18, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x1c, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x20, Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x24, Size: 4]
	int MaxClientSpeed;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy2
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x4, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x8, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0xc, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x10, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x14, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CharacterZMoveDistanceCheck
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxAllowMoveZHeight;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0, Size: 4]
	float DataSampleInterval;//[Offset: 0x4, Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 4]
	float CheatLockTime;//[Offset: 0xc, Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x80, Size: 8]

--------------------------------
Class: ClientTimeSpeedCheck
	float CheckTimeDeltaInterval;//[Offset: 0x24, Size: 4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x28, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x2c, Size: 4]
	float MaxServerTimeDelta;//[Offset: 0x30, Size: 4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x34, Size: 4]
	int MaxProcessCounterOneFrame;//[Offset: 0x38, Size: 4]

--------------------------------
Class: RealtimeMoveSpeedCheck

--------------------------------
Class: MoveCheatAntiStrategy6
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x8, Size: 4]
	float MaxVectorAccAngel;//[Offset: 0xc, Size: 4]
	float MaxSumVectorLength;//[Offset: 0x10, Size: 4]
	float MaxVectorAccTime;//[Offset: 0x14, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ShovelInfo

--------------------------------
Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0x110, Size: 8]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0x118, Size: 8]
	void HandleOwnerDeath(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x32b566c

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0x110, Size: 4]
	float TileRemovalRadius;//[Offset: 0x114, Size: 4]

--------------------------------
Class: GroupPhysicsComponent.ActorComponent.Object
	PrimitiveComponent*[] PrimitiveComponents;//[Offset: 0x140, Size: 16]
	void ResetPhysicsGroup();// 0x33cc728
	void K2_GroupPhysics(int InMaskFilter, bool EnableCache);// 0x33cc660
	int K2_GetQueryMask();// 0x33cc62c
	int K2_GetPhysicsGroup();// 0x33cc5f8
	bool IsPhysicsGrouped();// 0x33cc5dc
	void GroupPhysics(byte MaskFilter, bool EnableCache);// 0x33cc514
	byte GetQueryMask();// 0x33cc4e0
	byte GetPhysicsGroup();// 0x33cc4ac

--------------------------------
Class: ActorAttributeComponent.ActorComponent.Object
	FString tableName;//[Offset: 0x110, Size: 16]
	void UpdateAttribute(int TemplateID);// 0x322b110
	void InitializeFollow();// 0x322b0f4
	void Initialize(Actor* Actor);// 0x322b070

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0, Size: 1]
	int8 Disabled;//[Offset: 0x1, Size: 1]

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0x110, Size: 8]
	float UpdateHitBoxDeltaTime;//[Offset: 0x118, Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	Transform[] HitBoxs_Stand_Tran;//[Offset: 0x120, Size: 16]
	Transform[] HitBoxs_Prone_Tran;//[Offset: 0x130, Size: 16]
	PrimitiveComponent*[] HitBoxs_Stand;//[Offset: 0x140, Size: 16]
	PrimitiveComponent*[] HitBoxs_Prone;//[Offset: 0x150, Size: 16]
	FString HitBox_Stand_Tag;//[Offset: 0x168, Size: 16]
	FString HitBox_Prone_Tag;//[Offset: 0x178, Size: 16]
	bool bDebugCollisionLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	OpenCollisionLODAngle[] ConfigCollisionDistSqAngles;//[Offset: 0x190, Size: 16]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x1a0, Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x1a4, Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x1a8, Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x1ac, Size: 4]
	bool bCloseCharacterMeshCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	BodyTypeDef ProneBodyDef;//[Offset: 0x1b4, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x1bc, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x1c4, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x1cc, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x1d4, Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x1e0, Size: 80]
	float PawnCollisionCountdown;//[Offset: 0x230, Size: 4]
	bool IsRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x238, Size: 4]
	bool IsRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x3456954
	void UpdateAllInstanceBodyTransform(int Type);// 0x34568d0
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x3456844
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x34567a4
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x34566e4
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x3456580
	byte GetCurHitPartJugementType();// 0x345654c
	void CloseBodyBulletCollision();// 0x3456530
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x34563a0

--------------------------------
Class: OpenCollisionLODAngle
	float DistSq;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0x110, Size: 1]
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0x118, Size: 80]
	TickListItem[] NeedTickComponentList;//[Offset: 0x168, Size: 16]
	byte RoleBits;//[Offset: 0x178, Size: 1]

--------------------------------
Class: TickListItem
	ActorComponent* Comp;//[Offset: 0x0, Size: 8]
	enum RoleType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CharacterMaterialComponent.ActorComponent.Object

--------------------------------
Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0, Size: 12]
	Vector PitchOffset;//[Offset: 0xc, Size: 12]
	Vector FootOffset;//[Offset: 0x18, Size: 12]
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 12]

--------------------------------
Class: ActivitySyncData
	bool bIsDuringActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIsMovementDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Vector AttachedOffsetLocation;//[Offset: 0x4, Size: 12]
	Rotator AttachedOffsetRotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0, Size: 1]
	float TotalTime;//[Offset: 0x4, Size: 4]
	float AttachWeaponTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 8]
	FString SwitchGroupName;//[Offset: 0x8, Size: 16]
	FString SwitchValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	bool bHasFallInWaterFully;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x151, Size: 1]
	float BreathMax;//[Offset: 0x164, Size: 4]
	float AssistAccountableDuration;//[Offset: 0x168, Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0x16c, Size: 4]
	bool bNearDeathOnSinglePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0x178, Size: 8]
	int MaxDeathTimes;//[Offset: 0x180, Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	int NDStatusEnterTimes;//[Offset: 0x188, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x190, Size: 8]
	float EnterNearDeathSeconds;//[Offset: 0x198, Size: 4]
	float Breath;//[Offset: 0x19c, Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0x1a0, Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0x1a4, Size: 4]
	float NDDecreaseRate;//[Offset: 0x1a8, Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x1b0, Size: 8]
	Actor* DamageCauserRecorded;//[Offset: 0x1b8, Size: 8]
	DamageEvent DamageEventRecorded;//[Offset: 0x1c0, Size: 16]
	delegate OnPreEnterNearDeath;//[Offset: 0x1d8, Size: 16]
	float BeCarriedReduceRate;//[Offset: 0x1e8, Size: 4]
	float BeEnemyCarriedReduceRate;//[Offset: 0x1ec, Size: 4]
	bool bEnableSwimWhileDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	float SetHealthSafety(float AddVal);// 0x353af28
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime);// 0x353ae1c
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime);// 0x353ad10
	void ResetDataOnRespawn();// 0x353acfc
	void RescueFinishSuccessfully();// 0x353ace8
	void OnRep_BreathChanged();// 0x353acd4
	bool IsNearDeathInvincible();// 0x353ac9c
	bool IsHealthAlive();// 0x353ac64
	bool IsHaveLastBreathStatus();// 0x353ac2c
	bool IsFinishedLastBreathStatus();// 0x353abf4
	void InitializeOwner(Pawn* TempPawn);// 0x353ab78
	bool GotoLastBreathStatus(Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, float _finalDamage, bool IsHeadShot);// 0x353a9d4
	Controller* GetRecordedEventInstigator();// 0x353a9b8
	float GetBreathMax();// 0x353a99c
	float GetBreath();// 0x353a980
	void EnterSwimWhileDying();// 0x353a96c
	void EnableDirectlyDie(bool bEnable);// 0x353a8e8
	void DoFinishLastBreath();// 0x353a8d4
	void DidFinishLastBreath();// 0x353a8c0
	void ClearNearDeathTeammate();// 0x353a8ac
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x353a7dc
	void AddDeadBuff();// 0x353a7c8

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0x154, Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0x158, Size: 4]
	anPickerData FanData;//[Offset: 0x15c, Size: 20]
	STExtraBaseCharacter* RescueWho;//[Offset: 0x188, Size: 8]
	STExtraBaseCharacter* CarryWho;//[Offset: 0x190, Size: 8]
	float RescueingStatusStartTimeSeconds;//[Offset: 0x198, Size: 4]
	float RestoringDuration;//[Offset: 0x1b4, Size: 4]
	FString DurationAttrModifyRef;//[Offset: 0x1b8, Size: 16]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x1c8, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x1d0, Size: 8]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x353c9fc
	void WaitingConfirmState_ActOnUnsatisfied();// 0x353c9e8
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x353c96c
	bool WaitingConfirmCarryState_IsConditionSatisfied();// 0x353c934
	void WaitingConfirmCarryState_ActOnUnsatisfied();// 0x353c920
	void WaitingConfirmCarryState_ActOnSatisfied(float DeltaTime);// 0x353c8a4
	void TickAsHelper(float DeltaTime);// 0x353c828
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x353c778
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x353c6fc
	void SelectedCarryEnemyTargetChangeNotifyHUD(Pawn* previousTarget);// 0x353c680
	bool RescueingState_IsConditionSatisfied();// 0x353c648
	void RescueingState_ActOnUnsatisfied();// 0x353c634
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x353c5b8
	void RescueingProcessFinished();// 0x353c5a4
	void RefreshTargetChangeNotifyHUD();// 0x353c590
	bool PlayerConfirmToRescueClientSide();// 0x353c558
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x353c48c
	void OnRep_IsRescueingOtherStatusChange();// 0x353c478
	bool IsInRescueingStatus();// 0x353c440
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer);// 0x353c38c
	float GetRestoringDuration();// 0x353c358
	void DrawDebugFan();// 0x353c344

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float Angle;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0x110, Size: 8]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0x118, Size: 8]
	STExtraBaseCharacter* Target;//[Offset: 0x128, Size: 8]
	float CanFollowDist;//[Offset: 0x130, Size: 4]
	float QuitFollowAngleInput;//[Offset: 0x134, Size: 4]
	float QuitFollowDist;//[Offset: 0x138, Size: 4]
	float PointDensityTimeInterval;//[Offset: 0x13c, Size: 4]
	float DistThrehold;//[Offset: 0x140, Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x148, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x150, Size: 8]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x190, Size: 16]
	TargetKeyOperation* CurOp;//[Offset: 0x1a0, Size: 8]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x3536410
	void WaitingConfirmState_ActOnUnsatisfied();// 0x35363fc
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x3536380
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x35362f4
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x3536278
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x35361fc
	bool PlayerStopFollow();// 0x35361c4
	bool PlayerConfirmToFollow();// 0x353618c
	void InitializeOwner(Pawn* _TempPawn);// 0x3536110
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x3536094
	bool FollowingState_IsConditionSatisfied();// 0x353605c
	void FollowingState_ActOnUnsatisfied();// 0x3536048
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x3535fcc

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x3670044
	byte Start();// 0x3670008
	bool IsValidate();// 0x366ffc8
	void DebugDraw(Color DebugColor, bool isPersist);// 0x366ff04
	void Awake();// 0x366fee8

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x88, Size: 8]
	STExtraBaseCharacter* Target;//[Offset: 0x90, Size: 8]
	byte Update(float DeltaTime);// 0x366ee54
	FString ToString();// 0x366edb0
	void TaskRemoved();// 0x366ed94
	byte Start();// 0x366ed58
	bool IsValidate();// 0x366ed18
	bool IsReachable();// 0x366ecd8
	byte Finish();// 0x366ec9c
	void DebugDraw(Color DebugColor, bool isPersist);// 0x366ebd8
	void Awake();// 0x366ebbc

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x418, Size: 4]
	float SpringArmLengthModifier2;//[Offset: 0x41c, Size: 4]
	float SpringArmLengthModifier3;//[Offset: 0x420, Size: 4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x428, Size: 8]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	bool bUseHitPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45a, Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45b, Size: 1]
	float ResultMinPitch;//[Offset: 0x45c, Size: 4]
	float ResultMaxPitch;//[Offset: 0x460, Size: 4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]
	bool bCameraTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x465, Size: 1]
	float FreeCamRotationReturnRate;//[Offset: 0x474, Size: 4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x478, Size: 28]
	CameraOffsetData ProneCameraData;//[Offset: 0x494, Size: 28]
	CameraOffsetData IndoorCameraData;//[Offset: 0x4b0, Size: 28]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x4cc, Size: 28]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x4e8, Size: 28]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x504, Size: 28]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x520, Size: 28]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x53c, Size: 28]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x558, Size: 28]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x574, Size: 28]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x590, Size: 28]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x5ac, Size: 28]
	CameraOffsetData VaultCameraData;//[Offset: 0x5c8, Size: 28]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x5e4, Size: 28]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x600, Size: 28]
	CameraOffsetData InFireBalloonCameraData;//[Offset: 0x61c, Size: 28]
	CameraOffsetData ShoulderLeftCameraData;//[Offset: 0x638, Size: 28]
	CameraOffsetData ShoulderRightCameraData;//[Offset: 0x654, Size: 28]
	CameraOffsetData PeekLeftCameraDataInShoudler;//[Offset: 0x670, Size: 28]
	CameraOffsetData PeekRightCameraDataInShoudler;//[Offset: 0x68c, Size: 28]
	float SocketOffsetInterpSpeedInShoulder;//[Offset: 0x6a8, Size: 4]
	float TargetOffsetInterpSpeedInShoulder;//[Offset: 0x6ac, Size: 4]
	float ArmLengthInterpSpeedInShoulder;//[Offset: 0x6b0, Size: 4]
	CameraOffsetData InsectCameraData;//[Offset: 0x6b4, Size: 28]
	CameraOffsetData SkillCameraData;//[Offset: 0x6d0, Size: 28]
	bool bIsGunShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 1]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ed, Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x6f0, Size: 28]
	bool NeedTraceHeadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70c, Size: 1]
	bool bUseFixedTraceTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70d, Size: 1]
	Vector TraceTagetLocation;//[Offset: 0x710, Size: 12]
	float AdditionalSocketOffetZMax;//[Offset: 0x720, Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x724, Size: 8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x730, Size: 8]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x738, Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x73c, Size: 4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x745, Size: 1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x746, Size: 1]
	float OffsetCountTime;//[Offset: 0x748, Size: 4]
	float OffSetDurTime;//[Offset: 0x74c, Size: 4]
	float RevertMoveSpeed;//[Offset: 0x750, Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x758, Size: 8]
	Transform PrevRelativeTrans;//[Offset: 0x760, Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0x790, Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0x7a0, Size: 16]
	void SetSelfieCameraDefRotation();// 0x332da98
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x332da14
	void SetCustomCameraDataEnable(out CameraOffsetData CustomCameraData, bool IsEnable);// 0x332d910
	void SetCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x332d850
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x332d6f8
	void DelayRotationLagEnabledEnd();// 0x332d6e4
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x332d61c
	void DelayRotationBackLagEnabledEnd();// 0x332d608
	void DelayRotationBackLagEnabled(bool bEnabled, float Time, out const Rotator InRotation);// 0x332d4f8

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x378, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x37c, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x380, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x3d0, Size: 28]
	CameraOffsetData DefaultCameraData;//[Offset: 0x3ec, Size: 28]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x410, Size: 8]
	void OnRespawned();// 0x363c4f8
	Rotator GetTargetRotation();// 0x363c4b8
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x363c360
	void ClearCameraData();// 0x363c344

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0, Size: 4]
	Vector AkLocation;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DamageCauserRecordData
	Controller* Causer;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]
	float Damage;//[Offset: 0xc, Size: 4]
	int StatusChangeMargin;//[Offset: 0x10, Size: 4]
	int DamageType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int WeaponId;//[Offset: 0x20, Size: 4]
	int FloorType;//[Offset: 0x24, Size: 4]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e5, Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x7e8, Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x7ec, Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x7f0, Size: 4]
	float MaxPrisonmentMove;//[Offset: 0x7f4, Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f9, Size: 1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 1]
	bool bNotUseClientCustomMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x811, Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x814, Size: 4]
	float EnterShovelCD;//[Offset: 0x818, Size: 4]
	float DSEnterShovelCD;//[Offset: 0x81c, Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x820, Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x824, Size: 4]
	float UseVelocityDirMinSpeed;//[Offset: 0x828, Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x82c, Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x830, Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x834, Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x838, Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x83c, Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x840, Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x844, Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x848, Size: 4]
	float MinusGradeShovelingDCC;//[Offset: 0x84c, Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x850, Size: 4]
	float StopShovelingSpeed;//[Offset: 0x858, Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x85c, Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x860, Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x864, Size: 4]
	float ShovelingFPPFovVaule;//[Offset: 0x868, Size: 4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x86c, Size: 4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x870, Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x874, Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x878, Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x87c, Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x880, Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x884, Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x888, Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x88c, Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x890, Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x898, Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x8b0, Size: 8]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x8b8, Size: 8]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x8c0, Size: 8]
	bool bIgnoreClientMovementModeErrorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c8, Size: 1]
	bool bIgnoreClientMovementModeSkillChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c8, Size: 1]
	float nowShovelingSpeed;//[Offset: 0x8cc, Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x8d0, Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc, Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dd, Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x8df, Size: 1]
	float PreShovelFov;//[Offset: 0x8e0, Size: 4]
	delegate OnClientAdjustPosition;//[Offset: 0x900, Size: 16]
	delegate OnCharacterServerMoveDelegate;//[Offset: 0x910, Size: 16]
	delegate OnShovelStateChangeForBP;//[Offset: 0x920, Size: 16]
	delegate PostServerMoveDelegate;//[Offset: 0x930, Size: 16]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x948, Size: 8]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 1]
	float TimeSpeedFactor;//[Offset: 0x954, Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x958, Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x959, Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95a, Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x95c, Size: 4]
	bool bIgnoreChangingMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 1]
	bool bEnableAdjustFloorHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x961, Size: 1]
	bool bEnableJumpOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x962, Size: 1]
	float JumpOffVelocityFactor;//[Offset: 0x964, Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x969, Size: 1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x96c, Size: 4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x970, Size: 1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x970, Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x974, Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x978, Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x97c, Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x980, Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x984, Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x988, Size: 4]
	float WalkSpeedCurveScale;//[Offset: 0x98c, Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x990, Size: 8]
	float ProneFloorAngle;//[Offset: 0x998, Size: 4]
	float ProneFloorZ;//[Offset: 0x99c, Size: 4]
	float JumpFloorAngle;//[Offset: 0x9a0, Size: 4]
	float JumpFloorZ;//[Offset: 0x9a4, Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x9a8, Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x9ac, Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b0, Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x9b4, Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x9b8, Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d4, Size: 1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d5, Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d6, Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x9d8, Size: 4]
	bool ForceSimulatedOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9dc, Size: 1]
	float CurrentEnterShovelCD;//[Offset: 0xad4, Size: 4]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 1]
	float CheckDistanceAhead;//[Offset: 0xadc, Size: 4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae0, Size: 1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0xae4, Size: 4]
	float BaseSolvedWallCheckDistance;//[Offset: 0xafc, Size: 4]
	float BaseSolvedWallTraceDistance;//[Offset: 0xb00, Size: 4]
	float BaseSolvedWallOutDistance;//[Offset: 0xb04, Size: 4]
	float BaseSolvedWallMoveWithForwardCos;//[Offset: 0xb08, Size: 4]
	bool bStepUpHardIgnoreEdgeTolerance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0c, Size: 1]
	float fStepDownEdgeToleranceRate;//[Offset: 0xb10, Size: 4]
	float fStepDownSuccessEdgeToleranceRate;//[Offset: 0xb14, Size: 4]
	float MaxBaseStepUpHeight;//[Offset: 0xb18, Size: 4]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1c, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSTickDistanceInternal;//[Offset: 0xb20, Size: 16]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 1]
	CharacterDistanceSquareTickInternal[] AIDSPhysicsQueryDistanceInternal;//[Offset: 0xb40, Size: 16]
	float DSAIDistanceOptimizeEnhanceAngle;//[Offset: 0xb50, Size: 4]
	float AIMovementSimulatePredictTime;//[Offset: 0xb68, Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0xb70, Size: 8]
	bool bOpenServerControlPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8d, Size: 1]
	float MaxFlyAcceleration;//[Offset: 0xb94, Size: 4]
	float fSimulateInterpolateSmoothLocationTime;//[Offset: 0xbd8, Size: 4]
	int nMaxSimulateCacheNum;//[Offset: 0xc08, Size: 4]
	float SimulateBufferDelayLagThrehold;//[Offset: 0xc10, Size: 4]
	float SimulateBufferDelaySecondsWhenLag;//[Offset: 0xc18, Size: 4]
	float SimulateBufferDelaySecondsWhenNoLag;//[Offset: 0xc1c, Size: 4]
	float fServerMoveNetLagScaleSecMin;//[Offset: 0xc20, Size: 4]
	float fServerMoveNetLagScaleSecMax;//[Offset: 0xc24, Size: 4]
	float fServerMoveAllowDiscrepancySquare;//[Offset: 0xc28, Size: 4]
	float fSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xc2c, Size: 4]
	float fNoSkipProxyPredictionOnNetUpdateSquare;//[Offset: 0xc30, Size: 4]
	float fLessThanSkipProxyPredictionOnNetUpdateCosTheta;//[Offset: 0xc34, Size: 4]
	float fSimulatePredictionNoAttenuationSec;//[Offset: 0xc3c, Size: 4]
	float fSimulatePredictionAttenuationSecMax;//[Offset: 0xc40, Size: 4]
	float fSimulatePredictionAttenuationRate;//[Offset: 0xc44, Size: 4]
	float fSimulatePredictionAttenuationRateNearlyNoChg;//[Offset: 0xc48, Size: 4]
	CustomSkillMoveData DirectMoveData;//[Offset: 0xc60, Size: 48]
	CustomSkillMoveData AirJumpData;//[Offset: 0xc90, Size: 48]
	PrimitiveComponent* CurrentClientMovementBase;//[Offset: 0xcd8, Size: 8]
	float ComputeFloorConsiderClientPosDiffSizeSqMax;//[Offset: 0xce8, Size: 4]
	float SkilDirectMoveInertiaRatio;//[Offset: 0xd08, Size: 4]
	float SkilAirJumpJoystickForceSize;//[Offset: 0xd0c, Size: 4]
	float ReportSimulateDragConfigSeconds;//[Offset: 0xd10, Size: 4]
	bool UpdatedComponentWithBase(float DeltaSeconds, Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x3539144
	void ToggleUserCmdDelta(bool Val);// 0x3539090
	void TimeSpeedCheck(bool Val);// 0x3538fdc
	void SeverReportSimulateDrag(int DragCount);// 0x3538f2c
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x3538e80
	void SetProneFloorZ(float InProneFloorZ);// 0x3538e04
	void SetProneFloorAngle(float InProneFloorAngle);// 0x3538d88
	void SetJumpFloorZ(float InJumpFloorZ);// 0x3538d0c
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x3538c90
	void SetBase(PrimitiveComponent* NewBase, const FName BoneName, bool bNotifyActor);// 0x3538b90
	void ServerUserMoveCmdOld(int ClientApplySequence, const byte[] UserCmdDelta);// 0x3538a80
	void ServerUserMoveCmdDual(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd, const byte[] UserCmdDelta);// 0x3538890
	void ServerUserMoveCmd(uint32 Sequence, uint32 Checksum, PrimitiveComponent* ClientMovementBase, const byte[] UserCmd);// 0x3538700
	void ReleaseSimulateMoveCaches(bool bDestroy);// 0x353867c
	void RefreshCharacterWithBase();// 0x3538668
	void ProcessCacheSimulateRepMove(float DeltaSeconds);// 0x35385ec
	void Ping2Server(float ServerTime, float ClientTime);// 0x3538514
	void Ping2Client(float ServerTime);// 0x3538498
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x35383d4
	void OnRespawned();// 0x35383b8
	void OnRecycled();// 0x353839c
	void OnRecoverOnServer();// 0x3538380
	void OnPreReconnectOnServer();// 0x353836c
	void OnClientCloseUserCmdDelta();// 0x3538358
	float K2_GetProneFloorZ();// 0x3538324
	float K2_GetProneFloorAngle();// 0x35382f0
	float K2_GetJumpFloorZ();// 0x35382bc
	float K2_GetJumpFloorAngle();// 0x3538288
	bool IsWalkable(out const HitResult Hit);// 0x35381cc
	bool IsSimulateWeakNetworkOptimize();// 0x3538194
	bool IsProning();// 0x353815c
	bool IsAutonomousWeakNetworkOptimize();// 0x3538124
	bool HasDsSwitchOpenWeakNetworkOptimize();// 0x35380ec
	STExtraBaseCharacter* GetSTCharacter();// 0x35380b8
	Vector GetPendingImpulse();// 0x3538090
	Vector GetLocationOffsetToBase();// 0x3538058
	float GetLastServerMoveTime();// 0x3538024
	bool GetIsOpenShovelingAbility();// 0x3537fec
	float GetHasPredictionSeconds(Vector PredictionDeltaLoc, Vector PredictionVelocity);// 0x3537f24
	Vector GetComputeFloorDistStartLocation();// 0x3537eec
	float GetClientCurrentSeconds();// 0x3537eb8
	Vector GetBaseLocation();// 0x3537e80
	Vector GetAcceleration();// 0x3537e48
	void EnterDirectMove(out const Vector Speed, float Time, CurveFloat* SpeedCurve);// 0x3537d3c
	void EnterAirJump(out const Vector Speed, float Time, CurveFloat* SpeedCurve);// 0x3537c30
	bool DragOnGround(float DeltaTime);// 0x3537ba0
	void DisableSimulateCorrection(bool bDisable);// 0x3537b1c
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x35378e0
	void ClientUserMoveCmdAck(int Sequence);// 0x3537864
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x35375e8
	void ChangePhysxShapeFlag();// 0x35375d4
	void CacheSimulateRepMove(out const RepMovement RepMove, float ServerTimeStamp);// 0x35374fc
	bool AllowClientLocationWithDSPrediction(out const Vector InClientLoc, float NetLagDiffScale);// 0x3537420

--------------------------------
Class: CharacterDistanceSquareTickInternal
	float DistanceSquare;//[Offset: 0x0, Size: 4]
	float TickInternal;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CustomSkillMoveData
	CurveFloat* SpeedCurve;//[Offset: 0x28, Size: 8]

--------------------------------
Class: SimLocalViewData
	float ViewPitch;//[Offset: 0x0, Size: 4]
	float ViewYaw;//[Offset: 0x4, Size: 4]
	float ViewRoll;//[Offset: 0x8, Size: 4]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: SimViewData
	uint16 ViewPitch;//[Offset: 0x0, Size: 2]
	uint16 ViewYaw;//[Offset: 0x2, Size: 2]
	byte ViewRoll;//[Offset: 0x4, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: InteractiveMoveActor.LuaActor.Actor.Object
	class InteractiveActorMoveComponent* MoveComponent;//[Offset: 0x490, Size: 8]
	byte InteractiveMoveType;//[Offset: 0x498, Size: 1]
	bool InFPPViewPitchLimitMaxEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 1]
	float InFPPViewPitchLimitMin;//[Offset: 0x49c, Size: 4]
	float InFPPViewPitchLimitMax;//[Offset: 0x4a0, Size: 4]
	float InFPPViewYawLimit;//[Offset: 0x4a4, Size: 4]

--------------------------------
Class: InteractiveActorMoveComponent.MovementComponent.ActorComponent.Object
	InteractiveMoveActor* TargetActor;//[Offset: 0x150, Size: 8]
	void OnRep_TargetActorNotify(InteractiveMoveActor* IMActor);// 0x33e6c70
	bool IsTakeOverJump();// 0x33e6c30
	bool IsInInteractiveState();// 0x33e6bf0
	void HandleJumpInput();// 0x33e6bd4
	void HandleEnterInput();// 0x33e6bb8

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0x110, Size: 4]
	int DetectThreshold;//[Offset: 0x114, Size: 4]
	float FoldFactor;//[Offset: 0x118, Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0x120, Size: 8]
	Vector BoxHalfSize;//[Offset: 0x130, Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0x13c, Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0x148, Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0x154, Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x160, Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x16c, Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x170, Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x17c, Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x188, Size: 12]
	int FoldFactorDelt;//[Offset: 0x194, Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x198, Size: 4]
	int TraceDis;//[Offset: 0x19c, Size: 4]
	float TickDeltTime;//[Offset: 0x1a0, Size: 4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	Actor*[] SweepIgnoreActors;//[Offset: 0x1b0, Size: 16]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x3476f44
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x3476e10

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0x158, Size: 16]
	float MaxBreathAmount;//[Offset: 0x168, Size: 4]
	float DrowningHurtHight;//[Offset: 0x16c, Size: 4]
	float SwimWaterNearHeight;//[Offset: 0x170, Size: 4]
	float SwimWaterBodyOffset;//[Offset: 0x174, Size: 4]
	float SwimWaterSufaceOffset;//[Offset: 0x178, Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0x17c, Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0x180, Size: 4]
	float BreathDeltaTime;//[Offset: 0x184, Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0x188, Size: 4]
	float MinSpeedScale;//[Offset: 0x18c, Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0x190, Size: 4]
	float MaxProneWaterHeight;//[Offset: 0x194, Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0x198, Size: 4]
	float RollMaxAngle;//[Offset: 0x19c, Size: 4]
	float DistoVolume;//[Offset: 0x1a0, Size: 4]
	bool ResetEnterWaterWhenVolumeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4, Size: 1]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x1b8, Size: 8]
	bool AdjustCharacterInvalidHeightInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	float CheckCharacterInWaterInternal;//[Offset: 0x1c4, Size: 4]
	float CharacterInWaterInvalidHeight;//[Offset: 0x1c8, Size: 4]
	CharacterMovementComponent* OwnerMovementComp;//[Offset: 0x1d0, Size: 8]
	STExtraBaseCharacter* OwnerPlayerCharater;//[Offset: 0x1d8, Size: 8]
	PhysicsVolume* UnderWaterBox;//[Offset: 0x1e0, Size: 8]
	float DyingSwimSpeedRate;//[Offset: 0x1e8, Size: 4]
	bool bDyingSwimChangeCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	void UpdateSwimCollisionHeightCpp();// 0x3483f48
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x3483ecc
	void OnPawnExitParachute();// 0x3483eb8
	void LeaveWater();// 0x3483ea4
	Actor* GetWaterObject();// 0x3483e70
	void EnterWater_BluePrint();// 0x4033584
	void EnterWater(Actor* WaterObject);// 0x3483df4
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x4033584

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x30, Size: 8]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x28, Size: 8]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x660, Size: 4]
	float AttachCheckDistance;//[Offset: 0x664, Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x668, Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x66c, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x670, Size: 8]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x690, Size: 16]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x6a0, Size: 16]
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x330e32c
	void UpdateDataWhenBagChangedOnAutonomous();// 0x330e318
	void RPC_Client_ResyncWeaponSpawnData(const SpawnAndBackpackWeaponReplicatedData[] SpawnWeaponData);// 0x330e1dc
	void OnRecoverOnServer();// 0x330e1c0
	void OnReconnectOnServer();// 0x330e1a4
	void OnReconnectOnClient();// 0x330e188
	void OnDisconnectToClientOnServer();// 0x330e174
	int GetBagLevel();// 0x330e138

--------------------------------
Class: PlayerVehAnimList
	int FrameCounter;//[Offset: 0x4, Size: 4]
	AnimationAsset* IdleAnim;//[Offset: 0x8, Size: 8]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0x10, Size: 8]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x18, Size: 8]
	AnimationAsset* LeanOutAnim;//[Offset: 0x20, Size: 8]
	AnimationAsset* LeanInAnim;//[Offset: 0x28, Size: 8]
	AnimationAsset* AimAnim;//[Offset: 0x30, Size: 8]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x38, Size: 8]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x40, Size: 8]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x48, Size: 8]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x50, Size: 8]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x58, Size: 8]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x60, Size: 8]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x68, Size: 8]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x70, Size: 8]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x78, Size: 8]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x80, Size: 8]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x88, Size: 8]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x90, Size: 8]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x98, Size: 8]
	AnimationAsset* Ski_Falling;//[Offset: 0xa0, Size: 8]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0xa8, Size: 8]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0xb0, Size: 8]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0xb8, Size: 8]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0xc0, Size: 8]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0xc8, Size: 8]
	AnimationAsset* MotorgliderSteerAnim;//[Offset: 0xd0, Size: 8]
	AnimationAsset* MotorgliderIdleAnim;//[Offset: 0xd8, Size: 8]
	AnimationAsset* VehicleDriverForwardAnim;//[Offset: 0xe0, Size: 8]

--------------------------------
Class: AnimVehParamList
	int FrameCounter;//[Offset: 0x0, Size: 4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	float VacateHight;//[Offset: 0x8, Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Rotator VehViewRotation;//[Offset: 0x10, Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x1c, Size: 12]
	byte SeatWeaponHoldType;//[Offset: 0x28, Size: 1]
	byte SeatSpecialType;//[Offset: 0x29, Size: 1]
	enum VehicleType;//[Offset: 0x2a, Size: 1]
	float LeanOutPercentage;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x20, Size: 8]

--------------------------------
Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0, Size: 4]
	float Durability;//[Offset: 0x4, Size: 4]
	float DamageReduceScale;//[Offset: 0x8, Size: 4]
	float DamageReduceScaleIgnoreDurability;//[Offset: 0xc, Size: 4]
	float BrokenArmorDamageReduceScale;//[Offset: 0x10, Size: 4]
	float DurabilityReduceScale;//[Offset: 0x14, Size: 4]
	FString BodyDurabilityIndexName;//[Offset: 0x18, Size: 16]
	float MomentumResistance;//[Offset: 0x28, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x30, Size: 8]

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 16]
	float EnergyMax;//[Offset: 0x10, Size: 4]
	float EnergyCurrent;//[Offset: 0x14, Size: 4]
	float EnergyPredict;//[Offset: 0x18, Size: 4]
	float AttenuationPeriod;//[Offset: 0x1c, Size: 4]
	float AttenuationAmount;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0, Size: 4]
	FString BuffName;//[Offset: 0x8, Size: 16]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x158, Size: 4]

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0, Size: 16]
	byte ShowType;//[Offset: 0x10, Size: 1]
	float Value;//[Offset: 0x14, Size: 4]
	float LimitValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	GameBaseInfo GameBaseInfo;//[Offset: 0x1a0, Size: 128]
	UAEGameMode* UAEGM;//[Offset: 0x220, Size: 8]
	void ServerSendGameStartFlow(out const ClientGameStartFlow ClientGameStartFlow);// 0x34ce920
	void ServerSendGameEndFlow(out const ClientGameEndFlow ClientGameEndFlow);// 0x34ce864
	void ReportVerifyInfoFlow();// 0x34ce804
	void ReportSecAttackFlow(const SecAttackFlow SecAttackFlow);// 0x34ce72c
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x34ce640
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x34ce55c
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x34ce484
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x34ce3a4
	void ReportGvoiceTeamQuit(const GvoiceTeamQuit teamQuit);// 0x34ce29c
	void ReportGvoiceTeamCreate(const GvoiceTeamCreate teamCreate);// 0x34ce194
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x34ce0bc
	void ReportGameSetting(const GameSetting GameSetting);// 0x34cdfc8
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x34cdee8
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x34cde10
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x34cdd30
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x34cdc50
	void ReportAimFlow(const AimFlow AimFlow);// 0x34cdb70
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x34cdae4
	void GetWeaponProperty(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int WeaponId, out int BulletID, out int BulletNum);// 0x34cd93c
	void CheckSendGameStartFlow();// 0x34cd928
	void CheckSendGameEndFlow();// 0x34cd914

--------------------------------
Class: UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	Object* UtilsPtr;//[Offset: 0x508, Size: 8]
	float GridCheckSize;//[Offset: 0x510, Size: 4]
	float DeepCheckSize;//[Offset: 0x514, Size: 4]
	float HeightCheckSize;//[Offset: 0x518, Size: 4]
	int MaxPlayerLimit;//[Offset: 0x51c, Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52c, Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52d, Size: 1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52e, Size: 1]
	bool bUseDefaultResultRules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52f, Size: 1]
	int AntiDataCD;//[Offset: 0x530, Size: 4]
	int WeatherID;//[Offset: 0x534, Size: 4]
	FString WeatherName;//[Offset: 0x538, Size: 16]
	int RoomMode;//[Offset: 0x548, Size: 4]
	int SeasonIdx;//[Offset: 0x54c, Size: 4]
	float MeteorShowerRatio;//[Offset: 0x550, Size: 4]
	FString ItemTableName;//[Offset: 0x558, Size: 16]
	FString ItemClassPath;//[Offset: 0x568, Size: 16]
	FString ReplayPushURL;//[Offset: 0x578, Size: 16]
	int ReplayType;//[Offset: 0x588, Size: 4]
	FString ReplayTitle;//[Offset: 0x590, Size: 16]
	enum EnableObserverEnemyTrace;//[Offset: 0x5a0, Size: 1]
	FString[] ItemSpawnTableList;//[Offset: 0x5a8, Size: 16]
	FString[] IgnoreItemClassPathList;//[Offset: 0x5b8, Size: 16]
	DSSwitchInfo[] DsSwitch;//[Offset: 0x5c8, Size: 16]
	<uint64,CharacterMoveDragData> CharacterMoveDragDataMap;//[Offset: 0x5d8, Size: 80]
	<uint64,VehicleMoveDragData> VehicleMoveDrag;//[Offset: 0x628, Size: 80]
	<uint64,CharacterShootVerifyData> CharacterShootVerifyDataMap;//[Offset: 0x678, Size: 80]
	uint32 ServerStartTime;//[Offset: 0x6c8, Size: 4]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cd, Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x6d0, Size: 16]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x6e8, Size: 16]
	FString VehicleTableName;//[Offset: 0x6f8, Size: 16]
	FString VehicleClassPath;//[Offset: 0x708, Size: 16]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x719, Size: 1]
	Vector RegionCenter;//[Offset: 0x71c, Size: 12]
	float RegionRadius;//[Offset: 0x728, Size: 4]
	<FString,float> BattleCustomConfig;//[Offset: 0x730, Size: 80]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x780, Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x784, Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x788, Size: 8]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x794, Size: 4]
	float NearDeathDecreateBreathRate;//[Offset: 0x798, Size: 4]
	float RescueOtherRestoreDuration;//[Offset: 0x79c, Size: 4]
	float DeadTombBoxLifeSpan;//[Offset: 0x7a0, Size: 4]
	int DefaultPlayerBornPointID;//[Offset: 0x7a4, Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	bool bEnableDSTickLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9, Size: 1]
	FString NetObjectPathNameMappingCSV;//[Offset: 0x7b0, Size: 16]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x7c0, Size: 16]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x7d0, Size: 8]
	DynamicTriggerConfig[] DynamicTriggerConfigs;//[Offset: 0x7d8, Size: 16]
	Actor*[] DynamicTriggers;//[Offset: 0x7e8, Size: 16]
	int IsGameModeFpp;//[Offset: 0x7f8, Size: 4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fc, Size: 1]
	DynamicLoadItem[] DynamicLoadItemArray;//[Offset: 0x800, Size: 16]
	<DynamicLoadItem,DynamicLoadActors> DynamicLoadItemMap;//[Offset: 0x810, Size: 80]
	BornItem[] BornItems;//[Offset: 0x860, Size: 16]
	VehicleAvatarReplaceCfg[] VehicleAvatarReplaceCfgList;//[Offset: 0x870, Size: 16]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x881, Size: 1]
	int[] BuffEffectIDArray;//[Offset: 0x888, Size: 16]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x898, Size: 16]
	int[] DynamicLevelArray;//[Offset: 0x8a8, Size: 16]
	FString RoomType;//[Offset: 0x8b8, Size: 16]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ca, Size: 1]
	int ZoneID;//[Offset: 0x8cc, Size: 4]
	int nClientType;//[Offset: 0x8d0, Size: 4]
	int nBattleType;//[Offset: 0x8d4, Size: 4]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf10, Size: 1]
	bool[] EnabledCollectedEventDataEventIds;//[Offset: 0xf18, Size: 16]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf78, Size: 1]
	float OBInfoTimeStep;//[Offset: 0x10a0, Size: 4]
	AirDropBoxInOb[] AirDropBoxInfoList;//[Offset: 0x10d0, Size: 16]
	uint32[] FiringPlayerList;//[Offset: 0x10e0, Size: 16]
	UAEPlayerController*[] KickFlagControllerList;//[Offset: 0x10f0, Size: 16]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0x1100, Size: 16]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0x11e8, Size: 16]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0x11f8, Size: 16]
	MissionBoardConfig[] MissionBoardConfigList;//[Offset: 0x1208, Size: 16]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1218, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0x1220, Size: 16]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0x1230, Size: 16]
	FString GrenadeEffectPath;//[Offset: 0x1240, Size: 16]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1250, Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1251, Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1252, Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1253, Size: 1]
	bool bAvatarDownloadInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1254, Size: 1]
	bool bOpenAnniversaryActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1255, Size: 1]
	FString FestivalAirDropBoxMesh;//[Offset: 0x1258, Size: 16]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1268, Size: 1]
	float FestivalAirDropProb;//[Offset: 0x126c, Size: 4]
	float MonsterDropPar;//[Offset: 0x1270, Size: 4]
	float SceneDropParam;//[Offset: 0x1274, Size: 4]
	uint32 DSOpenSwtich;//[Offset: 0x1278, Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x1280, Size: 8]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0x1288, Size: 8]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1290, Size: 1]
	uint32[] NeedReplayPlayers;//[Offset: 0x1298, Size: 16]
	SeasonStatueData[] SeasonStatueList;//[Offset: 0x12a8, Size: 16]
	FString SeasonStatueClassPath;//[Offset: 0x12b8, Size: 16]
	FString StatueBaseClassPath;//[Offset: 0x12c8, Size: 16]
	StatueBaseData StatueBaseInfo;//[Offset: 0x12d8, Size: 104]
	int BattleStopJoin;//[Offset: 0x1340, Size: 4]
	int nSignalGunEffectId;//[Offset: 0x1344, Size: 4]
	CharacterOverrideAttrData[] CharacterOverrideAttrs;//[Offset: 0x1348, Size: 16]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f8, Size: 1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0x1400, Size: 16]
	bool bStandAloneGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1480, Size: 1]
	bool bStandAloneLuaGenAIData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1481, Size: 1]
	int StandAloneTestPlayerKey;//[Offset: 0x1484, Size: 4]
	FName StandAloneTestPlayerType;//[Offset: 0x1488, Size: 8]
	void WriteStatistics();// 0x3c4fd60
	void SyncPlayerNames();// 0x3c4fd44
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x3c4fc24
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x3c4fb2c
	void SetVehicleReportEntry(uint32 InUniqueID, VehicleReportEntry InEntry);// 0x3c4f984
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x3c4f894
	void SetMaxWeaponReportNum(int Num);// 0x3c4f81c
	void SetGameEndReportData();// 0x3c4f800
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x3c4f744
	void RetrieveBattleData(out BattleData OutBattleData);// 0x3c4f6b0
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x3c4f5f4
	void ResetGameParamsFromGameMode();// 0x3c4f5d8
	void Rescue(Pawn* RescueWho, Pawn* Hero);// 0x3c4f51c
	bool ReportCollectedEventDataWithPlayerValidation(UAEPlayerController* UAEPlayerController, byte EventId, delegate CollectReportedEventDataCallback);// 0x3c4f3f4
	bool ReportCollectedEventDataWithPlayersValidation(World* World, byte EventId, delegate CollectReportedEventDataCallback);// 0x3c4f2cc
	bool ReportCollectedEventData(out const FString UId, byte EventId, out const CollectedEventData Data);// 0x3c4f114
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x3c4f058
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x3c4efd4
	void RefreshWorldActiveRange();// 0x3c4efb8
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x3c4eef8
	void RefreshPlayerNames(uint32 InPlayerKey, FString InPlayerName, int TeamID, bool IsLogin, uint64 UId, int IdxInTeam);// 0x3c4ec7c
	int RecoardAlivePlayerNum();// 0x3c4ec40
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x3c4ebac
	void OnStandAloneGameEnd();// 0x3c4eb90
	void OnReportNetworkData();// 0x3c4eb74
	void OnPlayerFiring(uint32 InPlayerKey);// 0x3c4eaf8
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x3c4ea74
	void OnObserverLogout(UAEPlayerController* InController);// 0x3c4e9f8
	void OnObserverLogin(UAEPlayerController* InController);// 0x3c4e97c
	void OnMsg(FString Msg);// 0x3c4e8cc
	void OnAirDropBoxLanded(int boxId, out const Vector pos);// 0x3c4e800
	void OnAirDropBoxEmpty(int boxId);// 0x3c4e77c
	void NotifyPlayerExitWhenNotStarted(uint32 PlayerKey, FName PlayerType, FString Reason);// 0x3c4e650
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage);// 0x3c4e3b0
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x3c4e2f0
	void NotifyGameModeParamsChanged(out const GameModeParams GameModeParams);// 0x3c4e25c
	void NotifyGameModeLuckmate(int64 MyUID, int64 LuckmateUID);// 0x3c4e1a0
	void NotifyGameModeInit();// 0x3c4e184
	void NotifyExistPlayerReEnter(uint32 PlayerKey);// 0x3c4e100
	void NotifyAIPlayerEnter(uint32 PlayerKey, bool IsMLAI, uint32 Level);// 0x3c4dff4
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x3c4deec
	float ModifyVehicleDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* VictimVehicle, Actor* DamageCauser);// 0x3c4dd4c
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x3c4dbac
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x3c4da5c
	bool IsSatisfyGeneratorArea(out const Vector Location);// 0x3c4d9c0
	bool IsPlayerCollectedEventDataReportingEnabled(UAEPlayerController* UAEPlayerController);// 0x3c4d930
	bool IsCollectedEventEnabled(byte EventId);// 0x3c4d8a0
	void InitWorldActiveRange();// 0x3c4d884
	void InitSeasonStatue();// 0x3c4d868
	void InitMissionBoard();// 0x3c4d84c
	void InitGenerator();// 0x3c4d830
	void InitGameParamsFromGameMode();// 0x3c4d814
	void InitDynamicTriggers();// 0x3c4d7f8
	void InitDynamicBuildingGroups();// 0x3c4d7dc
	void InitBornWithApple();// 0x3c4d7c0
	void InitAdvertisement();// 0x3c4d7a4
	void Heartbeat();// 0x3c4d790
	bool HasVehicleReportEntry(uint32 InUniqueID);// 0x3c4d694
	bool HasDynamicBuildingGroup();// 0x3c4d65c
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int Count);// 0x3c4d4ec
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x3c4d430
	VehicleReportEntry GetVehicleReportEntry(uint32 InUniqueID);// 0x3c4d2e0
	int GetSurvivingTeamCount();// 0x3c4d2a4
	int GetSurvivingCharacterCount();// 0x3c4d268
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x3c4d138
	UAEPlayerController* GetPlayerControllerWithUID(uint64 UId);// 0x3c4d0ac
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x3c4cf7c
	void GetPlayerAndRealAiNum(out HeartBeatData Data);// 0x3c4cee4
	UAEPlayerController*[] GetObserverControllerList();// 0x3c4ce40
	void GetMonsterNum(out HeartBeatData Data);// 0x3c4cda8
	int GetMaxWeaponReportNum();// 0x3c4cd8c
	Vector GetClassicPlaneDirection();// 0x3c4cd4c
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x3c4cc84
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x3c4cbbc
	PlayerController* FindPlayerControllerByUId(uint64 UId);// 0x3c4cb28
	void DestroyNoActiveWorldActor(out Vector Location, out float Radius);// 0x3c4ca40
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x3c4c9bc
	void DestroyAllPickUpObjs();// 0x3c4c9a8
	void DeleteSeasonStatue();// 0x3c4c98c
	void DeleteDynamicLoadItem();// 0x3c4c970
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x3c4c8ec
	void CreateDynamicBuildingGroups(Vector Offset);// 0x3c4c870
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameMode* UAEGameMode, UAEPlayerController* UAEPlayerController, byte EventId);// 0x4033584
	void CollectAllPlayerInfo(float DeltaSeconds, bool bForce);// 0x3c4c7a8
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x3c4c674
	void AddAirDropBox(int boxId, out const Vector pos);// 0x3c4c5a8

--------------------------------
Class: LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	FString LuaFilePath;//[Offset: 0x4f8, Size: 16]

--------------------------------
Class: CharacterMoveDragData
	CharacterMoveDrag[] Drag;//[Offset: 0x0, Size: 16]
	CharacterSimulateMoveDrag[] SimulateDrag;//[Offset: 0x10, Size: 16]

--------------------------------
Class: CharacterMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	<byte,int> ReasonCount;//[Offset: 0x8, Size: 80]

--------------------------------
Class: CharacterSimulateMoveDrag
	int Minute;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterShootVerifyData
	<byte,int> ShootVerifyFailed;//[Offset: 0x0, Size: 80]

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object

--------------------------------
Class: DynamicTriggerConfig
	DynamicTriggerTransform[] Transforms;//[Offset: 0x0, Size: 16]
	FString TriggerClassPath;//[Offset: 0x10, Size: 16]

--------------------------------
Class: DynamicTriggerTransform
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DynamicLoadItem
	DynamicBuildingGroupTransform[] TransArray;//[Offset: 0x0, Size: 16]
	int ActID;//[Offset: 0x10, Size: 4]
	FString Path;//[Offset: 0x18, Size: 16]
	bool IsClearAfterStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool IsPlayerStartPot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	int[] PosIdxList;//[Offset: 0x30, Size: 16]

--------------------------------
Class: DynamicBuildingGroupTransform
	float LocX;//[Offset: 0x0, Size: 4]
	float LocY;//[Offset: 0x4, Size: 4]
	float LocZ;//[Offset: 0x8, Size: 4]
	float RotX;//[Offset: 0xc, Size: 4]
	float RotY;//[Offset: 0x10, Size: 4]
	float RotZ;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DynamicLoadActors
	Actor*[] ActorArray;//[Offset: 0x0, Size: 16]

--------------------------------
Class: VehicleAvatarReplaceCfg
	int OriginID;//[Offset: 0x0, Size: 4]
	int[] SkinIDList;//[Offset: 0x8, Size: 16]
	float[] ProbabilityDistribute;//[Offset: 0x18, Size: 16]
	int MaxNum;//[Offset: 0x28, Size: 4]
	int CurrentNum;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AdvertisementActorConfig
	FString ResPath;//[Offset: 0x0, Size: 16]
	FString HttpImgPath;//[Offset: 0x10, Size: 16]
	Vector Loc;//[Offset: 0x20, Size: 12]
	Rotator Rot;//[Offset: 0x2c, Size: 12]
	Vector Scale;//[Offset: 0x38, Size: 12]
	int ID;//[Offset: 0x44, Size: 4]

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x3d8, Size: 8]
	FString StaticMeshPath;//[Offset: 0x3e0, Size: 16]
	FString PicUrl;//[Offset: 0x3f0, Size: 16]
	int ID;//[Offset: 0x400, Size: 4]
	FrontendHUD* FrontendHUD;//[Offset: 0x408, Size: 8]
	float NetCullDistance;//[Offset: 0x414, Size: 4]
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x3c3da68
	void OnRep_PicURL();// 0x3c3da54
	void OnRep_MeshPath();// 0x3c3da40
	void OnRep_Id();// 0x3c3da2c

--------------------------------
Class: MissionBoardConfig
	FString ResPath;//[Offset: 0x0, Size: 16]
	Vector Loc;//[Offset: 0x10, Size: 12]
	Rotator Rot;//[Offset: 0x1c, Size: 12]
	Vector Scale;//[Offset: 0x28, Size: 12]
	float Progress;//[Offset: 0x34, Size: 4]
	FString CountOrTime;//[Offset: 0x38, Size: 16]
	int TipId;//[Offset: 0x48, Size: 4]

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.LuaActorComponent.ActorComponent.Object
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bCanBackupVehicleSpotDatas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x2e0, Size: 16]
	byte RegionType;//[Offset: 0x2f0, Size: 1]
	BackupVehicleSpotData[] BackupVehicleSpotDatas;//[Offset: 0x2f8, Size: 16]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x308, Size: 16]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x318, Size: 16]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x330, Size: 80]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x380, Size: 80]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x3d0, Size: 80]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x420, Size: 96]
	UAEDataTable* VehicleDataTable;//[Offset: 0x480, Size: 8]
	void WriteVehicleSpotStatisticsDatas_V15();// 0x3c69248
	void WriteVehicleSpotStatisticsDatas();// 0x3c69234
	void WriteVehicleClassStatisticsDatas_V15();// 0x3c69220
	void WriteVehicleClassStatisticsDatas();// 0x3c6920c
	void WriteAllVehicleStatisticsDatasToLog();// 0x3c691f8
	void WriteAllVehicleStatisticsDatas_V15();// 0x3c691e4
	void WriteAllVehicleStatisticsDatas();// 0x3c691d0
	void RegisterVehicleGenerateSpawnData(VehicleGenerateSpawnData Data);// 0x3c690ac
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x3c69028
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x3c68e94
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x3c68d04
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x3c68b70
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x3c689e0
	void RandomGroups();// 0x3c689c4
	void LoadVehicleGenerateTable();// 0x4033584
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoWithCategory(out VehicleSpotProperty SpotProperty, FString Category);// 0x3c686e8
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType);// 0x3c68584
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out VehicleSpotProperty SpotProperty);// 0x3c68398
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x3c681ac
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x3c67fa0
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x3c67e14
	void GenerateSpotOnTick(float DeltaTime);// 0x3c67d90
	bool DynamicSpawnVehicleBySpotId(int ID, FString Category);// 0x3c67c08
	void DeleteGroups();// 0x3c67bf4
	bool CanDynamicSpawnVehicle(Vector SpawnLocation, Vector TestLocationOffset, Vector TestBoxSize);// 0x3c67ae4
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x3c678bc
	void AddVehicleClassCount(FString Path, bool IsValid, int Count);// 0x3c67708

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x2f0, Size: 1]
	byte RegionType;//[Offset: 0x2f1, Size: 1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3, Size: 1]
	float RandomRotationMin;//[Offset: 0x2f4, Size: 4]
	float RandomRotationMax;//[Offset: 0x2f8, Size: 4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x300, Size: 40]
	bool IsEnableVehicleSpawnRestore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	float VehicleSpawnRestoreOffset;//[Offset: 0x32c, Size: 4]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x3c6b87c
	bool GenerateSpot();// 0x3c6b83c

--------------------------------
Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0, Size: 16]
	FString VehiclePath;//[Offset: 0x10, Size: 16]
	float FuelPercent;//[Offset: 0x20, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]

--------------------------------
Class: BackupVehicleSpotData
	int ID;//[Offset: 0x0, Size: 4]
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	byte SpotType;//[Offset: 0x5, Size: 1]
	Vector SpotGenerateLoc;//[Offset: 0x8, Size: 12]
	Rotator SpotRotator;//[Offset: 0x14, Size: 12]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x8, Size: 16]
	int FuelPercentMin;//[Offset: 0x18, Size: 4]
	int FuelPercentMax;//[Offset: 0x1c, Size: 4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	byte RandomType;//[Offset: 0x21, Size: 1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x24, Size: 4]
	int TotalCountRangeMin;//[Offset: 0x28, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x2c, Size: 4]
	float ProbabilityPersent;//[Offset: 0x30, Size: 4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x34, Size: 4]

--------------------------------
Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x8, Size: 16]
	int TotalCountRangeMin;//[Offset: 0x18, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0, Size: 1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x8, Size: 16]

--------------------------------
Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0, Size: 16]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0x10, Size: 16]

--------------------------------
Class: VehicleGenerateSpawnData
	int KeyID;//[Offset: 0x0, Size: 4]
	FString VehicleType;//[Offset: 0x8, Size: 16]
	FString VehiclePath;//[Offset: 0x18, Size: 16]
	int VehicleWeight;//[Offset: 0x28, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 16]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0x10, Size: 80]

--------------------------------
Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x8, Size: 1]
	FString VehiclePath;//[Offset: 0x10, Size: 16]
	float VehicleLocationX;//[Offset: 0x20, Size: 4]
	float VehicleLocationY;//[Offset: 0x24, Size: 4]
	float VehicleLocationZ;//[Offset: 0x28, Size: 4]

--------------------------------
Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x8, Size: 16]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int AllVehicleCount;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SeasonStatueData
	FString Name;//[Offset: 0x0, Size: 16]
	Vector Loc;//[Offset: 0x10, Size: 12]
	Rotator Rot;//[Offset: 0x1c, Size: 12]
	Vector Scale;//[Offset: 0x28, Size: 12]
	FString Nation;//[Offset: 0x38, Size: 16]
	int AGender;//[Offset: 0x48, Size: 4]
	int Head;//[Offset: 0x4c, Size: 4]
	int Hair;//[Offset: 0x50, Size: 4]
	int WeaponId;//[Offset: 0x54, Size: 4]
	int[] AvatarList;//[Offset: 0x58, Size: 16]
	GameModePlayerItem[] AvatarWithAdditionList;//[Offset: 0x68, Size: 16]

--------------------------------
Class: StatueBaseData
	FString ClassPath;//[Offset: 0x0, Size: 16]
	FString MatPath;//[Offset: 0x10, Size: 16]
	FString TeamFlag;//[Offset: 0x20, Size: 16]
	FString TeamName;//[Offset: 0x30, Size: 16]
	Vector Loc;//[Offset: 0x40, Size: 12]
	Rotator Rot;//[Offset: 0x4c, Size: 12]
	Vector Scale;//[Offset: 0x58, Size: 12]

--------------------------------
Class: CharacterOverrideAttrData
	FString AttrName;//[Offset: 0x0, Size: 16]
	float AttrValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0, Size: 8]
	FString CorpsName;//[Offset: 0x8, Size: 16]
	int Icon;//[Offset: 0x18, Size: 4]
	int SegmentLevel;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VehicleReportEntry
	uint32 VehicleID;//[Offset: 0x0, Size: 4]
	int VehicleShapeType;//[Offset: 0x4, Size: 4]
	bool IsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float FirstAttackedTime;//[Offset: 0xc, Size: 4]
	float LastAttackedTime;//[Offset: 0x10, Size: 4]
	bool Drived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0, Size: 16]
	int RemainTeamCount;//[Offset: 0x10, Size: 4]
	int RemainAlivePlayerCount;//[Offset: 0x14, Size: 4]
	float PlaneDirectionX;//[Offset: 0x18, Size: 4]
	float PlaneDirectionY;//[Offset: 0x1c, Size: 4]
	<FString,FString> PlayersLogoutTime;//[Offset: 0x20, Size: 80]
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0x70, Size: 16]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]

--------------------------------
Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0, Size: 16]
	int CorpsHeadIcon;//[Offset: 0x10, Size: 4]
	int KilledNum;//[Offset: 0x14, Size: 4]
	int SegmentLevel;//[Offset: 0x18, Size: 4]
	int RealtimeRank;//[Offset: 0x1c, Size: 4]
	int DefeatPlayerNum;//[Offset: 0x20, Size: 4]
	float TotalDamage;//[Offset: 0x24, Size: 4]
	float SurvivalTime;//[Offset: 0x28, Size: 4]

--------------------------------
Class: BattleData
	int WatcherNum;//[Offset: 0x0, Size: 4]
	int CircleNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CollectedEventData
	<FString,FString> KeyValueMap;//[Offset: 0x0, Size: 80]

--------------------------------
Class: GameModeParams
	FName CurrentGameModeState;//[Offset: 0x0, Size: 8]
	int MaxKillTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DSAIDropInfo
	uint64 BattleID;//[Offset: 0x0, Size: 8]
	int nts;//[Offset: 0x8, Size: 4]
	DSAIDropItem[] ais;//[Offset: 0x10, Size: 16]

--------------------------------
Class: DSAIDropItem
	uint64 UId;//[Offset: 0x0, Size: 8]
	int Time;//[Offset: 0x8, Size: 4]
	int8 hlv;//[Offset: 0xc, Size: 1]

--------------------------------
Class: HeartBeatData
	int AlivePlayerNum;//[Offset: 0x0, Size: 4]
	int AINum;//[Offset: 0x4, Size: 4]
	int MonsterNum;//[Offset: 0x8, Size: 4]
	int ConnectionNum;//[Offset: 0xc, Size: 4]
	int OnlineNum;//[Offset: 0x10, Size: 4]
	int HighPingNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ClientGameStartFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 16]
	FString MapName;//[Offset: 0x18, Size: 16]
	int8 WeatherID;//[Offset: 0x28, Size: 1]
	FString ItemList;//[Offset: 0x30, Size: 16]
	int8 TeamType;//[Offset: 0x40, Size: 1]
	int TeamID;//[Offset: 0x44, Size: 4]
	FString TeamPlayer1;//[Offset: 0x48, Size: 16]
	FString TeamPlayer2;//[Offset: 0x58, Size: 16]
	FString TeamPlayer3;//[Offset: 0x68, Size: 16]
	uint32 SecGameStartFlowFlowID;//[Offset: 0x78, Size: 4]
	FString GVoiceTeamID;//[Offset: 0x80, Size: 16]
	FString GVoiceRoomID;//[Offset: 0x90, Size: 16]
	int GVoiceTeamMemberID;//[Offset: 0xa0, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0xa4, Size: 4]

--------------------------------
Class: ClientGameEndFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 16]
	FString ClientVersion;//[Offset: 0x18, Size: 16]
	uint32 OverTime;//[Offset: 0x28, Size: 4]
	int8 EndType;//[Offset: 0x2c, Size: 1]
	byte KillCount;//[Offset: 0x2d, Size: 1]
	byte AssistsCount;//[Offset: 0x2e, Size: 1]
	byte DropCount;//[Offset: 0x2f, Size: 1]
	byte SaveCount;//[Offset: 0x30, Size: 1]
	byte RebornCount;//[Offset: 0x31, Size: 1]
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32, Size: 1]
	int GoldGet;//[Offset: 0x34, Size: 4]
	int DiamondGet;//[Offset: 0x38, Size: 4]
	int ExpGet;//[Offset: 0x3c, Size: 4]
	byte WinRank;//[Offset: 0x40, Size: 1]
	byte TotalPlayers;//[Offset: 0x41, Size: 1]
	int PlayerRank;//[Offset: 0x44, Size: 4]
	int RankEnd;//[Offset: 0x48, Size: 4]
	int TeamID;//[Offset: 0x4c, Size: 4]
	FString TeamPlayer1;//[Offset: 0x50, Size: 16]
	FString TeamPlayer2;//[Offset: 0x60, Size: 16]
	FString TeamPlayer3;//[Offset: 0x70, Size: 16]
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	byte TeamPlayer1Kill;//[Offset: 0x81, Size: 1]
	byte TeamPlayer2Kill;//[Offset: 0x82, Size: 1]
	byte TeamPlayer3Kill;//[Offset: 0x83, Size: 1]
	uint32 GameEndFlowID;//[Offset: 0x84, Size: 4]
	byte RoundCircleCount;//[Offset: 0x88, Size: 1]
	int[] UseQuickMsgIDArray;//[Offset: 0x90, Size: 16]
	int[] UseQuickMsgCountArray;//[Offset: 0xa0, Size: 16]
	int[] UseWheelMsgIDArray;//[Offset: 0xb0, Size: 16]
	int[] UseWheelMsgCountArray;//[Offset: 0xc0, Size: 16]
	int[] InexistentAvatarStat;//[Offset: 0xd0, Size: 16]
	int[] InexistentAvatarInBornStat;//[Offset: 0xe0, Size: 16]
	int[] InexistentWeaponAvatarStat;//[Offset: 0xf0, Size: 16]
	int[] InexistentVehicleAvatarStat;//[Offset: 0x100, Size: 16]
	int InexistentPlaneAvatarStat;//[Offset: 0x110, Size: 4]
	int InexistentEmoteAvatarStat;//[Offset: 0x114, Size: 4]
	byte ShowMsgCnt;//[Offset: 0x118, Size: 1]
	byte UserConfirmCnt;//[Offset: 0x119, Size: 1]
	byte UserCancelCnt;//[Offset: 0x11a, Size: 1]
	byte UserDoNothingCnt;//[Offset: 0x11b, Size: 1]
	float FPSBeforeAdapt;//[Offset: 0x11c, Size: 4]
	float FPSAfterAdapt;//[Offset: 0x120, Size: 4]
	float TeammateMicrophoneTime;//[Offset: 0x124, Size: 4]
	float TeammateSpeakerTime;//[Offset: 0x128, Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0x12c, Size: 4]
	float EnemySpeakerTime;//[Offset: 0x130, Size: 4]
	float TeammateInterphoneTime;//[Offset: 0x134, Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x138, Size: 4]
	byte PlayerUseQuickSight;//[Offset: 0x13c, Size: 1]
	byte PlayerUseShoulderCnt;//[Offset: 0x13d, Size: 1]

--------------------------------
Class: SecAttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 16]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 16]
	FString OpenID;//[Offset: 0x28, Size: 16]
	int8 PlatID;//[Offset: 0x38, Size: 1]
	uint16 AreaID;//[Offset: 0x3a, Size: 2]
	FString ZoneID;//[Offset: 0x40, Size: 16]
	uint64 BattleID;//[Offset: 0x50, Size: 8]
	int64 ClientStartTime;//[Offset: 0x58, Size: 8]
	uint64 RoleID;//[Offset: 0x60, Size: 8]
	FString TargetUserName;//[Offset: 0x68, Size: 16]
	FString TargetOpenID;//[Offset: 0x78, Size: 16]
	uint64 TargetRoleID;//[Offset: 0x88, Size: 8]
	FString HitPart;//[Offset: 0x90, Size: 16]
	int GunID;//[Offset: 0xa0, Size: 4]
	byte PlayerKill;//[Offset: 0xa4, Size: 1]
	uint64 AttackFlowID;//[Offset: 0xa8, Size: 8]
	int KillAICnt;//[Offset: 0xb0, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0xb4, Size: 4]

--------------------------------
Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 1]
	int GunID;//[Offset: 0xc, Size: 4]
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 4]
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 54]
	int LocationX;//[Offset: 0x4c, Size: 4]
	int LocationY;//[Offset: 0x50, Size: 4]
	int LocationZ;//[Offset: 0x54, Size: 4]
	int KilledLocationX;//[Offset: 0x58, Size: 4]
	int KilledLocationY;//[Offset: 0x5c, Size: 4]
	int KilledLocationZ;//[Offset: 0x60, Size: 4]
	int KilledTeamID;//[Offset: 0x64, Size: 4]
	int TeamID;//[Offset: 0x68, Size: 4]
	FString GameModeID;//[Offset: 0x70, Size: 16]
	uint64 PawnState;//[Offset: 0x80, Size: 8]
	uint64 KilledPawnState;//[Offset: 0x88, Size: 8]

--------------------------------
Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 2]
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 2]
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 2]
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 2]
	int16 LeftMax;//[Offset: 0xc, Size: 2]
	int16 RightMax;//[Offset: 0xe, Size: 2]
	int16 HorizontalTendency;//[Offset: 0x10, Size: 2]
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 2]
	int16 TimePerSwitch;//[Offset: 0x14, Size: 2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 2]
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 2]
	int16 RecoilValueFail;//[Offset: 0x20, Size: 2]
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 2]
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 2]
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 2]
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 2]
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30, Size: 2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 2]

--------------------------------
Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0, Size: 1]
	byte[] MrpcsFlowData;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 16]
	FString MapName;//[Offset: 0x18, Size: 16]
	int8 WeatherID;//[Offset: 0x28, Size: 1]
	int64 GameStartTime;//[Offset: 0x30, Size: 8]
	uint32 StartJumpTime;//[Offset: 0x38, Size: 4]
	uint32 EndJumpTime;//[Offset: 0x3c, Size: 4]
	uint32 PlayerJumpTime;//[Offset: 0x40, Size: 4]
	uint32 PlayerOpenTime;//[Offset: 0x44, Size: 4]
	uint32 PlayerLandTime;//[Offset: 0x48, Size: 4]
	FString FollowPlayerUID;//[Offset: 0x50, Size: 16]
	uint32 ExitFollowTime;//[Offset: 0x60, Size: 4]
	int PlayerJumpPositionX;//[Offset: 0x64, Size: 4]
	int PlayerJumpPositionY;//[Offset: 0x68, Size: 4]
	int PlayerJumpPositionZ;//[Offset: 0x6c, Size: 4]
	int PlaneJumpPositionX;//[Offset: 0x70, Size: 4]
	int PlaneJumpPositionY;//[Offset: 0x74, Size: 4]
	int PlaneJumpPositionZ;//[Offset: 0x78, Size: 4]
	int PlayerLandPositionX;//[Offset: 0x7c, Size: 4]
	int PlayerLandPositionY;//[Offset: 0x80, Size: 4]
	int PlayerLandPositionZ;//[Offset: 0x84, Size: 4]
	uint32 PlayerLandDistance;//[Offset: 0x88, Size: 4]
	uint32 PlayerSpeedMax1;//[Offset: 0x8c, Size: 4]
	uint32 PlayerSpeedMax2;//[Offset: 0x90, Size: 4]
	FString GVoiceTeamID;//[Offset: 0x98, Size: 16]
	FString GVoiceRoomID;//[Offset: 0xa8, Size: 16]
	int GVoiceTeamMemberID;//[Offset: 0xb8, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0xbc, Size: 4]

--------------------------------
Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0, Size: 16]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 16]
	FString OpenID;//[Offset: 0x28, Size: 16]
	int8 PlatID;//[Offset: 0x38, Size: 1]
	uint16 AreaID;//[Offset: 0x3a, Size: 2]
	FString ZoneID;//[Offset: 0x40, Size: 16]
	uint64 BattleID;//[Offset: 0x50, Size: 8]
	int64 ClientStartTime;//[Offset: 0x58, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x60, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x68, Size: 16]
	FString UserName;//[Offset: 0x78, Size: 16]
	uint64 RoleID;//[Offset: 0x88, Size: 8]
	int8 RoleType;//[Offset: 0x90, Size: 1]
	FString EnemyOpenID;//[Offset: 0x98, Size: 16]
	FString EnemyUserName;//[Offset: 0xa8, Size: 16]
	uint64 EnemyRoleID;//[Offset: 0xb8, Size: 8]
	int EnemyRoleType;//[Offset: 0xc0, Size: 4]
	uint32 HurtTime;//[Offset: 0xc4, Size: 4]
	int HurtType;//[Offset: 0xc8, Size: 4]
	int HitType;//[Offset: 0xcc, Size: 4]
	int DamageStart;//[Offset: 0xd0, Size: 4]
	int DamageReduce;//[Offset: 0xd4, Size: 4]
	int ArmorDef;//[Offset: 0xd8, Size: 4]
	int HPstart;//[Offset: 0xdc, Size: 4]
	int HPEnd;//[Offset: 0xe0, Size: 4]
	int ArmorHPStart1;//[Offset: 0xe4, Size: 4]
	int ArmorHPEnd1;//[Offset: 0xe8, Size: 4]
	int ArmorHPStart2;//[Offset: 0xec, Size: 4]
	int ArmorHPEnd2;//[Offset: 0xf0, Size: 4]
	int CarHPStart;//[Offset: 0xf4, Size: 4]
	int CarHPEnd;//[Offset: 0xf8, Size: 4]
	int FallHeight;//[Offset: 0xfc, Size: 4]
	int HypoxiaTime;//[Offset: 0x100, Size: 4]
	int HypoxiaHurtTotal;//[Offset: 0x104, Size: 4]
	int PlayerKilled;//[Offset: 0x108, Size: 4]
	int ArmorKill;//[Offset: 0x10c, Size: 4]
	int CarKill;//[Offset: 0x110, Size: 4]
	int IfIsAI;//[Offset: 0x114, Size: 4]
	int CircleIndex;//[Offset: 0x118, Size: 4]
	uint32 HurtFlowID;//[Offset: 0x11c, Size: 4]

--------------------------------
Class: GvoiceTeamQuit
	FString GVoiceTeamID;//[Offset: 0x0, Size: 16]
	FString GVoiceRoomID;//[Offset: 0x10, Size: 16]
	int GVoiceTeamMemberID;//[Offset: 0x20, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x24, Size: 4]
	uint64 UId;//[Offset: 0x28, Size: 8]

--------------------------------
Class: GvoiceTeamCreate
	FString GVoiceTeamID;//[Offset: 0x0, Size: 16]
	FString GVoiceRoomID;//[Offset: 0x10, Size: 16]
	int GVoiceTeamMemberID;//[Offset: 0x20, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x24, Size: 4]
	uint64 UId;//[Offset: 0x28, Size: 8]

--------------------------------
Class: GameSetting
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8, Size: 44]
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x34, Size: 8]
	GameSetting_Operate Operate;//[Offset: 0x3c, Size: 8]
	GameSetting_Vehicle Vehicle;//[Offset: 0x44, Size: 8]
	GameSetting_Sensibility Sensibility;//[Offset: 0x4c, Size: 136]
	GameSetting_PickUp PickUp;//[Offset: 0xd8, Size: 64]

--------------------------------
Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int SingleShotWeaponShootMode;//[Offset: 0x8, Size: 4]
	int ShotGunShootMode;//[Offset: 0xc, Size: 4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int LRShootMode;//[Offset: 0x14, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int LeftHandFire;//[Offset: 0x1c, Size: 4]
	int Gyroscope;//[Offset: 0x20, Size: 4]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool ShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Operate
	int FireMode;//[Offset: 0x0, Size: 4]
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0, Size: 4]
	int DrivingViewMode;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0, Size: 4]
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4, Size: 12]
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10, Size: 40]
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x38, Size: 40]
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x60, Size: 40]

--------------------------------
Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0, Size: 4]
	float ParachuteEye;//[Offset: 0x4, Size: 4]
	float CamFpFreeEye;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float CamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float CamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x1c, Size: 4]
	float FireCamLensSenShoulderSniper;//[Offset: 0x20, Size: 4]
	float FireCamLensSenShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0xc, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x10, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x14, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x18, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x1c, Size: 4]
	float GyroscopeShoulderSniper;//[Offset: 0x20, Size: 4]
	float GyroscopeShoulderSniperFP;//[Offset: 0x24, Size: 4]

--------------------------------
Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	GameSetting_PickUp_Drug Drug;//[Offset: 0x4, Size: 24]
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x1c, Size: 16]
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x30, Size: 16]

--------------------------------
Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0, Size: 4]
	int Bandage;//[Offset: 0x4, Size: 4]
	int PainKiller;//[Offset: 0x8, Size: 4]
	int Adrenaline;//[Offset: 0xc, Size: 4]
	int EnergyDrink;//[Offset: 0x10, Size: 4]
	int FirstAidKit;//[Offset: 0x14, Size: 4]

--------------------------------
Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0, Size: 4]
	int ShockBomb;//[Offset: 0x4, Size: 4]
	int SmokeBomb;//[Offset: 0x8, Size: 4]
	int GrenadeFragmented;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameSetting_PickUp_WeaponBullet
	int WeaponId;//[Offset: 0x0, Size: 4]
	int BulletCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ClientCircleFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 16]
	FString PicUrl;//[Offset: 0x18, Size: 16]
	uint32 GameStartTime;//[Offset: 0x28, Size: 4]
	uint32 NewCircleBornTime;//[Offset: 0x2c, Size: 4]
	int NewCirclePositionX;//[Offset: 0x30, Size: 4]
	int NewCirclePositionY;//[Offset: 0x34, Size: 4]
	int NewCirclePositionRadius;//[Offset: 0x38, Size: 4]
	int NewCircleCount;//[Offset: 0x3c, Size: 4]
	int PlayerPositionX;//[Offset: 0x40, Size: 4]
	int PlayerPositionY;//[Offset: 0x44, Size: 4]
	int PlayerPositionZ;//[Offset: 0x48, Size: 4]
	int PlayerHP;//[Offset: 0x4c, Size: 4]
	uint32 OldCircleMoveTime;//[Offset: 0x50, Size: 4]
	uint32 OldCircleMoveEndTime;//[Offset: 0x54, Size: 4]
	uint32 PlayerOutTime;//[Offset: 0x58, Size: 4]
	int CirclePoisonCount;//[Offset: 0x5c, Size: 4]
	int CirclePoisonMin;//[Offset: 0x60, Size: 4]
	int CirclePoisonMax;//[Offset: 0x64, Size: 4]
	int CirclePoisonAvg;//[Offset: 0x68, Size: 4]
	int CirclePoisonTotal;//[Offset: 0x6c, Size: 4]
	int CirclePoisonDrop;//[Offset: 0x70, Size: 4]
	int CirclePoisonDead;//[Offset: 0x74, Size: 4]
	int RecoveryCount;//[Offset: 0x78, Size: 4]
	int RecoveryMin;//[Offset: 0x7c, Size: 4]
	int RecoveryMax;//[Offset: 0x80, Size: 4]
	int RecoveryTotal;//[Offset: 0x84, Size: 4]
	int EnergyRecoveryCount;//[Offset: 0x88, Size: 4]
	int EnergyRecoveryMin;//[Offset: 0x8c, Size: 4]
	int EnergyRecoveryMax;//[Offset: 0x90, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x94, Size: 4]
	int EnergyStartLv;//[Offset: 0x98, Size: 4]
	int EnergyStartTime;//[Offset: 0x9c, Size: 4]
	FString EnergyItemUse;//[Offset: 0xa0, Size: 16]
	int EnergyLvTimeInfo;//[Offset: 0xb0, Size: 4]
	FString EnergyRunFastTime;//[Offset: 0xb8, Size: 16]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0xc8, Size: 16]
	int EnergyEndLv;//[Offset: 0xd8, Size: 4]
	int EnergyEndTime;//[Offset: 0xdc, Size: 4]
	int PlayerMoveDis;//[Offset: 0xe0, Size: 4]
	int PlayerSpeedMax;//[Offset: 0xe4, Size: 4]
	int PlayerSpeedAvg;//[Offset: 0xe8, Size: 4]
	int PlayerCarSpeedMax;//[Offset: 0xec, Size: 4]
	int PlayerCarSpeedAvg;//[Offset: 0xf0, Size: 4]
	int PlayerSquatMoveDis;//[Offset: 0xf4, Size: 4]
	int PlayerSquatMoveTime;//[Offset: 0xf8, Size: 4]
	int PlayerCreepMoveDis;//[Offset: 0xfc, Size: 4]
	int PlayerCreepMoveTime;//[Offset: 0x100, Size: 4]
	int PlayerRunMoveDis;//[Offset: 0x104, Size: 4]
	int PlayerRunMoveTime;//[Offset: 0x108, Size: 4]
	int PlayerDriveMoveDis;//[Offset: 0x10c, Size: 4]
	int PlayerDriveMoveTime;//[Offset: 0x110, Size: 4]
	int PlayerCar;//[Offset: 0x114, Size: 4]
	int PlayerCameraDistanceMax;//[Offset: 0x118, Size: 4]
	uint32 SecCircleFlowID;//[Offset: 0x11c, Size: 4]
	byte AutoAimType;//[Offset: 0x120, Size: 1]
	int AutoAimTime;//[Offset: 0x124, Size: 4]
	byte[] MrpcsFlowData;//[Offset: 0x128, Size: 16]

--------------------------------
Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 16]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 16]
	FString OpenID;//[Offset: 0x28, Size: 16]
	uint16 AreaID;//[Offset: 0x38, Size: 2]
	int8 PlatID;//[Offset: 0x3a, Size: 1]
	FString ZoneID;//[Offset: 0x40, Size: 16]
	uint64 BattleID;//[Offset: 0x50, Size: 8]
	int64 ClientStartTime;//[Offset: 0x58, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x60, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x68, Size: 16]
	FString UserName;//[Offset: 0x78, Size: 16]
	uint64 RoleID;//[Offset: 0x88, Size: 8]
	int8 RoleType;//[Offset: 0x90, Size: 1]
	FString TargetOpenID;//[Offset: 0x98, Size: 16]
	FString TargetUserName;//[Offset: 0xa8, Size: 16]
	uint64 TargetRoleID;//[Offset: 0xb8, Size: 8]
	int8 TargetRoleType;//[Offset: 0xc0, Size: 1]
	FString GunName;//[Offset: 0xc8, Size: 16]
	FString GunPartsType;//[Offset: 0xd8, Size: 16]
	int8 SightType;//[Offset: 0xe8, Size: 1]
	int BulletSpeed;//[Offset: 0xec, Size: 4]
	int8 MagazineMax;//[Offset: 0xf0, Size: 1]
	int8 MagazineLeft;//[Offset: 0xf1, Size: 1]
	int ShotFrequency;//[Offset: 0xf4, Size: 4]
	int BulletDamage;//[Offset: 0xf8, Size: 4]
	int16 BulletDown;//[Offset: 0xfc, Size: 2]
	byte BulletDamageReduce;//[Offset: 0xfe, Size: 1]
	int Recoil;//[Offset: 0x100, Size: 4]
	int ReloadTime;//[Offset: 0x104, Size: 4]
	FString PlayerState;//[Offset: 0x108, Size: 16]
	byte ShotPose;//[Offset: 0x118, Size: 1]
	byte FireType;//[Offset: 0x119, Size: 1]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11a, Size: 1]
	byte Sideways;//[Offset: 0x11b, Size: 1]
	int ShootingDeviationX;//[Offset: 0x11c, Size: 4]
	int ShootingDeviationY;//[Offset: 0x120, Size: 4]
	uint32 ZeroDistance;//[Offset: 0x124, Size: 4]
	uint32 ShotTime;//[Offset: 0x128, Size: 4]
	int HitTime;//[Offset: 0x12c, Size: 4]
	int PlayerPositionX;//[Offset: 0x130, Size: 4]
	int PlayerPositionY;//[Offset: 0x134, Size: 4]
	int PlayerPositionZ;//[Offset: 0x138, Size: 4]
	int GunPositionX;//[Offset: 0x13c, Size: 4]
	int GunPositionY;//[Offset: 0x140, Size: 4]
	int GunPositionZ;//[Offset: 0x144, Size: 4]
	int BulletsBornPositionX;//[Offset: 0x148, Size: 4]
	int BulletsBornPositionY;//[Offset: 0x14c, Size: 4]
	int BulletsBornPositionZ;//[Offset: 0x150, Size: 4]
	uint32 LastHitTime;//[Offset: 0x154, Size: 4]
	uint32 BulletFlyDistance;//[Offset: 0x158, Size: 4]
	uint32 BulletFlyTime;//[Offset: 0x15c, Size: 4]
	int HitPositionX;//[Offset: 0x160, Size: 4]
	int HitPositionY;//[Offset: 0x164, Size: 4]
	int HitPositionZ;//[Offset: 0x168, Size: 4]
	byte HitPart;//[Offset: 0x16c, Size: 1]
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16d, Size: 1]
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16d, Size: 1]
	byte BulletCost;//[Offset: 0x16e, Size: 1]
	int HPstart;//[Offset: 0x170, Size: 4]
	int HPEnd;//[Offset: 0x174, Size: 4]
	int ArmorHPStart;//[Offset: 0x178, Size: 4]
	int ArmorHPEnd;//[Offset: 0x17c, Size: 4]
	int CarHPStart;//[Offset: 0x180, Size: 4]
	int CarHPEnd;//[Offset: 0x184, Size: 4]
	byte PlayerKill;//[Offset: 0x188, Size: 1]
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x189, Size: 1]
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x189, Size: 1]
	int RecoilMoveX;//[Offset: 0x18c, Size: 4]
	int RecoilMoveY;//[Offset: 0x190, Size: 4]
	int WeaponAimFOV;//[Offset: 0x194, Size: 4]
	int BulletDamageDebuff;//[Offset: 0x198, Size: 4]
	int BulletDamageBuff;//[Offset: 0x19c, Size: 4]
	uint32 AtackFlowID;//[Offset: 0x1a0, Size: 4]
	int AutoAimSpeed;//[Offset: 0x1a4, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x1a8, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x1ac, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x1b0, Size: 4]
	int GunID;//[Offset: 0x1b4, Size: 4]
	int IfIsOnCar;//[Offset: 0x1b8, Size: 4]
	bool InMoveablePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	int KillAICnt;//[Offset: 0x1c0, Size: 4]
	int KillRealPlayerCnt;//[Offset: 0x1c4, Size: 4]

--------------------------------
Class: AimFlow
	FString GameSvrId;//[Offset: 0x0, Size: 16]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 16]
	FString OpenID;//[Offset: 0x28, Size: 16]
	uint16 AreaID;//[Offset: 0x38, Size: 2]
	int8 PlatID;//[Offset: 0x3a, Size: 1]
	FString ZoneID;//[Offset: 0x40, Size: 16]
	uint64 BattleID;//[Offset: 0x50, Size: 8]
	int64 ClientStartTime;//[Offset: 0x58, Size: 8]
	int MrpcsFlowcount_;//[Offset: 0x60, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x68, Size: 16]
	FString UserName;//[Offset: 0x78, Size: 16]
	uint64 RoleID;//[Offset: 0x88, Size: 8]
	int8 RoleType;//[Offset: 0x90, Size: 1]
	int AimTime;//[Offset: 0x94, Size: 4]
	FString ShotCDTime;//[Offset: 0x98, Size: 16]
	int ShotCount;//[Offset: 0xa8, Size: 4]
	int ShotHitCount;//[Offset: 0xac, Size: 4]
	int ShotHeadHitCount;//[Offset: 0xb0, Size: 4]
	int ShotPersonHitCount;//[Offset: 0xb4, Size: 4]
	int ShotPersonKillCount;//[Offset: 0xb8, Size: 4]
	FString HitDistance;//[Offset: 0xc0, Size: 16]
	FString HitEachDistance;//[Offset: 0xd0, Size: 16]
	FString HitAngle;//[Offset: 0xe0, Size: 16]
	FString HitEachCdTime;//[Offset: 0xf0, Size: 16]
	FString HitPartInfo;//[Offset: 0x100, Size: 16]
	FString PlayerState;//[Offset: 0x110, Size: 16]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 1]
	int8 SightType;//[Offset: 0x121, Size: 1]
	uint32 AimFlowID;//[Offset: 0x124, Size: 4]

--------------------------------
Class: GameModeStateChangedParams
	FName GameModeState;//[Offset: 0x0, Size: 8]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RepVehicleAttachment
	STExtraVehicleBase* Vehicle;//[Offset: 0x0, Size: 8]
	FName AttachSocket;//[Offset: 0x8, Size: 8]

--------------------------------
Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	FName UnderWaterFogTagName;//[Offset: 0x2d0, Size: 8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x2d8, Size: 8]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x2e0, Size: 48]
	AkAudioEvent* SfxInWater;//[Offset: 0x310, Size: 8]
	AkAudioEvent* SfxOutWater;//[Offset: 0x318, Size: 8]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x320, Size: 4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x324, Size: 4]
	float HDRUnderWaterFogDensity;//[Offset: 0x328, Size: 4]
	float NormalUnderWaterFogDensity;//[Offset: 0x32c, Size: 4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x330, Size: 8]
	WaterSwimActor*[] WaterSwimObjs;//[Offset: 0x338, Size: 16]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x348, Size: 16]
	CameraComponent* LastActiveCamComp;//[Offset: 0x358, Size: 8]
	PostProcessVolume* UnderWaterPPV;//[Offset: 0x368, Size: 8]
	void OnToggleUnderWaterPPV();// 0x3645778
	void AddWaterSwimActor(WaterSwimActor* Actor);// 0x36456fc
	void AddSceneFogComponent(ExponentialHeightFog* SceneFogActor);// 0x3645680

--------------------------------
Class: WaterSwimActor.Actor.Object
	float Damage;//[Offset: 0x3c8, Size: 4]
	float interval;//[Offset: 0x3cc, Size: 4]
	class DamageType* DamageType;//[Offset: 0x3d0, Size: 8]
	class Pawn[] DamageFilters;//[Offset: 0x3d8, Size: 16]
	int[] BuffIDs;//[Offset: 0x3e8, Size: 16]
	int[] SkillBuffIDs;//[Offset: 0x3f8, Size: 16]
	BoxComponent* WaterBoxComp;//[Offset: 0x408, Size: 8]
	bool IsLocationInWater(out const Vector Location);// 0x373a3bc
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight);// 0x373a2cc

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x410, Size: 1376]
	float Priority;//[Offset: 0x970, Size: 4]
	float BlendRadius;//[Offset: 0x974, Size: 4]
	float BlendWeight;//[Offset: 0x978, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x97c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x97c, Size: 1]
	void RemoveBlendable(interface classNone InBlendableObject);// 0x5c384b0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5c38370

--------------------------------
Class: HalloweenVampireCloth
	bool bWearingHalloweenVampireCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int HalloweenVampireClothItemID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	int8 State;//[Offset: 0x8, Size: 1]
	Rotator CameraRotation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x218, Size: 16]
	void ReleaseParachuteAnimAssets();// 0x3c3e5c8
	void OnParachuteAnimAsyncLoadingFinished(FString AnimLoaded);// 0x3c3e494
	void OnAnimListAsyncLoadingFinished();// 0x3c3e480
	bool HasAnimAsyncLoadingFinished();// 0x3c3e448
	void HandleAsyncLoadingFinishedEvent();// 0x3c3e434
	FString GetOwnerName();// 0x3c3e388
	AnimationAsset* GetCharacterParachuteAnim(byte AnimType);// 0x3c3e2fc

--------------------------------
Class: CharParachuteAnimData
	byte ParachuteAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* ParachuteAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* ParachuteAnim;//[Offset: 0x30, Size: 8]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantize Location;//[Offset: 0x0, Size: 12]
	byte Roll;//[Offset: 0xc, Size: 1]
	uint32 View;//[Offset: 0x10, Size: 4]
	Vector_NetQuantize Velocity;//[Offset: 0x14, Size: 12]

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0, Size: 1]
	int LeaderIdx;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LastEmoteInfo
	int EmoteId;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]
	float EmoteTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0x160, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x168, Size: 8]
	FName FPPSocketName;//[Offset: 0x170, Size: 8]
	FName BoltActionCurveName;//[Offset: 0x178, Size: 8]
	float ScopeZoomSpringArmLength;//[Offset: 0x180, Size: 4]
	float BoltActionHoldTimeDefault;//[Offset: 0x188, Size: 4]
	float BoltActionFov;//[Offset: 0x18c, Size: 4]
	float ScopeZoomAlpha;//[Offset: 0x190, Size: 4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0x198, Size: 80]
	float ScopeZoomSpeed;//[Offset: 0x1e8, Size: 4]
	<int,ScopeZoomConfig> ScopeZoomConfigMap;//[Offset: 0x1f0, Size: 80]
	int CurrentPlayAnimIndex;//[Offset: 0x240, Size: 4]
	DollyZoomParam ZoomScopeParam;//[Offset: 0x244, Size: 12]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x258, Size: 80]
	<FName,float> ScopeZoomMap;//[Offset: 0x2a8, Size: 80]
	float TanHalfFOV;//[Offset: 0x2fc, Size: 4]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool IsRearSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	FName SourceScopeAimCameraSocketName;//[Offset: 0x308, Size: 8]
	FName TargetScopeAimCameraSocketName;//[Offset: 0x310, Size: 8]
	void UpdateScopeCameraOffsets(out DollyZoomParam Param, bool IsAngledSight);// 0x32b77ec
	float SwitchSightConfigMaterial();// 0x4033584
	void SwitchScopeMeshAnim(byte Type);// 0x32b7770
	void SwitchRearSightTimelineUpdate(float Alpha);// 0x32b76f4
	void SwitchRearSightTimelineFinish(int TargetRearSightSocketIndex);// 0x32b7678
	void SwitchRearSight(bool IsBegin);// 0x32b75ec
	void SwitchCameraMode(byte Mode);// 0x32b7570
	float SwitchAngledSightConfigMaterial(bool forceSwitch);// 0x4033584
	void StopScopeIn();// 0x4033584
	float ShowReflectorSightTPPMaterial(bool forceADSState);// 0x4033584
	float ShowAngledSightTPPMaterial(bool forceADSState);// 0x4033584
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x32b74a8
	void SetTagCulling(bool IsUse);// 0x4033584
	void SetNearClipPlane(bool EnableNearClip);// 0x32b7424
	void ScopingChange(bool InValue);// 0x32b73a0
	void Scoping(byte NewType);// 0x32b7324
	void ScopeZoomUpdate(float Alpha);// 0x32b72a8
	void ScopeZoomTick(float DeltaTime);// 0x32b722c
	void ScopeTimelineUpdate(float Alpha);// 0x32b71b0
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x32b70fc
	void ScopeOutLogic();// 0x32b70e8
	void ScopeOutEnd();// 0x4033584
	void ScopeOut(byte NewType);// 0x32b706c
	void ScopeNotHandFold();// 0x32b7058
	void ScopeInterrupt(byte NewType);// 0x32b6fdc
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x32b6f28
	void ScopeInLogic();// 0x32b6f14
	void ScopeInEnd();// 0x4033584
	void ScopeInContinue();// 0x32b6f00
	void ScopeInAfterTimeline();// 0x32b6eec
	void ScopeIn(byte NewType);// 0x32b6e70
	void ScopeHandFold();// 0x32b6e5c
	void PlayScopeInTimeline();// 0x4033584
	bool IsUseZoomScope();// 0x32b6e24
	bool IsRPGScopeIn();// 0x32b6dec
	bool IsCurWeaponAttachedAngledSight();// 0x32b6db4
	bool IsAngledSightBySlot(byte Slot);// 0x32b6d24
	bool IsAngledSight();// 0x32b6ce4
	void InitScopeZoom(int WeaponId, int ScopeID);// 0x32b6c30
	bool HaveAngledSightBySlot(byte Slot);// 0x32b6ba0
	bool HaveAngledSight();// 0x32b6b68
	byte GetSightType();// 0x32b6b34
	float GetScopeZoomValue(int WeaponId, int ScopeID);// 0x32b6a70
	FName GetScopeZoomKey(int WeaponId, int ScopeID);// 0x32b69ac
	MaterialInstance* GetScopeMaterialOverride(STExtraShootWeapon* Weapon);// 0x4033584
	float GetScopeFov(STExtraWeapon* Weapon, bool bIsAngled);// 0x4033584
	MeshComponent* GetScopeCameraAttachTarget(bool IsAngled);// 0x32b6910
	FName GetScopeAimCameraSocketName();// 0x32b68dc
	ScopeZoomConfig GetCurScopeZoomConfig();// 0x32b68a8
	STExtraWeapon* GetCurScopeWeapon();// 0x32b6874
	void GetCurrentScopeZoomFov(out float MinFov, out float CurFov);// 0x32b6790
	void CalculateDollyZoomParam(float SpringOffset, float MinFov, float CurFov, out DollyZoomParam Param);// 0x32b6650
	void BoltAction(float DeltaSeconds);// 0x32b65d4
	void AttachToSightKeepTransform();// 0x4033584
	void AttachToSight();// 0x4033584
	void ApplyDollyZoomParam(out const DollyZoomParam Param, bool bSyncToPawn);// 0x32b64f4
	void ActiveComponentTickable();// 0x32b64e0

--------------------------------
Class: ScopeZoomConfig
	int DisplayMaxScale;//[Offset: 0x0, Size: 4]
	int DisplayMinScale;//[Offset: 0x4, Size: 4]
	CurveFloat* FovCurve;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DollyZoomParam
	float FOV;//[Offset: 0x0, Size: 4]
	float Scale;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x218, Size: 16]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x228, Size: 16]
	CharacterShieldAnimData[] CharacterShieldAnimEditList;//[Offset: 0x238, Size: 16]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x248, Size: 16]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x258, Size: 16]
	CurveFloat* FallingIKCurve;//[Offset: 0x268, Size: 8]
	CharacterShovelAnimData[] CharacterShovelEditList;//[Offset: 0x270, Size: 16]
	CharacterShovelAnimData[] CharacterShovelEditListFPP;//[Offset: 0x280, Size: 16]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x290, Size: 16]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x2a0, Size: 16]
	bool IsInitByBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	bool EnablePreLoadingFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 1]
	bool EnableNewAnimInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	bool OnPreLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x3c40c80
	void OnAsyncLoadingFinishedNew(AsyncLoadCharAnimParams LoadingParam);// 0x3c40a30
	void OnAsyncLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x3c407e0
	PlayerAnimData[] GetCharacterShovelAnim();// 0x3c4073c
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x3c40648
	AnimationAsset* GetAnimationAsset(AnimationAsset* AnimPtr);// 0x3c404f8

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 48]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 48]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 48]

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharacterShieldAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 48]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 48]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x70, Size: 48]

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 1]
	FName JumpTypeName;//[Offset: 0x8, Size: 8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x40, Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x70, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xa0, Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xd0, Size: 48]

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharacterShovelAnimData
	CharacterShovelPhaseData ShovelPhase_Enter;//[Offset: 0x0, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Shoveling;//[Offset: 0x30, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Leave;//[Offset: 0x60, Size: 48]
	CharacterShovelPhaseData ShovelPhase_Crouch_Leave;//[Offset: 0x90, Size: 48]

--------------------------------
Class: CharacterShovelPhaseData
	enum ShovelPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0, Size: 4]
	byte ModifyAnimListType;//[Offset: 0x4, Size: 1]
	byte AnimType;//[Offset: 0x5, Size: 1]
	byte PoseType;//[Offset: 0x6, Size: 1]
	byte JumpType;//[Offset: 0x7, Size: 1]
	byte JumpPhase;//[Offset: 0x8, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: CharacterVehAnimModifyData
	enum VehicleType;//[Offset: 0x0, Size: 1]
	int SeatIdx;//[Offset: 0x4, Size: 4]
	byte VehicleAnimType;//[Offset: 0x8, Size: 1]
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: AsyncLoadCharAnimParams

--------------------------------
Class: WeaponOverrideAttrs
	float GameModeOverride_DeviationMoveModifier;//[Offset: 0x0, Size: 4]
	float GameModeOverride_DeviationStanceJumpModifier;//[Offset: 0x4, Size: 4]
	float GameModeOverride_MeleeDamageAmountModifier;//[Offset: 0x8, Size: 4]
	float GameModeOverride_GrenadeDamageRadiusModifier;//[Offset: 0xc, Size: 4]
	float GameModeOverride_GrenadeDamageAmountModifier;//[Offset: 0x10, Size: 4]
	float GameModeOverride_GunsDamageAmountModifier;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CharacterOverrideAttrs
	float GameModeOverride_SpeedScaleModifier;//[Offset: 0x0, Size: 4]
	float GameModeOverride_SwimSpeedScaleModifier;//[Offset: 0x4, Size: 4]
	float GameModeOverride_EnergySpeedScaleModifier;//[Offset: 0x8, Size: 4]
	float GameModeOverride_LastBreathSpeedScaleModifier;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BonfireActor.UAEBuffApplierActor.Actor.Object
	float RemainingLifeTime;//[Offset: 0x3d8, Size: 4]
	bool bHasBeenLit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	bool bHasBurnOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 1]
	RoastMeatActor* curRoastMeat;//[Offset: 0x3e0, Size: 8]
	void RemingLifeTimeChanged(float previousRemaining);// 0x32c9bf0
	void RecordBonFireSuccess();// 0x32c9bdc
	void OnRep_RemainingLifeTime(float previousRemaining);// 0x32c9b60
	void OnRep_HasBurnOut();// 0x32c9b4c
	void OnRep_HasBeenLit();// 0x32c9b38
	void OnRep_CurRoastMeat();// 0x32c9b24
	void IsBurnOutChanged();// 0x32c9b08
	FString CastMsg_Implementation(FString Msg);// 0x32c99e4

--------------------------------
Class: UAEBuffApplierActor.Actor.Object
	Controller* InstigatorController;//[Offset: 0x3c8, Size: 8]
	Controller* GetTheInstigatorController();// 0x3c3deb0

--------------------------------
Class: RoastMeatActor.Actor.Object
	BonfireActor* parentBonfire;//[Offset: 0x3c8, Size: 8]
	enum AnimalType;//[Offset: 0x3d0, Size: 1]
	bool IsDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 1]
	void RecordRoastMeatSuccess();// 0x34bf5a0
	void OnRep_IsDone();// 0x34bf58c
	void CastActorMsg(FString Msg);// 0x34bf4dc

--------------------------------
Class: STCharacterBonfireLinkComp.ActorComponent.Object
	BonfireFanPickerData FanData;//[Offset: 0x110, Size: 20]
	float ReturnToFindNewTimer;//[Offset: 0x124, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x12c, Size: 8]
	BonfireActor*[] bonFireCandidates;//[Offset: 0x138, Size: 16]
	void RemoveBonfireCandidate(BonfireActor* newBonfire);// 0x3532070
	void InitializeOwner(Pawn* _TempPawn);// 0x3531ff4
	void AddBonfireCandidate(BonfireActor* newBonfire);// 0x3531f78

--------------------------------
Class: BonfireFanPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float HightDiff;//[Offset: 0x4, Size: 4]
	float Angle;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InteractionEmoteConfig
	int SelfEmoteId;//[Offset: 0x0, Size: 4]
	int OtherEmoteId;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRespawnData
	byte RespawnCount;//[Offset: 0x0, Size: 1]
	Vector Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]
	bool bCanRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: BaseVaultComponent.LuaActorComponent.ActorComponent.Object
	bool bCheckState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bHoldingVaultButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	bool VaultCheckCPP();// 0x32bc808
	void StartAsyncLoadTeamVaultAnimRes();// 0x32bc7ec
	void ServerRPC_VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Actor* WindowActor, Rotator movedir);// 0x32bc468
	void ServerRPC_StopVault();// 0x32bc408
	void ServerRPC_FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x32bc1a8
	void MulticastRPC_VaultFail(FString Reason);// 0x32bc0f8
	void MulticastRPC_VaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Rotator movedir);// 0x32bbe20
	void MulticastRPC_StopVault();// 0x32bbe04
	void MulticastRPC_FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x32bbc00
	void EndVaultCPP();// 0x32bbbe4
	void DoVaultIgnoreStateCPP();// 0x32bbbc8
	void DoVaultCPP();// 0x32bbbac

--------------------------------
Class: InjuryParticleAttachOffset
	byte MovementMode;//[Offset: 0x0, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	byte AttachLocationType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: NetCarryBackState
	enum State;//[Offset: 0x0, Size: 1]
	enum DetachMethod;//[Offset: 0x1, Size: 1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x8, Size: 8]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x10, Size: 8]

--------------------------------
Class: STCharacterCarryBackComp.LuaActorComponent.ActorComponent.Object
	FString ActorComponentName;//[Offset: 0x1d8, Size: 16]
	int CarryBackSkillID;//[Offset: 0x1e8, Size: 4]
	int PutDownSkillID;//[Offset: 0x1ec, Size: 4]
	int DSSwitchId;//[Offset: 0x1f0, Size: 4]
	enum State;//[Offset: 0x1f4, Size: 1]
	STExtraBaseCharacter* CarryBackCharacter;//[Offset: 0x1f8, Size: 8]
	STExtraBaseCharacter* BeCarriedBackCharacter;//[Offset: 0x200, Size: 8]
	enum DetachMethod;//[Offset: 0x208, Size: 1]
	delegate OnEnterCarryBackState;//[Offset: 0x210, Size: 16]
	delegate OnExitCarryBackState;//[Offset: 0x220, Size: 16]
	delegate OnEnterBeCarriedBackState;//[Offset: 0x230, Size: 16]
	delegate OnExitBeCarriedBackState;//[Offset: 0x240, Size: 16]
	bool bEnableBPInterrupted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	SkillReplaceCharAnimData[] AnimDataList;//[Offset: 0x270, Size: 16]
	float CorrectTickInterval;//[Offset: 0x280, Size: 4]
	bool bEnableTranformCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool bEnableCollisionCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 1]
	void StopPutDown();// 0x3533a08
	void StopCarryBack(enum InDetachMethod);// 0x3533984
	void StopBePutDown();// 0x3533970
	void StopBeCarriedBack(enum InDetachMethod);// 0x35338ec
	void StartPrePutDown();// 0x35338d0
	void StartPreCarryBack(STExtraBaseCharacter* InCharacter);// 0x353384c
	void StartPreBePutDown();// 0x3533830
	void StartPreBeCarriedBack(STExtraBaseCharacter* InCharacter);// 0x35337ac
	void StartCorrectBeCarriedState(bool bInEnableTranformCorrect, bool bInEnableCollisionCorrect);// 0x35336dc
	void SetCarryBackState(enum InState, STExtraBaseCharacter* InCarryBackCharacter, STExtraBaseCharacter* InBeCarriedBackCharacter);// 0x35335ec
	void ResetCarryBackState();// 0x35335d8
	void ReplaceCharacterAnimation(bool bReplace);// 0x3533554
	void PutDownSomebody(bool bFront);// 0x35334d0
	void PutDownFailed();// 0x35334bc
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x35333c8
	void LocalPutDownFailed();// 0x35333ac
	void LocalExitCarryBackState(enum InDetachMethod);// 0x3533328
	void LocalExitBeCarriedBackState(enum InDetachMethod);// 0x35332a4
	void LocalEnterPutDownState();// 0x3533288
	void LocalEnterCarryBackState();// 0x353326c
	void LocalEnterBePutDownState();// 0x3533250
	void LocalEnterBeCarriedBackState();// 0x3533234
	void LocalCompleteCarryBackState();// 0x3533218
	void LocalCompleteBeCarriedBackState();// 0x35331fc
	void LocalCarryBackFailed();// 0x35331e0
	bool IsInCarryBackState();// 0x35331a8
	bool IsInBeCarriedBackState();// 0x3533170
	bool IsCarryBackEnable();// 0x3533138
	void HandleCarrySkillEndEvent(enum StopReason, int SkillID);// 0x3533078
	void CompletePutDown(bool bFront);// 0x3532fec
	void CompleteCarryBack();// 0x3532fd0
	void CompleteBePutDown(bool bFront);// 0x3532f44
	void CompleteBeCarriedBack();// 0x3532f28
	void CarryBackStateDelegate__DelegateSignature();// 0x4033584
	void CarryBackSomebody();// 0x3532f14
	void CarryBackFailed();// 0x3532f00
	void BPOnCarryBackCharacterStateInterrupted(int stateID, int InterruptedBy);// 0x4033584
	void BPOnBeCarriedBackCharacterStateInterrupted(int stateID, int InterruptedBy);// 0x4033584
	void BePutDownBySomebody(bool bFront);// 0x3532e7c
	void BeCarriedBackBySomebody();// 0x3532e68

--------------------------------
Class: SkillReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x8, Size: 16]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x18, Size: 16]

--------------------------------
Class: PlayerPosMarkerParam
	Character* Player;//[Offset: 0x0, Size: 8]
	float MarkTimeLen;//[Offset: 0x8, Size: 4]
	int MarkIcon;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0x140, Size: 40]
	float blendTime;//[Offset: 0x168, Size: 4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	bool bOnlyEmoteActionAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 1]
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0x170, Size: 16]
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0x180, Size: 16]
	EmoteAnimConfig[] MainCharacterAnimConfig;//[Offset: 0x190, Size: 16]
	EmoteActionBase*[] EmoteActionList;//[Offset: 0x1a0, Size: 16]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x1b0, Size: 8]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x1b8, Size: 8]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	AkAudioEvent*[] MaleEmoteSoundStartEventList;//[Offset: 0x1c8, Size: 16]
	AkAudioEvent*[] FemaleEmoteSoundStartEventList;//[Offset: 0x1d8, Size: 16]
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x328c0fc
	bool HandlePickup(out const interface classNone ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason);// 0x328be48
	bool HandleDrop(int InCount, enum Reason);// 0x328bd74
	bool HandleDisuse(enum Reason);// 0x328bcdc
	BackpackComponent* GetBackpackComponent();// 0x328bca8
	bool CheckCanPickUp(CharacterAvatarComponent2* AvatarComp, int nowCapcity);// 0x328bbdc

--------------------------------
Class: LobbyGenderAnimData
	AnimationAsset* BoyAnim;//[Offset: 0x0, Size: 40]
	AnimationAsset* GirlAnim;//[Offset: 0x28, Size: 40]

--------------------------------
Class: EmoteAnimConfig
	FName GenderStr;//[Offset: 0x0, Size: 8]
	class Character* MainCharacter;//[Offset: 0x8, Size: 40]
	AnimationAsset* MainCharacterAnimAsset;//[Offset: 0x30, Size: 40]
	bool CanRotateMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	Transform MainCharacterTransform;//[Offset: 0x60, Size: 48]
	bool RotateBackToZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	LevelSequence* EmoteLevelSequence;//[Offset: 0x98, Size: 8]
	EmoteAnimCharacterConfig[] MultiFollowerCharacters;//[Offset: 0xa0, Size: 16]
	class Character* FollowerCharacter;//[Offset: 0xb0, Size: 40]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x2e0, Size: 8]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x2e8, Size: 80]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x338, Size: 80]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x388, Size: 80]

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 80]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 16]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 16]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 24]
	FString ObjectPath;//[Offset: 0x28, Size: 16]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 28]
	FString ComponentName;//[Offset: 0x20, Size: 16]
	Object* CachedComponent;//[Offset: 0x30, Size: 8]

--------------------------------
Class: EmoteAnimCharacterConfig
	class Character* Character;//[Offset: 0x0, Size: 40]
	Transform Transform;//[Offset: 0x30, Size: 48]
	bool NeedAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]

--------------------------------
Class: EmoteActionBase.Object
	float PropStartShowTime;//[Offset: 0x28, Size: 4]
	float PropEndShowTime;//[Offset: 0x2c, Size: 4]
	bool bOnlyInBornIsland;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	delegate OnActionReady;//[Offset: 0x48, Size: 16]
	void SetActionDelayTimeHandle(Object* InOuter, BackpackEmoteHandle* InHandle);// 0x335d2d0
	Object* GetSoftRefObj(out const SoftObjectPath AssetRef);// 0x335d200
	class Object GetSoftRefClass(out const SoftObjectPath AssetRef);// 0x335d130
	bool GetIsExecuting();// 0x335d114
	void Destroy();// 0x335d0f8
	void DelayShow();// 0x335d0dc

--------------------------------
Class: MovementRecordData
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector LocationAfterHandleClientError;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	Vector Velocity;//[Offset: 0x24, Size: 12]
	Vector ControllerNormalRot;//[Offset: 0x30, Size: 12]
	float ServerTimeStamp;//[Offset: 0x3c, Size: 4]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Vector VehicleLocation;//[Offset: 0x44, Size: 12]
	byte PoseState;//[Offset: 0x50, Size: 1]
	enum MoveBaseState;//[Offset: 0x51, Size: 1]
	float PingMillisecond;//[Offset: 0x54, Size: 4]
	bool IsCustomMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	uint64 PawnStates;//[Offset: 0x60, Size: 8]
	bool bHasWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]

--------------------------------
Class: ShootDamageTipsStr
	STExtraBaseCharacter* DamageTarget;//[Offset: 0x0, Size: 8]
	float Damage;//[Offset: 0x8, Size: 4]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TLog_ActivityEventType
	byte ActivityEventID;//[Offset: 0x0, Size: 1]
	Vector ActivityEventLoc;//[Offset: 0x4, Size: 12]

--------------------------------
Class: STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	bool bPlayHurtAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]

--------------------------------
Class: DotDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: ModAdapter.Object
	Actor* SpawnPointLightActor(ModAdapterSpawnInfo SpawnInfo);// 0x341d274
	Actor* SpawnModActorByClass(class Actor ActorClass, out const Transform SpawnTransform, Pawn* Instigator, Actor* Owner);// 0x341d10c

--------------------------------
Class: ModAdapterSpawnInfo
	Actor* RelatedActor;//[Offset: 0x0, Size: 8]
	FName LightType;//[Offset: 0x8, Size: 8]
	Transform SpawnTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 4]
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 16]
	float DefaultFOVAngle;//[Offset: 0x18, Size: 4]
	byte[] VisualCheckChanelList;//[Offset: 0x20, Size: 16]
	class Character[] ExcludeCheckCharacterClass;//[Offset: 0x30, Size: 16]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x68, Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x70, Size: 80]
	<int,float> VisualAngleLimitMap;//[Offset: 0xc0, Size: 80]
	STExtraPlayerController* CachedLocalController;//[Offset: 0x110, Size: 8]

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 80]

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 16]
	Actor* VisibleActor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GameModePlayerShowUpassInfo
	FString PlayerName;//[Offset: 0x0, Size: 16]
	int updateTime;//[Offset: 0x10, Size: 4]
	int upassLevel;//[Offset: 0x14, Size: 4]
	int upassScore;//[Offset: 0x18, Size: 4]
	int planeAvatarId;//[Offset: 0x1c, Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	FString iconUrl;//[Offset: 0x28, Size: 16]
	FString Nation;//[Offset: 0x38, Size: 16]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x48, Size: 72]
	int upassKeepBuy;//[Offset: 0x90, Size: 4]
	int upassCurValue;//[Offset: 0x94, Size: 4]
	int nUpassPrimePlusCard;//[Offset: 0x98, Size: 4]

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 12]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int LeftPlayerNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0, Size: 16]
	Vector PlaneStartPoint;//[Offset: 0x10, Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x1c, Size: 12]
	CircleDataMining[] CircleDataMining;//[Offset: 0x28, Size: 16]
	GameWatchReport[] WatchReport;//[Offset: 0x38, Size: 16]

--------------------------------
Class: GameWatchReport
	uint16 AreaID;//[Offset: 0x0, Size: 2]
	int8 PlatID;//[Offset: 0x2, Size: 1]
	FString ZoneID;//[Offset: 0x8, Size: 16]
	uint64 player_uid;//[Offset: 0x18, Size: 8]
	float total_time;//[Offset: 0x20, Size: 4]
	WatchFlow[] watch_flow;//[Offset: 0x28, Size: 16]

--------------------------------
Class: WatchFlow
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 sec;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAEGameSubsystem.Object
	delegate GameModeStateChangeEvent;//[Offset: 0x28, Size: 16]
	delegate ActorOverlapEvent;//[Offset: 0x38, Size: 16]
	delegate ActorDieEvent;//[Offset: 0x48, Size: 16]
	delegate PawnDieEvent;//[Offset: 0x58, Size: 16]
	delegate CharacterDieEvent;//[Offset: 0x68, Size: 16]
	delegate EnterAreaTriggerEvent;//[Offset: 0x78, Size: 16]
	delegate ExitAreaTriggerEvent;//[Offset: 0x88, Size: 16]
	delegate PawnPickupItemEvent;//[Offset: 0x98, Size: 16]
	delegate VehicleOverlapEvent;//[Offset: 0xa8, Size: 16]
	delegate InteractiveActorBeginEvent;//[Offset: 0xb8, Size: 16]
	delegate InteractiveActorDoneEvent;//[Offset: 0xc8, Size: 16]
	delegate CharacterStartSkill;//[Offset: 0xd8, Size: 16]
	delegate CharacterStopSkill;//[Offset: 0xe8, Size: 16]
	delegate CharacterStartSkillPhase;//[Offset: 0xf8, Size: 16]
	delegate CharacterStopSkillPhase;//[Offset: 0x108, Size: 16]
	delegate CharacterStartSkillCooldown;//[Offset: 0x118, Size: 16]
	delegate CharacterStopSkillCooldown;//[Offset: 0x128, Size: 16]
	delegate CharacterAddSkill;//[Offset: 0x138, Size: 16]
	delegate CharacterRemoveSkill;//[Offset: 0x148, Size: 16]
	delegate PlayerJoinEvent;//[Offset: 0x158, Size: 16]
	delegate PlayerRealExitEvent;//[Offset: 0x168, Size: 16]
	delegate PlayerExitEvent;//[Offset: 0x178, Size: 16]
	delegate ProjectileStopEvent;//[Offset: 0x188, Size: 16]
	delegate ProjectileBounceEvent;//[Offset: 0x198, Size: 16]
	delegate DecoraterActorSpawnEvent;//[Offset: 0x1a8, Size: 16]
	delegate RemoteEvent;//[Offset: 0x1b8, Size: 16]
	delegate PlayerDamageQueryEvent;//[Offset: 0x1c8, Size: 16]
	delegate PawnNearDeathEvent;//[Offset: 0x1d8, Size: 16]
	delegate PawnNearDeathOrRescuedEvent;//[Offset: 0x1e8, Size: 16]
	delegate OnAIPawnSpawnEvent;//[Offset: 0x1f8, Size: 16]
	delegate OnCharacterRespawnEvent;//[Offset: 0x208, Size: 16]
	delegate ChooseEnemyLoseTargetEvent;//[Offset: 0x218, Size: 16]
	delegate FindEnemyWarningEvent;//[Offset: 0x228, Size: 16]
	delegate ModFindEnemyWarningEvent;//[Offset: 0x238, Size: 16]
	delegate TaskInterActiveActorBeginEvent;//[Offset: 0x248, Size: 16]
	delegate TaskInterActiveActorDoneEvent;//[Offset: 0x258, Size: 16]
	delegate LevelAddedEvent;//[Offset: 0x268, Size: 16]
	delegate DSLuaGMEvent;//[Offset: 0x278, Size: 16]
	delegate OnWeaponFireEvent;//[Offset: 0x288, Size: 16]
	delegate PlayerPickUpItemEvent;//[Offset: 0x298, Size: 16]
	delegate PlayerDropItemEvent;//[Offset: 0x2a8, Size: 16]
	delegate PlayerUseItemEvent;//[Offset: 0x2b8, Size: 16]
	delegate PlayerDisUseItemEvent;//[Offset: 0x2c8, Size: 16]
	delegate PlayerSwapItemEvent;//[Offset: 0x2d8, Size: 16]
	delegate PlayerEquipItemEvent;//[Offset: 0x2e8, Size: 16]
	delegate PlayerUnEquipItemEvent;//[Offset: 0x2f8, Size: 16]
	delegate PlayerConsumeEvent;//[Offset: 0x308, Size: 16]
	delegate PawnChangeTeamEvent;//[Offset: 0x318, Size: 16]

--------------------------------
Class: WeaponAttrReloadTableStruct
	int KeyID;//[Offset: 0x0, Size: 4]
	float AutoAimingConfig_InnerRange_Speed;//[Offset: 0x4, Size: 4]
	float AutoAimingConfig_InnerRange_CenterSpeedRate;//[Offset: 0x8, Size: 4]
	float AutoAimingConfig_InnerRange_RangeRate;//[Offset: 0xc, Size: 4]
	float AutoAimingConfig_InnerRange_SpeedRate;//[Offset: 0x10, Size: 4]
	float AutoAimingConfig_InnerRange_RangeRateSight;//[Offset: 0x14, Size: 4]
	float AutoAimingConfig_InnerRange_SpeedRateSight;//[Offset: 0x18, Size: 4]
	float AutoAimingConfig_InnerRange_CrouchRate;//[Offset: 0x1c, Size: 4]
	float AutoAimingConfig_InnerRange_ProneRate;//[Offset: 0x20, Size: 4]
	float AutoAimingConfig_InnerRange_DyingRate;//[Offset: 0x24, Size: 4]
	float AutoAimingConfig_InnerRange_DriveVehicleRate;//[Offset: 0x28, Size: 4]
	float AutoAimingConfig_InnerRange_InVehicleRate;//[Offset: 0x2c, Size: 4]
	float AutoAimingConfig_InnerRange_FreeFallRate;//[Offset: 0x30, Size: 4]
	float AutoAimingConfig_InnerRange_OpeningRate;//[Offset: 0x34, Size: 4]
	float AutoAimingConfig_InnerRange_LandingRate;//[Offset: 0x38, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMaxRange;//[Offset: 0x3c, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMinRange;//[Offset: 0x40, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMinAttenuationDis;//[Offset: 0x44, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbMaxAttenuationDis;//[Offset: 0x48, Size: 4]
	float AutoAimingConfig_InnerRange_AdsorbActiveMinRange;//[Offset: 0x4c, Size: 4]
	float AutoAimingConfig_OuterRange_Speed;//[Offset: 0x50, Size: 4]
	float AutoAimingConfig_OuterRange_CenterSpeedRate;//[Offset: 0x54, Size: 4]
	float AutoAimingConfig_OuterRange_RangeRate;//[Offset: 0x58, Size: 4]
	float AutoAimingConfig_OuterRange_SpeedRate;//[Offset: 0x5c, Size: 4]
	float AutoAimingConfig_OuterRange_RangeRateSight;//[Offset: 0x60, Size: 4]
	float AutoAimingConfig_OuterRange_SpeedRateSight;//[Offset: 0x64, Size: 4]
	float AutoAimingConfig_OuterRange_CrouchRate;//[Offset: 0x68, Size: 4]
	float AutoAimingConfig_OuterRange_ProneRate;//[Offset: 0x6c, Size: 4]
	float AutoAimingConfig_OuterRange_DyingRate;//[Offset: 0x70, Size: 4]
	float AutoAimingConfig_OuterRange_DriveVehicleRate;//[Offset: 0x74, Size: 4]
	float AutoAimingConfig_OuterRange_InVehicleRate;//[Offset: 0x78, Size: 4]
	float AutoAimingConfig_OuterRange_FreeFallRate;//[Offset: 0x7c, Size: 4]
	float AutoAimingConfig_OuterRange_OpeningRate;//[Offset: 0x80, Size: 4]
	float AutoAimingConfig_OuterRange_LandingRate;//[Offset: 0x84, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMaxRange;//[Offset: 0x88, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMinRange;//[Offset: 0x8c, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMinAttenuationDis;//[Offset: 0x90, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbMaxAttenuationDis;//[Offset: 0x94, Size: 4]
	float AutoAimingConfig_OuterRange_AdsorbActiveMinRange;//[Offset: 0x98, Size: 4]
	float AutoAimingConfig_ScopeRange_Speed;//[Offset: 0x9c, Size: 4]
	float AutoAimingConfig_ScopeRange_CenterSpeedRate;//[Offset: 0xa0, Size: 4]
	float AutoAimingConfig_ScopeRange_RangeRate;//[Offset: 0xa4, Size: 4]
	float AutoAimingConfig_ScopeRange_SpeedRate;//[Offset: 0xa8, Size: 4]
	float AutoAimingConfig_ScopeRange_RangeRateSight;//[Offset: 0xac, Size: 4]
	float AutoAimingConfig_ScopeRange_SpeedRateSight;//[Offset: 0xb0, Size: 4]
	float AutoAimingConfig_ScopeRange_CrouchRate;//[Offset: 0xb4, Size: 4]
	float AutoAimingConfig_ScopeRange_ProneRate;//[Offset: 0xb8, Size: 4]
	float AutoAimingConfig_ScopeRange_DyingRate;//[Offset: 0xbc, Size: 4]
	float AutoAimingConfig_ScopeRange_DriveVehicleRate;//[Offset: 0xc0, Size: 4]
	float AutoAimingConfig_ScopeRange_InVehicleRate;//[Offset: 0xc4, Size: 4]
	float AutoAimingConfig_ScopeRange_FreeFallRate;//[Offset: 0xc8, Size: 4]
	float AutoAimingConfig_ScopeRange_OpeningRate;//[Offset: 0xcc, Size: 4]
	float AutoAimingConfig_ScopeRange_LandingRate;//[Offset: 0xd0, Size: 4]
	float AutoAimingConfig_ScopeRange_AdsorbMaxRange;//[Offset: 0xd4, Size: 4]
	float AutoAimingConfig_ScopeRange_AdsorbMinRange;//[Offset: 0xd8, Size: 4]
	float AutoAimingConfig_ScopeRange_AdsorbMinAttenuationDis;//[Offset: 0xdc, Size: 4]
	float AutoAimingConfig_ScopeRange_AdsorbMaxAttenuationDis;//[Offset: 0xe0, Size: 4]
	float AutoAimingConfig_ScopeRange_AdsorbActiveMinRange;//[Offset: 0xe4, Size: 4]
	float AutoAimingConfig_FollowTimeMax;//[Offset: 0xe8, Size: 4]
	float AutoAimingConfig_MaxAngle;//[Offset: 0xec, Size: 4]
	int AutoAimingConfig_TriggerBeforeFire;//[Offset: 0xf0, Size: 4]
	FString AutoAimingConfig_SpeedCurvePath;//[Offset: 0xf8, Size: 16]
	FString AutoAimingConfig_DistanceCurvePath;//[Offset: 0x108, Size: 16]
	FString AutoAimingConfig_SensitiveCurvePath;//[Offset: 0x118, Size: 16]
	float AccessoriesVRecoilFactor;//[Offset: 0x128, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x12c, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x130, Size: 4]
	float RecoilLeftMax;//[Offset: 0x134, Size: 4]
	float RecoilRightMax;//[Offset: 0x138, Size: 4]
	float RecoilKickADS;//[Offset: 0x13c, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0x140, Size: 4]
	float DeviationBase;//[Offset: 0x144, Size: 4]
	float DeviationBaseAim;//[Offset: 0x148, Size: 4]
	float DeviationRecoilGain;//[Offset: 0x14c, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x150, Size: 4]
	float DeviationMaxMove;//[Offset: 0x154, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x158, Size: 4]
	float DeviationStanceJump;//[Offset: 0x15c, Size: 4]
	float DeviationShoulderMultiplier;//[Offset: 0x160, Size: 4]
	float GameDeviationFactor;//[Offset: 0x164, Size: 4]
	float HitPartCoffHead;//[Offset: 0x168, Size: 4]
	float HitPartCoffBody;//[Offset: 0x16c, Size: 4]
	float HitPartCoffLimbs;//[Offset: 0x170, Size: 4]
	float HitPartCoffHand;//[Offset: 0x174, Size: 4]
	float HitPartCoffFoot;//[Offset: 0x178, Size: 4]
	float ZombileHitPartCoffHead;//[Offset: 0x17c, Size: 4]
	float ZombileHitPartCoffBody;//[Offset: 0x180, Size: 4]
	float ZombileHitPartCoffLimbs;//[Offset: 0x184, Size: 4]
	float ZombileHitPartCoffHand;//[Offset: 0x188, Size: 4]
	float ZombileHitPartCoffFoot;//[Offset: 0x18c, Size: 4]
	float BaseImpactDamage;//[Offset: 0x190, Size: 4]
	float RangeModifier;//[Offset: 0x194, Size: 4]
	float ReferenceDistance;//[Offset: 0x198, Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x19c, Size: 4]
	float ReloadTime;//[Offset: 0x1a0, Size: 4]
	float ReloadTimeTactical;//[Offset: 0x1a4, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x1a8, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x1ac, Size: 4]
	float ReloadDurationStart;//[Offset: 0x1b0, Size: 4]
	float ReloadDurationLoop;//[Offset: 0x1b4, Size: 4]
	float MaxBulletNumInOneClip;//[Offset: 0x1b8, Size: 4]
	float InitBulletInClip;//[Offset: 0x1bc, Size: 4]
	float BulletFireSpeed;//[Offset: 0x1c0, Size: 4]
	float ImpactEffectSkipDistance;//[Offset: 0x1c4, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x1c8, Size: 4]
	int bEnableVehicleShoot;//[Offset: 0x1cc, Size: 4]
	int bEnableLeanOutHolding;//[Offset: 0x1d0, Size: 4]
	float Bullet_RadialDamageParams_BaseDamage;//[Offset: 0x1d4, Size: 4]
	float Bullet_RadialDamageParams_MinimumDamage;//[Offset: 0x1d8, Size: 4]
	float Bullet_RadialDamageParams_DamageInnerRadius;//[Offset: 0x1dc, Size: 4]
	float Bullet_RadialDamageParams_DamageOuterRadius;//[Offset: 0x1e0, Size: 4]
	float Bullet_RadialDamageParams_DamageFalloff;//[Offset: 0x1e4, Size: 4]
	float Bullet_MaxNoGravityRange;//[Offset: 0x1e8, Size: 4]
	float Bullet_LaunchGravityScale;//[Offset: 0x1ec, Size: 4]
	FString Bullet_RadialDamageParams_DamageTypeClass;//[Offset: 0x1f0, Size: 16]
	FString ImpactActorTemplatePath;//[Offset: 0x200, Size: 16]
	FString BulletTemplatePath;//[Offset: 0x210, Size: 16]
	int ReloadWithNoCost;//[Offset: 0x220, Size: 4]
	FString MuzzleFX;//[Offset: 0x228, Size: 16]
	FString ScopeMuzzleFX;//[Offset: 0x238, Size: 16]
	FString RemoteMuzzleFX;//[Offset: 0x248, Size: 16]
	FString LocalSilencerMuzzleFX;//[Offset: 0x258, Size: 16]
	FString ScopeSilencerMuzzleFX;//[Offset: 0x268, Size: 16]
	FString RemoteSilencerMuzzleFX;//[Offset: 0x278, Size: 16]
	FString LocalFiringSuppressorMuzzleFX;//[Offset: 0x288, Size: 16]
	FString ScopeFiringSuppressorMuzzleFX;//[Offset: 0x298, Size: 16]
	FString RemoteFiringSuppressorMuzzleFX;//[Offset: 0x2a8, Size: 16]
	FString LocalCompensatorMuzzleFX;//[Offset: 0x2b8, Size: 16]
	FString ScopeCompensatorMuzzleFX;//[Offset: 0x2c8, Size: 16]
	FString RemoteCompensatorMuzzleFX;//[Offset: 0x2d8, Size: 16]
	FString Bullet_AutonomousFPPFX;//[Offset: 0x2e8, Size: 16]
	FString Bullet_AutonomousTPPFX;//[Offset: 0x2f8, Size: 16]
	FString Bullet_AutonomousGunADSFX;//[Offset: 0x308, Size: 16]
	FString Bullet_OBFPPFX;//[Offset: 0x318, Size: 16]
	FString Bullet_OBTPPFX;//[Offset: 0x328, Size: 16]
	FString Bullet_OBGunADSFX;//[Offset: 0x338, Size: 16]
	FString Bullet_ReplayFPPFX;//[Offset: 0x348, Size: 16]
	FString Bullet_ReplayTPPFX;//[Offset: 0x358, Size: 16]
	FString Bullet_ReplayGunADSFX;//[Offset: 0x368, Size: 16]
	FString Bullet_DefaultFX;//[Offset: 0x378, Size: 16]
	int bSimulateBulletOptimize;//[Offset: 0x388, Size: 4]
	int WeaponDurability;//[Offset: 0x3a8, Size: 4]
	int ShootReduceDurabilityAmount;//[Offset: 0x3ac, Size: 4]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	int CurrentInstanceCount;//[Offset: 0x110, Size: 4]
	int CurrentLocalInstanceCount;//[Offset: 0x114, Size: 4]
	MarkDispatchAction[] ActionQueue;//[Offset: 0x118, Size: 16]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0x128, Size: 16]
	MarkDispatchAction[] FramingDispatchMarkQueue;//[Offset: 0x138, Size: 16]
	int MarkCountProcessed;//[Offset: 0x148, Size: 4]
	int OverflowFrameCount;//[Offset: 0x14c, Size: 4]
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x340c090
	int GenerateNewLocalInstanceID();// 0x340c05c
	int GenerateNewInstanceID();// 0x340c038
	void DispatchMarkData(MarkDispatchAction Data);// 0x340bec8
	void ClearMarkDataByTypeID(int TypeId, enum MarkTypeIDClearType, STExtraPlayerState* WeakPlayerState);// 0x340bdd4

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0, Size: 1]
	enum RangeType;//[Offset: 0x1, Size: 1]
	MarkSyncData SyncData;//[Offset: 0x8, Size: 112]
	float DispatchDelayTime;//[Offset: 0x78, Size: 4]
	float RangeRad;//[Offset: 0x7c, Size: 4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x80, Size: 8]
	float DispatchTime;//[Offset: 0x88, Size: 4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	delegate OnMapAlertSet;//[Offset: 0x90, Size: 16]

--------------------------------
Class: ActorExtraComponents
	class ActorComponent[] BPComponents;//[Offset: 0x0, Size: 16]

--------------------------------
Class: XTriggerLuaRemoteComponent.ActorComponent.Object
	<FString,float> EventTagCDMap;//[Offset: 0x110, Size: 80]
	float EventCDTime;//[Offset: 0x160, Size: 4]
	bool LuaRemoteEvent(FString EventTag, FString CustomParam, Object* Object01, Object* Object02);// 0x376650c

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x28, Size: 16]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x38, Size: 16]
	void Unregister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x338ce7c
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x338cdf8
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x338cd38
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x338ccbc
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x4033584
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x4033584

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0x110, Size: 16]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0x120, Size: 4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0x124, Size: 4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bCheckingFieldOfViewEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	enum FieldOfViewNotificationStatus;//[Offset: 0x130, Size: 1]
	bool IsNotificationWorking();// 0x338c8d8
	static int IsGlobalDebugLineTraceDrawn();// 0x338c8a0
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x4033584
	enum GetFieldOfViewNotificationStatus();// 0x338c86c

--------------------------------
Class: GameModeCVarConfigItem
	FString Key;//[Offset: 0x0, Size: 16]
	FString Value;//[Offset: 0x10, Size: 16]

--------------------------------
Class: TslSimpleCollisionManager.Actor.Object
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x3e8, Size: 16]
	float DamageFieldUpdatePeriod;//[Offset: 0x470, Size: 4]
	float DamageFieldPassedTime;//[Offset: 0x474, Size: 4]
	void RegisterPersistentReceiver(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, int ID);// 0x3696c34
	void RegisterBoundingSphere(out const Vector Origin, float Radius, TslSimpleCollisionReceiver* OwnerTracer);// 0x3696b28
	void AddRandomPersistentCapsules(int Num, float RngRadius);// 0x3696a70
	int AddCheckerToBoundingSphere(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, TslSimpleCollisionReceiver* Receiver, bool RebuildSphere);// 0x36968f4

--------------------------------
Class: SimpleSpherePersistentChecker
	PrimitiveComponent* TargetComponent;//[Offset: 0x0, Size: 8]
	SimpleCollisionSphere Sphere;//[Offset: 0x8, Size: 16]
	float PassedTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SimpleCollisionSphere
	Vector Origin;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SimpleCollisionCapsule
	Vector Start;//[Offset: 0x0, Size: 12]
	Vector End;//[Offset: 0xc, Size: 12]
	float Radius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TslSimpleCollisionReceiver.SceneComponent.ActorComponent.Object

--------------------------------
Class: DestructibleSurfaceManager.Info.Actor.Object

--------------------------------
Class: MapUIMarkManager.LuaActorComponent.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0x208, Size: 16]
	class ScreenMarkManager* ScreenMarkMgrClass;//[Offset: 0x218, Size: 8]
	class ScreenRotationMarkManager* ScreenRotationMarkMgrClass;//[Offset: 0x220, Size: 8]
	MapUIBase* m_pMiniMap;//[Offset: 0x228, Size: 8]
	MapUIBase* m_pEntireMap;//[Offset: 0x230, Size: 8]
	ScreenMarkManager* m_ScreenMarkManager;//[Offset: 0x238, Size: 8]
	ScreenRotationMarkManager* m_ScreenRotationMarkManager;//[Offset: 0x240, Size: 8]
	int[] CurMarkInstList;//[Offset: 0x248, Size: 16]
	<int,MarkActorInstInfo> CurMarkActorInstMap;//[Offset: 0x258, Size: 80]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0x348, Size: 16]
	delegate OnMiniMapPointerException;//[Offset: 0x358, Size: 16]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0x368, Size: 8]
	STExtraPlayerController* pExtraPC;//[Offset: 0x370, Size: 8]
	UIBPAsyncParams[] UIBPCallbackBuffer;//[Offset: 0x3a8, Size: 16]
	float TickRate_Internal;//[Offset: 0x3c0, Size: 4]
	float TickRate_Callback;//[Offset: 0x3c4, Size: 4]
	<int,MapMarkConfig> MapMarkConfigs;//[Offset: 0x3c8, Size: 80]
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x34126c8
	void OnShowOrHideLegendMarkWidget(FString Tag, bool bIsShow);// 0x3412550
	void OnMiniMapPointerExceptionDelegate__DelegateSignature();// 0x4033584
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);// 0x4033584

--------------------------------
Class: MarkPathSetting
	int UIBPSrcID;//[Offset: 0x0, Size: 4]
	FString UIBPSoftPtr;//[Offset: 0x8, Size: 16]
	FString UIDescription;//[Offset: 0x18, Size: 16]

--------------------------------
Class: ScreenMarkManager.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 16]
	<int,ScreenMarkGroupData> ScreenMarkGroupMap;//[Offset: 0x98, Size: 80]
	Vector2D LimitXY;//[Offset: 0xe8, Size: 8]
	Vector2D LimitZW;//[Offset: 0xf0, Size: 8]
	Vector2D UIOffset;//[Offset: 0xf8, Size: 8]
	byte[] CheckObjectTypes;//[Offset: 0x100, Size: 16]
	ActorVectorPair[] ActorVectorHeapToBind;//[Offset: 0x230, Size: 16]
	ActorVectorPair[] ActorVectorArrayToUnBind;//[Offset: 0x240, Size: 16]
	void UpdateBindingWidgetByPanel(int ID);// 0x34c6c94
	void UpdateBindingLocationWidget(int ID);// 0x34c6c18
	void UpdateBindingActorWidget(int ID);// 0x34c6b9c
	void UnbindLocation(out const Vector BingdingLoction, int ID);// 0x34c6acc
	void UnbindActor(Actor* BindingObject, int ID);// 0x34c6a14
	bool RemoveBlockCheckIgnoreActor(int GroupID, Actor* Actor);// 0x34c6948
	void ReleaseGroupByID(int ID);// 0x34c68cc
	bool RecycleBindWidget(Widget* BindWidget, int ID);// 0x34c6800
	void OnLocationUnbindUI(Widget* BindWidget, int ID);// 0x34c6740
	void OnLocationBindUI(Widget* BindWidget, int ID);// 0x34c6680
	void OnInitMarkGroupData(int ID);// 0x34c65fc
	void OnInit();// 0x34c65e0
	void OnActorUnbindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x34c64e8
	void OnActorBindUI(Actor* BindingObject, Widget* BindWidget, int ID);// 0x34c63f0
	bool IsInBindingRange(out const Vector PlayerToCharacter, int ID);// 0x34c6314
	bool InitMarkGroupData(int ID, bool bIsAsync);// 0x34c6240
	Widget* GetWidgetByActor(int ID, const Actor* Actor);// 0x34c6178
	Widget* FetchUI(int ID);// 0x34c60ec
	bool CheckShouldShow(Actor* Actor, out ScreenMarkGroupData GroupData);// 0x34c5f4c
	bool BindToLoc(out const Vector BingdingLoction, int ID);// 0x34c5e70
	bool BindToActor(Actor* BindingObject, int ID);// 0x34c5da4
	bool AddBlockCheckIgnoreActor(int GroupID, Actor* Actor);// 0x34c5cd8

--------------------------------
Class: ScreenMarkGroupData
	ScreenMarkGroupConfig Config;//[Offset: 0x0, Size: 80]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x50, Size: 8]
	Actor*[] WorldObjectArr;//[Offset: 0x58, Size: 16]
	Vector[] WorldLocationArr;//[Offset: 0x68, Size: 16]
	Widget*[] HidingUIArr;//[Offset: 0x78, Size: 16]
	Widget*[] ShowingUIArr;//[Offset: 0x88, Size: 16]
	ActorWidgetPair[] BindingActorUIArr;//[Offset: 0x98, Size: 16]
	<Vector,Widget*> BindingLocationPairs;//[Offset: 0xa8, Size: 80]
	UAEUserWidget* ScreenMarkPanel;//[Offset: 0x100, Size: 8]
	CanvasPanel* AddToPanel;//[Offset: 0x108, Size: 8]
	Actor*[] IgnoreBlockArr;//[Offset: 0x110, Size: 16]

--------------------------------
Class: ScreenMarkGroupConfig
	int MaxWidgetNum;//[Offset: 0x0, Size: 4]
	float MaxShowDistance;//[Offset: 0x4, Size: 4]
	float UpdateBindingInterval;//[Offset: 0x8, Size: 4]
	float UpdateBindingIntervalMax;//[Offset: 0xc, Size: 4]
	float ReduseBindingVelocityThreshold;//[Offset: 0x10, Size: 4]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bIsUpdatedByPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	bool bBindOutScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	bool bBindBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 1]
	FString UIPathName;//[Offset: 0x18, Size: 16]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FName SkeletaSocketName;//[Offset: 0x30, Size: 8]
	Vector WorldPositionOffset;//[Offset: 0x38, Size: 12]
	Vector2D UIOffset;//[Offset: 0x44, Size: 8]

--------------------------------
Class: UIDuplicatedItemPool.Object
	bool bActiveItemListHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bCollapseWhenFree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	FString[] TagArray;//[Offset: 0x40, Size: 16]
	FString ItemBPClassPath;//[Offset: 0x50, Size: 16]
	class Object* ItemClass;//[Offset: 0x60, Size: 8]
	UserWidget*[] UsedItemList;//[Offset: 0x68, Size: 16]
	UserWidget*[] IdleItemList;//[Offset: 0x78, Size: 16]
	UserWidget*[] IdleItemListHold;//[Offset: 0x88, Size: 16]
	void RemoveTagFromItemPool(FString TagName);// 0x36e8e60
	void RemoveAllTagFromItemPool();// 0x36e8e4c
	void RecycleUnusedItem();// 0x36e8e38
	void RecycleAllItems();// 0x36e8e24
	void OnAsyncLoadWidgetFinished(UserWidget* Widget, int InstID);// 0x36e8d6c
	bool ItemPoolHasTag(FString TagName);// 0x36e8cb0
	bool ItemPoolHasOneTagAtLeast(out const FString[] TagNameList);// 0x36e8b90
	bool ItemPoolHasAllTag(out const FString[] TagNameList);// 0x36e8a70
	void InitItemPool(FString ClassPath, int DefaultItemCounts);// 0x36e8988
	UserWidget* GetOneItem();// 0x36e8954
	void GetAllUsedItem(out UserWidget*[] ItemList);// 0x36e889c
	void GetAllTagFromItemPool(out FString[] tagList);// 0x36e8788
	void FreeOneItem(UserWidget* IdleItem);// 0x36e870c
	void AddTagToItemPool(FString TagName);// 0x36e8664
	void AddMultiTagToItemPool(out const FString[] TagNameList);// 0x36e8550

--------------------------------
Class: ActorWidgetPair
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Widget* Widget;//[Offset: 0x8, Size: 8]

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	bool bDontPaintWhenChildEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	void SetDontPaintWhenChildEmpty(bool Enable);// 0x4f37fe4
	bool GetDontPaintWhenChildEmpty();// 0x4f37fac
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x4f37f20

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	int ZOrder;//[Offset: 0x64, Size: 4]
	void SetZOrder(int InZOrder);// 0x4f38ca8
	void SetSupportNotch(bool InSupportNotch);// 0x4f38c24
	void SetSize(Vector2D InSize);// 0x4f38bac
	void SetPosition(Vector2D InPosition);// 0x4f38b34
	void SetOffsets(Margin InOffset);// 0x4f38ab8
	void SetMinimum(Vector2D InMinimumAnchors);// 0x4f38a40
	void SetMaximum(Vector2D InMaximumAnchors);// 0x4f389c8
	void SetLayout(out const AnchorData InLayoutData);// 0x4f38938
	void SetAutoSize(bool InbAutoSize);// 0x4f388b4
	void SetAnchors(Anchors InAnchors);// 0x4f38838
	void SetAlignment(Vector2D InAlignment);// 0x4f387c0
	int GetZOrder();// 0x4f3878c
	Vector2D GetSize();// 0x4f38758
	Vector2D GetPosition();// 0x4f38724
	Margin GetOffsets();// 0x4f386ec
	AnchorData GetLayout();// 0x4f38698
	bool GetAutoSize();// 0x4f38660
	Anchors GetAnchors();// 0x4f38628
	Vector2D GetAlignment();// 0x4f385f4
	bool GeSupportNotch();// 0x4f385bc

--------------------------------
Class: ActorVectorPair
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ScreenRotationMarkManager.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 16]
	<int,ScreenRotationMarkGroupData> ScreenRotationMarkGroupMap;//[Offset: 0x98, Size: 80]
	Vector PlayerLoc;//[Offset: 0xe8, Size: 12]
	Vector PlayerDir;//[Offset: 0xf4, Size: 12]
	class Widget* ImageType;//[Offset: 0x248, Size: 8]
	void UpdateBindingLocationWidgetRender(int ID, out ScreenRotationMarkGroupData GroupData);// 0x34c8660
	void UpdateBindingLocationWidget(int ID, out ScreenRotationMarkGroupData GroupData);// 0x34c8510
	void UpdateBindingActorWidgetRender(int ID, out ScreenRotationMarkGroupData GroupData);// 0x34c83c0
	void UpdateBindingActorWidget(int ID, out ScreenRotationMarkGroupData GroupData);// 0x34c8270
	void UnbindLocation(out const Vector BingdingLoction, int ID);// 0x34c81a0
	void UnbindActor(Actor* BindingObject, int ID);// 0x34c80e8
	void ReleaseGroupByID(int ID);// 0x34c806c
	bool RecycleBindWidget(Widget* BindWidget, int ID);// 0x34c7fa0
	void OnInit();// 0x34c7f8c
	bool InitMarkGroupData(int ID, bool bIsAsync);// 0x34c7eb8
	Widget* GetWidgetByActor(int ID, const Actor* Actor);// 0x34c7df0
	Widget* FetchUI(int ID, out ScreenRotationMarkGroupData GroupData);// 0x34c7c90
	enum CheckWidgetDisAndAngleValid(Vector TargetLoc, out ScreenRotationMarkGroupData GroupData, out float Angle, out float Distance);// 0x34c7a90
	bool BindToLoc(out const Vector BingdingLoction, int ID);// 0x34c79b4
	bool BindToActor(Actor* BindingObject, int ID);// 0x34c78e8

--------------------------------
Class: ScreenRotationMarkGroupData
	ScreenRotationMarkConfig Config;//[Offset: 0x0, Size: 80]
	UIDuplicatedItemPool* UIPool;//[Offset: 0x50, Size: 8]
	Actor*[] WorldObjectArr;//[Offset: 0x58, Size: 16]
	Vector[] WorldLocationArr;//[Offset: 0x68, Size: 16]
	Widget*[] HidingUIArr;//[Offset: 0x78, Size: 16]
	Widget*[] ShowingUIArr;//[Offset: 0x88, Size: 16]
	<Actor*,Widget*> BindingActorUIMap;//[Offset: 0x98, Size: 80]
	<Vector,Widget*> BindingLocationUIMap;//[Offset: 0xe8, Size: 80]
	CanvasPanel* RootPanel;//[Offset: 0x138, Size: 8]

--------------------------------
Class: ScreenRotationMarkConfig
	ScreenRotationRangeValue DistanceRange;//[Offset: 0x0, Size: 16]
	ScreenRotationRangeValue AngleRange;//[Offset: 0x10, Size: 16]
	Actor* BindActor;//[Offset: 0x20, Size: 8]
	FString UIPathName;//[Offset: 0x28, Size: 16]
	float AngleOffset;//[Offset: 0x38, Size: 4]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool bIsBindingActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	float UpdateBindingInterval;//[Offset: 0x40, Size: 4]
	int DefaultNum;//[Offset: 0x44, Size: 4]
	float Radius;//[Offset: 0x48, Size: 4]

--------------------------------
Class: ScreenRotationRangeValue
	float MaxValue;//[Offset: 0x0, Size: 4]
	bool IsCloseOutMaxValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float MinValue;//[Offset: 0x8, Size: 4]
	bool IsCloseInMinValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: MapUIBase.Object
	delegate OnSetupUIMarkRoot;//[Offset: 0x28, Size: 16]
	delegate OnUpdateMark;//[Offset: 0x38, Size: 16]
	delegate OnUpdateMultiMark;//[Offset: 0x48, Size: 16]
	delegate OnRepositionItemOnMap;//[Offset: 0x58, Size: 16]
	CanvasPanel* m_pMarkRoot;//[Offset: 0x68, Size: 8]
	CanvasPanel*[] CustomTagMarkRootMap;//[Offset: 0x70, Size: 16]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0x80, Size: 80]
	<int,MapImageMarkData> AllImageMarks;//[Offset: 0xd0, Size: 80]
	bool bMapDynamicScaleDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	bool bRepositionMarkerAndPinDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	Vector LevelLandScapeCenterC;//[Offset: 0x1c4, Size: 12]
	Vector2D SelfMarkerAligmentC;//[Offset: 0x1d0, Size: 8]
	CanvasPanel* CanvasPanel_ShowAirPlaneRoute;//[Offset: 0x1d8, Size: 8]
	bool bIsShowAirPlaneRouteAfteHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	FString[] InnerCircleGameModeIDC;//[Offset: 0x1e8, Size: 16]
	FakeRadiationCircle* InnerCircle;//[Offset: 0x1f8, Size: 8]
	float ImageBlueCircleScale;//[Offset: 0x200, Size: 4]
	MapRealTimeInfo MapRealTimeInfoC;//[Offset: 0x208, Size: 264]
	MapRealTimeInfo CacheMapRealTimeInfoC;//[Offset: 0x310, Size: 264]
	MapDataBase* CurrentMapData;//[Offset: 0x418, Size: 8]
	UserWidget* BindWidget;//[Offset: 0x420, Size: 8]
	MapObjct* ParentMapObject;//[Offset: 0x428, Size: 8]
	Vector LandscapeCenterCpp;//[Offset: 0x430, Size: 12]
	float LevelToMapScaleC;//[Offset: 0x43c, Size: 4]
	float MapScaleCpp;//[Offset: 0x440, Size: 4]
	Vector2D MapImageSizeCpp;//[Offset: 0x444, Size: 8]
	float MapScalingRadio;//[Offset: 0x44c, Size: 4]
	int LocalPlayerIndexC;//[Offset: 0x450, Size: 4]
	float MapImageExtentC;//[Offset: 0x454, Size: 4]
	float MapWindowExtentC;//[Offset: 0x458, Size: 4]
	bool bNeedDrawSelfGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	bool bNeedDrawSelfGuideLineOutC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 1]
	LinearColor GuideLineColor;//[Offset: 0x460, Size: 16]
	LinearColor WhiteCircleColorC;//[Offset: 0x470, Size: 16]
	bool IsAntiAliasC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	float GuideLineDashSizeC;//[Offset: 0x484, Size: 4]
	float DefaultLineThicknessC;//[Offset: 0x488, Size: 4]
	bool bNeedDrawWhiteCircleC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c, Size: 1]
	bool bNeedDrawCircleGuideLineC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 1]
	Vector2D MapAdjustLocation;//[Offset: 0x490, Size: 8]
	CanvasPanel* PlayerAddPanel;//[Offset: 0x498, Size: 8]
	CanvasPanel* ExtraAddBottomPanel;//[Offset: 0x4a0, Size: 8]
	CanvasPanel* ExtraAddTopPanel;//[Offset: 0x4a8, Size: 8]
	bool bDrawOrHideAirDropPathDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	bool bIsDrawAirDropFlightPathBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 1]
	int AirDropIndex;//[Offset: 0x4b4, Size: 4]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x4bc, Size: 8]
	void UpdatePlayersLocAndRotC(STExtraPlayerController* STEPC, STExtraPlayerState* STEPS, STExtraGameStateBase* STEGS);// 0x340dbec
	void UpdateMultiMarkC(int Index, out const Vector2D[] MultiMarkLocs, bool IsShow, float Opacity);// 0x340da68
	void UpdateMarkC(int Index, Vector2D FLoc, bool IsShow, float Opacity);// 0x340d92c
	void TickWidget(out const Geometry MyGeometry, float InDeltaTime);// 0x340d84c
	void ShowOrHideLegendMarks(FString Tag, bool bIsShow);// 0x340d6d4
	void SetupUIMarkRoot();// 0x340d6c0
	void RepositionMapMultiMarkC(int PlayerIndex, Vector2D CurSize);// 0x340d60c
	void RepositionMapMarkC(int FIndex, int LocalPlayerIndex, Vector2D CurSize);// 0x340d520
	void RedrawAllMapMarkC(Vector2D CurSize);// 0x340d4a8
	void ReCalMapInfoC();// 0x340d494
	void OnUpdateUIMarks();// 0x340d478
	void OnUpdateImageMarks();// 0x340d45c
	void OnPaint(PaintContext InContext);// 0x340d3c4
	void InitMap(MapDataBase* InMapData, UserWidget* InUserWidget);// 0x340d308
	World* GetWorldInternal();// 0x340d2d4
	float GetLevelToMapScale();// 0x340d298
	STExtraGameStateBase* GetGameState();// 0x340d24c

--------------------------------
Class: MapUIMarkBaseWidget.LuaUAEUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45e, Size: 1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45f, Size: 1]
	bool bDoUsSelfZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	Vector2D LimitedSize;//[Offset: 0x464, Size: 8]
	int DefaultZOrder;//[Offset: 0x46c, Size: 4]
	TextBlock* CountDownText;//[Offset: 0x470, Size: 8]
	FString CountDownFormat;//[Offset: 0x478, Size: 16]
	CanvasPanelSlot* ChangeSizeSlot;//[Offset: 0x498, Size: 8]
	float OriginSizeX;//[Offset: 0x4a4, Size: 4]
	float OriginSizeY;//[Offset: 0x4a8, Size: 4]
	UpdateStateChangePorperty[] UpdateStatePropertyArray;//[Offset: 0x4b0, Size: 16]
	void UpdateUIBPState(out const CustomMarkEventData InState);// 0x34115a4
	void UpdateMarkSize(float inScale);// 0x3411520
	void UpdateMarkPosition(Vector2D NewMapPos, Vector2D MapAdjustOffset, float Angle, float MapWindowHalfExtent);// 0x34113f4
	bool ShouldLimitedInMinimap();// 0x34113bc
	void SetWidgetCurRotation(Rotator WorldRot3D);// 0x3411340
	void SetWidgetCurPostion(Vector WorldPos3D);// 0x34112c4
	void SetUpdatePropertyArray(out const UpdateStateChangePorperty[] PropertyArray, int InitState);// 0x341117c
	void SetCountDownText(TextBlock* TextBlock, int TotalSecond, bool IsShowZero, FString Format);// 0x3410f7c
	void SetChangeSizePanel(float SizeX, float SizeY, bool IsChangeSize, bool IsChangeInUpdate, float Ratio);// 0x3410dfc
	void RefreshPanelScale(float Scale);// 0x3410d80
	void RefreshCountDownText();// 0x3410d6c
	void OnWidgetShow(out const CustomMarkEventData InState);// 0x3410c9c
	void OnUpdateState(out const CustomMarkEventData InState);// 0x3410bcc
	void OnUpdateMarkSize(float Scale, float Ratio);// 0x3410b18
	void OnUpdateIconMap(int NewState);// 0x3410a9c
	void OnUIBPShow(out const CustomMarkEventData InState);// 0x34109c4
	void OnUIBPDestroy();// 0x34109a8
	void OnUIBPCreate(out const CustomMarkEventData InState, byte ParentState);// 0x3410884
	void OnEnterEntireMap();// 0x4033584
	Rotator GetWidgetCurWorldRot();// 0x341084c
	Vector GetWidgetCurWorldPos();// 0x3410814

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x128, Size: 24]
	delegate TextDelegate;//[Offset: 0x140, Size: 16]
	SlateColor ColorAndOpacity;//[Offset: 0x150, Size: 40]
	delegate ColorAndOpacityDelegate;//[Offset: 0x178, Size: 16]
	SlateColor SelectColorAndOpacity;//[Offset: 0x188, Size: 40]
	SlateColor NoSelectColorAndOpacity;//[Offset: 0x1b0, Size: 40]
	bool bHaveSelectColorAndOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 1]
	SlateFontInfo Font;//[Offset: 0x1e0, Size: 88]
	Vector2D ShadowOffset;//[Offset: 0x238, Size: 8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x240, Size: 16]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x250, Size: 16]
	float MinDesiredWidth;//[Offset: 0x260, Size: 4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	void SetVerticalJustification(byte InJustification);// 0x4f52960
	void SetText(FText InText);// 0x4f52748
	void SetShadowOffset(Vector2D InShadowOffset);// 0x4f526d0
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x4f52654
	void SetSelectColor(bool bIsSelect);// 0x4f525d0
	void SetOpacity(float InOpacity);// 0x4f52554
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x4f524d8
	void SetJustification(byte InJustification);// 0x4f5245c
	void SetFont(SlateFontInfo InFontInfo);// 0x4f521f0
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x4f51f98
	void SetAutoEllipsisText(bool InAutoEllipsisText);// 0x4f51f14
	FText GetText();// 0x4f51e08

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x100, Size: 4]
	byte Justification;//[Offset: 0x104, Size: 1]
	byte VerticalJustification;//[Offset: 0x105, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 1]
	float WrapTextAt;//[Offset: 0x108, Size: 4]
	enum WrappingPolicy;//[Offset: 0x10c, Size: 1]
	Margin Margin;//[Offset: 0x110, Size: 16]
	float LineHeightPercentage;//[Offset: 0x120, Size: 4]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 8]
	Object* FontMaterial;//[Offset: 0x8, Size: 8]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 40]
	FName TypefaceFontName;//[Offset: 0x48, Size: 8]
	int Size;//[Offset: 0x50, Size: 4]
	bool IsBold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 4]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 8]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 16]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: UpdateStateChangePorperty
	Widget* UpdateWidget;//[Offset: 0x0, Size: 8]
	FString[] IconPathArray;//[Offset: 0x8, Size: 16]
	enum[] IconVisibleArray;//[Offset: 0x18, Size: 16]
	LinearColor[] IconColorArray;//[Offset: 0x28, Size: 16]

--------------------------------
Class: MapImageMarkData
	int ConfigId;//[Offset: 0x0, Size: 4]
	Image* Image;//[Offset: 0x8, Size: 8]
	Vector CurrentWorldPos;//[Offset: 0x10, Size: 12]
	Rotator CurrentWorldRot;//[Offset: 0x1c, Size: 12]
	Vector2D OriginalSize;//[Offset: 0x28, Size: 8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	Vector2D MaxSize;//[Offset: 0x34, Size: 8]

--------------------------------
Class: FakeRadiationCircle.Actor.Object

--------------------------------
Class: MapRealTimeInfo
	Vector2D MapCenterToPlayer;//[Offset: 0x0, Size: 8]
	Vector MapCenterToBlueCircle;//[Offset: 0x8, Size: 12]
	Vector MapCenterToWhiteCircle;//[Offset: 0x14, Size: 12]
	Vector2D PlayerCoord;//[Offset: 0x20, Size: 8]
	Vector2D SpectatedPlayerCoord;//[Offset: 0x28, Size: 8]
	Vector2D WhiteCircleCoord;//[Offset: 0x30, Size: 8]
	Vector2D BlueCircleCoord;//[Offset: 0x38, Size: 8]
	float WhiteCircleRadius;//[Offset: 0x40, Size: 4]
	float BlueCircleRadius;//[Offset: 0x44, Size: 4]
	Vector2D LastDriveVehicleCoord;//[Offset: 0x48, Size: 8]
	bool bCanPlayerSeeLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	AirplaneRouteData PlaneRouteData;//[Offset: 0x58, Size: 104]
	AirDropPathData AirDropPathData;//[Offset: 0xc0, Size: 72]

--------------------------------
Class: AirplaneRouteData
	float PlaneFlyingProcess;//[Offset: 0x0, Size: 4]
	Vector2D CanJumpLocInMap;//[Offset: 0x4, Size: 8]
	Vector2D ForceJumpLocInMap;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D PlaneLocInMap;//[Offset: 0x1c, Size: 8]
	float PlaneRotation;//[Offset: 0x24, Size: 4]
	AirDropPathData[] AirDropPaths;//[Offset: 0x28, Size: 16]
	Vector2D CanJumpLocInMapForCamp;//[Offset: 0x38, Size: 8]
	Vector2D ForceJumpLocInMapForCamp;//[Offset: 0x40, Size: 8]
	float CampRouteLengthInMap;//[Offset: 0x48, Size: 4]
	float CampRouteWidgetRotateAngle;//[Offset: 0x4c, Size: 4]
	Vector2D LastValidCanJumpLocInMap;//[Offset: 0x50, Size: 8]
	Vector2D LastValidForceJumpLocInMap;//[Offset: 0x58, Size: 8]
	float LastValidRouteWidgetRotateAngle;//[Offset: 0x60, Size: 4]
	float LastValidRouteLengthInMap;//[Offset: 0x64, Size: 4]

--------------------------------
Class: AirDropPathData
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector2D StartLoc;//[Offset: 0x4, Size: 8]
	Vector2D TargetLoc;//[Offset: 0xc, Size: 8]
	float RouteWidgetRotateAngle;//[Offset: 0x14, Size: 4]
	float RouteLengthInMap;//[Offset: 0x18, Size: 4]
	Vector2D[] AirDropLocs;//[Offset: 0x20, Size: 16]
	Vector[] AirDropLocs3D;//[Offset: 0x30, Size: 16]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: MapDataBase.Object
	Widget*[] PlayerInfoRotWidgetArrayC;//[Offset: 0x28, Size: 16]
	Widget*[] PlayerInfoBPArrayC;//[Offset: 0x38, Size: 16]
	Widget*[] PlayerMarkBPArrayC;//[Offset: 0x48, Size: 16]
	MapUIBase* CurrentMapUI;//[Offset: 0x58, Size: 8]
	STExtraGameStateBase* CacheGameState;//[Offset: 0x60, Size: 8]
	void Init(MapUIBase* INMapUI);// 0x340c520
	World* GetWorldInternal();// 0x340c4ec
	STExtraGameStateBase* GetGameState();// 0x340c4a0

--------------------------------
Class: MapObjct.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 16]
	MapUIBase* CurrentHoldMapUI;//[Offset: 0x98, Size: 8]
	World* GetWorldInternal();// 0x340e89c
	void DrawCircle(Vector2D CircleCenter, LinearColor CircleColor, float CircleRadius, float MapWindowExtent, Vector2D PlayerCoord, byte MapType, bool bAntiAlias);// 0x340e6b0

--------------------------------
Class: MarkActorInstInfo
	int UIBPInstID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: UIBPAsyncParams
	MarkSyncData MarkData;//[Offset: 0x8, Size: 112]
	class Widget* UIIconSoftPtr;//[Offset: 0x80, Size: 40]
	class MapUIMarkBaseWidget* UIBPSoftPtr;//[Offset: 0xa8, Size: 40]
	class Object* UIClass;//[Offset: 0xd0, Size: 8]

--------------------------------
Class: MapMarkConfig
	int ConfigId;//[Offset: 0x0, Size: 4]
	FString UIPath;//[Offset: 0x8, Size: 16]
	bool bIsIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	Vector2D Size;//[Offset: 0x1c, Size: 8]
	bool bIsUpdateSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	Vector2D MaxSize;//[Offset: 0x28, Size: 8]
	int ZOrder;//[Offset: 0x30, Size: 4]
	bool bIsControlByLegend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	FString LegendTags;//[Offset: 0x38, Size: 16]

--------------------------------
Class: WidgetToRenderTarget.Object
	<FName,TextureRenderTarget2DManagerWidgetInfo> NameToTextureRenderTarget2DManagerWidgetInfos;//[Offset: 0x28, Size: 80]
	DrawTextToTextureRenderTarget2DParams[] CachedParams;//[Offset: 0x78, Size: 16]
	void ReleaseCachedParams();// 0x375b728
	bool ReceivePreDrawTextToTextureRenderTarget2DAsync(out DrawTextToTextureRenderTarget2DParams Params);// 0x4033584
	void ReceivePostDrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params);// 0x4033584
	void DrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params, out const delegate OnWidgetToRenderTargetDrawn);// 0x375b4d4

--------------------------------
Class: TextureRenderTarget2DManagerWidgetInfo
	class UserWidget* UserWidgetClass;//[Offset: 0x0, Size: 40]
	class UserWidget* LoadedUserWidgetClass;//[Offset: 0x28, Size: 8]
	UserWidget* UserWidget;//[Offset: 0x30, Size: 8]
	FName UpdateWidgetFunctionName;//[Offset: 0x38, Size: 8]

--------------------------------
Class: DrawTextToTextureRenderTarget2DParams
	FText Text;//[Offset: 0x0, Size: 24]
	FName WidgetName;//[Offset: 0x18, Size: 8]
	int DrawWidth;//[Offset: 0x20, Size: 4]
	int DrawHeight;//[Offset: 0x24, Size: 4]
	TextureRenderTarget2D* OptionalInOutTextureRenderTarget2D;//[Offset: 0x28, Size: 8]
	bool bMaterialInstanceDynamicCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x38, Size: 40]
	FName TextureParameterName;//[Offset: 0x60, Size: 8]
	MaterialInstanceDynamic* OptionalInOutMaterialInstanceDynamic;//[Offset: 0x68, Size: 8]
	FString Payload;//[Offset: 0x70, Size: 16]
	bool bParamsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]

--------------------------------
Class: GameStateWeaponRule
	bool bForbidShootTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float CheckForbidShootTime;//[Offset: 0x4, Size: 4]
	class Actor[] ForbidShootClassArray;//[Offset: 0x8, Size: 16]
	class Actor[] SwallowBulletClassArray;//[Offset: 0x18, Size: 16]

--------------------------------
Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x410, Size: 16]
	FString HousePathFilePath;//[Offset: 0x420, Size: 16]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	FString LogicAreaFilePath;//[Offset: 0x438, Size: 16]
	bool bTestOccupiedOcclusionPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool bDrawNavModifierProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	<int,AIWayPointActor*> AllAIWayPointActors;//[Offset: 0x498, Size: 80]
	ItemSpotSceneComponent* LastRegisteredItemSpot;//[Offset: 0x4e8, Size: 8]
	void RemoveDamageableActor(DamageableActor* DamageableActor);// 0x3250194
	void BreakWall(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x32500d4
	void BreakHouse(Vector LogicAreaLoc);// 0x3250058
	void AddDamageableActor(DamageableActor* DamageableActor);// 0x324ffdc

--------------------------------
Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x400, Size: 4]

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x3c8, Size: 4]
	TeamWayPointLink[] TeamLinks;//[Offset: 0x3d0, Size: 16]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x3e0, Size: 8]
	BillboardComponent* ShowSprite;//[Offset: 0x3e8, Size: 8]
	Vector GetNextWayPointLocation(int TeamID, int ExcludeID);// 0x324dcc8

--------------------------------
Class: TeamWayPointLink
	int TeamID;//[Offset: 0x0, Size: 4]
	WayPointLink[] Links;//[Offset: 0x8, Size: 16]

--------------------------------
Class: WayPointLink
	int NextPointID;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DamageableActor.UAERegionActor.LuaActor.Actor.Object
	void SetTargetDamageRateMap(<enum,float> InTargetDamageRateMap);// 0x3331590
	int GetVehicleDamagedSpeed();// 0x4033584
	int GetVehicleDamagedCoefficient();// 0x4033584
	<enum,float> GetTargetDamageRateMap();// 0x3331450
	float CPP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x33312ec
	bool CPP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x3331254
	bool CPP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x33310c0
	float CPP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x3331014
	float CPP_GetDamageRateByTarget(Actor* Target);// 0x3330f80
	enum[] CPP_GetDamageableGameObjectType();// 0x3330ed4
	bool CPP_GetCanBePicked();// 0x3330e94
	FName CPP_GetBulletBlockComponentTag();// 0x3330e58
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x3330dac
	float CPP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x3330cdc
	float CPP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x3330bec
	void BroadcastDamageState(int DState);// 0x3330b3c
	float BP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x4033584
	bool BP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x4033584
	bool BP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x4033584
	float BP_GetMaxHP();// 0x4033584
	float BP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x4033584
	float BP_GetDamageRateByTarget(Actor* Target);// 0x4033584
	enum[] BP_GetDamageableGameObjectType();// 0x4033584
	float BP_GetCurrentHP();// 0x4033584
	bool BP_GetCanBePicked();// 0x4033584
	FName BP_GetBulletBlockComponentTag();// 0x4033584
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x4033584
	void BP_DamageStateChange(int DState);// 0x4033584
	float BP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x4033584
	float BP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x4033584

--------------------------------
Class: PixelProjectedReflection.SceneCapture.Actor.Object
	PixelProjectedReflectionComponent* PixelProjectedReflectionComponent;//[Offset: 0x3d0, Size: 8]
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	void OnInterpToggle(bool bEnable);// 0x5c23e9c

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* MeshComp;//[Offset: 0x3c8, Size: 8]

--------------------------------
Class: PixelProjectedReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x350, Size: 8]
	float NormalDistortionStrength;//[Offset: 0x358, Size: 4]
	float SkyDistanceFadeoutStart;//[Offset: 0x35c, Size: 4]
	float SkyDistanceFadeoutEnd;//[Offset: 0x360, Size: 4]
	float DistanceFromPlaneFadeStart;//[Offset: 0x364, Size: 4]
	float DistanceFromPlaneFadeEnd;//[Offset: 0x368, Size: 4]
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x36c, Size: 4]
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x370, Size: 4]
	float AngleFromPlaneFadeStart;//[Offset: 0x374, Size: 4]
	float AngleFromPlaneFadeEnd;//[Offset: 0x378, Size: 4]
	PixelProjectedReflectionHeightAdjustmentVolume*[] HeightAdjustmentVolumes;//[Offset: 0x380, Size: 16]
	PixelProjectedReflectionVisibilityVolume*[] VisibilityVolumes;//[Offset: 0x390, Size: 16]

--------------------------------
Class: PixelProjectedReflectionHeightAdjustmentVolume.Volume.Brush.Actor.Object
	float DestinationHeight;//[Offset: 0x400, Size: 4]
	float FadeTime;//[Offset: 0x404, Size: 4]

--------------------------------
Class: PixelProjectedReflectionVisibilityVolume.Volume.Brush.Actor.Object
	float MaxDrawDistance;//[Offset: 0x400, Size: 4]

--------------------------------
Class: WaterSwimObject_C.WaterSwimActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x418, Size: 8]
	void SetWaterMaterial(int NewParam, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetObjectName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x4033584
	void RefreshWaterMaterial(PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInFight_ReturnValue);// 0x4033584
	void DoTrySetWaterMaterial(int NewParam, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsSupportIndex_NewParam1, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void TrySetWaterMaterial(int NewParam);// 0x4033584
	void IsSupportIndex(int NewParam, out bool NewParam1, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsSupportIndex_NewParam1, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetWeatherLevelName_ReturnValue, bool CallFunc_GetWaterReflectionSetting_ReturnValue, FString CallFunc_GetLoadWeatherName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_GetIsHighWeatherLevel_ReturnValue, RenderQualitySettings CallFunc_GetRenderQualityApplying_ReturnValue, bool CallFunc_IsOpenMSAA_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool CallFunc_GreaterEqual_ByteByte_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsSupportLDR_ReturnValue, bool CallFunc_IsOpenHDR_ReturnValue);// 0x4033584
	void IsNewIphone(out bool IsNewIphone, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, bool CallFunc_Set_Contains_ReturnValue);// 0x4033584
	void SetWateMaterial(bool bHDR, bool CallFunc_IsHarmonyOS_ReturnValue, bool CallFunc_IsNewIphone_isNewIphone, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsOpenHDR_ReturnValue, bool CallFunc_IsSupportLDR_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue2, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue3);// 0x4033584
	void HideUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog);// 0x4033584
	void ShowUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors, ExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_PostAkEvent_ReturnValue);// 0x4033584
	bool IsCapsult(Object* PlayerPawn, ActorComponent* Comp, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x4033584
	void UserConstructionScript();// 0x4033584
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4033584
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void CustomEvent(byte gamePawnEvent);// 0x4033584
	void CustomEvent(int UserQualitySettingLevel);// 0x4033584
	void ReceiveEndPlay(byte EndPlayReason);// 0x4033584
	void CustomEvent(bool UserMsaaSetting);// 0x4033584
	void CustomEvent(bool bOpenWaterReflection);// 0x4033584
	void ExecuteUbergraph_WaterSwimObject(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_IsCapsult_returnvalue, bool CallFunc_IsCapsult_returnvalue2, STExtraPetCharacter* K2Node_DynamicCast_AsSTExtra_Pet_Character, bool K2Node_DynamicCast_bSuccess, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess2, interface classNone K2Node_DynamicCast_AsPet_Swim_Interface, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPetCharacter* K2Node_DynamicCast_AsSTExtra_Pet_Character2, bool K2Node_DynamicCast_bSuccess4, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess5, interface classNone K2Node_DynamicCast_AsPet_Swim_Interface2, bool K2Node_DynamicCast_bSuccess6, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsDedicatedServer_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue3, byte K2Node_CustomEvent_gamePawnEvent, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess7, int K2Node_CustomEvent_UserQualitySettingLevel, byte K2Node_Event_EndPlayReason, bool CallFunc_IsDedicatedServer_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue2, bool K2Node_CustomEvent_UserMsaaSetting, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess8, bool K2Node_CustomEvent_bOpenWaterReflection, MaterialInterface*[] K2Node_MakeArray_Array, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, int CallFunc_GetPlatformInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x4033584
	GameEventListener* GameEventListener;//[Offset: 0x420, Size: 8]
	ParticleSystemComponent* P_Water_down_01;//[Offset: 0x428, Size: 8]
	AkComponent* Ak;//[Offset: 0x430, Size: 8]
	PostProcessComponent* PostProcess;//[Offset: 0x438, Size: 8]
	BoxComponent* PostSceneBox;//[Offset: 0x440, Size: 8]
	StaticMeshComponent* watermesh;//[Offset: 0x448, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x450, Size: 8]
	float Gamma;//[Offset: 0x458, Size: 4]
	PostProcessSettings NewVar;//[Offset: 0x460, Size: 1376]
	STExtraBaseCharacter*[] playerList;//[Offset: 0x9c0, Size: 16]
	byte NewVar;//[Offset: 0x9d0, Size: 1]
	float FogDensity;//[Offset: 0x9d4, Size: 4]
	ExponentialHeightFog* HeightFog;//[Offset: 0x9d8, Size: 8]
	MaterialInstanceDynamic* NoHDRWater;//[Offset: 0x9e0, Size: 8]
	MaterialInstanceDynamic* HDROcean;//[Offset: 0x9e8, Size: 8]
	MaterialInstanceDynamic* HDRSwamp;//[Offset: 0x9f0, Size: 8]
	MaterialInterface* HDROceanMaterial;//[Offset: 0x9f8, Size: 8]
	MaterialInterface* SUPHDROceanMaterial;//[Offset: 0xa00, Size: 8]
	MaterialInterface* HDRSwampMaterial;//[Offset: 0xa08, Size: 8]
	MaterialInterface* SUPHDRSwampMaterial;//[Offset: 0xa10, Size: 8]
	MaterialInterface* NoHDRWaterMaterial;//[Offset: 0xa18, Size: 8]
	int CurrentMaterialIndex;//[Offset: 0xa20, Size: 4]
	MaterialInterface*[] MaterialList;//[Offset: 0xa28, Size: 16]
	bool IsSetSwamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 1]
	<FString> newIOSDevice;//[Offset: 0xa40, Size: 80]
	MaterialInterface* WaterMaterial_SUP_HDR;//[Offset: 0xa90, Size: 8]
	MaterialInterface* WaterMaterial_HDR;//[Offset: 0xa98, Size: 8]
	MaterialInterface* WaterMaterial_Normal;//[Offset: 0xaa0, Size: 8]
	bool IsIphoneNewWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa8, Size: 1]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x490, Size: 16]
	delegate OnRenderQualitySettingsChanged;//[Offset: 0x4a0, Size: 16]
	delegate OnUserMsaaSettingChanged;//[Offset: 0x4b0, Size: 16]
	delegate OnWaterReflectionSettingChanged;//[Offset: 0x4c0, Size: 16]
	delegate OnCampRoomChanged;//[Offset: 0x4d0, Size: 16]
	delegate ScreenOrientationChangedNotify;//[Offset: 0x4e0, Size: 16]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x4f0, Size: 8]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x4f8, Size: 8]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x500, Size: 8]
	UserDetailSetting UserDetailSetting;//[Offset: 0x508, Size: 104]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a2, Size: 1]
	bool TemporaryFixedLobbyRenderSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a3, Size: 1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a5, Size: 1]
	int iEnableRegionID;//[Offset: 0x5a8, Size: 4]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x5b0, Size: 16]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x5c0, Size: 16]
	RenderItem[] LobbyRenderSettingsUltralHigh;//[Offset: 0x5d0, Size: 16]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x5e0, Size: 16]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x5f0, Size: 16]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x600, Size: 16]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x610, Size: 16]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x620, Size: 16]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x630, Size: 16]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x640, Size: 16]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x650, Size: 16]
	RenderItem[] MobileUltralHighOpenConfig;//[Offset: 0x660, Size: 16]
	RenderItem[] MobileUltralHighCloseConfig;//[Offset: 0x670, Size: 16]
	RenderItem[] MobileVerySmoothOpenConfig;//[Offset: 0x680, Size: 16]
	RenderItem[] MobileVerySmoothCloseConfig;//[Offset: 0x690, Size: 16]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x6a0, Size: 16]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x6b0, Size: 16]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x6c0, Size: 16]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x6d0, Size: 16]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x6e0, Size: 16]
	FString[] RePairDeleteDir;//[Offset: 0x6f0, Size: 16]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x700, Size: 16]
	MaterialParametersStyle[] MaterialParametersStyleArray;//[Offset: 0x710, Size: 16]
	ObjectPoolClassConfig[] ObjectPoolClassConfigs;//[Offset: 0x720, Size: 16]
	FName[] ObjectPoolIgnoringProperties;//[Offset: 0x730, Size: 16]
	FString AutoTestMissionType;//[Offset: 0x750, Size: 16]
	FString CustomLineStr;//[Offset: 0x760, Size: 16]
	enum GamePlayMode;//[Offset: 0x770, Size: 4]
	Vector2D FOVRange;//[Offset: 0x774, Size: 8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x77c, Size: 8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x784, Size: 1]
	bool PVENightChangeCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x785, Size: 1]
	float SwimRotateX;//[Offset: 0x788, Size: 4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78c, Size: 1]
	FString[] BPGameSubsystemClassPath;//[Offset: 0x790, Size: 16]
	int ModeID;//[Offset: 0x7a0, Size: 4]
	int ModeType;//[Offset: 0x7a4, Size: 4]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x7c8, Size: 8]
	ClientInGameReplay* ClientInGameReplay;//[Offset: 0x7d0, Size: 8]
	DeathPlayback* DeathPlayback;//[Offset: 0x7d8, Size: 8]
	CompletePlayback* CompletePlayback;//[Offset: 0x7e0, Size: 8]
	ObservingReplay* ObservingReplay;//[Offset: 0x7e8, Size: 8]
	WonderfulPlayback* WonderfulPlayback;//[Offset: 0x7f0, Size: 8]
	MaterialInstanceDynamic* m_CustomTexMat;//[Offset: 0x7f8, Size: 8]
	AutoRobotModule* AutoModule;//[Offset: 0x800, Size: 8]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x880, Size: 8]
	AvatarItemDownload* AssociatedAvatarItemDownload;//[Offset: 0x888, Size: 8]
	FadeDynamicStyleInfo FadeInfo;//[Offset: 0x890, Size: 12]
	float DefaultGray;//[Offset: 0x89c, Size: 4]
	RemoteControlManager* RemoteControlManager;//[Offset: 0x8f0, Size: 8]
	void WaterReflectionSettingChanged__DelegateSignature(bool bOpenWaterReflection);// 0x4033584
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0x4033584
	void UserMsaaSettingChanged__DelegateSignature(bool UserMsaaSetting);// 0x4033584
	void UpdateWorldCullDistanceVolumes();// 0x35ab7b0
	void TestAyncLoad();// 0x35ab79c
	void SuperBattleWithPlayerName(FString IP, FString PlayerName, int PlayerKey);// 0x35ab650
	void SuperBattle(FString IP);// 0x35ab51c
	void StopRemoteControl();// 0x35ab508
	void StartRemoteControlWithFile();// 0x35ab4f4
	void StartRemoteControl(FString Name, FString Host, int Port);// 0x35ab2a8
	void SetWorldDoorCullDistance(int Distance);// 0x35ab22c
	void SetWorldCullDistanceVolumeEnable(FString Name, int Enable);// 0x35ab0bc
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x35ab004
	void SetWaterReflectionSetting(bool bDoOpen);// 0x35aaf80
	void SetUserVulkanSetting(bool Enable);// 0x35aaefc
	void SetUserSetingShadowQuality(bool bShadow);// 0x35aae78
	void SetUserSetingMobilceContentSCale(float mcs);// 0x35aadfc
	bool SetSoundEffectQuality(int Type);// 0x35aad6c
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x35aacb4
	void SetModeType(int ParamId);// 0x35aac38
	void SetModeID(int ParamId);// 0x35aabbc
	void SetKillZValue(float KillZ);// 0x35aab40
	void SetHZBMobileState();// 0x35aab2c
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x35aaab0
	void SetEnableCullDistanceVolumeOffset(FString Name, bool Enable);// 0x35aa938
	void SetEnableCullDistanceVolumeMovable(FString Name, bool Enable);// 0x35aa7c0
	static void SetCustomRouteLine();// 0x35aa7ac
	static void SetAutoMissionType();// 0x35aa798
	void ScreenOrientationChangedDelegate__DelegateSignature(int inScreenOrientation);// 0x4033584
	void ReSetFOVScreenSizeCullingFactor();// 0x35aa784
	void RenderQualitySettingsChanged__DelegateSignature(RenderQualitySettings RenderQualitySettings);// 0x4033584
	void RenderForLowFPS();// 0x35aa770
	void RemovePPVBlendableMaterial(MaterialInterface* InMaterial);// 0x35aa6f4
	void RefuseRenderForLowFPS();// 0x35aa6e0
	void RefreshObjectPoolConfig();// 0x35aa6cc
	void QuitGame();// 0x35aa6b8
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x35aa5b4
	void PreLoadBPGameSubsystem();// 0x35aa5a0
	void OnStopAutoTest();// 0x35aa58c
	void OnStartAutoTest();// 0x35aa578
	void ObjectPoolServerSwitch(bool bOn);// 0x35aa4f4
	void ModifyAllLandscapeStreamingDistance(int Distance);// 0x35aa478
	void MakeLevelStreamingDistanceShorterWhenLanded();// 0x35aa464
	bool IsViewedByReplay(const Actor* InActor);// 0x35aa3d4
	bool isUsingAssumedNameInReplay();// 0x35aa39c
	bool IsSupportTagCulling();// 0x35aa380
	bool IsSupportSwitchSoundEffectQuality();// 0x35aa348
	bool IsSupportSwitchRenderLevelRuntime();// 0x35aa310
	bool IsSupportMSAA();// 0x35aa2ec
	bool IsSupportLDR();// 0x35aa2c8
	static bool IsSecAutoRunTest();// 0x35aa290
	bool IsRunningOnVulkan();// 0x35aa258
	bool IsPVENightChangeCullDistance();// 0x35aa220
	bool IsPlayingObservingReplay();// 0x35aa1e8
	bool IsOpenMSAA();// 0x35aa1b8
	bool IsOpenHDR();// 0x35aa180
	bool IsIOSOneGigabyteDevice();// 0x35aa148
	bool IsInTournamentMap();// 0x35aa110
	static bool IsGAutomatorTest();// 0x35aa0d8
	bool IsFoldingScreenDevice(float baseValue);// 0x35aa048
	static bool IsAutoRunTestGamePVEProfile();// 0x35aa010
	static bool IsAutoRunTestGamePVE();// 0x35a9fd8
	static bool IsAutoRunTestGameBindCompoment();// 0x35a9fa0
	static bool IsAutoRunTestGame();// 0x35a9f68
	void GVoiceCampRoomChanged__DelegateSignature(enum CampRoomType);// 0x4033584
	void GMStandalone(FString Map);// 0x35a9e34
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x35a9e00
	WonderfulPlayback* GetWonderfulPlayback();// 0x35a9dcc
	bool GetWaterReflectionSetting();// 0x35a9d94
	bool GetUserVulkanSetting();// 0x35a9d5c
	bool GetUserSetingShadowQuality();// 0x35a9d24
	int GetUserQualitySettingLevel();// 0x35a9d08
	int GetSuppotMSAA();// 0x35a9cec
	int GetSoundEffectQuality();// 0x35a9cb8
	RenderQualitySettings GetRenderQualityLastSet();// 0x35a9c5c
	RenderQualitySettings GetRenderQualityApplying();// 0x35a9c00
	ObservingReplay* GetObservingReplay();// 0x35a9bcc
	int GetModeType();// 0x35a9b98
	int GetModeID();// 0x35a9b64
	FString GetLoadWeatherName(FString InWeatherName);// 0x35a9a40
	bool GetIsHighWeatherLevel(FString InWeatherLevelName);// 0x35a997c
	bool GetIsFirstInitWaterReflectionSetting();// 0x35a9944
	static STExtraGameInstance* GetInstance();// 0x35a9920
	int GetExactDeviceLevel();// 0x35a98ec
	int GetDeviceUpdateVersionFlag();// 0x35a98b0
	FString GetDeviceProfilerLevel();// 0x35a980c
	byte GetDeviceMaxSupportSoundEffect();// 0x35a97d8
	byte GetDeviceMaxSupportLevel();// 0x35a97a4
	int GetDeviceMaxFPSByDeviceLevel(byte renderlevel);// 0x35a9718
	int GetDeviceLimit();// 0x35a96e4
	int GetDeviceLevel();// 0x35a96a8
	bool GetDefaultSoundEffectQuality();// 0x35a9670
	DeathPlayback* GetDeathPlayback();// 0x35a963c
	FString GetCurrentRHI();// 0x35a9598
	CompletePlayback* GetCompletePlayback();// 0x35a9564
	ClientInGameReplay* GetClientInGameReplay();// 0x35a9530
	static int GetAutoRunTestServerIdx();// 0x35a94fc
	static FString GetAutoRunPassWD();// 0x35a9458
	static FString GetAutoRunLuaTest();// 0x35a93b4
	static FString GetAutoRunAccount();// 0x35a9310
	AvatarItemDownload* GetAssociatedAvatarItemDownload();// 0x35a92dc
	bool GetApplyingShadowQuality();// 0x35a92a4
	FString GetActiveDeviceProfile();// 0x35a9200
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x35a8ff0
	void EnableStreamingLevelLOD(bool bEnable);// 0x35a8f6c
	void EnableObjectPoolByClassName(FName ClassName, bool Enable);// 0x35a8eac
	void DrawMateritalToTexRenderTarget(TextureRenderTarget2D* TextureRenderTarget, Texture2D* tex1, Texture2D* tex2);// 0x35a8dbc
	bool DeleteSavedFiles(bool allfilesSaved);// 0x35a8d24
	TextureRenderTarget2D* CreateTexRenderTarget(int Width, int Height);// 0x35a8c60
	TextureRenderTarget2D* CreateCustomTex(Texture2D* TexResFirst, Texture2D* TexResSecond);// 0x35a8b9c
	void ChangeLevelFXActor(FString LevelName, bool isLoad);// 0x35a8aac
	void ChangeCullDistanceVolume(bool UpdateCulldisImmediate);// 0x35a8a28
	void bHideGroundLevels(bool Disable);// 0x35a89a4
	void AutoActiveVerySmoothRenderItems(bool forceClose);// 0x35a8920
	void AutoActiveUltralHighRenderItems();// 0x35a890c
	void AutoActiveLDR();// 0x35a88f8
	void AttachCameraViewToCharacter(STExtraBaseCharacter* Character);// 0x35a887c
	void AddOrUpdatePPVBlendableMaterial(MaterialInterface* InMaterial, float InWeight);// 0x35a87c4
	bool ActiveStyle_PPForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x35a86b8
	void ActiveStyle_PP(byte Level);// 0x35a8634
	bool ActiveStyle_ACESForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x35a8528
	void ActiveStyle(byte Level);// 0x35a84a4
	void ActiveNightVision(bool bSet);// 0x35a8420
	void ActiveMSAA(bool bOpenMSAA, int MSAAValue);// 0x35a8358
	void ActiveDynamicStyle(bool bSet, byte Type, float InterpSpeed, bool bNeedDestroyComp);// 0x35a8208

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x2a0, Size: 296]
	delegate EnginePreTick;//[Offset: 0x3c8, Size: 16]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x428, Size: 8]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x438, Size: 8]
	bool bStandAloneFromLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	delegate OnPreBattleResult;//[Offset: 0x468, Size: 16]
	FString[] HighWeatherNames;//[Offset: 0x478, Size: 16]
	int HighWeatherMinRenderQuality;//[Offset: 0x488, Size: 4]
	int HighWeatherMaxRenderQuality;//[Offset: 0x48c, Size: 4]
	void SetLuaStateWrapper(LuaStateWrapper* TLuaStateWrapper);// 0x3851edc
	void OpenAssetLoadLog();// 0x3851ec8
	void OnPreBattleResult__DelegateSignature();// 0x4033584
	void LuaLeakDetect();// 0x3851eb4
	void LuaDoString(FString LuaString);// 0x3851e0c
	float GetWeatherTime();// 0x3851df0
	FString GetWeatherLevelName();// 0x3851cf0
	int GetWeatherID();// 0x3851cd4
	LuaStateWrapper* GetLuaStateWrapper();// 0x3851ca0
	FString GetLoadWeatherName(FString InWeatherName);// 0x3851b7c
	bool GetIsHighWeatherLevel(FString InWeatherLevelName);// 0x3851ab8
	FString GetGameId();// 0x3851a08
	int GetDeviceLevel();// 0x38519cc
	UAEDataTable* GetDataTable_Mod(FString tableName);// 0x3851914
	UAEDataTable* GetDataTable(FString tableName);// 0x385185c
	FrontendHUD* GetAssociatedFrontendHUD();// 0x3851828
	void EnableCheckMinFontSize(bool bEnable);// 0x38517a4
	void CloseAssetLoadLog();// 0x3851790
	void CheckTooSmallText();// 0x385177c

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 16]
	uint64 RoleID;//[Offset: 0x10, Size: 8]
	FString GameSvrId;//[Offset: 0x18, Size: 16]
	FString GameAppID;//[Offset: 0x28, Size: 16]
	uint16 AreaID;//[Offset: 0x38, Size: 2]
	int8 PlatID;//[Offset: 0x3a, Size: 1]
	FString ZoneID;//[Offset: 0x40, Size: 16]
	uint64 BattleID;//[Offset: 0x50, Size: 8]
	uint64 GameID;//[Offset: 0x58, Size: 8]
	FString BattleServerIP;//[Offset: 0x60, Size: 16]
	uint32 BattleServerPort;//[Offset: 0x70, Size: 4]
	FString UserName;//[Offset: 0x78, Size: 16]
	FString PicUrl;//[Offset: 0x88, Size: 16]
	uint32 PlayerKey;//[Offset: 0x98, Size: 4]
	int8 WeatherID;//[Offset: 0xa0, Size: 1]
	FString WeatherLevelName;//[Offset: 0xa8, Size: 16]
	float WeatherTime;//[Offset: 0xb8, Size: 4]
	int[] MrpcsData;//[Offset: 0xc0, Size: 16]
	<int,FString> AdvConfig;//[Offset: 0xd8, Size: 80]

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0, Size: 1]
	byte RenderStyleSetting;//[Offset: 0x1, Size: 1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int RenderMSAAValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0, Size: 4]
	int TCQualityGrade;//[Offset: 0x4, Size: 4]
	int DeviceMaxSoundEffectLevel;//[Offset: 0x8, Size: 4]
	int DeviceMaxQualityLevel;//[Offset: 0xc, Size: 4]
	int UserQualitySetting;//[Offset: 0x10, Size: 4]
	int DeviceSupportHDR;//[Offset: 0x14, Size: 4]
	int IsOpenHDR;//[Offset: 0x18, Size: 4]
	int UserHDRSetting;//[Offset: 0x1c, Size: 4]
	int IsSupportMSAA;//[Offset: 0x20, Size: 4]
	bool UserMsaaSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int UserMSAAValue;//[Offset: 0x28, Size: 4]
	float UserMCSSetting;//[Offset: 0x2c, Size: 4]
	int UserShadowSetting;//[Offset: 0x30, Size: 4]
	int UserShadowSwitch;//[Offset: 0x34, Size: 4]
	int UserTeamQualityEnhanceSetting;//[Offset: 0x38, Size: 4]
	int PUBGLimitSetting;//[Offset: 0x3c, Size: 4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x40, Size: 4]
	int PUBGDeviceFPSDef;//[Offset: 0x44, Size: 4]
	int PUBGDeviceFPSLow;//[Offset: 0x48, Size: 4]
	int PUBGDeviceFPSMid;//[Offset: 0x4c, Size: 4]
	int PUBGDeviceFPSHigh;//[Offset: 0x50, Size: 4]
	int PUBGDeviceFPSHDR;//[Offset: 0x54, Size: 4]
	int PUBGDeviceFPSUltralHigh;//[Offset: 0x58, Size: 4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	int PUBGTeamQualityEnhance;//[Offset: 0x60, Size: 4]
	int UserVulkanSetting;//[Offset: 0x64, Size: 4]

--------------------------------
Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0, Size: 16]
	SwitchesItem[] Switches;//[Offset: 0x10, Size: 16]

--------------------------------
Class: SwitchesItem
	FString Key;//[Offset: 0x0, Size: 16]
	float Value;//[Offset: 0x10, Size: 4]
	FString DependKey;//[Offset: 0x18, Size: 16]
	float DependValue;//[Offset: 0x28, Size: 4]

--------------------------------
Class: RenderItem
	FString RenderKey;//[Offset: 0x0, Size: 16]
	float RenderValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0, Size: 1]
	FString[] PostProcessParams;//[Offset: 0x8, Size: 16]
	ACESParameter ACESParams;//[Offset: 0x18, Size: 40]

--------------------------------
Class: MaterialParametersStyle
	FString StyleName;//[Offset: 0x0, Size: 16]
	MaterialParameterFloat[] Floats;//[Offset: 0x10, Size: 16]
	MaterialParameterVector[] Vectors;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MaterialParameterFloat
	FName Name;//[Offset: 0x0, Size: 8]
	float Value;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MaterialParameterVector
	FName Name;//[Offset: 0x0, Size: 8]
	Vector Vector;//[Offset: 0x8, Size: 12]

--------------------------------
Class: LuaStateWrapper.Object

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x28, Size: 16]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x38, Size: 16]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	float ChickenDinnerTimeSecs;//[Offset: 0x78, Size: 4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x80, Size: 4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x88, Size: 16]
	void StopRecord(bool bRankFirst);// 0x375e5e0
	void StartRecord();// 0x375e5cc
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x375e3e0
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x375e2c8
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x375e038
	void BuildOutputData();// 0x375e024
	void BuildContinuousKillOutputData();// 0x375e010

--------------------------------
Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	byte WonderfulCutType;//[Offset: 0x8, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 16]

--------------------------------
Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	int KillNum;//[Offset: 0x8, Size: 4]
	float FarthestKillDistance;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0, Size: 4]
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte CaptureType;//[Offset: 0x1, Size: 1]
	byte ShootDamageType;//[Offset: 0x2, Size: 1]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	float ShootDistance;//[Offset: 0x8, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 16]

--------------------------------
Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0, Size: 4]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	byte CaptureType;//[Offset: 0x9, Size: 1]
	byte ShootDamageType;//[Offset: 0xa, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ClientInGameReplay.GameReplay.Object
	bool bGWonderfulPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	bool bWonderfulPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 1]
	int ConditionKillNums;//[Offset: 0x114, Size: 4]
	enum WonderfulKeepState;//[Offset: 0x118, Size: 1]
	bool bCanKeepReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	DeathReplayData DeathReplayData;//[Offset: 0x120, Size: 256]
	BattleDeathPlaybackInfo BattleDeathPlaybackInfo;//[Offset: 0x268, Size: 8]
	BattleWonderfulInfo BattleWonderfulInfo;//[Offset: 0x270, Size: 64]
	LobbyWonderfulInfo LobbyWonderfulInfo;//[Offset: 0x2b0, Size: 120]
	void SetSaveTimestamp(uint64 InCurrentTime);// 0x3319bfc
	void SetGWonderfulPlaybackSwitch(bool bInSwitch);// 0x3319b78
	void SetDeathReplayData(out const DeathReplayData ReplayData);// 0x3319a8c
	void SetClientVersion(FString InAppVersion, FString InSrcVersion);// 0x331997c
	void OnPlayerRespawnNotify();// 0x3319968
	void OnKillOrPutDownMessageEvent();// 0x3319954
	void OnBattleResultStopRecordingNotify();// 0x3319940
	void MarkPlayerLastBeginInactiveTime(FString PlayerName);// 0x3319898
	void MarkPlayerLastBeginActiveTime(FString PlayerName);// 0x33197f0
	bool IsSwitchedOffByDevice();// 0x33197b8
	bool HaveWonderfulPlaybackData();// 0x3319780
	bool HaveDeathPlaybackData();// 0x3319748
	enum GetWonderfulKeepState();// 0x3319704
	FString GetCompressedFileName();// 0x3319660
	int[] GetAllWonderfulPeriodType();// 0x33195bc
	void EnableWonderfulPlayback(bool bEnable);// 0x3319538
	void EnableDeathPlayback(bool bEnable);// 0x33194b4
	void DeleteWonderfulPeriod(int PeriodIndex);// 0x3319438
	void ClearWonderfulPeriod();// 0x3319424
	bool CheckKillNumsCondition();// 0x33193ec
	void AddWonderfulPeriod(enum InWonderfulType, float InStartTime, float InEndTime, out const float[] InAdditionalData, int InPeriodIndex);// 0x3319238

--------------------------------
Class: BattleDeathPlaybackInfo
	float DeathPlaybackStartTime;//[Offset: 0x0, Size: 4]
	float DeathPlaybackEndTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BattleWonderfulInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint64 GameID;//[Offset: 0x8, Size: 8]
	FString PlayerName;//[Offset: 0x10, Size: 16]
	FString OpenID;//[Offset: 0x20, Size: 16]
	WonderfulPeriodInfo[] WonderfulPeriodInfoArray;//[Offset: 0x30, Size: 16]

--------------------------------
Class: WonderfulPeriodInfo
	float WonderfulStartTime;//[Offset: 0x0, Size: 4]
	float WonderfulEndTime;//[Offset: 0x4, Size: 4]
	int WonderfulPeriodIndex;//[Offset: 0x8, Size: 4]
	WonderfulTypeInfo WondefulTypeInfo;//[Offset: 0x10, Size: 24]

--------------------------------
Class: WonderfulTypeInfo
	enum WondefulType;//[Offset: 0x0, Size: 1]
	float[] AdditionalData;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LobbyWonderfulInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint64 GameID;//[Offset: 0x8, Size: 8]
	uint64 SaveTimestamp;//[Offset: 0x10, Size: 8]
	FString ModeID;//[Offset: 0x18, Size: 16]
	int SegmentLevel;//[Offset: 0x28, Size: 4]
	float TotalTime;//[Offset: 0x2c, Size: 4]
	WonderfulTypeInfo[] TypeInfoArray;//[Offset: 0x30, Size: 16]
	FString AppVersion;//[Offset: 0x40, Size: 16]
	FString SrcVersion;//[Offset: 0x50, Size: 16]
	enum ErrorCode;//[Offset: 0x60, Size: 1]
	WonderfulWeSeeInfo[] WeSeeInfoArray;//[Offset: 0x68, Size: 16]

--------------------------------
Class: WonderfulWeSeeInfo
	float StartTime;//[Offset: 0x0, Size: 4]
	float EndTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DeathPlayback.GameReplay.Object
	DeathReplayData DeathReplayData;//[Offset: 0x110, Size: 256]
	DeathPlayCameraShot* DeathPlayCameraShot;//[Offset: 0x210, Size: 8]
	void SetMurderInfo();// 0x333c9a0
	void OnKillOrPutDownMessageEvent();// 0x333c98c
	void OnDeathEvent(STExtraBaseCharacter* BaseCharacter);// 0x333c910
	void OnClientObserveCharacterEvent();// 0x333c8fc
	bool IsSwitchedOffByDevice();// 0x333c8c4
	bool IsNewDeathReplay();// 0x333c88c
	bool HaveRecordingData_New();// 0x333c854
	FString GetReplayTargetName();// 0x333c7b0
	STExtraPlayerCharacter* GetDeadCharacter();// 0x333c77c
	BattleDeathPlaybackInfo GetBattleDeathPlaybackInfo();// 0x333c748

--------------------------------
Class: DeathPlayCameraShot.Actor.Object
	FString LuaFilePath;//[Offset: 0x428, Size: 16]
	void StopCameraShot();// 0x333d6a0
	void StartCameraShot(PlayerController* PlayerController);// 0x333d61c

--------------------------------
Class: CompletePlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0x110, Size: 40]
	UAEUserWidget* ReplayUI;//[Offset: 0x138, Size: 8]
	int MaxHoursForKeepingFiles;//[Offset: 0x140, Size: 4]
	bool isUsingAssumedName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	FString[] ExcludedGameModes;//[Offset: 0x148, Size: 16]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	uint32[] TeammateKeyArray;//[Offset: 0x160, Size: 16]
	byte TlogBatchVersion;//[Offset: 0x170, Size: 1]
	int64 TlogBatchMaxSize;//[Offset: 0x178, Size: 8]
	uint32 SendTlogInterval;//[Offset: 0x188, Size: 4]
	RecordTlogBatch RecordTlogBatch;//[Offset: 0x190, Size: 24]
	bool bUseWeseeStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	FString RecordTargetUID;//[Offset: 0x1b0, Size: 16]
	int RecordTargetTeamID;//[Offset: 0x1c0, Size: 4]
	<FString,uint32> ReportSequenceMap;//[Offset: 0x2c0, Size: 80]
	bool PlayDemoWithFilename(FString DemoName);// 0x331f89c
	FString GetDemoPlayTime();// 0x331f7f8

--------------------------------
Class: WonderfulPlayback.GameReplay.Object
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	enum WonderfulPlayType;//[Offset: 0x113, Size: 1]
	void SetWonderfulPlayType(enum InWonderfulPlayType);// 0x375d218
	bool PlayReplayMemory();// 0x375d1e0
	bool PlayReplayFile(FString DemoName);// 0x375d124
	bool PlayReplayAgain();// 0x375d0ec
	bool IsSwitchedOffByDevice();// 0x375d0b4
	void GetUserWonderfulList(out FString[] OutWonderfulList, FString InRoleId);// 0x375cf30
	uint64 GetTargetUID();// 0x375cefc
	FString GetTargetPlayerName();// 0x375ce58
	FString GetTargetOpenID();// 0x375cdb4
	uint64 GetTargetGameID();// 0x375cd80
	FString GetReplayFileNamePart();// 0x375ccdc
	WonderfulTypeInfo GetCurWonderfulTypeInfo();// 0x375cc30
	void GetAllWonderfulList(out FString[] OutWonderfulList);// 0x375cb1c
	void FetchBattleWonderfulInfo();// 0x375cb08
	uint64[] DecryptFileName(FString DemoFullPathName);// 0x375c9ec
	FString BPGetTargetUID();// 0x375c948
	FString BPGetTargetGameID();// 0x375c8a4
	enum AnalysizeReplayFile(FString InReplayFileName);// 0x375c7ec
	LobbyWonderfulInfo AnalysizeInfoFile(FString InInfoFileName);// 0x375c710

--------------------------------
Class: AutoRobotModule.Object

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x28, Size: 16]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x38, Size: 16]

--------------------------------
Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0, Size: 16]
	int bUseFeatureSet;//[Offset: 0x10, Size: 4]
	FString[] ExcludeComponentsList_DS;//[Offset: 0x18, Size: 16]
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x28, Size: 16]
	FString[] ExcludeComponentsList_Team;//[Offset: 0x38, Size: 16]
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x48, Size: 16]
	FString[] ExcludeComponentsList_DSAI;//[Offset: 0x58, Size: 16]
	FString[] ExcludeComponentsList_DSMLAI;//[Offset: 0x68, Size: 16]
	FString[] ExcludeComponentsList_ClientAI;//[Offset: 0x78, Size: 16]
	FString[] ExcludeComponentsList_Standalone;//[Offset: 0x88, Size: 16]
	FString[] ExcludeComponentsList_StandaloneAI;//[Offset: 0x98, Size: 16]

--------------------------------
Class: FeatureSetItem

--------------------------------
Class: AvatarItemDownload.Object
	int DisableInBattleThreshold;//[Offset: 0x28, Size: 4]
	void StartDownloadItem(uint32 ItemId, uint32 Priority, delegate OnItemDownloadDelegate);// 0x3278e14
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x3278c40
	void SetDisableInBattleThreshold(uint32 InThreshold);// 0x3278bbc
	int GetDisableInBattleThreshold();// 0x3278b80

--------------------------------
Class: FadeDynamicStyleInfo

--------------------------------
Class: RemoteControlManager.Object
	bool Tick(float DeltaTime);// 0x34b7650
	void Stop();// 0x34b763c
	bool BeginWithFile();// 0x34b7604
	bool Begin(FString Name, FString Host, int Port);// 0x34b73ac

--------------------------------
Class: BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3e70, Size: 8]
	FString GetEmoteHandlePath(int ItemId, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x4033584
	void Replay_IsEnemyFrameUIExisted(out bool bIsExisted, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void HandleOnLanded(float ForceLandTime, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	void GetGameModeState(out FName CurModeState, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, FName CallFunc_GetGameModeState_ReturnValue);// 0x4033584
	void CallTryVault(bool bTryEnter);// 0x4033584
	FString GetGrenadeNameByGrenadeID(int InGrenadeID, <int,FName> CallFunc_GetGrenadeIDToNameDict_ReturnValue, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue);// 0x4033584
	void SetTpCameraFov(float FOV, float CallFunc_NormalizeAxis_ReturnValue, float CallFunc_ClampAngle_ReturnValue);// 0x4033584
	void OnRep_Cache(ForceStill)();// 0x4033584
	void SetCapsuleParentBounds(bool UseParentBounds);// 0x4033584
	void ClearDecalBakingRTCache(GameStateBase* CallFunc_GetGameState_ReturnValue, DecalBakingActorMgr* CallFunc_GetWorldInstance_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HasAuthority_ReturnValue);// 0x4033584
	void GetGrenadeWeaponMap(out <FName,class STExtraWeapon> OutWeaponMap, <FName,class STExtraWeapon> CallFunc_GetGrenadeLogicSocketToWeaponClassMap_ReturnValue, bool CallFunc_EnableLoadWeaponClassMapOptimize_ReturnValue, int ___int_Variable, int CallFunc_Add_IntInt_ReturnValue, <FName,FString> CallFunc_GetGrenadeLogicSocketToWeaponPathMap_ReturnValue, FName[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, class STExtraWeapon CallFunc_GetWeaponClassFromPath_ReturnValue);// 0x4033584
	void TriggerActivityByID(bool GetNameOnly, out FString UIName, out int ActivityID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BattleInteractiveDataStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x4033584
	void RegisterInitGrenadeMap(delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void InitGrenadeMapData(<FName,class STExtraWeapon> CallFunc_GetGrenadeWeaponMap_OutWeaponMap, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, int[] CallFunc_GetGrenadeIDsOrder_ReturnValue, bool CallFunc_IsValid_ReturnValue, <int,FName> CallFunc_GetGrenadeIDToNameDict_ReturnValue, <int,FString> CallFunc_GetGrenadeToSlotIndexDict_ReturnValue);// 0x4033584
	bool IsAngledSightAvailable(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue2, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x4033584
	void RefreshAngledSightUI(bool HaveAngledSight, bool IsAngledSight, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void ShowAngledSightState(bool IsAngled, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x4033584
	void GetAngledSightRotator(STExtraShootWeapon* NewParam, out Rotator NewParam1, int CallFunc_GetWeaponID_ReturnValue, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetAdjustWeaponID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, FString CallFunc_Conv_RotatorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x4033584
	void AngledSightAnimLogic(byte Selection, STExtraShootWeapon* ShootWeapon, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_GetAngledSightRotator_NewParam1, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_HaveAngledSight_ReturnValue, DollyZoomParam CallFunc_UpdateScopeCameraOffsets_Param, float CallFunc_GetScopeFov_ReturnValue, DollyZoomParam K2Node_MakeStruct_DollyZoomParam, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2);// 0x4033584
	void AngledSightAnimUpdate(float InputPin, bool bIsOnlyTurn, Vector CallFunc_GetSocketLocation_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_IsAngledSightAvailable_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue2, Vector CallFunc_VLerp_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, float CallFunc_SwitchSightConfigMaterial_ReturnValue, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, DollyZoomParam K2Node_MakeStruct_DollyZoomParam, bool CallFunc_IsAngledSight_ReturnValue2, Rotator CallFunc_RLerp_ReturnValue);// 0x4033584
	void Replay_CreateEnemyFrameUI(bool isPlayingCompletePlayback, bool is enemy, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, MaterialBillboardComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x4033584
	void Replay_SetVisiableOfFrameUI(bool is Visiable, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void UpdateEmoteWeaponIdInfo(int ID, out bool Ret, int Length, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, STExtraWeapon*[] CallFunc_GetAllInventoryWeaponList_ReturnValue, int CallFunc_Array_Length_ReturnValue, STExtraWeapon* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x4033584
	void AllowWater(out bool bCanEnter, bool CallFunc_CanEnterWaterArea_ReturnValue);// 0x4033584
	bool ShouldRedBlood(bool CallFunc_GetRedBloodSwitch_ReturnValue);// 0x4033584
	void CheckHasVehicleAvatar(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* PlayerCharacter, out int InItemID, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x4033584
	void ChangeCurVehicleAvatar(STExtraVehicleBase* InVehicle, STExtraBaseCharacter* CallFunc_GetDriver_ReturnValue, STExtraBaseCharacter* CallFunc_GetDriver_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsDedicatedServer_ReturnValue, STExtraPlayerController* CallFunc_GetController_ReturnValue2, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsDriver_ReturnValue);// 0x4033584
	void HandleOnChangedVehicleSeat(STExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue);// 0x4033584
	void GetMasterBoneComponent(out MeshComponent* MasterBoneComponent);// 0x4033584
	void InitDefaultAvatarByResID(int AGender, int Head, int Hair);// 0x4033584
	void GetGrenadeCameraShakeByDir(Vector ImpulseDir, out class CameraShake RetVar, class CameraShake RetVar, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue3, Vector CallFunc_Normal_ReturnValue3, FString CallFunc_Conv_VectorToString_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x4033584
	BackpackEmoteHandle* GetEmoteHandle(int ItemId, BP_STExtraPlayerController_C* PC, int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, BackpackEmoteHandle* K2Node_DynamicCast_AsBackpack_Emote_Handle, bool K2Node_DynamicCast_bSuccess2, BackpackEmoteHandle* CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x4033584
	FString GetShootWeaponNameByWeapon(int ItemDefineID, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x4033584
	CameraComponent* GetThirdPersonCamera();// 0x4033584
	SpringArmComponent* GetThirdPersonSpringArm();// 0x4033584
	CameraComponent* GetFPPCamera();// 0x4033584
	SpringArmComponent* GetFPPSpringArm();// 0x4033584
	CameraComponent* GetFirstPersonCamera();// 0x4033584
	SpringArmComponent* GetFirstPersonSpringArm();// 0x4033584
	CameraComponent* GetScopeCamera();// 0x4033584
	SpringArmComponent* GetScopeSpringArm();// 0x4033584
	ActorComponent*[] GetNonSimulatedComponents_OnFighting(ActorComponent*[] K2Node_MakeArray_Array);// 0x4033584
	bool ShouldAutoScopeWhenPeek(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates(ActorComponent*[] K2Node_MakeArray_Array);// 0x4033584
	void GetControllerViewCamera(out CameraComponent* Camera, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, Actor* CallFunc_GetViewTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, CameraComponent*[] CallFunc_GetComponentsByClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, CameraComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x4033584
	ActorComponent*[] GetNonSimulatedComponents(ActorComponent* Components, ActorComponent*[] K2Node_MakeArray_Array);// 0x4033584
	ActorComponent*[] GetNonDedicatedComponents(ActorComponent*[] Components, ActorComponent*[] K2Node_MakeArray_Array, ActorComponent*[] K2Node_MakeArray_Array2);// 0x4033584
	void HandleOnDetachedVehicle(STExtraVehicleBase* NewParam, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x4033584
	void HandleOnAttachedVehicle(STExtraVehicleBase* InVehicle, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	SpringArmComponent* GetActiveSpringArm(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x4033584
	void AimInterupted(Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x4033584
	void GetWeapon(out Vector NewParam, out Rotator NewParam1, out bool bHaveWeapon, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x4033584
	void ClientHandlePreOnPlane(bool CallFunc_SwitchPoseState_ReturnValue);// 0x4033584
	void ResetBPCameraSetting();// 0x4033584
	void ShowDebugArrow(SceneComponent* self2, Rotator InRot, LinearColor Color, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x4033584
	void IsAutonomous(out bool NewParam, bool CallFunc_HasAuthority_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	void PickUp(PickUpWrapperActor* NewParam);// 0x4033584
	void DoPickUpTarget();// 0x4033584
	void RotateMesh(Rotator NewParam, Rotator NewLocalVar, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x4033584
	void SetAllCollisionEnabled(bool bEnable);// 0x4033584
	void MoveOutScope();// 0x4033584
	void MoveInScope(bool bHasSetMesh);// 0x4033584
	void Reload(bool CallFunc_ReloadCurrentWeapon_ReturnValue);// 0x4033584
	void SwitchCrouch(byte NewParam, byte PreState, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess);// 0x4033584
	void UserConstructionScript(CameraComponent* ___object_Variable, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Add_ReturnValue5, int CallFunc_Array_Add_ReturnValue6);// 0x4033584
	void ParachuteCamBlend__FinishedFunc();// 0x4033584
	void ParachuteCamBlend__UpdateFunc();// 0x4033584
	void LerpAlpha__FinishedFunc();// 0x4033584
	void LerpAlpha__UpdateFunc();// 0x4033584
	void ScopeTimeline__FinishedFunc();// 0x4033584
	void ScopeTimeline__UpdateFunc();// 0x4033584
	void AngledSigntTimeline__FinishedFunc();// 0x4033584
	void AngledSigntTimeline__UpdateFunc();// 0x4033584
	void RearSightTimeline__FinishedFunc();// 0x4033584
	void RearSightTimeline__UpdateFunc();// 0x4033584
	void TurnLerpAlpha__FinishedFunc();// 0x4033584
	void TurnLerpAlpha__UpdateFunc();// 0x4033584
	void InpActEvt_T_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x4033584
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x4033584
	void InpActEvt_Vault_K2Node_InputActionEvent(Key Key);// 0x4033584
	void InpActEvt_Q_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_Q_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_Z_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_V_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_C_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_R_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_Z_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_F10_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void CE(ForceStill)(bool ForceStill);// 0x4033584
	void CE(ForceStill(ServerOnly))(bool ForceStill);// 0x4033584
	void OnPetOwnerPossessed();// 0x4033584
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x4033584
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4033584
	void ReloadEvent();// 0x4033584
	void OnEquipWeapon(byte Slot);// 0x4033584
	void SwitchCamera(STR_CameraSetting CameraSetting);// 0x4033584
	void OnNotifyHurt();// 0x4033584
	void NotifyPickUp(bool bIsAvailable);// 0x4033584
	void OnLanded(out const HitResult Hit);// 0x4033584
	void OnPoseStateChange(byte LastState, byte CurState);// 0x4033584
	void K2_UpdateCustomMovement(float DeltaTime);// 0x4033584
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x4033584
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x4033584
	void ParachuteOnWater();// 0x4033584
	void NotifyTombBox(bool bIsAvailable);// 0x4033584
	void DoAutoReloadCurrentWeapon();// 0x4033584
	void OnUnEquipWeapon();// 0x4033584
	void BPResetCharacter();// 0x4033584
	void OnInitGrenadeData();// 0x4033584
	void VaultFailPawnBluePrint(out const FString Content);// 0x4033584
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x4033584
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Rotator movedir);// 0x4033584
	void ScopeInStop();// 0x4033584
	void PlayScopeInTimeline(float Rate);// 0x4033584
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x4033584
	void ReceivePossessed(Controller* NewController);// 0x4033584
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x4033584
	void OnWeaponEquipmentUpdate();// 0x4033584
	void BindAndExecStateChanged();// 0x4033584
	void StateEnterHandler_Event(enum State);// 0x4033584
	void OnHitByCake();// 0x4033584
	void EnablePet(bool Enable);// 0x4033584
	void OnEnterStateForBp(enum State);// 0x4033584
	void OnLeaveStateForBp(enum State);// 0x4033584
	void ReceiveDestroyed();// 0x4033584
	void PawnVaultServerStopCheckBluePrint();// 0x4033584
	void PawnVaultStopBluePrint();// 0x4033584
	void OnMiniTreeTriggerServerLogicCPP();// 0x4033584
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x4033584
	void DoAngledSight(bool IsPush);// 0x4033584
	void DoNormalSight(bool IsPush);// 0x4033584
	void StopSwitchAngledSight();// 0x4033584
	void CustomEvent(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x4033584
	void CustomEvent(bool bIsBegin);// 0x4033584
	void CustomEvent();// 0x4033584
	void OnBPStateCheckIn();// 0x4033584
	void DynamicHoldGun(bool BoolValue);// 0x4033584
	void LuaReceiveBeginPlay();// 0x4033584
	void SwitchRearSight(int PrevIndex, int NewIndex, Rotator AngleRotator);// 0x4033584
	void BPOnRespawned();// 0x4033584
	void RemoveRemainingCameraBlood(int SeatType);// 0x4033584
	void StopTurningInPlace();// 0x4033584
	void TurnInPlace(Rotator TurnInPlaceStart, Rotator TurnInPlaceTarget, CurveFloat* Curve, AnimMontage* TurnAnimation);// 0x4033584
	void ExecuteUbergraph_BP_PlayerPawn(int EntryPoint, FName ___name_Variable, delegate K2Node_CreateDelegate_OutputDelegate, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue2, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Key K2Node_InputKeyEvent_Key14, Key ___struct_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, FName ___name_Variable2, Key K2Node_InputKeyEvent_Key15, bool CallFunc_HasAuthority_ReturnValue, Key K2Node_InputKeyEvent_Key16, bool ___bool_IsClosed_Variable, bool ___bool_Has_Been_Initd_Variable, bool ___bool_IsClosed_Variable2, bool ___bool_Has_Been_Initd_Variable2, bool K2Node_CustomEvent_ForceStill2, bool CallFunc_Not_PreBool_ReturnValue, bool ___bool_Variable, bool K2Node_CustomEvent_ForceStill, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate2, Controller* K2Node_Event_Killer, Actor* K2Node_Event_DamageCauser3, HitResult K2Node_Event_KillingHitInfo, Vector K2Node_Event_KillingHitImpulseDir, class DamageType K2Node_Event_KillingHitDamageType, delegate K2Node_CreateDelegate_OutputDelegate3, byte K2Node_Event_slot, Key K2Node_InputActionEvent_Key, STExtraShootWeapon* CallFunc_GetShootWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue5, STR_CameraSetting K2Node_CustomEvent_CameraSetting, bool CallFunc_isAutonomous_NewParam, int CallFunc_PostEvent_ReturnValue, int CallFunc_PostEvent_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue, bool K2Node_CustomEvent_bIsAvailable2, HitResult K2Node_Event_Hit, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, byte K2Node_Event_LastState, byte K2Node_Event_CurState, delegate K2Node_CreateDelegate_OutputDelegate4, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue2, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue3, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float K2Node_Event_DeltaTime, byte K2Node_Event_PrevMovementMode, byte K2Node_Event_NewMovementMode, byte K2Node_Event_PrevCustomMode, byte K2Node_Event_NewCustomMode, Key ___struct_Variable2, Key K2Node_InputActionEvent_Key2, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, const TemBPDataAddr[] K2Node_MakeArray_Array, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType2, Controller* K2Node_Event_InstigatedBy2, Actor* K2Node_Event_DamageCauser2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool K2Node_CustomEvent_bIsAvailable, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, Controller* CallFunc_GetController_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, int CallFunc_PostEvent_ReturnValue3, int CallFunc_PostEvent_ReturnValue4, bool K2Node_SwitchEnum_CmpSuccess, Controller* CallFunc_GetController_ReturnValue3, bool CallFunc_ShouldUpdateHPOnUI_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess3, bool K2Node_SwitchEnum2_CmpSuccess, Controller* CallFunc_GetController_ReturnValue4, int CallFunc_PostEvent_ReturnValue5, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess4, Key K2Node_InputActionEvent_Key3, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_IsLocalControlOrView_ReturnValue, CameraComponent* CallFunc_GetControllerViewCamera_Camera, Controller* CallFunc_GetController_ReturnValue5, bool CallFunc_IsValid_ReturnValue8, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess5, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate7, bool CallFunc_HasAuthority_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess6, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller6, bool K2Node_DynamicCast_bSuccess7, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, Key K2Node_InputKeyEvent_Key17, FString K2Node_Event_content, float K2Node_Event_dis2, float K2Node_Event_height2, float K2Node_Event_length2, FString K2Node_Event_VaultKey2, Vector K2Node_Event_startPos2, Actor* K2Node_Event_checkActor2, float K2Node_Event_crossblockMaxFall2, float K2Node_Event_crossblockMaxDis2, Vector K2Node_Event_hitpoint2, Actor* K2Node_Event_WindowActor, Rotator K2Node_Event_movedir2, float K2Node_Event_dis, float K2Node_Event_height, float K2Node_Event_length, FString K2Node_Event_VaultKey, Vector K2Node_Event_startPos, Actor* K2Node_Event_checkActor, float K2Node_Event_crossblockMaxFall, float K2Node_Event_crossblockMaxDis, Vector K2Node_Event_hitpoint, Rotator K2Node_Event_movedir, Controller* CallFunc_GetController_ReturnValue6, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller7, bool K2Node_DynamicCast_bSuccess8, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate8, Controller* CallFunc_GetController_ReturnValue7, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller8, bool K2Node_DynamicCast_bSuccess9, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller9, bool K2Node_DynamicCast_bSuccess10, FString CallFunc_GetPlayerKey_ReturnValue, bool CallFunc_HaveAngledSightBySlot_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue, bool CallFunc_SetCurrentPersonPerspective_ReturnValue, bool CallFunc_SetCurrentPersonPerspective_ReturnValue2, float K2Node_CustomEvent_Rate, bool CallFunc_IsCharacterSprinting_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue3, bool K2Node_SwitchEnum3_CmpSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue3, bool CallFunc_SwitchPoseState_ReturnValue4, bool CallFunc_SwitchPoseState_ReturnValue5, bool CallFunc_SwitchPoseState_ReturnValue6, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue3, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue4, bool CallFunc_IsValid_ReturnValue9, bool CallFunc_IsValid_ReturnValue10, int ___int_Array_Index_Variable2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue5, int CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue11, delegate K2Node_CreateDelegate_OutputDelegate9, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue6, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess11, float K2Node_Event_DamageReceived, const DamageType* K2Node_Event_DamageType, Vector K2Node_Event_Origin, float K2Node_Event_Radius, HitResult K2Node_Event_HitInfo, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, Vector K2Node_Event_ImpulseDir, class CameraShake CallFunc_GetGrenadeCameraShakeByDir_RetVar, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess12, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_IsAutoRunTestGame_ReturnValue, bool CallFunc_IsValid_ReturnValue12, CameraShake* CallFunc_PlayCameraShake_ReturnValue, Controller* K2Node_Event_NewController, bool CallFunc_IsValid_ReturnValue13, AkAudioEvent* K2Node_Event_LocalAkEvent, AkAudioEvent* K2Node_Event_RemoteAkEvent, bool CallFunc_IsValid_ReturnValue14, delegate K2Node_CreateDelegate_OutputDelegate10, bool CallFunc_IsValid_ReturnValue15, bool CallFunc_IsLocalControlOrView_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue2, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_IsValid_ReturnValue16, Actor* CallFunc_GetOwner_ReturnValue2, int ___int_Loop_Counter_Variable2, STExtraVehicleBase* K2Node_DynamicCast_AsSTExtra_Vehicle_Base, bool K2Node_DynamicCast_bSuccess13, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, float CallFunc_ShowReflectorSightTPPMaterial_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate11, bool CallFunc_ShouldRedBlood_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttachedWithMgr_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttachedWithMgr_ReturnValue2, bool CallFunc_IsValid_ReturnValue17, bool CallFunc_IsValid_ReturnValue18, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue7, bool CallFunc_IsValid_ReturnValue19, enum K2Node_CustomEvent_state, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue8, bool CallFunc_AllowWater_bCanEnter, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller10, bool K2Node_DynamicCast_bSuccess14, byte ___byte_Variable, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_IsLocalControlOrView_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue2, CameraComponent* CallFunc_GetControllerViewCamera_Camera2, bool CallFunc_Not_PreBool_ReturnValue4, bool CallFunc_IsValid_ReturnValue20, bool CallFunc_BooleanAND_ReturnValue3, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool K2Node_Event_Enable, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess15, bool CallFunc_IsShowBlood_ReturnValue, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_IsValid_ReturnValue21, bool CallFunc_BooleanAND_ReturnValue5, enum K2Node_Event_State2, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, bool CallFunc_IsValid_ReturnValue22, enum K2Node_Event_State, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, bool CallFunc_IsValid_ReturnValue23, int ___int_Array_Index_Variable3, int CallFunc_Array_Get_Item2, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Controller* CallFunc_GetController_ReturnValue8, bool CallFunc_IsAngledSight_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller11, bool K2Node_DynamicCast_bSuccess16, bool CallFunc_Not_PreBool_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue6, bool CallFunc_IsAngledSight_ReturnValue2, byte K2Node_Event_type, bool K2Node_Event_IsOnlyTurn, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, bool K2Node_CustomEvent_IsPush2, Controller* CallFunc_GetController_ReturnValue9, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller12, bool K2Node_DynamicCast_bSuccess17, bool CallFunc_Not_PreBool_ReturnValue6, bool K2Node_SwitchInteger2_CmpSuccess, int CallFunc_PostEvent_ReturnValue6, bool CallFunc_IsAngledSight_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue7, byte ___byte_Variable2, bool CallFunc_Not_PreBool_ReturnValue8, bool ___bool_Variable2, bool CallFunc_IsAngledSight_ReturnValue4, bool K2Node_CustomEvent_IsPush, Controller* CallFunc_GetController_ReturnValue10, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller13, bool K2Node_DynamicCast_bSuccess18, bool CallFunc_Not_PreBool_ReturnValue9, bool K2Node_SwitchInteger3_CmpSuccess, bool CallFunc_IsAngledSight_ReturnValue5, bool CallFunc_IsAngledSight_ReturnValue6, bool CallFunc_IsAngledSight_ReturnValue7, bool CallFunc_Not_PreBool_ReturnValue10, bool CallFunc_BooleanAND_ReturnValue7, bool CallFunc_IsAngledSight_ReturnValue8, bool CallFunc_Not_PreBool_ReturnValue11, bool CallFunc_BooleanAND_ReturnValue8, delegate K2Node_CreateDelegate_OutputDelegate12, int CallFunc_PostEvent_ReturnValue7, bool CallFunc_IsAngledSightAvailable_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue9, bool CallFunc_BooleanOR_ReturnValue2, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2, bool CallFunc_K2_AttachToComponent_ReturnValue2, bool CallFunc_IsAngledSightAvailable_ReturnValue2, bool CallFunc_IsAngledSight_ReturnValue10, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue9, bool CallFunc_BooleanAND_ReturnValue10, STExtraShootWeapon* K2Node_CustomEvent_Weapon, enum K2Node_CustomEvent_type, bool K2Node_CustomEvent_bEquip, bool CallFunc_IsAngledSightBySlot_ReturnValue, byte K2Node_Select_Default, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, Controller* CallFunc_GetController_ReturnValue11, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess19, AkComponent* CallFunc_GetAkComponent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue2, bool CallFunc_IsValid_ReturnValue24, bool K2Node_CustomEvent_bIsBegin, Controller* CallFunc_GetController_ReturnValue12, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller14, bool K2Node_DynamicCast_bSuccess20, bool CallFunc_Not_PreBool_ReturnValue12, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue11, bool CallFunc_IsAngledSight_ReturnValue11, Key K2Node_InputKeyEvent_Key, bool CallFunc_HaveAngledSight_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue12, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_BooleanAND_ReturnValue13, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue14, Key ___struct_Variable3, bool CallFunc_IsAngledSight_ReturnValue13, bool CallFunc_HaveAngledSight_ReturnValue2, bool CallFunc_IsValid_ReturnValue25, bool K2Node_CustomEvent_BoolValue, bool CallFunc_K2_AttachToComponent_ReturnValue3, FString CallFunc_GetPlayerNameSafety_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, int ___int_Loop_Counter_Variable3, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue3, bool CallFunc_HasAuthority_ReturnValue3, Key K2Node_InputKeyEvent_Key2, Controller* CallFunc_GetControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue26, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller15, bool K2Node_DynamicCast_bSuccess21, bool CallFunc_IsLocallyControlled_ReturnValue3, int K2Node_CustomEvent_PrevIndex, int K2Node_CustomEvent_NewIndex, Rotator K2Node_CustomEvent_AngleRotator, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue27, FName CallFunc_GetRearSightSocket_ReturnValue, FName CallFunc_GetRearSightSocket_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue28, bool CallFunc_IsLocalControlorView_ReturnValue4, Key K2Node_InputKeyEvent_Key3, bool CallFunc_BooleanAND_ReturnValue15, bool CallFunc_EnterState_ReturnValue, FName CallFunc_GetGameModeState_CurModeState, bool CallFunc_EqualEqual_NameName_ReturnValue, FName K2Node_Select2_Default, bool CallFunc_EqualEqual_NameName_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue13, PlayerController* CallFunc_GetPlayerController_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue4, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess22, int K2Node_CustomEvent_SeatType, bool CallFunc_IsDedicatedServer_ReturnValue4, SceneComponent*[] CallFunc_GetChildrenComponents_Children, bool CallFunc_Not_PreBool_ReturnValue14, SceneComponent* CallFunc_Array_Get_Item3, ParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess23, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue3, Key K2Node_InputKeyEvent_Key4, byte CallFunc_GetRole_ReturnValue, Key K2Node_InputKeyEvent_Key5, bool CallFunc_EqualEqual_ByteByte_ReturnValue8, bool CallFunc_BooleanOR_ReturnValue5, Key ___struct_Variable4, Key K2Node_InputKeyEvent_Key6, Key K2Node_InputKeyEvent_Key7, Key ___struct_Variable5, Key K2Node_InputKeyEvent_Key8, Key K2Node_InputKeyEvent_Key9, Rotator K2Node_CustomEvent_TurnInPlaceStart, Rotator K2Node_CustomEvent_TurnInPlaceTarget, CurveFloat* K2Node_CustomEvent_Curve, AnimMontage* K2Node_CustomEvent_TurnAnimation, float CallFunc_PlayAnimMontage_ReturnValue, float CallFunc_GetTimeRange_MinTime, float CallFunc_GetTimeRange_MaxTime, Key K2Node_InputKeyEvent_Key10, Rotator CallFunc_RLerp_ReturnValue, Key K2Node_InputKeyEvent_Key11, Key K2Node_InputKeyEvent_Key12, Key ___struct_Variable6, Key K2Node_InputKeyEvent_Key13);// 0x4033584
	void OnTriggerVault__DelegateSignature(bool bTryEnter);// 0x4033584
	void OnCakePlacement__DelegateSignature(bool Success);// 0x4033584
	void UnequipWeaponComplete__DelegateSignature();// 0x4033584
	void EquipWeaponComplete__DelegateSignature();// 0x4033584
	BP_UseZipline_C* UseZipline;//[Offset: 0x3e78, Size: 8]
	BP_CharacterCarryBackComp_C* BP_CharacterCarryBackComp;//[Offset: 0x3e80, Size: 8]
	InteractManagerComponent* InteractManager;//[Offset: 0x3e88, Size: 8]
	BuildSystemComp_BP_C* BuildSystemComp_BP;//[Offset: 0x3e90, Size: 8]
	HoldComponent_C* ShoulderHoldComp;//[Offset: 0x3e98, Size: 8]
	BP_SkillManagerComponent_C* BP_SkillManagerComponent;//[Offset: 0x3ea0, Size: 8]
	CustomCameraComponent* Camera;//[Offset: 0x3ea8, Size: 8]
	CapsuleComponent* ShareBounds;//[Offset: 0x3eb0, Size: 8]
	ChildActorComponent* BP_PaintDecalDetectLine1;//[Offset: 0x3eb8, Size: 8]
	CapsuleComponent* Capsule;//[Offset: 0x3ec0, Size: 8]
	HoldComponent_C* AngledSightHoldComp;//[Offset: 0x3ec8, Size: 8]
	CharacterAnimList_Skill_C* CharacterAnimList_Skill;//[Offset: 0x3ed0, Size: 8]
	CharacterAnimList_Parachute_C* CharacterAnimList_Parachute;//[Offset: 0x3ed8, Size: 8]
	StaticMeshComponent* Scope;//[Offset: 0x3ee0, Size: 8]
	PostProcessComponent* PostProcess;//[Offset: 0x3ee8, Size: 8]
	SpringArmComponent* ShoulderCameraSpringArm;//[Offset: 0x3ef0, Size: 8]
	SceneComponent* ShoulderCameraOffset;//[Offset: 0x3ef8, Size: 8]
	CharacterAnimList_Base_C* CharacterAnimList_Base;//[Offset: 0x3f00, Size: 8]
	SplineComponent* PetParachuteSpline;//[Offset: 0x3f08, Size: 8]
	PetComponent_BP_C* PetComponent_BP;//[Offset: 0x3f10, Size: 8]
	CharacterAvatarComp2_BP_C* CharacterAvatarComp2_BP;//[Offset: 0x3f18, Size: 8]
	StaticMeshComponent* ScopeStaticMesh;//[Offset: 0x3f20, Size: 8]
	HoldComponent_C* PeekHoldComp;//[Offset: 0x3f28, Size: 8]
	HoldComponent_C* AimHoldComp;//[Offset: 0x3f30, Size: 8]
	ObserverCameraComponent* ObserverCameraFPPMode;//[Offset: 0x3f38, Size: 8]
	FPPSpringArmComponent* FPPSpringArm;//[Offset: 0x3f40, Size: 8]
	FPPComponent_C* FPPComponent;//[Offset: 0x3f48, Size: 8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x3f50, Size: 8]
	CameraComponent* ScopingCamera;//[Offset: 0x3f58, Size: 8]
	SpringArmComponent* ScopingSpringArm;//[Offset: 0x3f60, Size: 8]
	CapsuleComponent* HitBox_Prone;//[Offset: 0x3f68, Size: 8]
	CapsuleComponent* HitBox_Stand;//[Offset: 0x3f70, Size: 8]
	Vault_Controller_C* Vault_Controller;//[Offset: 0x3f78, Size: 8]
	BP_SwimController_C* BP_SwimController;//[Offset: 0x3f80, Size: 8]
	BP_AutoAimingComponent_C* BP_AutoAimingComponent;//[Offset: 0x3f88, Size: 8]
	CharacterWeaponManagerComponent* CharacterWeaponManager;//[Offset: 0x3f90, Size: 8]
	PickupManagerComponent* PickupManager;//[Offset: 0x3f98, Size: 8]
	SceneComponent* CameraRoot;//[Offset: 0x3fa0, Size: 8]
	CustomSpringArmComponent* CustomSpringArm;//[Offset: 0x3fa8, Size: 8]
	CameraSettingComponent_C* CameraSettingComponent;//[Offset: 0x3fb0, Size: 8]
	float RearSightTimeline_RearSightUpdate_B52340D847258BFCFCCDAC8659F0041C;//[Offset: 0x3fb8, Size: 4]
	byte RearSightTimeline__Direction_B52340D847258BFCFCCDAC8659F0041C;//[Offset: 0x3fbc, Size: 1]
	TimelineComponent* RearSightTimeline;//[Offset: 0x3fc0, Size: 8]
	float AngledSigntTimeline_NewTrack_0_1A55FFB84346668215A22AA5D66EFECA;//[Offset: 0x3fc8, Size: 4]
	byte AngledSigntTimeline__Direction_1A55FFB84346668215A22AA5D66EFECA;//[Offset: 0x3fcc, Size: 1]
	TimelineComponent* AngledSigntTimeline;//[Offset: 0x3fd0, Size: 8]
	float ScopeTimeline_NewTrack_1_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x3fd8, Size: 4]
	byte ScopeTimeline__Direction_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x3fdc, Size: 1]
	TimelineComponent* ScopeTimeline;//[Offset: 0x3fe0, Size: 8]
	float ParachuteCamBlend_Alpha_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x3fe8, Size: 4]
	byte ParachuteCamBlend__Direction_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x3fec, Size: 1]
	TimelineComponent* ParachuteCamBlend;//[Offset: 0x3ff0, Size: 8]
	float LerpAlpha_LerpAlpha_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x3ff8, Size: 4]
	byte LerpAlpha__Direction_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x3ffc, Size: 1]
	TimelineComponent* LerpAlpha;//[Offset: 0x4000, Size: 8]
	float TurnLerpAlpha_Alpha_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x4008, Size: 4]
	byte TurnLerpAlpha__Direction_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x400c, Size: 1]
	TimelineComponent* TurnLerpAlpha;//[Offset: 0x4010, Size: 8]
	MaterialInstanceDynamic* DamageSphereDMI;//[Offset: 0x4018, Size: 8]
	bool bCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4020, Size: 1]
	bool IsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4021, Size: 1]
	float ReloadingCDMax;//[Offset: 0x4024, Size: 4]
	Vector LastInAirVelocityVector;//[Offset: 0x4028, Size: 12]
	Vector VelocityVector;//[Offset: 0x4034, Size: 12]
	float Speed;//[Offset: 0x4040, Size: 4]
	bool Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4044, Size: 1]
	Rotator LastVelocityRotation;//[Offset: 0x4048, Size: 12]
	Rotator TurnInPlaceRotation;//[Offset: 0x4054, Size: 12]
	Rotator TurnInPlaceStart;//[Offset: 0x4060, Size: 12]
	Rotator TurnInPlaceTarget;//[Offset: 0x406c, Size: 12]
	bool TurningInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4078, Size: 1]
	byte LocomotionState;//[Offset: 0x4079, Size: 1]
	bool Jumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x407a, Size: 1]
	float ProneCameraHeight;//[Offset: 0x407c, Size: 4]
	float CameraMoveSpeed;//[Offset: 0x4080, Size: 4]
	bool UseFirstPersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4084, Size: 1]
	float MeleeAttackRange;//[Offset: 0x4088, Size: 4]
	Vector Melee Attack Location;//[Offset: 0x408c, Size: 12]
	float MeleeAttackDamage;//[Offset: 0x4098, Size: 4]
	byte CurCameraMode;//[Offset: 0x409c, Size: 1]
	STR_CameraSetting StandCameraSetting;//[Offset: 0x40a0, Size: 20]
	Rotator TerreneNormal;//[Offset: 0x40b4, Size: 12]
	Vector Normal;//[Offset: 0x40c0, Size: 12]
	PickUpWrapperActor* PickUpTarget;//[Offset: 0x40d0, Size: 8]
	bool bIsPicking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d8, Size: 1]
	delegate EquipWeaponComplete;//[Offset: 0x40e0, Size: 16]
	delegate UnequipWeaponComplete;//[Offset: 0x40f0, Size: 16]
	float CrouchCameraHeight;//[Offset: 0x4100, Size: 4]
	float PickupDelayTime;//[Offset: 0x4104, Size: 4]
	float DefaultCapsuleRadius;//[Offset: 0x4108, Size: 4]
	SkeletalMeshComponent* ParachuteComponent;//[Offset: 0x4110, Size: 8]
	float SwimCameraHeight;//[Offset: 0x4118, Size: 4]
	float SwimTargetRoll;//[Offset: 0x411c, Size: 4]
	float SwimUpRateFix;//[Offset: 0x4120, Size: 4]
	float SwimRotateSpeed;//[Offset: 0x4124, Size: 4]
	<int,FString> GrenadeToSlotIndexDict;//[Offset: 0x4128, Size: 80]
	bool VaultEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4178, Size: 1]
	ItemDefineID putoffItem;//[Offset: 0x4180, Size: 24]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x4198, Size: 16]
	bool autoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41a8, Size: 1]
	SpringArmComponent*[] SpringArms;//[Offset: 0x41b0, Size: 16]
	CameraComponent*[] Cameras;//[Offset: 0x41c0, Size: 16]
	SpringArmComponent* CurActiveSpringArm;//[Offset: 0x41d0, Size: 8]
	bool UseTurniinPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41d8, Size: 1]
	<int,FName> GrenadeIDToNameDict;//[Offset: 0x41e0, Size: 80]
	int[] GrenadeIDsOrder;//[Offset: 0x4230, Size: 16]
	float ElapseTime;//[Offset: 0x4240, Size: 4]
	float SwimRotateX;//[Offset: 0x4244, Size: 4]
	SpringArmComponent* NewVar;//[Offset: 0x4248, Size: 8]
	byte CurPoseState;//[Offset: 0x4250, Size: 1]
	<int,BackpackEmoteHandle*> EmoteBPIDToAnimHandleMap;//[Offset: 0x4258, Size: 80]
	ParticleSystem* DecentBloodSpot;//[Offset: 0x42a8, Size: 8]
	ParticleSystem* BloodSpot_Red;//[Offset: 0x42b0, Size: 8]
	ParticleSystem* BloodSpot_Green;//[Offset: 0x42b8, Size: 8]
	BP_WateringArea_C* MiniTreeRef;//[Offset: 0x42c0, Size: 8]
	enum[] DisallowedWateringStates;//[Offset: 0x42c8, Size: 16]
	delegate OnCakePlacement;//[Offset: 0x42d8, Size: 16]
	Actor* PaintDecalDetector;//[Offset: 0x42e8, Size: 8]
	ChildActorComponent* PaintDecalDetectComp;//[Offset: 0x42f0, Size: 8]
	bool NewVar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42f8, Size: 1]
	Actor* CurEmoteActor;//[Offset: 0x4300, Size: 8]
	STExtraWeapon* CurUseingEmoteWeapon;//[Offset: 0x4308, Size: 8]
	MaterialBillboardComponent* FrameUIBillboard;//[Offset: 0x4310, Size: 8]
	bool bIsAngledSightOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4318, Size: 1]
	MeshComponent* OriginAttachComponent;//[Offset: 0x4320, Size: 8]
	MeshComponent* TargetAttachComponent;//[Offset: 0x4328, Size: 8]
	Rotator OriginRotOffset;//[Offset: 0x4330, Size: 12]
	DollyZoomParam OriginDollyZoomParam;//[Offset: 0x433c, Size: 12]
	DollyZoomParam TargetDollyZoomParam;//[Offset: 0x4348, Size: 12]
	<FName,class STExtraWeapon> GrenadeWeaponMaps;//[Offset: 0x4358, Size: 80]
	bool Cache(ForceStill);//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a8, Size: 1]
	delegate OnTriggerVault;//[Offset: 0x43b0, Size: 16]
	FName HurtSoundSwitchState;//[Offset: 0x43c0, Size: 8]

--------------------------------
Class: BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.LuaPlayerController.PlayerController.Controller.Actor.Object
	void RPC_Client_WonderfulPeriod(int IntProperty, float FloatProperty, float FloatProperty, float[] ArrayProperty, int IntProperty, bool BoolProperty);// 0x699d714
	void RPC_Client_MarkShoot(Actor* ObjectProperty, Actor* ObjectProperty);// 0x699d714
	void RPC_Client_MaliciousTeammateVictimReceiveTips(FString StrProperty, bool BoolProperty, int IntProperty);// 0x699d714
	void RPC_Client_MaliciousTeammateReceiveWarningTips();// 0x699d714
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x43f0, Size: 8]
	void ReadSceenMoveXAdd(bool SceenMoveXAdd, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void ReadClientReplayConfig(GameInstance* CallFunc_GetGameInstance_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, ClientInGameReplay* CallFunc_GetClientInGameReplay_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_NotEqual_BoolBool_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue2);// 0x4033584
	void InitLocalHelmetDisplay(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void MapFromCBToESBH(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess);// 0x4033584
	void ReceiveLuaTick();// 0x4033584
	void ReceiveLuaBeginPlay();// 0x4033584
	void StopAvatarDownload(GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void SetMultiVersionRedSwitchConfig(SettingConfig_C* SettingConfig, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_SwitchString_CmpSuccess, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void MapFromCBToESGlobal(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess);// 0x4033584
	void MapFromCBToESVN(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess);// 0x4033584
	void MapFromCBToESJK(SettingConfig_C* SettingConfig, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess, bool CallFunc_GetRedBloodSwitch_ReturnValue, bool K2Node_SwitchInteger3_CmpSuccess, FString CallFunc_GetAccountRegion_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	void MapFromCBToES(SettingConfig_C* SettingConfig, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void ReadConfigEffectSettingColorSingleLayer(int NewParam, LinearColor LayerColor, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BlueholeHurtEffectConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, BP_STRUCT_KoreaHurtEffectConfig_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, BP_STRUCT_JapanHurtEffectConfig_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue2, BP_STRUCT_VNHurtEffectConfig_type CallFunc_GetTableData_OutRow4, bool CallFunc_GetTableData_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4, BP_STRUCT_GlobalHurtEffectConfig_type CallFunc_GetTableData_OutRow5, bool CallFunc_GetTableData_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue17, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue18, SaveGame* CallFunc_GetUserSettings_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue19, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_StringToFloat_ReturnValue20, LinearColor CallFunc_MakeColor_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue5, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x4033584
	void ReadConfigEffectSettingColorMultiLayer(int NewParam, EffectSettingMgr* EffectSettingMgr, LinearColor Layer4Color, LinearColor Layer3Color, LinearColor Layer2Color, LinearColor Layer1Color, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetAccountRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BlueholeHitEffectConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, BP_STRUCT_KoreaHitEffectConfig_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, float CallFunc_Conv_StringToFloat_ReturnValue17, float CallFunc_Conv_StringToFloat_ReturnValue18, LinearColor CallFunc_MakeColor_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue19, float CallFunc_Conv_StringToFloat_ReturnValue20, float CallFunc_Conv_StringToFloat_ReturnValue21, LinearColor CallFunc_MakeColor_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue22, float CallFunc_Conv_StringToFloat_ReturnValue23, float CallFunc_Conv_StringToFloat_ReturnValue24, float CallFunc_Conv_StringToFloat_ReturnValue25, LinearColor CallFunc_MakeColor_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue26, float CallFunc_Conv_StringToFloat_ReturnValue27, float CallFunc_Conv_StringToFloat_ReturnValue28, float CallFunc_Conv_StringToFloat_ReturnValue29, LinearColor CallFunc_MakeColor_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue30, float CallFunc_Conv_StringToFloat_ReturnValue31, float CallFunc_Conv_StringToFloat_ReturnValue32, BP_STRUCT_JapanHitEffectConfig_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue8, BP_STRUCT_VNHitEffectConfig_type CallFunc_GetTableData_OutRow4, bool CallFunc_GetTableData_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue33, float CallFunc_Conv_StringToFloat_ReturnValue34, float CallFunc_Conv_StringToFloat_ReturnValue35, float CallFunc_Conv_StringToFloat_ReturnValue36, float CallFunc_Conv_StringToFloat_ReturnValue37, float CallFunc_Conv_StringToFloat_ReturnValue38, float CallFunc_Conv_StringToFloat_ReturnValue39, LinearColor CallFunc_MakeColor_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue40, float CallFunc_Conv_StringToFloat_ReturnValue41, float CallFunc_Conv_StringToFloat_ReturnValue42, float CallFunc_Conv_StringToFloat_ReturnValue43, LinearColor CallFunc_MakeColor_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue44, float CallFunc_Conv_StringToFloat_ReturnValue45, float CallFunc_Conv_StringToFloat_ReturnValue46, float CallFunc_Conv_StringToFloat_ReturnValue47, LinearColor CallFunc_MakeColor_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue48, float CallFunc_Conv_StringToFloat_ReturnValue49, float CallFunc_Conv_StringToFloat_ReturnValue50, float CallFunc_Conv_StringToFloat_ReturnValue51, LinearColor CallFunc_MakeColor_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue52, LinearColor CallFunc_MakeColor_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue53, float CallFunc_Conv_StringToFloat_ReturnValue54, float CallFunc_Conv_StringToFloat_ReturnValue55, float CallFunc_Conv_StringToFloat_ReturnValue56, float CallFunc_Conv_StringToFloat_ReturnValue57, LinearColor CallFunc_MakeColor_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue58, float CallFunc_Conv_StringToFloat_ReturnValue59, float CallFunc_Conv_StringToFloat_ReturnValue60, float CallFunc_Conv_StringToFloat_ReturnValue61, LinearColor CallFunc_MakeColor_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue62, float CallFunc_Conv_StringToFloat_ReturnValue63, float CallFunc_Conv_StringToFloat_ReturnValue64, BP_STRUCT_GlobalHitEffectConfig_type CallFunc_GetTableData_OutRow5, bool CallFunc_GetTableData_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue16, GameBackendHUD* CallFunc_GetInstance_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue65, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue66, SaveGame* CallFunc_GetUserSettings_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue67, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_StringToFloat_ReturnValue68, LinearColor CallFunc_MakeColor_ReturnValue17, float CallFunc_Conv_StringToFloat_ReturnValue69, float CallFunc_Conv_StringToFloat_ReturnValue70, float CallFunc_Conv_StringToFloat_ReturnValue71, float CallFunc_Conv_StringToFloat_ReturnValue72, float CallFunc_Conv_StringToFloat_ReturnValue73, LinearColor CallFunc_MakeColor_ReturnValue18, float CallFunc_Conv_StringToFloat_ReturnValue74, float CallFunc_Conv_StringToFloat_ReturnValue75, float CallFunc_Conv_StringToFloat_ReturnValue76, float CallFunc_Conv_StringToFloat_ReturnValue77, LinearColor CallFunc_MakeColor_ReturnValue19, float CallFunc_Conv_StringToFloat_ReturnValue78, float CallFunc_Conv_StringToFloat_ReturnValue79, float CallFunc_Conv_StringToFloat_ReturnValue80, LinearColor CallFunc_MakeColor_ReturnValue20, FString CallFunc_Concat_StrStr_ReturnValue5, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, EffectSettingMgr* CallFunc_GetEffectSettingMgr_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x4033584
	void InitNewbieCounts(FString CallFunc_Concat_StrStr_ReturnValue, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, bool CallFunc_IsValid_ReturnValue, NewbieGuideItem CallFunc_Array_Get_Item, NewbieGuideItem CallFunc_Array_Get_Item2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, BP_STRUCT_GuideText_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, NewbieGuideItem K2Node_SetFieldsInStruct_StructOut, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2);// 0x4033584
	void AddIgnoreCameraMoveIndex(byte _Index, int CallFunc_Array_AddUnique_ReturnValue);// 0x4033584
	void ReadConfigColorBlindnessTypeBoolDelegate(bool NewParam);// 0x4033584
	void ReadConfigColorBlindnessTypeIntDelegate(int NewParam);// 0x4033584
	void CheckGlobalReadRed(FString StrID, out bool bIsRed, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_CheckIsBood_bIsBlood, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void CheckIsBood(FString StrID, out bool bIsBlood, int CallFunc_FindSubstring_ReturnValue, int CallFunc_FindSubstring_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x4033584
	void CheckJapnReadRed(FString StrID, out bool bIsRed, bool CallFunc_GetRedBloodSwitch_ReturnValue, bool CallFunc_CheckIsBood_bIsBlood);// 0x4033584
	void GetJKCBColor(FString ID, out bool bFind, out LinearColor Color, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_JKColorBlindnessConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4);// 0x4033584
	void GetVNCBColor(FString ID, out bool bFind, out LinearColor Color, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_VNColorBlindnessConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue6, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, float CallFunc_Conv_StringToFloat_ReturnValue9, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, float CallFunc_Conv_StringToFloat_ReturnValue13, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4);// 0x4033584
	void GetCBColor(BP_STRUCT_ColorBlindnessConfig_type tempCBData, out LinearColor Color, BP_STRUCT_ColorBlindnessConfig_type localTempCBData, FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, float CallFunc_Conv_StringToFloat_ReturnValue5, float CallFunc_Conv_StringToFloat_ReturnValue6, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue7, float CallFunc_Conv_StringToFloat_ReturnValue8, LinearColor CallFunc_MakeColor_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue9, float CallFunc_Conv_StringToFloat_ReturnValue10, float CallFunc_Conv_StringToFloat_ReturnValue11, float CallFunc_Conv_StringToFloat_ReturnValue12, LinearColor CallFunc_MakeColor_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue13, float CallFunc_Conv_StringToFloat_ReturnValue14, float CallFunc_Conv_StringToFloat_ReturnValue15, float CallFunc_Conv_StringToFloat_ReturnValue16, LinearColor CallFunc_MakeColor_ReturnValue4, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_GetVNCBColor_bFind, LinearColor CallFunc_GetVNCBColor_Color, bool CallFunc_CheckGlobalReadRed_bIsRed, bool CallFunc_CheckJapnReadRed_bIsRed, bool CallFunc_GetJKCBColor_bFind, LinearColor CallFunc_GetJKCBColor_Color);// 0x4033584
	void ReadConfigColorBlindnessType(int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetGameFrontendHUDByGameInstance_ReturnValue, ColorBlindnessMgr* CallFunc_GetColorBlindnessMgr_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_ColorBlindnessConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, LinearColor CallFunc_GetCBColor_color, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void CurGameMode(out int GameMode, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x4033584
	void IsFPP(out bool IsFPP, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void OnRep_InWateringRange();// 0x4033584
	void LoadAllBattleSound(FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, int ___int_Array_Index_Variable, FName CallFunc_Array_Get_Item, BP_STRUCT_BattleSound_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x4033584
	void AsyncLoadBattleSound(Object* Object, int SoundID, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void LoadBattleSound(FString BankName, FString EventName, int SoundID, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Map_Contains_ReturnValue, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Map_Contains_ReturnValue2);// 0x4033584
	void SetAlwaysHideTouchInterface(bool Hide);// 0x4033584
	void PlayBattleSoundInBP(int SoundID, bool bPlayed, GameBackendHUD* CallFunc_GetInstance_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, AkAudioEvent* CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_PostEvent_ReturnValue);// 0x4033584
	bool IsReleasePosInAimBtnRange(Vector Loc, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3);// 0x4033584
	void ReadEmoteDataRowPC(int ___int_Array_Index_Variable, bool CallFunc_HasAuthority_ReturnValue, int ___int_Loop_Counter_Variable, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FName[] CallFunc_GetDataTableRowNames_OutRowNames2, int ___int_Loop_Counter_Variable2, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_EmoteBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, FName CallFunc_Array_Get_Item2, FString CallFunc_Conv_NameToString_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Len_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x4033584
	void IsAtaptation(out bool adaptation);// 0x4033584
	void ReadAdaptationTable(bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_BooleanAND_ReturnValue, FName CallFunc_Array_Get_Item, UIAdaptationStructure CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x4033584
	void InitWeather(GlobalConfigActor*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_Array_IsValidIndex_ReturnValue, GlobalConfigActor* CallFunc_Array_Get_Item);// 0x4033584
	void SetMotionParam(float GravityX, int CallFunc_GetPlatformInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_GetInputMotionState_Tilt, Vector CallFunc_GetInputMotionState_RotationRate, Vector CallFunc_GetInputMotionState_Gravity, Vector CallFunc_GetInputMotionState_Acceleration, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x4033584
	void GetStickLeftSize(out Vector2D Size, Vector2D CallFunc_GetJoyStickCenter_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x4033584
	void ShowFightingUI();// 0x4033584
	void ShowAutoSprintBtn(bool Visible, Vector2D showPos_, bool inside, Vector iPhoneXWidgetOffset, Vector2D touchPos);// 0x4033584
	void ReadConfigCrossHairColor(int NewParam, int ___int_Variable, LinearColor ___struct_Variable, LinearColor ___struct_Variable2, LinearColor ___struct_Variable3, LinearColor ___struct_Variable4, LinearColor ___struct_Variable5, LinearColor ___struct_Variable6, LinearColor ___struct_Variable7, LinearColor ___struct_Variable8, LinearColor ___struct_Variable9, LinearColor ___struct_Variable10, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, LinearColor K2Node_Select_Default);// 0x4033584
	void ReadConfigMotionControl(int NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void ReadConfigAutoAim(bool NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void ReadConfigFromHUD(float CallFunc_Get3DTouchValue_TouchValue, bool CallFunc_Get3DTouchSwitch_TouchSwitch, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue2, SensibilityMode K2Node_MakeStruct_SensibilityMode, SensibilityMode K2Node_MakeStruct_SensibilityMode2, SensibilityMode K2Node_MakeStruct_SensibilityMode3, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig2, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig3, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig4, SightMaterialConfig K2Node_MakeStruct_SightMaterialConfig5, <int,SightMaterialConfig> K2Node_MakeMap_Map, SensibilityMode K2Node_MakeStruct_SensibilityMode4, SensibilityConfig K2Node_MakeStruct_SensibilityConfig);// 0x4033584
	void MakeFireModeEffect(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsFPP_IsFPP, BP_SAVEGAME_UIElemLayout_C* CallFunc_LoadUIElemLayoutSGBySetting_SaveGame, float CallFunc_GetRushTriggerLengthByType_RushTriggerLength);// 0x4033584
	void DebugNotDrawGuideLine();// 0x4033584
	void ShowBackpackTombBox(bool Show);// 0x4033584
	void BindOrUnBindJoyStickSprint(bool IsBind);// 0x4033584
	void CreateRank(int Kills, int Rank);// 0x4033584
	void DisableAimIfUnEquipWeapon(byte WeaponType);// 0x4033584
	void SwitchAimMode();// 0x4033584
	void DoInitUI(bool CallFunc_IsInFight_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HUD* CallFunc_GetHUD_ReturnValue, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocalPlayerController_ReturnValue);// 0x4033584
	void HandleJumpBtnPressEvent();// 0x4033584
	void OnRep_bInCar();// 0x4033584
	void RefreshUI(float DeltaTime, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x4033584
	void UpdateInputPanel();// 0x4033584
	void ShowBackpackIconSplash(bool bShow);// 0x4033584
	void RefreshWeaponPanel();// 0x4033584
	void SetTouchInputEnabled(bool bEnabled);// 0x4033584
	void ShowMainInputControl(bool bShow);// 0x4033584
	void ShowTouchInterface(bool bShow, Vector2D NormalJoystickCenter, Vector2D iPhoneXJoystickCenter, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, enum CallFunc_GetCurrentStateType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x4033584
	void EnableDeathGray(float BlendWeight, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x4033584
	void SetDeathGrayLerpValue(float Lerp);// 0x4033584
	void SetPostProcessVolume(Actor*[] CallFunc_GetActorsByTag_Targets, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, PostProcessVolume* K2Node_DynamicCast_AsPost_Process_Volume, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void UserConstructionScript(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void GrayToOne__FinishedFunc();// 0x4033584
	void GrayToOne__UpdateFunc();// 0x4033584
	void GrayToZero__FinishedFunc();// 0x4033584
	void GrayToZero__UpdateFunc();// 0x4033584
	void InpActEvt_NumPadEight_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_NumPadNine_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x4033584
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x4033584
	void InpActEvt_SwitchToTeam_DelOneNum_K2Node_InputActionEvent(Key Key);// 0x4033584
	void InpActEvt_SwitchToTeam_ClearTeamID_K2Node_InputActionEvent(Key Key);// 0x4033584
	void InpActEvt_SwitchToTeam_PostTeamID_K2Node_InputActionEvent(Key Key);// 0x4033584
	void InpActEvt_Android_Back_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x4033584
	void OnCharacterCurrentActivityIDRep(int CurrentActivityID);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void OnSpectatorCameraChange(bool bDie);// 0x4033584
	void OnStopFireEventHandle();// 0x4033584
	void OnSwitchCameraSatrtHandle(byte CameraMode);// 0x4033584
	void OnPlayerPutDownActorHandle(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x4033584
	void OnSwitchWeaponHandle();// 0x4033584
	void ReceiveTick(float DeltaSeconds);// 0x4033584
	void OnUseInventoryitemHandle();// 0x4033584
	void ServerStartBattle();// 0x4033584
	void ServerAfterLand();// 0x4033584
	void ClientAfterLand();// 0x4033584
	void RefreshTopMostUIPanel(byte Type);// 0x4033584
	void GameStart();// 0x4033584
	void RemoveWeaponAim(byte Slot);// 0x4033584
	void SetMoveableAirborne(bool NewParam);// 0x4033584
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x4033584
	void JoystickTriggerSprint(bool bIsSprint);// 0x4033584
	void OnPlane();// 0x4033584
	void SetPanels(out const UAEUserWidget*[] panels);// 0x4033584
	void InitOprate();// 0x4033584
	void OnFiremodeChange(int IntValue);// 0x4033584
	void ChangeToMale();// 0x4033584
	void ChangeToFemale();// 0x4033584
	void DoUITouchMove(Vector Loc);// 0x4033584
	void PressFire(int FingerIndex);// 0x4033584
	void ShowFireBtn(bool bShow);// 0x4033584
	void PressGrenade(bool isThrow);// 0x4033584
	void InitJoyStickAfterActivation();// 0x4033584
	void MemberVoice(int member, int Status);// 0x4033584
	void ReceiveClientRestart();// 0x4033584
	void OnShowAnimationButton(bool IsShow, int NewUIType);// 0x4033584
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x4033584
	void ResetMissingUIUpdate();// 0x4033584
	void MotionControliOS(Vector AxisValue);// 0x4033584
	void InpAxisKeyEvt_RotationRate_K2Node_InputVectorAxisEvent(Vector AxisValue);// 0x4033584
	void MotionControlAndroidTick();// 0x4033584
	void MotionControlAndroid(Vector AxisValue);// 0x4033584
	void ReceiveBackpackComponent();// 0x4033584
	void InitWallFeedBack();// 0x4033584
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x4033584
	void DebugOpenGuide();// 0x4033584
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x4033584
	void CallShowTouchInterface(bool InShow);// 0x4033584
	void OnGameModeStateChanged();// 0x4033584
	void ReleaseFire();// 0x4033584
	void OnFireModeChangeTD(int IntValue);// 0x4033584
	void OnRep_InWateringRangeBP();// 0x4033584
	void PlayerExitJumpEvent();// 0x4033584
	void EnterFightingStateDelegate();// 0x4033584
	void GameStartCountDownDelegate(float CountdownTime);// 0x4033584
	void LuaReceiveBeginPlay();// 0x4033584
	void AddPubgmAutoComp();// 0x4033584
	void ExecuteUbergraph_BP_STExtraPlayerController(int EntryPoint, Key K2Node_InputKeyEvent_Key4, delegate K2Node_CreateDelegate_OutputDelegate, Key K2Node_InputKeyEvent_Key3, bool ___bool_Variable, FString ___string_Variable, FString ___string_Variable2, Key K2Node_InputActionEvent_Key5, Key K2Node_InputActionEvent_Key4, Key ___struct_Variable, Key K2Node_InputActionEvent_Key3, Key K2Node_InputActionEvent_Key2, Key K2Node_InputActionEvent_Key, int ___int_Variable, byte ___byte_Variable, byte ___byte_Variable2, byte ___byte_Variable3, byte ___byte_Variable4, Key K2Node_InputKeyEvent_Key2, Key K2Node_InputKeyEvent_Key, FString CallFunc_Conv_IntToString_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, const TemBPDataAddr[] K2Node_MakeArray_Array, delegate K2Node_CreateDelegate_OutputDelegate5, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue2, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue3, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue4, Transform ___struct_Variable2, Transform ___struct_Variable3, PubgmAutoRun* CallFunc_AddComponent_ReturnValue, AutoTestInterface* CallFunc_AddComponent_ReturnValue2, Transform ___struct_Variable4, Transform ___struct_Variable5, AutoRunTest* CallFunc_AddComponent_ReturnValue3, AutoTestInterface* CallFunc_AddComponent_ReturnValue4, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, int K2Node_Event_CurrentActivityID, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_Event_bDie, bool CallFunc_IsValid_ReturnValue, byte K2Node_CustomEvent_CameraMode, STExtraBaseCharacter* K2Node_CustomEvent_TargetPlayer, Actor* K2Node_CustomEvent_TargetActor, float K2Node_Event_DeltaSeconds, BP_PlayerPawn_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess2, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess3, delegate K2Node_CreateDelegate_OutputDelegate6, byte K2Node_Event_type, bool K2Node_SwitchEnum_CmpSuccess, byte K2Node_CustomEvent_Slot, Pawn* CallFunc_K2_GetPawn_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool K2Node_CustomEvent_NewParam, bool K2Node_Event_bIsSprint, UAEUserWidget*[] K2Node_Event_panels, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int K2Node_CustomEvent_IntValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess4, delegate K2Node_CreateDelegate_OutputDelegate7, Pawn* CallFunc_GetPlayerPawn_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn3, bool K2Node_DynamicCast_bSuccess5, Pawn* CallFunc_GetPlayerPawn_ReturnValue2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn4, bool K2Node_DynamicCast_bSuccess6, Vector K2Node_Event_Loc, int K2Node_Event_fingerIndex, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_EqualEqual_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate8, delegate K2Node_CreateDelegate_OutputDelegate9, delegate K2Node_CreateDelegate_OutputDelegate10, delegate K2Node_CreateDelegate_OutputDelegate11, bool CallFunc_GetUseMotionControlEnable_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate12, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool K2Node_Event_bShow, bool K2Node_Event_isThrow, int K2Node_Event_member, int K2Node_Event_status, bool CallFunc_IsOnVehicle_ReturnValue, bool K2Node_Event_IsShow, int K2Node_Event_NewUIType, delegate K2Node_CreateDelegate_OutputDelegate13, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue9, byte K2Node_Event_WeaponPropSlot, ItemDefineID K2Node_Event_DefineID, bool K2Node_Event_bEquip, int CallFunc_Divide_IntInt_ReturnValue, int ___int_Array_Index_Variable, delegate K2Node_CreateDelegate_OutputDelegate14, BP_PlayerPawn_C* CallFunc_Array_Get_Item, Vector K2Node_CustomEvent_AxisValue2, Vector K2Node_InputVectorAxisEvent_AxisValue, delegate K2Node_CreateDelegate_OutputDelegate15, delegate K2Node_CreateDelegate_OutputDelegate16, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Clamp_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, Vector K2Node_CustomEvent_AxisValue, float CallFunc_CalInputFromRotaionRate_OutPitch, float CallFunc_CalInputFromRotaionRate_OutYaw, bool CallFunc_CalInputFromRotaionRate_bIsAddPitch, bool CallFunc_CalInputFromRotaionRate_bIsAddYaw, bool CallFunc_IsDedicatedServer_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate17, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess7, int[] K2Node_Event_FinishedGuide, int[] K2Node_Event_FinishedCounts, int K2Node_Event_PlayerLevel, int K2Node_Event_PlayerExperienceType, byte K2Node_Select2_Default, int CallFunc_MakeLiteralInt_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue2, int[] K2Node_MakeArray_Array2, int[] K2Node_MakeArray_Array3, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsObserver_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, Vector K2Node_Event_OceansideLocation, bool K2Node_Event_bDetectedRiver, bool K2Node_Event_InShow, int CallFunc_PostEventAtLocation_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess8, FName CallFunc_GetGameModeState_ReturnValue, bool K2Node_SwitchName_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsObserver_ReturnValue2, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess9, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance2, bool K2Node_DynamicCast_bSuccess10, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager, bool K2Node_DynamicCast_bSuccess11, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue2, bool CallFunc_IsInSpectating_ReturnValue, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager2, bool K2Node_DynamicCast_bSuccess12, bool CallFunc_IsOnVehicle_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, GameStateBase* CallFunc_GetGameState_ReturnValue2, bool CallFunc_IsWindowOB_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess13, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsFPP_IsFPP, int CallFunc_GetPlatformInt_ReturnValue, bool K2Node_SwitchInteger2_CmpSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue3, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance3, bool K2Node_DynamicCast_bSuccess14, int CallFunc_CurGameMode_GameMode, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue3, LogicManagerBase* CallFunc_GetLogicManagerByName_ReturnValue3, bool CallFunc_IsFPP_IsFPP2, InGameUIManager* K2Node_DynamicCast_AsIn_Game_UIManager3, bool K2Node_DynamicCast_bSuccess15, delegate K2Node_CreateDelegate_OutputDelegate18, FString CallFunc_Conv_IntToString_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, int K2Node_CustomEvent_IntValue, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Conv_IntToString_ReturnValue5, FString CallFunc_Conv_IntToString_ReturnValue6, bool CallFunc_EqualEqual_IntInt_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, delegate K2Node_CreateDelegate_OutputDelegate19, FString CallFunc_Concat_StrStr_ReturnValue15, delegate K2Node_CreateDelegate_OutputDelegate20, GameInstance* CallFunc_GetGameInstance_ReturnValue4, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance4, bool K2Node_DynamicCast_bSuccess16, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue4, bool CallFunc_IsValid_ReturnValue5, delegate K2Node_CreateDelegate_OutputDelegate21, delegate K2Node_CreateDelegate_OutputDelegate22, Rotator CallFunc_GetControlRotation_ReturnValue, float K2Node_CustomEvent_CountDownTime, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate23, delegate K2Node_CreateDelegate_OutputDelegate24, bool CallFunc_IsServer_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_IsAutoRunTestGameBindCompoment_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x4033584
	void VaultFailDS__DelegateSignature();// 0x4033584
	void BindEventToBackpackComponent__DelegateSignature();// 0x4033584
	void PlayerLeaveWater__DelegateSignature(bool HideLung);// 0x4033584
	void PlayerEnterWater__DelegateSignature();// 0x4033584
	void AirborneLanded__DelegateSignature();// 0x4033584
	void ReloadingCDEnd__DelegateSignature();// 0x4033584
	void ReloadingCDStart__DelegateSignature(float CD);// 0x4033584
	LuaTaskComponent* LuaTask;//[Offset: 0x43f8, Size: 8]
	QuickSignComponent_BP_C* QuickSignComponent_BP;//[Offset: 0x4400, Size: 8]
	BP_MapUIMarkManager_C* BP_MapUIMarkManager;//[Offset: 0x4408, Size: 8]
	BP_ChangeWearingComp_C* BP_ChangeWearingComp;//[Offset: 0x4410, Size: 8]
	BP_GameEventListener_C* BP_GameEventListener;//[Offset: 0x4418, Size: 8]
	GuideComponent_BP_C* GuideComponent_BP;//[Offset: 0x4420, Size: 8]
	BP_ServerSwitcher_C* BP_ServerSwitcher;//[Offset: 0x4428, Size: 8]
	STExtraUnderWaterEffectComp* STExtraUnderWaterEffectComp;//[Offset: 0x4430, Size: 8]
	ChatComponent_BP_C* ChatComponent_BP;//[Offset: 0x4438, Size: 8]
	BP_CommonBtn_C* BP_CommonBtn;//[Offset: 0x4440, Size: 8]
	BP_VehicleUser_C* BP_VehicleUser;//[Offset: 0x4448, Size: 8]
	float GrayToOne_Alpha_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x4450, Size: 4]
	byte GrayToOne__Direction_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x4454, Size: 1]
	TimelineComponent* GrayToOne;//[Offset: 0x4458, Size: 8]
	float GrayToZero_Alpha_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x4460, Size: 4]
	byte GrayToZero__Direction_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x4464, Size: 1]
	TimelineComponent* GrayToZero;//[Offset: 0x4468, Size: 8]
	PostProcessVolume* MainPostProcessVolume;//[Offset: 0x4470, Size: 8]
	byte LastCameraMode;//[Offset: 0x4478, Size: 1]
	Pawn* PrePlayerPawn;//[Offset: 0x4480, Size: 8]
	bool bInItemGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4488, Size: 1]
	float InItemGeneratorUIRefreshTime;//[Offset: 0x448c, Size: 4]
	float CurInItemGeneratorUIRefreshTime;//[Offset: 0x4490, Size: 4]
	Object* WaitingUI;//[Offset: 0x4498, Size: 8]
	Object* SimulatePlane;//[Offset: 0x44a0, Size: 8]
	float PlaneStartYaw;//[Offset: 0x44a8, Size: 4]
	delegate ReloadingCDStart;//[Offset: 0x44b0, Size: 16]
	delegate ReloadingCDEnd;//[Offset: 0x44c0, Size: 16]
	bool AlreadyAimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d0, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x44d8, Size: 8]
	STExtraBaseCharacter*[] CurAimTargets;//[Offset: 0x44e0, Size: 16]
	float CloseDistance;//[Offset: 0x44f0, Size: 4]
	byte AutoAimDrawType;//[Offset: 0x44f4, Size: 1]
	delegate AirborneLanded;//[Offset: 0x44f8, Size: 16]
	float MotionRate_Yaw;//[Offset: 0x4508, Size: 4]
	float MotionRate_Pitch;//[Offset: 0x450c, Size: 4]
	float MotionAimRate_Pitch;//[Offset: 0x4510, Size: 4]
	float MotionAimRate_Yaw;//[Offset: 0x4514, Size: 4]
	float MotionRate_Pitch_Threshold;//[Offset: 0x4518, Size: 4]
	float MotionRate_Yaw_Threshold;//[Offset: 0x451c, Size: 4]
	float MotionTouchAimRate_Pitch;//[Offset: 0x4520, Size: 4]
	float MotionTouchAimRate_Yaw;//[Offset: 0x4524, Size: 4]
	float MotionTouchRate_Yaw;//[Offset: 0x4528, Size: 4]
	float MotionTouchRate_Pitch;//[Offset: 0x452c, Size: 4]
	bool bDefaultIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4530, Size: 1]
	bool DriveWithForwardAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4531, Size: 1]
	bool DriveWithRightAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4532, Size: 1]
	bool bInTombBoxGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4533, Size: 1]
	delegate PlayerEnterWater;//[Offset: 0x4538, Size: 16]
	delegate PlayerLeaveWater;//[Offset: 0x4548, Size: 16]
	bool bindWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4558, Size: 1]
	bool bLandScapeOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4559, Size: 1]
	float PitchReverce;//[Offset: 0x455c, Size: 4]
	float Left;//[Offset: 0x4560, Size: 4]
	float Right;//[Offset: 0x4564, Size: 4]
	float LastTime;//[Offset: 0x4568, Size: 4]
	Vector[] MotionDataStack;//[Offset: 0x4570, Size: 16]
	Vector CurMotionData;//[Offset: 0x4580, Size: 12]
	delegate BindEventToBackpackComponent;//[Offset: 0x4590, Size: 16]
	delegate VaultFailDS;//[Offset: 0x45a0, Size: 16]
	<FString,UIAdaptationStructure> AdaptationDict;//[Offset: 0x45b0, Size: 80]
	UIAdaptationStructure CurDeviceAdaptationOffset;//[Offset: 0x4600, Size: 32]
	UIAdaptationStructure CurDeviceAdaptationData;//[Offset: 0x4620, Size: 32]
	bool bIsJoyStickShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4640, Size: 1]
	bool bIsInitSensibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4641, Size: 1]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4642, Size: 1]
	bool adaption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4643, Size: 1]
	bool initAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4644, Size: 1]
	bool IsJoystickTriggerSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4645, Size: 1]
	float UITouchMoveX;//[Offset: 0x4648, Size: 4]
	float UITouchMoveY;//[Offset: 0x464c, Size: 4]
	int PressFireFingerIndex;//[Offset: 0x4650, Size: 4]
	bool IsShowFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4654, Size: 1]
	bool IsThrowGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4655, Size: 1]
	int VoiceMemberID;//[Offset: 0x4658, Size: 4]
	int VoiceMemberStatus;//[Offset: 0x465c, Size: 4]
	byte AttachmentAttachSlot;//[Offset: 0x4660, Size: 1]
	ItemDefineID AttachmentDefineID;//[Offset: 0x4668, Size: 24]
	Vector2D AutoSprintBtnTouchPos;//[Offset: 0x4680, Size: 8]
	bool IsAutoSprintBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4688, Size: 1]
	bool IsFingerInsideAutoSprintBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4689, Size: 1]
	bool IsBindJoystickSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468a, Size: 1]
	byte UnequipWeaponType;//[Offset: 0x468b, Size: 1]
	bool IsShowInputControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468c, Size: 1]
	Vector2D AutoNavigateTranslation;//[Offset: 0x4690, Size: 8]
	int InputTeamID;//[Offset: 0x4698, Size: 4]
	int EmoteItemType;//[Offset: 0x469c, Size: 4]
	ItemRecordData[] EmoteDataRow;//[Offset: 0x46a0, Size: 16]
	bool bLongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46b0, Size: 1]
	bool bLongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46b1, Size: 1]
	Vector2D AimBtnPos;//[Offset: 0x46b4, Size: 8]
	Vector2D AimBtnSize;//[Offset: 0x46bc, Size: 8]
	int PeekMode;//[Offset: 0x46c4, Size: 4]
	int AimMode;//[Offset: 0x46c8, Size: 4]
	<int,int> EmoteItemIDToBPIDMap;//[Offset: 0x46d0, Size: 80]
	<int,FString> EmoteBPIDToHandlePath;//[Offset: 0x4720, Size: 80]
	<int,FString> EmoteItemIDToImagePathMap;//[Offset: 0x4770, Size: 80]
	<int,FString> EmoteItemIDToImageBattlePathMap;//[Offset: 0x47c0, Size: 80]
	bool bAlwaysHideTouchInterface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4810, Size: 1]
	<int,AkAudioEvent*> BattleSoundMap;//[Offset: 0x4818, Size: 80]
	<int,FString> BattleBankMap;//[Offset: 0x4868, Size: 80]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48b8, Size: 1]
	BP_SAVEGAME_UIElemLayout_C* SaveGameUIElemLayout;//[Offset: 0x48c0, Size: 8]
	int GameMode;//[Offset: 0x48c8, Size: 4]
	int currentColorBlindnessType;//[Offset: 0x48cc, Size: 4]
	int CurrentHitEffectIndex;//[Offset: 0x48d0, Size: 4]
	int CurrentHurtEffectIndex;//[Offset: 0x48d4, Size: 4]
	Rotator CurControllerRotation;//[Offset: 0x48d8, Size: 12]
	bool IsCurExitJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e4, Size: 1]
	bool bStopDownloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e5, Size: 1]
	int ShoulderMode;//[Offset: 0x48e8, Size: 4]

--------------------------------
Class: GameBackendHUD.BackendHUD.Object
	GameBackendUtils* GetUtils();// 0x3a8084c
	static GameBackendHUD* GetInstance();// 0x3a80818
	GameFrontendHUD* GetGameFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x3a8078c
	GameFrontendHUD* GetFirstGameFrontendHUD(const Object* WorldContextObject);// 0x3a80700

--------------------------------
Class: BackendHUD.Object
	Engine* Engine;//[Offset: 0x28, Size: 8]
	FString BackendUtilsClassName;//[Offset: 0x30, Size: 16]
	BackendUtils* Utils;//[Offset: 0x40, Size: 8]
	FrontendHUD*[] FrontendHUDList;//[Offset: 0x48, Size: 16]
	<uint32,FrontendHUD*> FrontendHUDMap;//[Offset: 0x58, Size: 80]
	FrontendHUD* GetFrontendHUDByGameInstance(GameInstance* GameInstance);// 0x5d0b04c
	FrontendHUD* GetFrontendHUD(int FrontendHUDIndex);// 0x5d0afc0

--------------------------------
Class: GameBackendUtils.BackendUtils.Object
	UAETableManager* GetTableManager();// 0x3a80384

--------------------------------
Class: BackendUtils.Object
	BackendHUD* OwningBackendHUD;//[Offset: 0x28, Size: 8]

--------------------------------
Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x28, Size: 16]
	FName[] TablesNeedReleasedInBattle;//[Offset: 0x38, Size: 16]
	FString ManualTableDirectory;//[Offset: 0x48, Size: 16]
	bool AllowItemTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	UAEDataTable*[] TableObjList;//[Offset: 0x160, Size: 16]
	World* CurWorld;//[Offset: 0x170, Size: 8]
	<FName,UAEDataTable*> TableObjMap;//[Offset: 0x178, Size: 80]
	<FName,UAEDataTable*> TableObjMap_Mod;//[Offset: 0x1c8, Size: 80]
	delegate OnTableCreateInFighting;//[Offset: 0x218, Size: 16]
	FString PathCompressionConfigsPath;//[Offset: 0x318, Size: 16]
	bool bIsPathCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bIsPathCompressionCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	int PathCompressionCacheMaxSize;//[Offset: 0x32c, Size: 4]
	bool bTranslationFallBackUnloadDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool bShrinkTranslationMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	FString BaseTableRelativeDir;//[Offset: 0x340, Size: 16]
	FString ModTableRelativeDir;//[Offset: 0x350, Size: 16]
	<FName,ModTable*> ModTableMap;//[Offset: 0x360, Size: 80]
	<FName,UAEDataTable*> ModTableObjMap;//[Offset: 0x3b0, Size: 80]
	UAEDataTable*[] InGameTableObjList;//[Offset: 0x400, Size: 16]
	<FName,bool> CheckNeedModMap;//[Offset: 0x410, Size: 80]
	FString CurrentModName;//[Offset: 0x460, Size: 16]
	FString EmptyModName;//[Offset: 0x470, Size: 16]
	<FString,BaseTableResMap*> LoadedTableMap;//[Offset: 0x480, Size: 80]
	<FString,bool> CheckMapTable;//[Offset: 0x4d0, Size: 80]
	<FString,DataTableProxy*> TableCache;//[Offset: 0x520, Size: 80]
	void ReleaseTable(FName TableFName);// 0x3856b2c
	UAEDataTable* GetTablePtr_Mod(FName tableName);// 0x3856aa0
	UAEDataTable* GetTablePtr(FName tableName);// 0x3856a14
	BaseTableResMap* GetTableMap(FString tableName);// 0x385695c
	static bool GetTableData(FString tableName, FString Key, out TableRowBase OutRow);// 0x38561e0
	static UAETableManager* GetInstance();// 0x38561ac
	static UAEDataTable* GetDataTableStatic_Mod(FString tableName);// 0x3856104
	static UAEDataTable* GetDataTableStatic(FString tableName);// 0x385605c
	DataTableProxy* GetDataTableProxy(FString tableName);// 0x3855fa4

--------------------------------
Class: ModTable.Object

--------------------------------
Class: BaseTableResMap.Object
	ScriptStruct* DataStruct;//[Offset: 0x80, Size: 8]

--------------------------------
Class: DataTableProxy.Object
	DataTable* ModDataTable;//[Offset: 0x28, Size: 8]
	DataTable* DataTable;//[Offset: 0x30, Size: 8]
	DataTableRowDesc* Desc;//[Offset: 0xd8, Size: 8]

--------------------------------
Class: DataTableRowDesc.Object

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x30, Size: 8]
	SoftObjectPath TinyFontName;//[Offset: 0x38, Size: 24]
	Font* SmallFont;//[Offset: 0x70, Size: 8]
	SoftObjectPath SmallFontName;//[Offset: 0x78, Size: 24]
	Font* MediumFont;//[Offset: 0x90, Size: 8]
	SoftObjectPath MediumFontName;//[Offset: 0x98, Size: 24]
	Font* LargeFont;//[Offset: 0xb0, Size: 8]
	SoftObjectPath LargeFontName;//[Offset: 0xb8, Size: 24]
	Font* SubtitleFont;//[Offset: 0xd0, Size: 8]
	SoftObjectPath SubtitleFontName;//[Offset: 0xd8, Size: 24]
	Font*[] AdditionalFonts;//[Offset: 0xf0, Size: 16]
	FString[] AdditionalFontNames;//[Offset: 0x108, Size: 16]
	class Console* ConsoleClass;//[Offset: 0x118, Size: 8]
	SoftClassPath ConsoleClassName;//[Offset: 0x120, Size: 24]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x138, Size: 8]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x140, Size: 24]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x158, Size: 8]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x160, Size: 24]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x178, Size: 8]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x180, Size: 24]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x198, Size: 24]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x1b0, Size: 8]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x1b8, Size: 24]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1d0, Size: 8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1d8, Size: 8]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1e0, Size: 24]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1f8, Size: 24]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x210, Size: 8]
	SoftClassPath AIControllerClassName;//[Offset: 0x218, Size: 24]
	GameUserSettings* GameUserSettings;//[Offset: 0x230, Size: 8]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x238, Size: 8]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x240, Size: 24]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x258, Size: 24]
	SoftClassPath GameSingletonClassName;//[Offset: 0x270, Size: 24]
	Object* GameSingleton;//[Offset: 0x288, Size: 8]
	SoftClassPath AssetManagerClassName;//[Offset: 0x290, Size: 24]
	AssetManager* AssetManager;//[Offset: 0x2a8, Size: 8]
	Texture2D* DefaultTexture;//[Offset: 0x2b0, Size: 8]
	SoftObjectPath DefaultTextureName;//[Offset: 0x2b8, Size: 24]
	Texture* DefaultDiffuseTexture;//[Offset: 0x2d0, Size: 8]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2d8, Size: 24]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2f0, Size: 8]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2f8, Size: 24]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x310, Size: 8]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x318, Size: 24]
	Texture2D* DefaultBokehTexture;//[Offset: 0x330, Size: 8]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x338, Size: 24]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x350, Size: 8]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x358, Size: 24]
	Material* WireframeMaterial;//[Offset: 0x370, Size: 8]
	FString WireframeMaterialName;//[Offset: 0x378, Size: 16]
	Material* DebugMeshMaterial;//[Offset: 0x388, Size: 8]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x390, Size: 24]
	Material* LevelColorationLitMaterial;//[Offset: 0x3a8, Size: 8]
	FString LevelColorationLitMaterialName;//[Offset: 0x3b0, Size: 16]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x3c0, Size: 8]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x3c8, Size: 16]
	Material* LightingTexelDensityMaterial;//[Offset: 0x3d8, Size: 8]
	FString LightingTexelDensityName;//[Offset: 0x3e0, Size: 16]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x3f0, Size: 8]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x3f8, Size: 16]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x408, Size: 8]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x410, Size: 16]
	Material* RemoveSurfaceMaterial;//[Offset: 0x420, Size: 8]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x428, Size: 24]
	Material* VertexColorMaterial;//[Offset: 0x440, Size: 8]
	FString VertexColorMaterialName;//[Offset: 0x448, Size: 16]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x458, Size: 8]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x460, Size: 16]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x470, Size: 8]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x478, Size: 16]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x488, Size: 8]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x490, Size: 16]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x4a0, Size: 8]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x4a8, Size: 16]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x4b8, Size: 8]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x4c0, Size: 16]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x4d0, Size: 24]
	Material* ConstraintLimitMaterial;//[Offset: 0x4e8, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x4f0, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x4f8, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x500, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x508, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x510, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x518, Size: 8]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x520, Size: 8]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x528, Size: 8]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x530, Size: 24]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x548, Size: 8]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x550, Size: 24]
	Material* ArrowMaterial;//[Offset: 0x568, Size: 8]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x570, Size: 24]
	Material* OutlineMaterial;//[Offset: 0x588, Size: 8]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x590, Size: 24]
	Material* OutlineMaskedMaterial;//[Offset: 0x5a8, Size: 8]
	SoftObjectPath OutlineMaskedMaterialName;//[Offset: 0x5b0, Size: 24]
	SoftObjectPath SmaaAreaTexName;//[Offset: 0x5c8, Size: 24]
	SoftObjectPath SmaaSearchTexName;//[Offset: 0x5e0, Size: 24]
	Texture2D* SmaaAreaTex;//[Offset: 0x5f8, Size: 8]
	Texture2D* SmaaSearchTex;//[Offset: 0x600, Size: 8]
	Material* DyeingColorMaterial;//[Offset: 0x608, Size: 8]
	SoftObjectPath DyeingColorMaterialName;//[Offset: 0x610, Size: 24]
	LinearColor LightingOnlyBrightness;//[Offset: 0x628, Size: 16]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x638, Size: 16]
	LinearColor[] QuadComplexityColors;//[Offset: 0x648, Size: 16]
	LinearColor[] LightComplexityColors;//[Offset: 0x658, Size: 16]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x668, Size: 16]
	LinearColor[] LODColorationColors;//[Offset: 0x678, Size: 16]
	LinearColor[] HLODColorationColors;//[Offset: 0x688, Size: 16]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x698, Size: 16]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x6a8, Size: 4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x6ac, Size: 4]
	float MinLightMapDensity;//[Offset: 0x6b0, Size: 4]
	float IdealLightMapDensity;//[Offset: 0x6b4, Size: 4]
	float MaxLightMapDensity;//[Offset: 0x6b8, Size: 4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6bc, Size: 1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x6c0, Size: 4]
	float RenderLightMapDensityColorScale;//[Offset: 0x6c4, Size: 4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x6c8, Size: 16]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x6d8, Size: 16]
	StatColorMapping[] StatColorMappings;//[Offset: 0x6e8, Size: 16]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x6f8, Size: 8]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x700, Size: 24]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x718, Size: 16]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x728, Size: 16]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x738, Size: 16]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x748, Size: 16]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x758, Size: 8]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x760, Size: 24]
	Texture2D* MiniFontTexture;//[Offset: 0x778, Size: 8]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x780, Size: 24]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x798, Size: 8]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x7a0, Size: 24]
	Texture2D* LightMapDensityTexture;//[Offset: 0x7b8, Size: 8]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x7c0, Size: 24]
	GameViewportClient* GameViewport;//[Offset: 0x7e0, Size: 8]
	FString[] DeferredCommands;//[Offset: 0x7e8, Size: 16]
	int TickCycles;//[Offset: 0x7f8, Size: 4]
	int GameCycles;//[Offset: 0x7fc, Size: 4]
	int ClientCycles;//[Offset: 0x800, Size: 4]
	float NearClipPlane;//[Offset: 0x804, Size: 4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x808, Size: 1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x808, Size: 1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x808, Size: 1]
	int MaximumLoopIterationCount;//[Offset: 0x80c, Size: 4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x810, Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x810, Size: 1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x810, Size: 1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x810, Size: 1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x810, Size: 1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x810, Size: 1]
	float FixedFrameRate;//[Offset: 0x814, Size: 4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x818, Size: 16]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x828, Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x82c, Size: 4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x830, Size: 1]
	Color C_WorldBox;//[Offset: 0x834, Size: 4]
	Color C_BrushWire;//[Offset: 0x838, Size: 4]
	Color C_AddWire;//[Offset: 0x83c, Size: 4]
	Color C_SubtractWire;//[Offset: 0x840, Size: 4]
	Color C_SemiSolidWire;//[Offset: 0x844, Size: 4]
	Color C_NonSolidWire;//[Offset: 0x848, Size: 4]
	Color C_WireBackground;//[Offset: 0x84c, Size: 4]
	Color C_ScaleBoxHi;//[Offset: 0x850, Size: 4]
	Color C_VolumeCollision;//[Offset: 0x854, Size: 4]
	Color C_BSPCollision;//[Offset: 0x858, Size: 4]
	Color C_OrthoBackground;//[Offset: 0x85c, Size: 4]
	Color C_Volume;//[Offset: 0x860, Size: 4]
	Color C_BrushShape;//[Offset: 0x864, Size: 4]
	float StreamingDistanceFactor;//[Offset: 0x868, Size: 4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x870, Size: 16]
	byte TransitionType;//[Offset: 0x880, Size: 1]
	FString TransitionDescription;//[Offset: 0x888, Size: 16]
	FString TransitionGameMode;//[Offset: 0x898, Size: 16]
	float MeshLODRange;//[Offset: 0x8a8, Size: 4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8ac, Size: 1]
	float CameraRotationThreshold;//[Offset: 0x8b0, Size: 4]
	float CameraTranslationThreshold;//[Offset: 0x8b4, Size: 4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x8b8, Size: 4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x8bc, Size: 4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c0, Size: 1]
	int MaxParticleResize;//[Offset: 0x8c4, Size: 4]
	int MaxParticleResizeWarn;//[Offset: 0x8c8, Size: 4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x8d0, Size: 16]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x8e0, Size: 28]
	float NetClientTicksPerSecond;//[Offset: 0x8fc, Size: 4]
	float DisplayGamma;//[Offset: 0x900, Size: 4]
	float MinDesiredFrameRate;//[Offset: 0x904, Size: 4]
	int ShaderPrecompileProgress;//[Offset: 0x908, Size: 4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x90c, Size: 16]
	LinearColor SelectedMaterialColor;//[Offset: 0x91c, Size: 16]
	LinearColor SelectionOutlineColor;//[Offset: 0x92c, Size: 16]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x93c, Size: 16]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x94c, Size: 16]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95c, Size: 1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x95d, Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x95d, Size: 1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x95d, Size: 1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x95d, Size: 1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x960, Size: 4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x968, Size: 4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x96c, Size: 1]
	FString ParticleEventManagerClassPath;//[Offset: 0x970, Size: 16]
	float SelectionHighlightIntensity;//[Offset: 0x990, Size: 4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x994, Size: 4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x998, Size: 4]
	float HoverHighlightIntensity;//[Offset: 0x99c, Size: 4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x9a0, Size: 4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0xb90, Size: 16]
	FString[] ServerActors;//[Offset: 0xba0, Size: 16]
	FString[] RuntimeServerActors;//[Offset: 0xbb0, Size: 16]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc0, Size: 1]
	int NextWorldContextHandle;//[Offset: 0xbd8, Size: 4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x78, Size: 4]
	uint32 ResolutionSizeY;//[Offset: 0x7c, Size: 4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x80, Size: 4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x84, Size: 4]
	int WindowPosX;//[Offset: 0x88, Size: 4]
	int WindowPosY;//[Offset: 0x8c, Size: 4]
	int FullscreenMode;//[Offset: 0x90, Size: 4]
	int LastConfirmedFullscreenMode;//[Offset: 0x94, Size: 4]
	int PreferredFullscreenMode;//[Offset: 0x98, Size: 4]
	uint32 Version;//[Offset: 0x9c, Size: 4]
	int AudioQualityLevel;//[Offset: 0xa0, Size: 4]
	float FrameRateLimit;//[Offset: 0xa4, Size: 4]
	int DesiredScreenWidth;//[Offset: 0xac, Size: 4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	int DesiredScreenHeight;//[Offset: 0xb4, Size: 4]
	float LastRecommendedScreenWidth;//[Offset: 0xb8, Size: 4]
	float LastRecommendedScreenHeight;//[Offset: 0xbc, Size: 4]
	float LastCPUBenchmarkResult;//[Offset: 0xc0, Size: 4]
	float LastGPUBenchmarkResult;//[Offset: 0xc4, Size: 4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xc8, Size: 16]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xd8, Size: 16]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xe8, Size: 4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0xf0, Size: 4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xf8, Size: 16]
	void ValidateSettings();// 0x5b58d38
	bool SupportsHDRDisplayOutput();// 0x5b58cf8
	void SetVSyncEnabled(bool bEnable);// 0x5b58c74
	void SetVisualEffectQuality(int Value);// 0x5b58bf8
	void SetViewDistanceQuality(int Value);// 0x5b58b7c
	void SetToDefaults();// 0x5b58b60
	void SetTextureQuality(int Value);// 0x5b58ae4
	void SetShadowQuality(int Value);// 0x5b58a68
	void SetScreenResolution(IntPoint Resolution);// 0x5b589f0
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x5b58974
	void SetResolutionScaleValue(int NewScaleValue);// 0x5b588f8
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x5b5887c
	void SetPostProcessingQuality(int Value);// 0x5b58800
	void SetOverallScalabilityLevel(int Value);// 0x5b5877c
	void SetFullscreenMode(byte InFullscreenMode);// 0x5b58700
	void SetFrameRateLimit(float NewLimit);// 0x5b58684
	void SetFoliageQuality(int Value);// 0x5b58608
	void SetBenchmarkFallbackValues();// 0x5b585f4
	void SetAudioQualityLevel(int QualityLevel);// 0x5b58578
	void SetAntiAliasingQuality(int Value);// 0x5b584fc
	void SaveSettings();// 0x5b584e0
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x5b583e8
	void RevertVideoMode();// 0x5b583d4
	void ResetToCurrentSettings();// 0x5b583b8
	void LoadSettings(bool bForceReload);// 0x5b5832c
	bool IsVSyncEnabled();// 0x5b582f4
	bool IsVSyncDirty();// 0x5b582bc
	bool IsScreenResolutionDirty();// 0x5b58284
	bool IsHDREnabled();// 0x5b5824c
	bool IsFullscreenModeDirty();// 0x5b58214
	bool IsDirty();// 0x5b581d4
	int GetVisualEffectQuality();// 0x5b581a0
	int GetViewDistanceQuality();// 0x5b5816c
	int GetTextureQuality();// 0x5b58138
	int GetShadowQuality();// 0x5b58104
	IntPoint GetScreenResolution();// 0x5b580cc
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x5b57f40
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x5b57db4
	float GetRecommendedResolutionScale();// 0x5b57d78
	byte GetPreferredFullscreenMode();// 0x5b57d44
	int GetPostProcessingQuality();// 0x5b57d10
	int GetOverallScalabilityLevel();// 0x5b57cdc
	IntPoint GetLastConfirmedScreenResolution();// 0x5b57ca4
	byte GetLastConfirmedFullscreenMode();// 0x5b57c70
	static GameUserSettings* GetGameUserSettings();// 0x5b57c3c
	byte GetFullscreenMode();// 0x5b57c08
	float GetFrameRateLimit();// 0x5b57bd4
	int GetFoliageQuality();// 0x5b57ba0
	IntPoint GetDesktopResolution();// 0x5b57b68
	static IntPoint GetDefaultWindowPosition();// 0x5b57b30
	static byte GetDefaultWindowMode();// 0x5b57afc
	float GetDefaultResolutionScale();// 0x5b57ac0
	static IntPoint GetDefaultResolution();// 0x5b57a88
	int GetCurrentHDRDisplayNits();// 0x5b57a54
	int GetAudioQualityLevel();// 0x5b57a38
	int GetAntiAliasingQuality();// 0x5b57a04
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x5b5793c
	void ConfirmVideoMode();// 0x5b57928
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x5b5789c
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x5b57818
	void ApplyNonResolutionSettings();// 0x5b577fc
	void ApplyHardwareBenchmarkResults();// 0x5b577e0

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x258, Size: 16]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26f, Size: 1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	int NumberOfSpawnedNotifications;//[Offset: 0x274, Size: 4]

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 16]
	StatColorMapEntry[] colorMap;//[Offset: 0x10, Size: 16]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 4]
	Color Out;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 8]
	FName NewGameName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 8]
	FName OldClassName;//[Offset: 0x8, Size: 8]
	FName NewClassName;//[Offset: 0x10, Size: 8]
	FName OldSubobjName;//[Offset: 0x18, Size: 8]
	FName NewSubobjName;//[Offset: 0x20, Size: 8]
	FName NewClassClass;//[Offset: 0x28, Size: 8]
	FName NewClassPackage;//[Offset: 0x30, Size: 8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 16]
	FString NewPluginName;//[Offset: 0x10, Size: 16]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 8]
	FName NewStructName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 16]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	FString Comment;//[Offset: 0x18, Size: 16]

--------------------------------
Class: RigidBodyErrorCorrection
	float LinearDeltaThresholdSq;//[Offset: 0x0, Size: 4]
	float LinearInterpAlpha;//[Offset: 0x4, Size: 4]
	float LinearRecipFixTime;//[Offset: 0x8, Size: 4]
	float AngularDeltaThreshold;//[Offset: 0xc, Size: 4]
	float AngularInterpAlpha;//[Offset: 0x10, Size: 4]
	float AngularRecipFixTime;//[Offset: 0x14, Size: 4]
	float BodySpeedThresholdSq;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 8]
	FName DriverClassName;//[Offset: 0x8, Size: 8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	delegate OnHandleWebviewActionDelegate;//[Offset: 0x1d0, Size: 16]
	delegate OnGetTicketNotifyDelegate;//[Offset: 0x1e0, Size: 16]
	delegate OnHandleServerListDownload;//[Offset: 0x1f0, Size: 16]
	FString CSVTableRelativeDir;//[Offset: 0x200, Size: 16]
	<FName,FString> GameStatusMap;//[Offset: 0x210, Size: 80]
	bool EnableTickLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	GVoiceInterface* GVoice;//[Offset: 0x280, Size: 8]
	bool DisableGVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	BugReporter* GameBugReporter;//[Offset: 0x290, Size: 8]
	GMLogShare* LogShare;//[Offset: 0x298, Size: 8]
	int MaxUpdateRetryTimes;//[Offset: 0x2a0, Size: 4]
	GDolphinUpdater* GDolphin;//[Offset: 0x2b0, Size: 8]
	Translator* Translator;//[Offset: 0x2b8, Size: 8]
	HttpWrapper* HttpWrapper;//[Offset: 0x2c0, Size: 8]
	GCPufferDownloader* GPuffer;//[Offset: 0x2c8, Size: 8]
	LaggingReporter* LaggingReporter;//[Offset: 0x2d0, Size: 8]
	AsyncTaskDownloader* DownloadTask;//[Offset: 0x2e0, Size: 8]
	bool bUseDolphinUpdateFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	bool bEnableUseDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 1]
	bool bEnableUseCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 1]
	bool bUseDolphinUpdateAfterCDNFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32f, Size: 1]
	bool bUseCDNUpdateAfterDolphinFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool bEnableEditorPufferDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	bool bIsWaitingUpdateStateData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 1]
	bool IsUsingDolphinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x333, Size: 1]
	bool IsUsingCDNUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	CDNUpdate* CDNUpdater;//[Offset: 0x348, Size: 8]
	int ODPaksPoolSize;//[Offset: 0x350, Size: 4]
	int ODPaksPoolSizeLowend;//[Offset: 0x354, Size: 4]
	int ODPaksPoolSizeLowendThreshold;//[Offset: 0x358, Size: 4]
	bool ODPaksEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	FName UnrealNetworkStatus;//[Offset: 0x390, Size: 8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x3b0, Size: 4]
	float UnrealNetworkConnectingTime;//[Offset: 0x3d0, Size: 4]
	bool bUseDynamicCreateLuaManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	FString[] PersistentLuaManager;//[Offset: 0x3d8, Size: 16]
	bool bPatchReInitSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x3f0, Size: 8]
	LuaEventBridge* LuaEventBridgeInstace;//[Offset: 0x3f8, Size: 8]
	BattleWindowMgrLuaUtils* LuaBattleWindowMgr;//[Offset: 0x400, Size: 8]
	LuaBlueprintMgr* LuaBlueprintSysMgr;//[Offset: 0x408, Size: 8]
	FString ScriptBPRelativeDir;//[Offset: 0x418, Size: 16]
	FString ScriptRelativeDir;//[Offset: 0x428, Size: 16]
	FString InGameLuaDir;//[Offset: 0x438, Size: 16]
	FString PreloadLuaFileRelativePath;//[Offset: 0x448, Size: 16]
	FString[] LuaDirList;//[Offset: 0x458, Size: 16]
	FString[] NoGCPackage;//[Offset: 0x468, Size: 16]
	float LuaTickTime;//[Offset: 0x478, Size: 4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	bool bAutoLoginEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47d, Size: 1]
	int PingFirstReportIntervalSecond;//[Offset: 0x4a8, Size: 4]
	int PingReportIntervalSecond;//[Offset: 0x4ac, Size: 4]
	int LossSyncIntervalSecond;//[Offset: 0x4b0, Size: 4]
	int vmInstrumentOptimization;//[Offset: 0x4b4, Size: 4]
	TssManager* TssMgr;//[Offset: 0x4b8, Size: 8]
	float PingReportInterval;//[Offset: 0x4e8, Size: 4]
	uint32 ImageDownloadClearDayCount;//[Offset: 0x5bc, Size: 4]
	delegate UIStackChangeDelegate;//[Offset: 0x5c0, Size: 16]
	delegate UIStackRecoverDelegate;//[Offset: 0x5d0, Size: 16]
	delegate OnFRefreshAdaptationUIEvent;//[Offset: 0x5e0, Size: 16]
	delegate OnFRefreshAdaptationExUIEvent;//[Offset: 0x5f0, Size: 16]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x678, Size: 8]
	int FpsForWindowClient;//[Offset: 0x680, Size: 4]
	UDPPingCollector* UDPPingCollector;//[Offset: 0x688, Size: 8]
	bool UIElemLayoutJsonConfigSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 1]
	bool NationAllSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 1]
	bool NationBattleSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x692, Size: 1]
	bool NationRankSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x693, Size: 1]
	bool SelfieSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	bool ReportBugSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 1]
	bool FirstVoicePopupSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x696, Size: 1]
	bool GDPRForbidVoiceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x697, Size: 1]
	bool GDPRSettingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	int GDPRUserType;//[Offset: 0x69c, Size: 4]
	bool bShouldShowAdaptTipInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	float fLaggingFPSDiffThreshold;//[Offset: 0x6a4, Size: 4]
	float fLaggingFPSDiffThresholdMin;//[Offset: 0x6a8, Size: 4]
	float fLaggingFPSDiffThresholdMax;//[Offset: 0x6ac, Size: 4]
	float fLaggingFrameTimeThreshold;//[Offset: 0x6b0, Size: 4]
	float fLaggingFrameTimeThresholdMin;//[Offset: 0x6b4, Size: 4]
	float fLaggingFrameTimeThresholdMax;//[Offset: 0x6b8, Size: 4]
	float fFPSReportInterval;//[Offset: 0x6bc, Size: 4]
	bool bUnLoadNoGcPackage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 1]
	Package*[] NoGcPackages;//[Offset: 0x6d0, Size: 16]
	bool bFlushAsyncLoadingBeforeGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	bool bEnablePandora;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1, Size: 1]
	bool bEnableJMLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e3, Size: 1]
	bool bEnableH5Cache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x798, Size: 1]
	bool bCheckWorldNameForLoadConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x799, Size: 1]
	ColorBlindnessMgr* ColorBlindnessMgrInstace;//[Offset: 0x7a0, Size: 8]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x7a8, Size: 16]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b8, Size: 1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b9, Size: 1]
	int NativeHUDTickIndex;//[Offset: 0x7bc, Size: 4]
	AsyncLoadHelper* AsyncLoadHelper;//[Offset: 0x7c0, Size: 8]
	FString BattleUtilsClassName;//[Offset: 0x7c8, Size: 16]
	BattleUtils* BattleUtils;//[Offset: 0x7d8, Size: 8]
	int DealyHideLoadingUI;//[Offset: 0x7e4, Size: 4]
	void VNGPostPersonalInfo(FString OpenID, FString Name, FString passportId, FString email, FString phone, FString address);// 0x3a84258
	void UnRegisterUIShowHideEventDelegate(FString Source);// 0x3a84124
	void TimeStatisticStop(int Type, FString Name);// 0x3a83fb0
	void TimeStatisticStart(int Type);// 0x3a83f34
	void TickUdpCollector(float DeltaTime);// 0x3a83eb8
	void StatisVisibilityWidget(Widget* Widget);// 0x3a83e3c
	void StatisLoadedTexture(Texture* Texture);// 0x3a83dc0
	bool StartGrayUpdate();// 0x3a83d88
	void StartDolphinUpdateAfterCDNUpdateFailed();// 0x3a83d74
	void StartCDNUpdateAfterDolphinUpdateFailed();// 0x3a83d60
	void ShutdownUnrealNetwork();// 0x3a83d44
	void SetShouldShowAdaptTipInLobby(bool bShoudShow);// 0x3a83cc0
	void SetGameSubMode(FString SubMode);// 0x3a83c18
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x3a83ac0
	void SetClientEnterBattleStage(FString InStageStr);// 0x3a83a18
	void SetAccountByWebLogin(int Channel, FString OpenID, FString userId, FString TokenID, const int ExpireTime);// 0x3a8382c
	void RetryDownload();// 0x3a83818
	void RetryCDNDownload();// 0x3a83804
	void ReleaseBattleUtils();// 0x3a837f0
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x3a83754
	void RegisterUIShowHideEventDelegate(FString Source, delegate Delegate);// 0x3a835c4
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x3a834e4
	void OnWebviewActionNotify(FString URL);// 0x3a833b0
	void OnUAAssistantEvent(out const UAAssistantInfoWrapper UAAssistentInfo);// 0x3a832cc
	void OnSDKCallbackEvent(out const SDKCallbackInfoWrapper sdkCallbackInfo);// 0x3a831e8
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x3a8312c
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x3a82f6c
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x3a82e88
	void OnPlatformFriendNotify(out const PlatformFriendInfoMap PlatformFriendInfoMap);// 0x3a82d98
	void OnNotUpdateFinished();// 0x3a82d84
	void OnLoginFlowNotify(int _Flow, int _Param, FString ExtraData);// 0x3a82bcc
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* downloader);// 0x3a82b18
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x3a82a64
	void OnGetTicketNotify(FString Ticket);// 0x3a82930
	void OnGetShortUrlNotify(int Ret, FString ShortUrl);// 0x3a827bc
	void OnGetCountryNoNotify(int country);// 0x3a82740
	void OnGenQRImgNotify(int Ret, int Size, FString imgPath);// 0x3a8261c
	void OnGCloudNetStateChangeNotify(int State, int EventParam1, int EventParam2, int EventParam3);// 0x3a824f4
	void OnGameMasterEvent(FString EventName, int Ret);// 0x3a82384
	void OnCheckUpdateStateFinished(out const DownloaderInfo Info);// 0x3a822a4
	void OnAreaChanged(FString InArea);// 0x3a821fc
	void NotifyLoadingUIOperation(int OperationType);// 0x3a82180
	void MakeToSuppotAdaptation(PanelSlot* PanelSlot);// 0x3a82104
	void LuaDoString(FString LuaString);// 0x3a82054
	bool IsWindowOB();// 0x3a8201c
	bool IsInstallPlatform(FString PlatForm);// 0x3a81edc
	bool IsCEHideLobbyUI();// 0x3a81ea4
	bool HasAnyNetMsgToHandle();// 0x3a81e6c
	bool GetWidgetRenderCanChange();// 0x3a81e34
	SaveGame* GetUserSettings();// 0x3a81df8
	GDolphinUpdater* GetUpdater();// 0x3a81ddc
	Translator* GetTranslator();// 0x3a81dc0
	bool GetShouldShowAdaptTipInLobby();// 0x3a81d88
	SettingSubsystem* GetSettingSubsystem();// 0x3a81d54
	GCPufferDownloader* GetPufferDownloader();// 0x3a81d38
	FString GetPingReportInfo();// 0x3a81c94
	FString GetPacketLossReportInfo();// 0x3a81bf0
	LuaStateWrapper* GetLuaStateWrapper();// 0x3a81bbc
	LuaEventBridge* GetLuaEventBridge();// 0x3a81b88
	LuaBlueprintMgr* GetLuaBlueprintSysMgr();// 0x3a81b54
	HttpWrapper* GetHttpWrapper();// 0x3a81b38
	GVoiceInterface* GetGVoiceInterface();// 0x3a81afc
	FString GetGameSubMode();// 0x3a81a78
	GameStateBase* GetGameState();// 0x3a81a44
	FString GetFPSReportInfo();// 0x3a819a0
	EffectSettingMgr* GetEffectSettingMgr();// 0x3a81964
	int GetDetailNetInfoFromGCloud();// 0x3a81930
	ColorBlindnessMgr* GetColorBlindnessMgr();// 0x3a818f4
	Object* GetClientNetObj();// 0x3a818c0
	FString GetClientEnterBattleStage();// 0x3a8183c
	BugReporter* GetBugReporter();// 0x3a81808
	BattleUtils* GetBattleUtils();// 0x3a817d4
	FString GetBattleIDHexStr();// 0x3a81730
	int GetAutoRunModID();// 0x3a816fc
	AsyncLoadHelper* GetAsyncLoadHelper();// 0x3a816c8
	void FinishModifyUserSettings();// 0x3a816b4
	void EnableFPSAndMemoryLog(bool bEnable);// 0x3a81630
	void DispatchLongTimeNoOperation(out const int TimeOutCounter);// 0x3a815a4
	void DispatchConfirmMisKill(FString KillerName);// 0x3a8150c
	void CreateBattleUtils();// 0x3a814f8
	void CallGlobalScriptFunction(FString InFunctionName);// 0x3a81448
	void BeginModifyUserSettings();// 0x3a81434
	void BattleUtilsGameEnd();// 0x3a81420
	void AfterLoadedEditorLogin();// 0x3a8140c
	void AddAdaptationWidgetDelegateEx(PanelSlot* PanelSlot);// 0x3a81390
	void AddAdaptationWidgetDelegate(PanelSlot* PanelSlot);// 0x3a81314

--------------------------------
Class: GVoiceInterface.Object
	int lbsRoomMemberID;//[Offset: 0x74, Size: 4]
	delegate CheckTempLbsRoomOnJoinRoom;//[Offset: 0xb0, Size: 16]
	delegate CheckTempLbsRoomOnQuitRoom;//[Offset: 0xc0, Size: 16]
	delegate OnSTTReportCallback;//[Offset: 0xd0, Size: 16]
	delegate OnRSTSCallback;//[Offset: 0xe0, Size: 16]
	delegate OnMuteSwitchResultCallback;//[Offset: 0xf0, Size: 16]
	FString ServerInfo;//[Offset: 0x100, Size: 16]
	uint32 openGvoiceLog;//[Offset: 0x110, Size: 4]
	uint32 MicVolumeMUFactor;//[Offset: 0x114, Size: 4]
	uint32 SpeekerVolumeMUFactor;//[Offset: 0x118, Size: 4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x130, Size: 8]
	void UploadRecordFile();// 0x3a9440c
	void TestMic();// 0x3a943f8
	bool TeamSpeakerEnable();// 0x3a943dc
	bool TeamMicphoneEnable();// 0x3a943c0
	void SwitchMode(enum CharMode);// 0x3a94344
	void SwitchMicphoneWhenCorpsMode();// 0x3a94330
	void SwitchCampRoom(enum campMode);// 0x3a942b4
	void StopRecord();// 0x3a942a0
	void StopPlayRecordFile();// 0x3a9428c
	void StopInterphone();// 0x3a94278
	void StopCampMode();// 0x3a94264
	void StartRecord();// 0x3a94250
	void StartInterphone();// 0x3a9423c
	void StartCampMode(FString ZombieCampRoomName, FString ManCampRoomName, FString userId);// 0x3a940c8
	void SpeechToText();// 0x3a940b4
	void ShowOpenSpeakerAtFirstMsg();// 0x3a940a0
	void ShowCorpsModeCannotUseLBSVoice();// 0x3a9408c
	void SetVoiceMode(int Type);// 0x3a94010
	void SetSpeakerVolum(float Value);// 0x3a93f94
	void SetSpeakerStatus(bool Flag);// 0x3a93f10
	void SetReportBufferTime(int nTimeSec);// 0x3a93e94
	void SetPlayerVolume(FString InPlayerid, int InVol);// 0x3a93d24
	void SetMicphoneVolum(float Value);// 0x3a93ca8
	void SetMicphoneStatus(bool Flag);// 0x3a93c24
	void SetLbsVoiceRadius(float Radius);// 0x3a93bac
	void SetLbsRoomEnableStatus(bool Flag);// 0x3a93b28
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x3a93aac
	void SetCurrentDownloadFieldID(FString filedId);// 0x3a93974
	void SetAllVoiceStatus(bool Flag);// 0x3a938f0
	void ResetWhenLogOut();// 0x3a938dc
	bool ReportPlayers(FString InExtraInfo, FString[] InOpenids);// 0x3a93624
	int ReportFileForAbroad(FString InFilePath, bool InTranslate, bool InChangeVoice, int InTime);// 0x3a9349c
	void ReactiveLbsStatus();// 0x3a93488
	void QuitTempLbsRoom(FString roomStr);// 0x3a93354
	void QuitRoom();// 0x3a93340
	void PlayRecordFile();// 0x3a9332c
	void OpenTeamSpeakerOnly(bool ShowTips);// 0x3a932a8
	int OpenTeamMicphoneOnly(bool ShowTips);// 0x3a93214
	int OpenTeamInterphone();// 0x3a931e0
	void OpenSpeakerByTempLbs(bool Open);// 0x3a9315c
	int OpenSpeaker();// 0x3a93128
	void OpenMicByTempLbs(bool Open);// 0x3a930a4
	void OpenMicAndSpeakerAfterJoinLbsRoom();// 0x3a93090
	int OpenMic();// 0x3a9305c
	void OpenIngameSpeaker();// 0x3a93048
	int OpenIngameMicphone();// 0x3a93014
	void OpenAllSpeaker(bool ShowTips);// 0x3a92f90
	int OpenAllMicphone(bool ShowTips);// 0x3a92efc
	int OpenAllInterphone();// 0x3a92ec8
	void OnRoomTypeChanged(FString itemtext);// 0x3a92d94
	void OnResume();// 0x3a92d80
	void OnPause();// 0x3a92d6c
	bool LbsSpeakerEnable();// 0x3a92d50
	bool LbsMicphoneEnable();// 0x3a92d34
	void JoinTempLbsRoom(FString room, FString userId);// 0x3a92b24
	void JoinRoom(FString room, FString userId);// 0x3a92914
	void JoinLbsRoom(FString lbsRoom, FString userId);// 0x3a92704
	bool IsTeamInterphoneOpenned();// 0x3a926e8
	bool IsLbsInterphoneOpenned();// 0x3a926cc
	bool IsInterphoneMode();// 0x3a9269c
	void InitGVoiceComponent(FString userId);// 0x3a92568
	bool HaveTeamRoom();// 0x3a92530
	bool HaveLbsRoom();// 0x3a924f8
	float GetVoiceLength();// 0x3a924c4
	int GetPlayerVolume(FString InPlayerid);// 0x3a92388
	void GetAuthKey();// 0x3a92374
	int GetAudioDeviceConnectionState();// 0x3a92340
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x3a92280
	void EnbleMicAndSpeakerByRoomName(FString roomName, bool Enable);// 0x3a92108
	int EnableReportForAbroad(bool InIsWholeRoundaudit);// 0x3a92074
	bool EnableReportALLAbroad(bool InEnable, bool InWithEncryption, int InTimeout);// 0x3a91f54
	void DownloadRecordFile();// 0x3a91f40
	void CommonTestMic();// 0x3a91f2c
	void CloseSpeaker();// 0x3a91f18
	void CloseMic();// 0x3a91f04
	void CloseIngameSpeaker();// 0x3a91ef0
	void CloseIngameMicphone();// 0x3a91edc
	void CloseAllSpeaker(bool ShowTips);// 0x3a91e58
	void CloseAllMicphone(bool ShowTips);// 0x3a91dd4
	int CheckDeviceMuteState();// 0x3a91da0
	void CheckAndEnableRoomSpeaker();// 0x3a91d8c
	void ChatShowAgeRestrictionMsgInLobby();// 0x3a91d78
	void ChatShowAgeRestrictionMsgInFighting();// 0x3a91d64
	void ChatShowAgeRestrictionMsgInChat();// 0x3a91d50
	void ChatRequestPrivacyInSetting();// 0x3a91d3c
	void ChatRequestPrivacyInGame();// 0x3a91d28

--------------------------------
Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString ImagePath, float X, float Y, float Z);// 0x3a74800
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll, bool zipLogUpload);// 0x3a744b0
	void ReadZipLog(FString Filename);// 0x3a7437c
	byte[] CompressLog(bool pullAllLog);// 0x3a74280

--------------------------------
Class: GMLogShare.Object
	static void ShareLogFile();// 0x3a91910
	static void Init();// 0x3a918fc

--------------------------------
Class: GDolphinUpdater.Object
	<FString,FString> pakHashList;//[Offset: 0x68, Size: 80]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x182, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x184, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x188, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x18c, Size: 4]
	bool EnableRandomBackupURL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool EnablePufferUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	FString UpdateInfoPath;//[Offset: 0x1a8, Size: 16]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	void StartAppUpdate();// 0x3a8b5c0
	void SetEnableCDNGetVersion(bool Enable);// 0x3a8b53c
	void OnUpdateError(int curVersionStage, int ErrorCode);// 0x3a8b488
	void OnDolphinBGDownloadDone();// 0x3a8b474
	void OnAreaChanged(FString InArea);// 0x3a8b3cc
	bool IsUpdating();// 0x3a8b394
	bool IsGrayUpdate();// 0x3a8b35c
	bool IsExamine();// 0x3a8b324
	void Install();// 0x3a8b310
	int GetTotalValue();// 0x3a8b2dc
	int GetCurValue();// 0x3a8b2a8
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x3a8b164
	float GetCurPercent();// 0x3a8b130
	uint32 GetChannelIDWithHUD(GameFrontendHUD* InGameFrontendHUD);// 0x3a8b0a4
	uint32 GetChannelID();// 0x3a8b070
	void FinishUpdate();// 0x3a8b05c
	void FinishPufferUpdate();// 0x3a8b048
	void EnableIOSBGDownload4G(bool bEnableCellularAccess);// 0x3a8afc4
	bool EnableCDNGetVersion();// 0x3a8af8c
	void ContinueUpdate();// 0x3a8af78
	void CancelUpdate();// 0x3a8af64
	void CancelAppUpdate();// 0x3a8af50

--------------------------------
Class: Translator.Object
	FString SubscriptionKey;//[Offset: 0x28, Size: 16]
	FString StoredAccessToken;//[Offset: 0x38, Size: 16]
	delegate OnGetAccessTokenDelegate;//[Offset: 0x48, Size: 16]
	delegate OnDetectDelegate;//[Offset: 0x58, Size: 16]
	delegate OnTranslateDelegate;//[Offset: 0x68, Size: 16]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xf8, Size: 8]
	void TranslateV2(int Channel, int ID, FString Text);// 0x3ae0184
	void Translate(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3adff00
	void PostMsg(FString URL, FString Content);// 0x3adfdf0
	void OnTranslateV2(bool Success, FString Data);// 0x3adfcf8
	void OnTranslate__DelegateSignature(bool IsSuccess, FString LanguageFrom, FString Translation);// 0x4033584
	void OnTranslate(bool Success, FString Data);// 0x3adfc00
	void OnGetAccessTokenV2(bool Success, FString Data);// 0x3adfb08
	void OnGetAccessToken__DelegateSignature(bool IsSuccess, FString Token);// 0x4033584
	void OnGetAccessToken(bool Success, FString Data);// 0x3adfa10
	void OnDetectV2(bool Success, FString Data);// 0x3adf918
	void OnDetect__DelegateSignature(bool IsSuccess, FString from, FString to);// 0x4033584
	void OnDetect(bool Success, FString Data);// 0x3adf820
	bool HasTranslating();// 0x3adf7e8
	void GetAccessToken(bool bForceGet, FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3adf518
	void Detect(FString URL, FString Verb, const <FString,FString> Headers, FString Content);// 0x3adf294

--------------------------------
Class: HttpWrapper.Object
	delegate OnResponseEvent;//[Offset: 0x28, Size: 16]
	void SimplePostForLua(FString URL, FString Content, int Priority, int QueueType);// 0x3a99ea8
	void SetQueueSize(int QueueType, int InSize);// 0x3a99df4
	void SetQueueEnable(bool InEnableQueue);// 0x3a99d74
	void SetPoolEnable(bool InEnablePool);// 0x3a99cec
	int RequestForLua(FString URL, FString Verb, out <FString,FString> Headers, FString Content, int Priority, int QueueType);// 0x3a99a50
	bool GetQueueEnable();// 0x3a99a34
	bool GetPoolEnable();// 0x3a99a04
	int GetInternalIndex();// 0x3a999e8
	void CancelRequestAll(int QueueType);// 0x3a9996c
	void CancelRequest(int QueueType, int ReqIndex);// 0x3a998b8

--------------------------------
Class: GCPufferDownloader.Object
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	FString DownloadDir;//[Offset: 0x388, Size: 16]
	FString PufferTmpDir;//[Offset: 0x398, Size: 16]
	uint32 CleanFlagVer;//[Offset: 0x3a8, Size: 4]
	FString[] CleanFileNamePattern;//[Offset: 0x3b0, Size: 16]
	bool PreFetchPakEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool PreFetchFileClearEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	bool PreFetchConvertEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 1]
	FString[] PreFetchPakNames;//[Offset: 0x3c8, Size: 16]
	uint32 PreFetchReserveredDiskSpace;//[Offset: 0x3d8, Size: 4]
	bool PreFetchODPak_Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	int PreFetchODPaks_MaxNum;//[Offset: 0x3e0, Size: 4]
	int PreFetchODPaks_BatchSize;//[Offset: 0x3e4, Size: 4]
	int PreFetchODPaks_FetchedNum;//[Offset: 0x3e8, Size: 4]
	int PreFetchODPaks_FetchedIndex;//[Offset: 0x3ec, Size: 4]
	FString[] PreFetchODPaks_Filenames;//[Offset: 0x3f0, Size: 16]
	bool AllowIOSBGDownload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool AllowIOSBGDownloadPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	bool DisableJPKRBGDownloadNightPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x402, Size: 1]
	int DisableJPKRBGDownloadNightPushAfterHour;//[Offset: 0x404, Size: 4]
	int DisableJPKRBGDownloadNightPushBeforeHour;//[Offset: 0x408, Size: 4]
	int IOSBGDownloadPushDelaySeconds;//[Offset: 0x40c, Size: 4]
	bool DisableBGDownloadNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	float PreFetchODPaks_StartTime;//[Offset: 0x414, Size: 4]
	FString PreFetchODPaks_ConfigName;//[Offset: 0x418, Size: 16]
	bool StopTask(uint64 TaskId);// 0x3a90614
	int StopMergeBinDiffPak(int outterTaskID);// 0x3a90588
	bool StopCheckDownloadFileFraming(int outterTaskID);// 0x3a904f8
	void StopBGDownloadNotification();// 0x3a904e4
	bool StopAllTask();// 0x3a904ac
	void StartDownloadItem(uint32 ItemId, uint32 Priority, delegate downloadDelegate);// 0x3a9039c
	void StartBGDownloadNotification(uint64 InDownloadedSize);// 0x3a90320
	void StartBatchDownloadItem(uint32[] ItemIDs, uint32 Priority, delegate OnBatchItemDownloadDelegate);// 0x3a90154
	void SetTempProductIdBase(int ProductIdRaw);// 0x3a900d8
	void SetTempProductId(FString ProductIdRaw);// 0x3a8ffa4
	void SetPrefetchConfig(bool pakEnable, bool fileClearEnable, bool convertEnable, int reserveredDiskSpace, FString FileList, int InPreFetchODPaksMaxNum, int InPreFetchODPaksBatchSize);// 0x3a8fce0
	void SetIOSBGDownloadAttribute(bool bEnableCellularAccess, bool bEnableResumeData, int nMinFileSize, int nMaxTasks);// 0x3a8fb9c
	bool SetImmDLMaxSpeed(uint64 MaxSpeed);// 0x3a8fb0c
	static int ReturnSplitMiniPakFilelist_LuaState();// 0x3a8faf4
	static int ReturnLocalFiles_LuaState();// 0x3a8fadc
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x3a8f954
	bool RemountPakFiles();// 0x3a8f91c
	FString ReadFile(FString Filename);// 0x3a8f780
	bool PreFetchPakFiles();// 0x3a8f748
	int PreFetchODPakFilesUpdate();// 0x3a8f714
	bool PreFetchODPakFilesPreProcess(bool Start);// 0x3a8f67c
	bool PreFetchODPakFilesPostProcess(int ErrorCode);// 0x3a8f5ec
	bool PreFetchODPakFiles(bool Start);// 0x3a8f554
	void OnItemDownloadedInFighting(FString PackHash, FString ErrorCode);// 0x3a8f344
	void OnHashGenerateFinished(int outterTaskID, FString hashCode);// 0x3a8f1d0
	int MoveFileTo(FString Filename, FString from, FString to);// 0x3a8eedc
	int MoveFile(FString from, FString to);// 0x3a8ecc4
	int MergeBinDiffPak(int outterTaskID, FString PakFilenameOld, FString PakFilenameDiff, FString PakFilenameNew, bool fast);// 0x3a8e944
	bool IsODPaks(FString FilePath);// 0x3a8e804
	bool IsODFileExists(FString Path);// 0x3a8e748
	bool IsInitSuccess();// 0x3a8e710
	bool IsFileReady(FString FilePath);// 0x3a8e5d0
	bool IsFileExist(FString Filename, FString extension);// 0x3a8e3b4
	bool InitializeODPaks();// 0x3a8e37c
	FString GetTempWorkPath();// 0x3a8e2d8
	void GetProductIDBase(out int[] ProductIDs);// 0x3a8e220
	void GetProductID(out int[] ProductIDs);// 0x3a8e168
	int GetODPakNum();// 0x3a8e134
	FString GetODPakName(FString Path);// 0x3a8e018
	uint32 GetInitErrcode();// 0x3a8dfe4
	uint64 GetFileSizeCompressed(FString FilePath);// 0x3a8dea8
	float GetFileSize(FString Filename);// 0x3a8dd6c
	FString GetDownloadPath();// 0x3a8dcc8
	float GetCurrentSpeed();// 0x3a8dc94
	int GetBatchODPaksDownloadList_LuaState();// 0x3a8dc7c
	void EnableUseOldInterface(bool Enable);// 0x3a8dbf8
	bool DeleteFileEvenIfUnfinished(FString FilePath);// 0x3a8dab8
	static bool DeleteFile(FString fullPath);// 0x3a8d980
	bool ConvertPreFetchFiles();// 0x3a8d948
	FString ConvertItemIdToPakName(uint32 ItemId);// 0x3a8d854
	bool ClearUselessODPaks();// 0x3a8d81c
	bool ClearPreFetchODPaksFiles();// 0x3a8d7e4
	bool ClearPreFetchFiles();// 0x3a8d7ac
	bool CheckDownloadFileFraming(int outterTaskID, FString Filename, int chunkSize);// 0x3a8d5e8

--------------------------------
Class: LaggingReporter.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0x48, Size: 8]

--------------------------------
Class: AsyncTaskDownloader.BlueprintAsyncActionBase.Object
	delegate onRequestHandler;//[Offset: 0x58, Size: 16]
	static AsyncTaskDownloader* DownloadContent(const FString URL, int loaderType, const FString savedDir, bool breakpointContinualTransfer);// 0x3a70548

--------------------------------
Class: BlueprintAsyncActionBase.Object
	void Activate();// 0x5af5b44

--------------------------------
Class: CDNUpdate.Object
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xb8, Size: 8]
	void StartUpdateApp();// 0x3a7df3c
	void StartAppUpdate(bool StartGrayUpdate);// 0x3a7deb8
	void OnRequestProgress(out const CDNDownloaderInfo Info);// 0x3a7ddfc
	void OnRequestComplete(out const CDNDownloaderInfo Info);// 0x3a7dd40
	bool IsUpdating();// 0x3a7dd08
	bool IsGrayUpdate();// 0x3a7dcd0
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x3a7db8c
	void FinishUpdate();// 0x3a7db78
	void ContinueUpdate();// 0x3a7db64
	void CancelUpdate();// 0x3a7db50

--------------------------------
Class: CDNDownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x8, Size: 16]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int BytesSent;//[Offset: 0x1c, Size: 4]
	int BytesReceived;//[Offset: 0x20, Size: 4]
	int ContentType;//[Offset: 0x24, Size: 4]
	int ResponseCode;//[Offset: 0x28, Size: 4]

--------------------------------
Class: LuaEventBridge.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x28, Size: 8]
	<FString,EventTypeContainer> RegisterEventMap;//[Offset: 0x38, Size: 80]
	<FString,LuaEventTypeContainer> LuaRegisterEventMap;//[Offset: 0x88, Size: 80]
	<uint32,LuaEventTypeToIDSet> FilterKeyRegisterMap;//[Offset: 0xd8, Size: 80]
	LuaTemBPData*[] CurrentParamArray;//[Offset: 0x128, Size: 16]
	Property*[] Params;//[Offset: 0x138, Size: 16]
	void SyncLuaRegisterEventNum(FString EventType, FString EventId, int Number);// 0x383c370
	LuaTemBPData*[] GetCurrentParam();// 0x383c2ec
	void DeactivateEventsByFilterKey(out const uint32 FilterKey);// 0x383c260
	bool CheckNeedPostEventWithFilterKey(out const uint32 FilterKey, FString EventType, FString EventId, bool bCheckNeedPostLua);// 0x383c0a8
	void ActiveEventByFilterKey(out const uint32 FilterKey, FString EventType, FString EventId, const bool bActive);// 0x383befc

--------------------------------
Class: EventTypeContainer
	<FString,EventIDContainer> EventIDContainer;//[Offset: 0x0, Size: 80]

--------------------------------
Class: EventIDContainer
	EventValueContainer[] EventValueContainer;//[Offset: 0x0, Size: 16]

--------------------------------
Class: EventValueContainer
	Object* ObjContext;//[Offset: 0x0, Size: 8]
	FString FunctionName;//[Offset: 0x8, Size: 16]
	FString EventType;//[Offset: 0x18, Size: 16]
	FString EventId;//[Offset: 0x28, Size: 16]

--------------------------------
Class: LuaEventTypeContainer
	<FString,int> EventIDContainer;//[Offset: 0x0, Size: 80]

--------------------------------
Class: LuaEventTypeToIDSet
	<FString,LuaEventTypeIDSet> EventTypeToIDSet;//[Offset: 0x0, Size: 80]

--------------------------------
Class: LuaEventTypeIDSet
	<FString> EventIDSet;//[Offset: 0x0, Size: 80]

--------------------------------
Class: LuaTemBPData.Object

--------------------------------
Class: BattleWindowMgrLuaUtils.Object
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x28, Size: 8]
	FString LuaManagerName;//[Offset: 0x30, Size: 16]
	FString ShowUI;//[Offset: 0x40, Size: 16]
	FString HideUI;//[Offset: 0x50, Size: 16]
	FString CheckWindowOpen;//[Offset: 0x60, Size: 16]

--------------------------------
Class: LuaBlueprintMgr.Object
	<FString,LuaBluepirntSys*> SystemMap;//[Offset: 0x28, Size: 80]
	LuaBluepirntSys* GetSystemByName(const FString SystemName);// 0x3aa05e8
	void AddSystem(const FString SystemName, const FString BPPath);// 0x3aa03d8

--------------------------------
Class: LuaBluepirntSys.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 16]
	void Init();// 0x4033584

--------------------------------
Class: TssManager.Object
	FString TssHostInfo;//[Offset: 0x28, Size: 16]
	FString TssCDNHostInfo;//[Offset: 0x38, Size: 16]
	FString TssBuildInIpInfo;//[Offset: 0x48, Size: 16]
	int TssLocal;//[Offset: 0x58, Size: 4]
	static int SendSkdData_LuaState();// 0x3ae094c
	static int SendEigeninfoData_LuaState();// 0x3ae0934
	static uint32 SaveSendEigeninfoCode_LuaState();// 0x3ae091c
	static int OnRecvData_LuaState();// 0x3ae0904
	static int GetUserTag4Lua_LuaState();// 0x3ae08ec
	static int GetDeviceFeature_LuaState();// 0x3ae08d4
	static int EigenArrayObfuscationVerify_LuaState();// 0x3ae08bc

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x28, Size: 16]
	delegate OnFail;//[Offset: 0x38, Size: 16]
	FString FileURL;//[Offset: 0x48, Size: 16]
	FString CompreesedFileUrl;//[Offset: 0x58, Size: 16]
	FString FileSavePath;//[Offset: 0x68, Size: 16]
	FString CompreesedFileSavePath;//[Offset: 0x78, Size: 16]
	FString UrlHash;//[Offset: 0x88, Size: 16]
	FString CompreesedUrlHash;//[Offset: 0x98, Size: 16]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 1]
	bool ForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 1]
	void Start(FString URL);// 0x3a9a8a0
	static ImageDownloader* MakeDownloaderInGame();// 0x3a9a86c
	static ImageDownloader* MakeDownloader();// 0x3a9a838
	Texture2D* GetTextureFromUrlWithoutDownload(FString URL);// 0x3a9a6fc

--------------------------------
Class: UDPPingCollector.Object
	<FString,PingServerInfo> mUDPPingInfoMap;//[Offset: 0x58, Size: 80]
	delegate UDPPingShadowResultToLuaDelegate;//[Offset: 0xc8, Size: 16]
	void TickUDPPing(float DeltaTime);// 0x3ae7164
	void setUDPPingServerAddress(FString ServerIP, FString ServerPort, int ZoneID, int WaterMarkType);// 0x3ae6ee0
	void PingServer(FString address, float Timeout, int WaterMarkType);// 0x3ae6d34
	void OnPingServerResultDelegate__DelegateSignature(FString address, int IsSuccess, float Time);// 0x4033584
	bool IsChooingZoneAccess();// 0x3ae6cfc
	bool isAllZoneHasPingValue();// 0x3ae6cc4
	void Init(float MinPingintervalTime, float pingintervalTime, float pingTimeoutSecond, float normalDelayMilliSecond, float maxAutoChooseZoneDelayMilliSecond);// 0x3ae6b60
	float GetZoneServerDelay(FString ServerAddress);// 0x3ae6a24
	int GetMinDealyAddress();// 0x3ae69f0
	void ChoosingZone(int ZoneID, FString AddrIP);// 0x3ae687c

--------------------------------
Class: PingServerInfo

--------------------------------
Class: Package.Object

--------------------------------
Class: ColorBlindnessMgr.Object
	<int,LinearColor> CBColorMap;//[Offset: 0x28, Size: 80]
	<int,ParticleSysColor> CBParticleColorMap;//[Offset: 0x78, Size: 80]
	<uint32,ImageOriginal> HandleCBColorImageContaner;//[Offset: 0xc8, Size: 80]
	<uint32,HandleMesh> HandleCBColorMeshContaner;//[Offset: 0x118, Size: 80]
	<uint32,HandleParticleSystem> HandleCBColorParticleContaner;//[Offset: 0x168, Size: 80]
	void Reset();// 0x331b970
	void RemoveParticleSystem(ParticleSystemComponent* ParticleSystem);// 0x331b8f4
	void RemoveMeshComponent(MeshComponent* Mesh);// 0x331b878
	void RemoveImage(Image* Image);// 0x331b7fc
	void HandleUserSettingChange();// 0x331b7e8
	LinearColor GetColorByType(int Type);// 0x331b758
	void Clear();// 0x331b744
	void AddParticleSystem(ParticleSystemComponent* ParticleSystem, int Type);// 0x331b68c
	void AddMeshComponent(MeshComponent* Mesh, int Type);// 0x331b5d4
	void AddImage(Image* Image, LinearColor Color, int Type);// 0x331b4e0
	void AddColorByType(FString Type, LinearColor Color);// 0x331b370

--------------------------------
Class: ParticleSysColor
	<FString,LinearColor> colorMap;//[Offset: 0x0, Size: 80]

--------------------------------
Class: ImageOriginal
	LinearColor OriginalColir;//[Offset: 0x8, Size: 16]
	int Type;//[Offset: 0x18, Size: 4]

--------------------------------
Class: HandleMesh
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HandleParticleSystem
	int Type;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0, Size: 4]
	UAEUserWidget* pWidget;//[Offset: 0x4, Size: 8]

--------------------------------
Class: AsyncLoadHelper.Object
	<FString,Object*> PreloadObjectMap;//[Offset: 0x28, Size: 80]
	void SetMaxTaskNum(int Num);// 0x3a6f640
	void RunNextTask();// 0x3a6f62c
	void OnLoadCallBack(SoftObjectPath softObjPath);// 0x3a6f4f0
	void ClearOneTask(FString ObjectPath);// 0x3a6f3bc
	void ClearAllTask();// 0x3a6f3a8
	void AddTask(FString ObjectPath, int LoadPriority);// 0x3a6f238

--------------------------------
Class: BattleUtils.Object
	GameFrontendHUD* OwningFrontendHUD;//[Offset: 0x88, Size: 8]
	UAEGameMode* BattleGameMode;//[Offset: 0xa0, Size: 8]
	BattlePlayer*[] BattlePlayerList;//[Offset: 0xa8, Size: 16]
	BattleGameInfo CachedBattleGameInfo;//[Offset: 0xb8, Size: 56]
	GameModeAIPlayerParams CachedAIPlayerParams;//[Offset: 0xf0, Size: 944]
	FString LuaFilePath;//[Offset: 0x4a0, Size: 16]
	uint32 SyncNewBattlePlayer(uint64 UId, out const PlayerInfoData Info);// 0x3a72f90
	void SyncGameInfo(out const BattleGameInfo Info);// 0x3a72ea8
	void SyncGameExit();// 0x3a72e94
	void SyncBattlePlayerExit(uint64 UId, FName PlayerType, FString Reason);// 0x3a72cdc
	GameModePlayerParams RetrievePlayerParams(PlayerID PlayerID);// 0x3a72c18
	GameModeAIPlayerParams RetrieveAIPlayerParams(PlayerID PlayerID);// 0x3a72b40
	void ResponPlayerWeaponDIYData(uint64 PlayerUID, WeaponDIYData InWeaponDIYData);// 0x3a72a34
	void RequestSomePlayersBattleData(uint64[] PlayerUIDList, byte DataType);// 0x3a728c4
	void RequestPlayerWeaponDIYData(uint64 PlayerUID, int WeaponSkinID, int PlanID);// 0x3a727d4
	void RequestOnePlayersBattleData(uint64 PlayerUID, byte DataType);// 0x3a7271c
	void RequestAllPlayersBattleData(byte DataType);// 0x3a726a0
	void OnPostLoadMapWithWorld(World* World);// 0x3a72624
	BattlePlayer* NewBattlePlayer();// 0x3a725f0
	BattleAIPlayer* NewBattleAIPlayer();// 0x3a725bc
	void HandleGameModeStateChanged(out const GameModeStateChangedParams Params);// 0x3a72530
	UAEGameMode* GetBattleGameMode();// 0x3a724fc
	void GenerateAIPlayerParams(out const PlayerInfoData Info);// 0x3a723f8
	BattlePlayer* FindPlayerByUID(uint64 UId, FName PlayerType);// 0x3a72334
	BattlePlayer* FindPlayerByPlayerName(FString PlayerName, FName PlayerType);// 0x3a721bc
	BattlePlayer* FindPlayerByPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x3a720f4

--------------------------------
Class: BattlePlayer.Object
	uint64 UId;//[Offset: 0x28, Size: 8]
	PlayerInfoData PlayerInfoData;//[Offset: 0x30, Size: 192]
	PlayerAvatarData PlayerAvatarData;//[Offset: 0xf0, Size: 24]
	<int,WeaponDIYData> WeaponDIYData;//[Offset: 0x108, Size: 80]
	BattleUtils* OwningBattleUtils;//[Offset: 0x158, Size: 8]
	GameModePlayerParams ExtractGameModePlayerParams();// 0x3a7176c

--------------------------------
Class: PlayerInfoData.ResponResult
	FString PlayerType;//[Offset: 0x8, Size: 16]
	FString PlayerName;//[Offset: 0x18, Size: 16]
	uint32 PlayerKey;//[Offset: 0x28, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	byte PlayerGender;//[Offset: 0x2d, Size: 1]
	int TeamID;//[Offset: 0x30, Size: 4]
	int64 CampID;//[Offset: 0x38, Size: 8]
	int PlayerBornPointID;//[Offset: 0x40, Size: 4]
	GameModePlayerItem[] ItemList;//[Offset: 0x48, Size: 16]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0x58, Size: 16]
	GameModePlayerEquipmentAvatar EquipmentAvatar;//[Offset: 0x68, Size: 12]
	GameModePlayerRolewearInfo[] AllWear;//[Offset: 0x78, Size: 16]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x88, Size: 48]
	int planeAvatarId;//[Offset: 0xb8, Size: 4]
	int RolewearIndex;//[Offset: 0xbc, Size: 4]

--------------------------------
Class: PlayerAvatarData.ResponResult
	AvatarBackpack[] AvatarBackpackData;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AvatarBackpack
	int[] WeaponAvatarList;//[Offset: 0x0, Size: 16]
	int[] VehicleAvatarList;//[Offset: 0x10, Size: 16]

--------------------------------
Class: BattleGameInfo
	uint64 GameID;//[Offset: 0x0, Size: 8]
	FString GameModeID;//[Offset: 0x8, Size: 16]
	int GameMapID;//[Offset: 0x18, Size: 4]
	int WeatherID;//[Offset: 0x1c, Size: 4]
	FString WeatherName;//[Offset: 0x20, Size: 16]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]

--------------------------------
Class: GameModeAIPlayerParams.GameModePlayerParams
	int8 AIType;//[Offset: 0x3a4, Size: 1]
	uint32 AILevel;//[Offset: 0x3a8, Size: 4]

--------------------------------
Class: PlayerID
	FName PlayerType;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BattleAIPlayer.BattlePlayer.Object
	GameModeAIPlayerParams ExtractGameModeAIPlayerParams();// 0x3a71c88

--------------------------------
Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x8, Size: 16]
	int extend;//[Offset: 0x18, Size: 4]
	int Extend2;//[Offset: 0x1c, Size: 4]
	FString MsgData;//[Offset: 0x20, Size: 16]

--------------------------------
Class: UAAssistantInfoWrapper
	enum UAType;//[Offset: 0x0, Size: 1]
	int Result;//[Offset: 0x4, Size: 4]
	FString ExtraJson;//[Offset: 0x8, Size: 16]
	FString RetsultMsg;//[Offset: 0x18, Size: 16]

--------------------------------
Class: SDKCallbackInfoWrapper
	enum CallbackType;//[Offset: 0x0, Size: 1]
	FString CallbackParameter;//[Offset: 0x8, Size: 16]
	FString ExtraJson;//[Offset: 0x18, Size: 16]

--------------------------------
Class: WakeupInfoWrapper

--------------------------------
Class: PlatformFriendInfoMap
	int page;//[Offset: 0x0, Size: 4]
	<FString,FString> friendsInfo;//[Offset: 0x8, Size: 80]

--------------------------------
Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0, Size: 4]
	int Flag;//[Offset: 0x4, Size: 4]
	int ErrorCode;//[Offset: 0x8, Size: 4]
	int PlatForm;//[Offset: 0xc, Size: 4]
	FString Desc;//[Offset: 0x10, Size: 16]
	WechatGroupInfomation wechatGroupInfo;//[Offset: 0x20, Size: 48]

--------------------------------
Class: WechatGroupInfomation
	FString OpenIdList;//[Offset: 0x0, Size: 16]
	FString MemberNum;//[Offset: 0x10, Size: 16]
	FString ChatRoomURL;//[Offset: 0x20, Size: 16]

--------------------------------
Class: DownloaderInfo
	enum State;//[Offset: 0x0, Size: 1]
	FString FileSavePath;//[Offset: 0x8, Size: 16]
	bool Result;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int BytesSent;//[Offset: 0x1c, Size: 4]
	int BytesReceived;//[Offset: 0x20, Size: 4]
	int ContentType;//[Offset: 0x24, Size: 4]
	int ResponseCode;//[Offset: 0x28, Size: 4]
	FString StringContent;//[Offset: 0x30, Size: 16]

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: SettingSubsystem.GameInstanceSubsystem.Subsystem.Object
	FString CachedSaveGameName;//[Offset: 0x30, Size: 16]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0x40, Size: 16]
	delegate GetUserSettingsDelegate;//[Offset: 0x50, Size: 16]
	EffectSettingMgr* EffectSettingMgrInstace;//[Offset: 0x60, Size: 8]
	SaveGame* UserSettings;//[Offset: 0x68, Size: 8]
	class Object* UserSettingsClass;//[Offset: 0x70, Size: 8]
	FString UserSettingsClassName;//[Offset: 0x78, Size: 16]
	FString ActiveSaveGameName;//[Offset: 0x88, Size: 16]
	FString LanguageSettingsClassName;//[Offset: 0xa0, Size: 16]
	FString LanguageSaveGameName;//[Offset: 0xb0, Size: 16]
	<FString,bool> LanguageMap;//[Offset: 0x120, Size: 80]
	bool SetUserSettings_String(FString PropertyName, FString Val);// 0x3add7b8
	bool SetUserSettings_Int(FString PropertyName, int Value);// 0x3add63c
	bool SetUserSettings_Float(FString PropertyName, float Value);// 0x3add4c0
	bool SetUserSettings_Bool(FString PropertyName, bool Value, bool IngoreSave);// 0x3add2f0
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x3add160
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x3adcfd0
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x3adce40
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x3adcda4
	SaveGame* GetUserSettingsByDelegate(FString LayoutName);// 0x3adccec
	FString GetUserSettings_String(FString PropertyName);// 0x3adcb50
	int GetUserSettings_Int(FString PropertyName);// 0x3adca14
	float GetUserSettings_Float(FString PropertyName);// 0x3adc8d8
	bool GetUserSettings_Bool(FString PropertyName);// 0x3adc798
	SaveGame* GetUserSettings();// 0x3adc764
	FString GetUserLanguageSettingsProperty_String(FString PropertyName);// 0x3adc5c8
	EffectSettingMgr* GetEffectSettingMgr();// 0x3adc594
	SaveGame* GetCustomSetting(FString InSlotName);// 0x3adc4dc
	void FinishModifyUserSettings();// 0x3adc4c8
	void CheckLocalizationLanguage();// 0x3adc4b4
	void BeginModifyUserSettings();// 0x3adc4a0
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x3adc3b8

--------------------------------
Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0, Size: 16]
	SaveGame* SaveGame;//[Offset: 0x10, Size: 8]

--------------------------------
Class: EffectSettingMgr.Object
	FString SingleLayerColorTable;//[Offset: 0x28, Size: 16]
	FString MultiLayerColorTable;//[Offset: 0x38, Size: 16]
	void UpdateSingleLayerColor(LinearColor Color);// 0x3350864
	void UpdateMultiLayerColcor(FString Key, LinearColor Color);// 0x33506f4
	void SetParticleSystemColorSingleLayer(ParticleSystemComponent* ParticleSystem);// 0x3350678
	void SetParticleSystemColorMultiLayer(ParticleSystemComponent* ParticleSystem);// 0x33505fc

--------------------------------
Class: SettingConfig_C.SaveGame.Object
	void ConditionSetFireGyroData(bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue2, bool CallFunc_EqualEqual_FloatFloat_ReturnValue3, bool CallFunc_EqualEqual_FloatFloat_ReturnValue4, bool CallFunc_EqualEqual_FloatFloat_ReturnValue5, bool CallFunc_EqualEqual_FloatFloat_ReturnValue6, bool CallFunc_EqualEqual_FloatFloat_ReturnValue7, bool CallFunc_EqualEqual_FloatFloat_ReturnValue8, bool CallFunc_EqualEqual_FloatFloat_ReturnValue9, bool CallFunc_EqualEqual_FloatFloat_ReturnValue10);// 0x4033584
	void Init(FString CallFunc_GetPublishRegion_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x4033584
	int CrossHairColor;//[Offset: 0x28, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f, Size: 1]
	int LeftHandFire;//[Offset: 0x30, Size: 4]
	int Gyroscope;//[Offset: 0x34, Size: 4]
	int ArtQuality;//[Offset: 0x38, Size: 4]
	float ViewPercentage;//[Offset: 0x3c, Size: 4]
	int FireMode;//[Offset: 0x40, Size: 4]
	int VehicleControlMode;//[Offset: 0x44, Size: 4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	int CameraLensSensibility;//[Offset: 0x4c, Size: 4]
	float CamLensSenNoneSniper;//[Offset: 0x50, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x54, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x58, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x5c, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x60, Size: 4]
	int FireCameraLensSensibility;//[Offset: 0x64, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x68, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x6c, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x70, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x74, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x78, Size: 4]
	int GyroscopeSensibility;//[Offset: 0x7c, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x80, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x84, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x88, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x8c, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x90, Size: 4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float MainVolumValue;//[Offset: 0x98, Size: 4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	float EffectVolumValue;//[Offset: 0xa0, Size: 4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float UIVolumValue;//[Offset: 0xa8, Size: 4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	float BGMVolumValue;//[Offset: 0xb0, Size: 4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	int VoiceChannel;//[Offset: 0xb8, Size: 4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float MicphoneVolumValue;//[Offset: 0xc0, Size: 4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	float SocialIslandOtherVolume;//[Offset: 0xc8, Size: 4]
	float SpeakerVolumValue;//[Offset: 0xcc, Size: 4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3, Size: 1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb, Size: 1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd, Size: 1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde, Size: 1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf, Size: 1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	int LimitBandage;//[Offset: 0xe4, Size: 4]
	int LimitMedical;//[Offset: 0xe8, Size: 4]
	int LimitAnodyne;//[Offset: 0xec, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0xf0, Size: 4]
	int LimitAdrenaline;//[Offset: 0xf4, Size: 4]
	int LimitShouliudan;//[Offset: 0xf8, Size: 4]
	int LimitYanwudan;//[Offset: 0xfc, Size: 4]
	int LimitZhenbaodan;//[Offset: 0x100, Size: 4]
	int LimitRanshaodan;//[Offset: 0x104, Size: 4]
	int LimitBullet9mm;//[Offset: 0x108, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x10c, Size: 4]
	int Limit12koujing;//[Offset: 0x110, Size: 4]
	int Limit45koujing;//[Offset: 0x114, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x118, Size: 4]
	int Limitbolt;//[Offset: 0x11c, Size: 4]
	int LimitBullet5;//[Offset: 0x120, Size: 4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	int FPSLevel;//[Offset: 0x128, Size: 4]
	int ArtStyle;//[Offset: 0x12c, Size: 4]
	int RecordTipShowLastTime;//[Offset: 0x130, Size: 4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x138, Size: 80]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x188, Size: 80]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d9, Size: 1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1da, Size: 1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1e0, Size: 80]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0x238, Size: 16]
	int[] ChatOptiongList1;//[Offset: 0x248, Size: 16]
	int LRShootMode;//[Offset: 0x258, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 1]
	int[] ChatOptiongList2;//[Offset: 0x260, Size: 16]
	int[] ChatOptiongList3;//[Offset: 0x270, Size: 16]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	int NewGetActorID;//[Offset: 0x284, Size: 4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	float 3DTouchValue;//[Offset: 0x28c, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	int ShotGunShootMode;//[Offset: 0x294, Size: 4]
	int SingleShotWeaponShootMode;//[Offset: 0x298, Size: 4]
	int isFirstOpenMicCheck;//[Offset: 0x29c, Size: 4]
	float VehicleEye;//[Offset: 0x2a0, Size: 4]
	float ParachuteEye;//[Offset: 0x2a4, Size: 4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x2a8, Size: 16]
	int RepeatingWeaponShootMode;//[Offset: 0x2b8, Size: 4]
	int DrivingViewMode;//[Offset: 0x2bc, Size: 4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	int FpViewValue;//[Offset: 0x2c4, Size: 4]
	float CamFpFreeEye;//[Offset: 0x2c8, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x2cc, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x2d0, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x2d4, Size: 4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	int DaliyWarmodeInfo;//[Offset: 0x2dc, Size: 4]
	FString currentLanguage;//[Offset: 0x2e0, Size: 16]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	FString lastViewDayTime;//[Offset: 0x2f8, Size: 16]
	FString lastViewWeekTime;//[Offset: 0x308, Size: 16]
	bool DoblySwitch2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool DoblySwitch1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b, Size: 1]
	float CamLensSen3XSniper;//[Offset: 0x31c, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x320, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x324, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x328, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x32c, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x330, Size: 4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	int RedDotCHColor;//[Offset: 0x338, Size: 4]
	int RedDotCHType;//[Offset: 0x33c, Size: 4]
	int HolographicCHColor;//[Offset: 0x340, Size: 4]
	int HolographicCHType;//[Offset: 0x344, Size: 4]
	int Sinper2xCHColor;//[Offset: 0x348, Size: 4]
	int Sinper2xCHType;//[Offset: 0x34c, Size: 4]
	int Sniper3xCHColor;//[Offset: 0x350, Size: 4]
	int Sniper3xCHType;//[Offset: 0x354, Size: 4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	<int,int> PickUpCountSetting;//[Offset: 0x360, Size: 80]
	int LimitFirstAidKit;//[Offset: 0x3b0, Size: 4]
	FString XGLanguageTag;//[Offset: 0x3b8, Size: 16]
	FString XGTimezoneTag;//[Offset: 0x3c8, Size: 16]
	FString XGPushNightTag;//[Offset: 0x3d8, Size: 16]
	FString XGPushDayTag;//[Offset: 0x3e8, Size: 16]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	int SelectUIElemIndex1;//[Offset: 0x3fc, Size: 4]
	int SelectUIElemIndex2;//[Offset: 0x400, Size: 4]
	int SelectUIElemIndex3;//[Offset: 0x404, Size: 4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	int LimitSniper2X;//[Offset: 0x40c, Size: 4]
	int LimitSniper3X;//[Offset: 0x410, Size: 4]
	int LimitSniper4X;//[Offset: 0x414, Size: 4]
	int LimitSniper6X;//[Offset: 0x418, Size: 4]
	int LimitSniper8X;//[Offset: 0x41c, Size: 4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 1]
	int SidewaysMode;//[Offset: 0x424, Size: 4]
	int OpenMirrorMode;//[Offset: 0x428, Size: 4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	bool OBS_TrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 1]
	bool OBS_Perspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42e, Size: 1]
	bool OBS_BulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42f, Size: 1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	int LobbyStyleID;//[Offset: 0x434, Size: 4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 1]
	float ScreenLightness;//[Offset: 0x43c, Size: 4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x442, Size: 1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x443, Size: 1]
	FString FirstChargeVersion;//[Offset: 0x448, Size: 16]
	FString RechargePosSave;//[Offset: 0x458, Size: 16]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46a, Size: 1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46b, Size: 1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x470, Size: 80]
	int LimitViscidityBomb;//[Offset: 0x4c0, Size: 4]
	int LimitZombieGrenade;//[Offset: 0x4c4, Size: 4]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	bool AutoPickUpPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 1]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ca, Size: 1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x4cc, Size: 4]
	int SideMirrorMode;//[Offset: 0x4d0, Size: 4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0x4d8, Size: 16]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ea, Size: 1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4eb, Size: 1]
	int LimitYeDanGrenade;//[Offset: 0x4ec, Size: 4]
	int LimitAntidote;//[Offset: 0x4f0, Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	int[] ChatOptiongList4;//[Offset: 0x4f8, Size: 16]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	int ScoreTips_TModeCnt;//[Offset: 0x50c, Size: 4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 1]
	int FPPFireMode;//[Offset: 0x514, Size: 4]
	int SelectUIElemIndexFPP1;//[Offset: 0x518, Size: 4]
	int SelectUIElemIndexFPP2;//[Offset: 0x51c, Size: 4]
	int SelectUIElemIndexFPP3;//[Offset: 0x520, Size: 4]
	byte TurboLastQuality;//[Offset: 0x524, Size: 1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x528, Size: 80]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x578, Size: 80]
	int[] UselessWeakGuidIDs;//[Offset: 0x5c8, Size: 16]
	bool SettingOperateZombieLayout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d8, Size: 1]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d9, Size: 1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5da, Size: 1]
	int[] ChatOptiongList5;//[Offset: 0x5e0, Size: 16]
	int[] ChatOptiongList6;//[Offset: 0x5f0, Size: 16]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	int TD_FireMode;//[Offset: 0x604, Size: 4]
	int TD_FPPFireMode;//[Offset: 0x608, Size: 4]
	bool TD_3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 1]
	float TD_3DTouchValue;//[Offset: 0x610, Size: 4]
	bool FirstTime_TMode_HardPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	bool ShovelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 1]
	int isFirstOpenMicCheckVehicleWar;//[Offset: 0x618, Size: 4]
	bool VulkanEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 1]
	int LimitSnowMan;//[Offset: 0x620, Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x625, Size: 1]
	bool OpenChatHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x626, Size: 1]
	int ColorBlindnessType;//[Offset: 0x628, Size: 4]
	bool DeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	bool UAVSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62d, Size: 1]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62e, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x630, Size: 4]
	float UAVScopePercent;//[Offset: 0x634, Size: 4]
	bool OpenUAVHelicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	bool FirstTime_ShowAutoGroupParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639, Size: 1]
	int SideMirrorType;//[Offset: 0x63c, Size: 4]
	int SideMirrorColor;//[Offset: 0x640, Size: 4]
	bool AutoPickUpSideSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 1]
	bool isCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x646, Size: 1]
	FString CloudSensitivityPlayerId;//[Offset: 0x648, Size: 16]
	bool SettingHasOperateQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	bool SettingSideSightFunctionRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 1]
	bool SettingUploadSensibilityRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65a, Size: 1]
	bool SettingClassicCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65b, Size: 1]
	bool SettingTDCopyRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 1]
	bool SettingQuickSwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65d, Size: 1]
	bool SocialIslandCanAcceptDuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65e, Size: 1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65f, Size: 1]
	bool DisableAutoPickDropMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 1]
	int AutoPickClipType;//[Offset: 0x664, Size: 4]
	int[] QuickSignIDList;//[Offset: 0x668, Size: 16]
	int[] QuickSignWheelIDList;//[Offset: 0x678, Size: 16]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 1]
	bool SettingEffectRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68a, Size: 1]
	int HitEffectColor;//[Offset: 0x68c, Size: 4]
	int HurtEffectColor;//[Offset: 0x690, Size: 4]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 1]
	bool bHasMapCBToES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 1]
	int ProfiledScreenSwitch;//[Offset: 0x698, Size: 4]
	bool FirstTime_TMode_ArmsRace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 1]
	bool bOpenSprHghQltyComparison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d, Size: 1]
	int BuildDoubleClick;//[Offset: 0x6a0, Size: 4]
	float BuildDoubleClickDuration;//[Offset: 0x6a4, Size: 4]
	float DoubleClickSpeed;//[Offset: 0x6a8, Size: 4]
	int DoubleClickDistance;//[Offset: 0x6ac, Size: 4]
	bool ChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	int BattleFPS;//[Offset: 0x6b4, Size: 4]
	int BattleRenderStyle;//[Offset: 0x6b8, Size: 4]
	int BattleRenderQuality;//[Offset: 0x6bc, Size: 4]
	int LobbyFPS;//[Offset: 0x6c0, Size: 4]
	int LobbyRenderStyle;//[Offset: 0x6c4, Size: 4]
	int LobbyRenderQuality;//[Offset: 0x6c8, Size: 4]
	bool HasGraphicsSeparateConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 1]
	bool SettingOperateInfect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cd, Size: 1]
	bool FirstTime_Infect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ce, Size: 1]
	bool OBS_LogoShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cf, Size: 1]
	bool OBS_HitFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	<int,int> BulletPickUpCountSetting_XT;//[Offset: 0x6d8, Size: 80]
	<int,int> Drug_PickUpCountSetting_XT;//[Offset: 0x728, Size: 80]
	<int,int> NormalInfilling_PickUpCountSetting_XT;//[Offset: 0x778, Size: 80]
	<int,int> HalloweenInfilling_PickUpCountSetting_XT;//[Offset: 0x7c8, Size: 80]
	<int,int> ThrowObj_PickUpCountSetting_XT;//[Offset: 0x818, Size: 80]
	<int,int> MultipleMirror_PickUpCountSetting_XT;//[Offset: 0x868, Size: 80]
	bool RingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 1]
	bool isOtherCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b9, Size: 1]
	bool IsCloudAndLocalSame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ba, Size: 1]
	bool RingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bb, Size: 1]
	bool CarPreciseChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 1]
	bool SettingSensibilityEnterTrainRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bd, Size: 1]
	bool SettingVehicleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8be, Size: 1]
	bool LRSwitcherGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bf, Size: 1]
	<int,int> PickUpCountSetting_Drug;//[Offset: 0x8c0, Size: 80]
	<int,int> PickUpCountSetting_ThrowObj;//[Offset: 0x910, Size: 80]
	<int,int> PickUpCountSetting_MultipleMirror;//[Offset: 0x960, Size: 80]
	<int,int> PickUpCountSetting_FixConsumeItemMap;//[Offset: 0x9b0, Size: 80]
	bool bTranslatePickupSettingToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa00, Size: 1]
	bool OBS_CustomKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa01, Size: 1]
	bool LocalHideHelmet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa02, Size: 1]
	bool SettingDisableAutoPickupDropMirrorRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa03, Size: 1]
	bool UseIngameLike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa04, Size: 1]
	bool ScreenShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa05, Size: 1]
	float CamLensSenShoulderTPP;//[Offset: 0xa08, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0xa0c, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0xa10, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0xa14, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0xa18, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0xa1c, Size: 4]
	bool ShoulderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 1]
	bool RotateViewWithShoulderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa21, Size: 1]
	int ShoulderMode;//[Offset: 0xa24, Size: 4]
	bool SettingHasOperatedShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 1]
	bool SettingHasOperatedRotateWithShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa29, Size: 1]
	bool OBS_SmokeGrenadeCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2a, Size: 1]
	bool OBS_SmokeGrenadeAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2b, Size: 1]
	bool bGunAccessoriesAddDefauleM4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2c, Size: 1]
	bool bGunAccessoriesGuidedRemoveSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2d, Size: 1]
	bool bGunAccessoriesGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2e, Size: 1]
	bool bGunAccessoriesGuidedSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2f, Size: 1]
	bool bGunAccessoriesGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 1]
	bool bAddedGunAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa31, Size: 1]
	bool bGunSensitivityGuidedEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa32, Size: 1]
	bool bGunSensitivityGuidedAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa33, Size: 1]
	bool bGunSensitivityGuidedCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa34, Size: 1]
	int GunSensitivitySingleTrainingGuideCount;//[Offset: 0xa38, Size: 4]
	bool bGunSensitivitySingleTrainingGuideTiped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3c, Size: 1]
	bool OBS_ShowOwnWeaponKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3d, Size: 1]
	bool isCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3e, Size: 1]
	FString CloudSensitivityPlayerId_Custom;//[Offset: 0xa40, Size: 16]
	bool isOtherCloudSensitivityUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa50, Size: 1]
	bool IsCloudAndLocalSame_SensitivityCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa51, Size: 1]
	bool isCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa52, Size: 1]
	FString CloudAccessoriesPlayerId_Custom;//[Offset: 0xa58, Size: 16]
	bool isOtherCloudAccessoriesUsed_Custom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 1]
	bool IsCloudAndLocalSame_AccessoriesCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa69, Size: 1]
	int TpViewValue;//[Offset: 0xa6c, Size: 4]
	bool bHasCloudCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 1]
	int PickUpListMode;//[Offset: 0xa74, Size: 4]
	bool GyroReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa78, Size: 1]
	bool bHasCloudCustomAccessories;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa79, Size: 1]
	float FireGyroscopeSenNoneSniper;//[Offset: 0xa7c, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0xa80, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0xa84, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0xa88, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0xa8c, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0xa90, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0xa94, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0xa98, Size: 4]
	bool AutoParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9c, Size: 1]
	bool MapMarkEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9d, Size: 1]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0xaa0, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0xaa4, Size: 4]
	bool FireGyroscopeRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa8, Size: 1]
	bool HasOperateRingThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa9, Size: 1]
	bool HasOperatedRingThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaaa, Size: 1]
	bool SettingBasicGyroRverseRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaab, Size: 1]
	bool bLbsNear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaac, Size: 1]
	bool bLbsWarZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaad, Size: 1]
	bool AutoContinueHeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaae, Size: 1]
	bool FocalLengthModifySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaaf, Size: 1]
	bool FocalLengthModifySwitchRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 1]
	bool bRecordWonderfulReplayOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab1, Size: 1]
	int AntiAliasingValue;//[Offset: 0xab4, Size: 4]
	bool OneKeyProneAndCrouchSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab8, Size: 1]
	bool HasOperateOneKeyProneAndCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab9, Size: 1]
	bool bLbsMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaba, Size: 1]
	bool bLbsChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabb, Size: 1]
	bool bOpenBattleNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabc, Size: 1]
	bool bOpenLobbyNewBieAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabd, Size: 1]
	int JoystickSprintSensitity;//[Offset: 0xac0, Size: 4]
	bool bHideIngameUIAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac4, Size: 1]
	bool bCloseHitHeadAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac5, Size: 1]
	int HightLightReshowAirLineTimes;//[Offset: 0xac8, Size: 4]
	bool bHasSetWonderfulReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacc, Size: 1]
	bool bIsShowedHideUIGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xacd, Size: 1]
	bool bAmericanCustomSettingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xace, Size: 1]
	float CamLensSenNoneSniper;//[Offset: 0xad0, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0xad4, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0xad8, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0xadc, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0xae0, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0xae4, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0xae8, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0xaec, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0xaf0, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0xaf4, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0xaf8, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0xafc, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0xb00, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0xb04, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0xb08, Size: 4]
	float VehicleEye;//[Offset: 0xb0c, Size: 4]
	float ParachuteEye;//[Offset: 0xb10, Size: 4]
	float CamFpFreeEye;//[Offset: 0xb14, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0xb18, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0xb1c, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0xb20, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0xb24, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0xb28, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0xb2c, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0xb30, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0xb34, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0xb38, Size: 4]
	float CamLensSenShoulderTPP;//[Offset: 0xb3c, Size: 4]
	float CamLensSenShoulderFPP;//[Offset: 0xb40, Size: 4]
	float FireCamLensSenShoulderTPP;//[Offset: 0xb44, Size: 4]
	float GyroscopeSenShoulderTPP;//[Offset: 0xb48, Size: 4]
	float FireCamLensSenShoulderFPP;//[Offset: 0xb4c, Size: 4]
	float GyroscopeSenShoulderFPP;//[Offset: 0xb50, Size: 4]
	float FireGyroscopeSenNoneSniper;//[Offset: 0xb54, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0xb58, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0xb5c, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0xb60, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0xb64, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0xb68, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0xb6c, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0xb70, Size: 4]
	float FireGyroscopeSenShoulderTPP;//[Offset: 0xb74, Size: 4]
	float FireGyroscopeSenShoulderFPP;//[Offset: 0xb78, Size: 4]
	bool bInitedCustomSensitivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7c, Size: 1]
	bool bFireGyroSenUseGryo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7d, Size: 1]
	bool bFireCamSenUseCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7e, Size: 1]
	bool AutoHitMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7f, Size: 1]
	bool bResetDeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb80, Size: 1]
	bool SwitchSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb81, Size: 1]
	bool bConsumeThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb82, Size: 1]
	int[] MaxACCount;//[Offset: 0xb88, Size: 16]
	int[] DefaultACCount;//[Offset: 0xb98, Size: 16]
	bool HasOperateSoundVisualization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba8, Size: 1]
	bool UseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba9, Size: 1]
	<FString,int> OpenStoreTimes;//[Offset: 0xbb0, Size: 80]
	<int,int> setting_ver_info;//[Offset: 0xc00, Size: 80]
	bool bIsBackpackExpand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc50, Size: 1]
	bool OpenMotivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc51, Size: 1]
	int HapticSwitch;//[Offset: 0xc54, Size: 4]
	int HapticVoiceSwitch;//[Offset: 0xc58, Size: 4]
	int HapticCharacterSwitch;//[Offset: 0xc5c, Size: 4]
	int HapticWeaponSwitch;//[Offset: 0xc60, Size: 4]
	int HapticVehicleSwitch;//[Offset: 0xc64, Size: 4]
	bool bHapticVoiceStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc68, Size: 1]
	bool bHapticVoiceGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc69, Size: 1]
	bool bHapticVoiceGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6a, Size: 1]
	bool bHapticVoiceVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6b, Size: 1]
	bool bHapticCharacterBeGunAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c, Size: 1]
	bool bHapticCharacterBeOtherAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6d, Size: 1]
	bool bHapticCharacterFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6e, Size: 1]
	bool bHapticWeaponAttachment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6f, Size: 1]
	bool bHapticWeaponAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 1]
	bool bHapticWeaponSemiAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc71, Size: 1]
	bool bHapticWeaponSniper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc72, Size: 1]
	bool bHapticWeaponOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc73, Size: 1]
	bool bHapticVehicleDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74, Size: 1]
	bool bHapticVehicleBeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc75, Size: 1]
	bool bHapticVehicleHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc76, Size: 1]
	bool bIsOpenMapTaskUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc77, Size: 1]
	bool AmmoRemain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc78, Size: 1]

--------------------------------
Class: BP_STRUCT_BlueholeHurtEffectConfig_type
	FString ColorA_0_53F9F300120D08787CAD4F6400DF1E21;//[Offset: 0x0, Size: 16]
	FString ColorB_1_53FAF340120D08797CAD4F6500DF1E22;//[Offset: 0x10, Size: 16]
	FString ColorG_2_53FFF480120D087E7CAD4F6E00DF1E27;//[Offset: 0x20, Size: 16]
	FString ColorR_3_540AF740120D08897CAD4F7500DF1E32;//[Offset: 0x30, Size: 16]
	FString ID_4_722F46406A7371C3780F88AE0B284084;//[Offset: 0x40, Size: 16]
	FString ResPath_5_101890C0245C77892EEC8CC30D7AECB8;//[Offset: 0x50, Size: 16]

--------------------------------
Class: BP_STRUCT_KoreaHurtEffectConfig_type
	FString ColorA_0_463EE38073B0E8305CFF6EAE0F8DA261;//[Offset: 0x0, Size: 16]
	FString ColorB_1_463FE3C073B0E8315CFF6EAF0F8DA262;//[Offset: 0x10, Size: 16]
	FString ColorG_2_4644E50073B0E8365CFF6EA80F8DA267;//[Offset: 0x20, Size: 16]
	FString ColorR_3_464FE7C073B0E8415CFF6E9F0F8DA272;//[Offset: 0x30, Size: 16]
	FString ID_4_7F7536C04FE524AB454A945D09B40F34;//[Offset: 0x40, Size: 16]
	FString ResPath_5_0DED414024DEE0F1299E986806532848;//[Offset: 0x50, Size: 16]

--------------------------------
Class: BP_STRUCT_JapanHurtEffectConfig_type
	FString ColorA_0_7161A1805092E8283C37D458017CA281;//[Offset: 0x0, Size: 16]
	FString ColorB_1_7162A1C05092E8293C37D459017CA282;//[Offset: 0x10, Size: 16]
	FString ColorG_2_7167A3005092E82E3C37D442017CA287;//[Offset: 0x20, Size: 16]
	FString ColorR_3_7172A5C05092E8393C37D449017CA292;//[Offset: 0x30, Size: 16]
	FString ID_4_4B93F4C06A90502378DD12550EB4E124;//[Offset: 0x40, Size: 16]
	FString ResPath_5_5790FF405EB723F9117DDA6C072326A8;//[Offset: 0x50, Size: 16]

--------------------------------
Class: BP_STRUCT_VNHurtEffectConfig_type
	FString ColorA_0_7D96F0000B2443BE0817B8950597C5D1;//[Offset: 0x0, Size: 16]
	FString ColorB_1_7D97F0400B2443BF0817B8940597C5D2;//[Offset: 0x10, Size: 16]
	FString ColorG_2_7D9CF1800B2443C40817B8930597C5D7;//[Offset: 0x20, Size: 16]
	FString ColorR_3_7DA7F4400B2443CF0817B8840597C5C2;//[Offset: 0x30, Size: 16]
	FString ID_5_57064340101F06091D643D670393B5C4;//[Offset: 0x40, Size: 16]
	FString ResPath_6_41070DC0638F9D1F5F3BC77009F153E8;//[Offset: 0x50, Size: 16]

--------------------------------
Class: BP_STRUCT_GlobalHurtEffectConfig_type
	FString ColorA_0_22F27B40670E563B084B4DAB0F7D1981;//[Offset: 0x0, Size: 16]
	FString ColorB_1_22F37B80670E563C084B4DA80F7D1982;//[Offset: 0x10, Size: 16]
	FString ColorG_2_22F87CC0670E5641084B4DAD0F7D1987;//[Offset: 0x20, Size: 16]
	FString ColorR_3_23037F80670E564C084B4DB80F7D1992;//[Offset: 0x30, Size: 16]
	FString ID_4_1EC84E807CB64F767420B3EF092FEF24;//[Offset: 0x40, Size: 16]
	FString ResPath_5_7AD0F90011863CA45B459C05075A9648;//[Offset: 0x50, Size: 16]

--------------------------------
Class: BP_STRUCT_BlueholeHitEffectConfig_type
	FString ID_0_2E9026C02E6AE54D311F78F4021D9A54;//[Offset: 0x0, Size: 16]
	FString Layer1ColorA_1_62E27F005A367E3856CC8AD60E50D7A1;//[Offset: 0x10, Size: 16]
	FString Layer1ColorB_2_62E37F405A367E3956CC8AD50E50D7A2;//[Offset: 0x20, Size: 16]
	FString Layer1ColorG_3_62E880805A367E3E56CC8AD80E50D7A7;//[Offset: 0x30, Size: 16]
	FString Layer1ColorR_4_62F383405A367E4956CC8AC50E50D7B2;//[Offset: 0x40, Size: 16]
	FString Layer2ColorA_5_21EABF4028E6A19F15CD6A640D50D7A1;//[Offset: 0x50, Size: 16]
	FString Layer2ColorB_6_21EBBF8028E6A1A015CD6A650D50D7A2;//[Offset: 0x60, Size: 16]
	FString Layer2ColorG_7_21F0C0C028E6A1A515CD6A6E0D50D7A7;//[Offset: 0x70, Size: 16]
	FString Layer2ColorR_8_21FBC38028E6A1B015CD6A750D50D7B2;//[Offset: 0x80, Size: 16]
	FString Layer3ColorA_9_60F2FF807796C50644BCCD790C50D7A1;//[Offset: 0x90, Size: 16]
	FString Layer3ColorB_10_60F3FFC07796C50744BCCD780C50D7A2;//[Offset: 0xa0, Size: 16]
	FString Layer3ColorG_11_60F901007796C50C44BCCD770C50D7A7;//[Offset: 0xb0, Size: 16]
	FString Layer3ColorR_12_610403C07796C51744BCCD080C50D7B2;//[Offset: 0xc0, Size: 16]
	FString Layer4ColorA_13_1FFB3FC04646E86D222AAFA20350D7A1;//[Offset: 0xd0, Size: 16]
	FString Layer4ColorB_14_1FFC40004646E86E222AAFA10350D7A2;//[Offset: 0xe0, Size: 16]
	FString Layer4ColorG_15_200141404646E873222AAFA40350D7A7;//[Offset: 0xf0, Size: 16]
	FString Layer4ColorR_16_200C44004646E87E222AAFB10350D7B2;//[Offset: 0x100, Size: 16]
	FString ResPath_17_5CB03140570F34CF370E01C100E9B118;//[Offset: 0x110, Size: 16]
	FString SettingColorA_18_78BEEB001EC66138380176F00A906191;//[Offset: 0x120, Size: 16]
	FString SettingColorB_19_78BFEB401EC66139380176F70A906192;//[Offset: 0x130, Size: 16]
	FString SettingColorG_20_78C4EC801EC6613E380176CA0A906197;//[Offset: 0x140, Size: 16]
	FString SettingColorR_21_78CFEF401EC66149380176C70A906182;//[Offset: 0x150, Size: 16]

--------------------------------
Class: BP_STRUCT_KoreaHitEffectConfig_type
	FString ID_0_24E657402045C5513215900907325EE4;//[Offset: 0x0, Size: 16]
	FString Layer1ColorA_1_78362F806C3EB5A27592B9890A9BF861;//[Offset: 0x10, Size: 16]
	FString Layer1ColorB_2_78372FC06C3EB5A37592B98A0A9BF862;//[Offset: 0x20, Size: 16]
	FString Layer1ColorG_3_783C31006C3EB5A87592B98F0A9BF867;//[Offset: 0x30, Size: 16]
	FString Layer1ColorR_4_784733C06C3EB5B37592B99A0A9BF872;//[Offset: 0x40, Size: 16]
	FString Layer2ColorA_5_373E6FC03E5CF0D969850E51099BF861;//[Offset: 0x50, Size: 16]
	FString Layer2ColorB_6_373F70003E5CF0DA69850E56099BF862;//[Offset: 0x60, Size: 16]
	FString Layer2ColorG_7_374471403E5CF0DF69850E2B099BF867;//[Offset: 0x70, Size: 16]
	FString Layer2ColorR_8_374F74003E5CF0EA69850E26099BF872;//[Offset: 0x80, Size: 16]
	FString Layer3ColorA_9_7646B000107B2C1063163E5F089BF861;//[Offset: 0x90, Size: 16]
	FString Layer3ColorB_10_7647B040107B2C1163163E5E089BF862;//[Offset: 0xa0, Size: 16]
	FString Layer3ColorG_11_764CB180107B2C1663163E25089BF867;//[Offset: 0xb0, Size: 16]
	FString Layer3ColorR_12_7657B440107B2C2163163E2E089BF872;//[Offset: 0xc0, Size: 16]
	FString Layer4ColorA_13_354EF0406299674731C7E897079BF861;//[Offset: 0xd0, Size: 16]
	FString Layer4ColorB_14_354FF0806299674831C7E896079BF862;//[Offset: 0xe0, Size: 16]
	FString Layer4ColorG_15_3554F1C06299674D31C7E891079BF867;//[Offset: 0xf0, Size: 16]
	FString Layer4ColorR_16_355FF4806299675831C7E886079BF872;//[Offset: 0x100, Size: 16]
	FString SettingColorA_17_7E425B802DDA8C3E19FFB76F013EBDD1;//[Offset: 0x110, Size: 16]
	FString SettingColorB_18_7E435BC02DDA8C3F19FFB76C013EBDD2;//[Offset: 0x120, Size: 16]
	FString SettingColorG_19_7E485D002DDA8C4419FFB751013EBDD7;//[Offset: 0x130, Size: 16]
	FString SettingColorR_20_7E535FC02DDA8C4F19FFB75C013EBDC2;//[Offset: 0x140, Size: 16]
	FString ResPath_21_4EF521C06CF12EC7512E0C520BBB4D58;//[Offset: 0x150, Size: 16]

--------------------------------
Class: BP_STRUCT_JapanHitEffectConfig_type
	FString ID_0_2004154035E60089325471EE00425C34;//[Offset: 0x0, Size: 16]
	FString Layer1ColorA_1_56DDED805AB1952A7719137C086EA861;//[Offset: 0x10, Size: 16]
	FString Layer1ColorB_2_56DEEDC05AB1952B7719137D086EA862;//[Offset: 0x20, Size: 16]
	FString Layer1ColorG_3_56E3EF005AB195307719137A086EA867;//[Offset: 0x30, Size: 16]
	FString Layer1ColorR_4_56EEF1C05AB1953B7719136D086EA872;//[Offset: 0x40, Size: 16]
	FString Layer2ColorA_5_15E62DC02CCFD06102CF06030B6EA861;//[Offset: 0x50, Size: 16]
	FString Layer2ColorB_6_15E72E002CCFD06202CF06020B6EA862;//[Offset: 0x60, Size: 16]
	FString Layer2ColorG_7_15EC2F402CCFD06702CF061D0B6EA867;//[Offset: 0x70, Size: 16]
	FString Layer2ColorR_8_15F732002CCFD07202CF06120B6EA872;//[Offset: 0x80, Size: 16]
	FString Layer3ColorA_9_54EE6E007EEE0B9813DAB5170A6EA861;//[Offset: 0x90, Size: 16]
	FString Layer3ColorB_10_54EF6E407EEE0B9913DAB5080A6EA862;//[Offset: 0xa0, Size: 16]
	FString Layer3ColorG_11_54F46F807EEE0B9E13DAB50D0A6EA867;//[Offset: 0xb0, Size: 16]
	FString Layer3ColorR_12_54FF72407EEE0BA913DAB5780A6EA872;//[Offset: 0xc0, Size: 16]
	FString Layer4ColorA_13_13F6AE40510C46CF68D4DCAF056EA861;//[Offset: 0xd0, Size: 16]
	FString Layer4ColorB_14_13F7AE80510C46D068D4DCA0056EA862;//[Offset: 0xe0, Size: 16]
	FString Layer4ColorG_15_13FCAFC0510C46D568D4DCA5056EA867;//[Offset: 0xf0, Size: 16]
	FString Layer4ColorR_16_1407B280510C46E068D4DC50056EA872;//[Offset: 0x100, Size: 16]
	FString SettingColorA_17_08EB1980027FAA0615B3A9020C6BBDF1;//[Offset: 0x110, Size: 16]
	FString SettingColorB_18_08EC19C0027FAA0715B3A9030C6BBDF2;//[Offset: 0x120, Size: 16]
	FString SettingColorG_19_08F11B00027FAA0C15B3A91C0C6BBDF7;//[Offset: 0x130, Size: 16]
	FString SettingColorR_20_08FC1DC0027FAA1715B3A9130C6BBDE2;//[Offset: 0x140, Size: 16]
	FString ResPath_21_7A17DFC049D32EBF221C5AF806CC4D78;//[Offset: 0x150, Size: 16]

--------------------------------
Class: BP_STRUCT_VNHitEffectConfig_type
	FString ID_17_1855A3C018BE7CE74928E35406902744;//[Offset: 0x0, Size: 16]
	FString Layer1ColorA_1_4996FC000E081E3E2ECB32D60D3C5A11;//[Offset: 0x10, Size: 16]
	FString Layer1ColorB_2_4997FC400E081E3F2ECB32C90D3C5A12;//[Offset: 0x20, Size: 16]
	FString Layer1ColorG_3_499CFD800E081E442ECB32CC0D3C5A17;//[Offset: 0x30, Size: 16]
	FString Layer1ColorR_4_49A800400E081E4F2ECB33390D3C5A02;//[Offset: 0x40, Size: 16]
	FString Layer2ColorA_5_089F3C405B10804508668D7F0E3C5A11;//[Offset: 0x50, Size: 16]
	FString Layer2ColorB_6_08A03C805B10804608668D700E3C5A12;//[Offset: 0x60, Size: 16]
	FString Layer2ColorG_7_08A53DC05B10804B08668D750E3C5A17;//[Offset: 0x70, Size: 16]
	FString Layer2ColorR_8_08B040805B10805608668D600E3C5A02;//[Offset: 0x80, Size: 16]
	FString Layer3ColorA_9_47A77C802818E24C47025FA50F3C5A11;//[Offset: 0x90, Size: 16]
	FString Layer3ColorB_10_47A87CC02818E24D47025FA40F3C5A12;//[Offset: 0xa0, Size: 16]
	FString Layer3ColorG_11_47AD7E002818E25247025FAF0F3C5A17;//[Offset: 0xb0, Size: 16]
	FString Layer3ColorR_12_47B880C02818E25D47025FB40F3C5A02;//[Offset: 0xc0, Size: 16]
	FString Layer4ColorA_13_06AFBCC0752144532F29F712003C5A11;//[Offset: 0xd0, Size: 16]
	FString Layer4ColorB_14_06B0BD00752144542F29F713003C5A12;//[Offset: 0xe0, Size: 16]
	FString Layer4ColorG_15_06B5BE40752144592F29F6EC003C5A17;//[Offset: 0xf0, Size: 16]
	FString Layer4ColorR_16_06C0C100752144642F29F6E3003C5A02;//[Offset: 0x100, Size: 16]
	FString SettingColorA_18_5304E80078FE8A3257CFE4B00B489841;//[Offset: 0x110, Size: 16]
	FString SettingColorB_19_5305E84078FE8A3357CFE4B10B489842;//[Offset: 0x120, Size: 16]
	FString SettingColorG_20_530AE98078FE8A3857CFE48E0B489847;//[Offset: 0x130, Size: 16]
	FString SettingColorR_21_5315EC4078FE8A4357CFE4810B489852;//[Offset: 0x140, Size: 16]
	FString ResPath_22_064D2E40633E42F55CDC31C801A16AC8;//[Offset: 0x150, Size: 16]

--------------------------------
Class: BP_STRUCT_GlobalHitEffectConfig_type
	FString ID_0_0DB94F0058294F3A04F02029003DEC94;//[Offset: 0x0, Size: 16]
	FString Layer1ColorA_1_193A67401A3937D379BAA750090EF7D1;//[Offset: 0x10, Size: 16]
	FString Layer1ColorB_2_193B67801A3937D479BAA753090EF7D2;//[Offset: 0x20, Size: 16]
	FString Layer1ColorG_3_194068C01A3937D979BAA756090EF7D7;//[Offset: 0x30, Size: 16]
	FString Layer1ColorR_4_194B6B801A3937E479BAA763090EF7C2;//[Offset: 0x40, Size: 16]
	FString Layer2ColorA_5_5842A7807EFA541A4F4A16C50C0EF7D1;//[Offset: 0x50, Size: 16]
	FString Layer2ColorB_6_5843A7C07EFA541B4F4A16C40C0EF7D2;//[Offset: 0x60, Size: 16]
	FString Layer2ColorG_7_5848A9007EFA54204F4A16C30C0EF7D7;//[Offset: 0x70, Size: 16]
	FString Layer2ColorR_8_5853ABC07EFA542B4F4A16F40C0EF7C2;//[Offset: 0x80, Size: 16]
	FString Layer3ColorA_9_174AE7C063BB706137E935960B0EF7D1;//[Offset: 0x90, Size: 16]
	FString Layer3ColorB_10_174BE80063BB706237E935950B0EF7D2;//[Offset: 0xa0, Size: 16]
	FString Layer3ColorG_11_1750E94063BB706737E935980B0EF7D7;//[Offset: 0xb0, Size: 16]
	FString Layer3ColorR_12_175BEC0063BB707237E935850B0EF7C2;//[Offset: 0xc0, Size: 16]
	FString Layer4ColorA_13_56532800487C8CA85663AED0060EF7D1;//[Offset: 0xd0, Size: 16]
	FString Layer4ColorB_14_56542840487C8CA95663AED1060EF7D2;//[Offset: 0xe0, Size: 16]
	FString Layer4ColorG_15_56592980487C8CAE5663AEDA060EF7D7;//[Offset: 0xf0, Size: 16]
	FString Layer4ColorR_16_56642C40487C8CB95663AEC1060EF7C2;//[Offset: 0x100, Size: 16]
	FString SettingColorA_17_5126B340631EA20D7C7C0CF6066E64F1;//[Offset: 0x110, Size: 16]
	FString SettingColorB_18_5127B380631EA20E7C7C0CF7066E64F2;//[Offset: 0x120, Size: 16]
	FString SettingColorG_19_512CB4C0631EA2137C7C0CF0066E64F7;//[Offset: 0x130, Size: 16]
	FString SettingColorR_20_5137B780631EA21E7C7C0CE7066E64E2;//[Offset: 0x140, Size: 16]
	FString ResPath_21_2BA8B9801447FA32396A63CB0CCBB678;//[Offset: 0x150, Size: 16]

--------------------------------
Class: BP_STRUCT_GuideText_type
	int GuideID_0_A5FF72E542F02CBBCE5E2696B9B5AE1E;//[Offset: 0x0, Size: 4]
	int TriggerTimes_1_092A596A4CD84CDBCEAB7CAC1E5C6784;//[Offset: 0x4, Size: 4]
	FString text4_2_0681BED6478BF4BE2672C1B126FF6E1E;//[Offset: 0x8, Size: 16]
	FString text1_3_0B618F7F449909BFB58A3E98E3DB73DE;//[Offset: 0x18, Size: 16]
	FString text2_4_F5471C1F44A2ADB1B71AD3A2991F2C29;//[Offset: 0x28, Size: 16]
	FString text3_5_5E534A744DCD782353B99F94D72CF42E;//[Offset: 0x38, Size: 16]
	int IsFloat_7_5631F6C015B003AF4D2C60B3037F0B64;//[Offset: 0x48, Size: 4]
	int ShapeType_8_6317EF000ACBA582315244FA09B48A85;//[Offset: 0x4c, Size: 4]
	int XOffset_10_1D6AFA00689E1E0E6D67A078005D0714;//[Offset: 0x50, Size: 4]
	int YOffset_11_5C733A401ADE00450611FA950F5D0704;//[Offset: 0x54, Size: 4]
	int OutOffset_12_336A92002DF8BFBC469DDB2F0A823C04;//[Offset: 0x58, Size: 4]

--------------------------------
Class: BP_STRUCT_JKColorBlindnessConfig_type
	FString CBBlueColorA_0_1A321BC068EC5CE10F6EEF990DA69541;//[Offset: 0x0, Size: 16]
	FString CBBlueColorB_1_1A331C0068EC5CE20F6EEF9E0DA69542;//[Offset: 0x10, Size: 16]
	FString CBBlueColorG_2_1A381D4068EC5CE70F6EEF930DA69547;//[Offset: 0x20, Size: 16]
	FString CBBlueColorR_3_1A43200068EC5CF20F6EEFAE0DA69552;//[Offset: 0x30, Size: 16]
	FString CBGreenColorA_4_4571D60028624EFE0DB593EC02ABB561;//[Offset: 0x40, Size: 16]
	FString CBGreenColorB_5_4572D64028624EFF0DB593E302ABB562;//[Offset: 0x50, Size: 16]
	FString CBGreenColorG_6_4577D78028624F040DB593E602ABB567;//[Offset: 0x60, Size: 16]
	FString CBGreenColorR_7_4582DA4028624F0F0DB5939302ABB572;//[Offset: 0x70, Size: 16]
	FString CBRedColorA_8_41F0E0805F44DE5C3DFB5D0601E64FD1;//[Offset: 0x80, Size: 16]
	FString CBRedColorB_9_41F1E0C05F44DE5D3DFB5D0701E64FD2;//[Offset: 0x90, Size: 16]
	FString CBRedColorG_10_41F6E2005F44DE623DFB5D0C01E64FD7;//[Offset: 0xa0, Size: 16]
	FString CBRedColorR_11_4201E4C05F44DE6D3DFB5D1701E64FC2;//[Offset: 0xb0, Size: 16]
	FString ID_12_0AB56BC00DEC06DD7427B978061094A4;//[Offset: 0xc0, Size: 16]
	FString NormalColorA_13_71D012C041F9112D68401C9A05E69591;//[Offset: 0xd0, Size: 16]
	FString NormalColorB_14_71D1130041F9112E68401C9B05E69592;//[Offset: 0xe0, Size: 16]
	FString NormalColorG_15_71D6144041F9113368401C9405E69597;//[Offset: 0xf0, Size: 16]
	FString NormalColorR_16_71E1170041F9113E68401CAB05E69582;//[Offset: 0x100, Size: 16]

--------------------------------
Class: BP_STRUCT_VNColorBlindnessConfig_type
	FString CBBlueColorA_0_48A05F80565F18D25FB7B3780DADA841;//[Offset: 0x0, Size: 16]
	FString CBBlueColorB_1_48A15FC0565F18D35FB7B3790DADA842;//[Offset: 0x10, Size: 16]
	FString CBBlueColorG_2_48A66100565F18D85FB7B3760DADA847;//[Offset: 0x20, Size: 16]
	FString CBBlueColorR_3_48B163C0565F18E35FB7B3090DADA852;//[Offset: 0x30, Size: 16]
	FString CBGreenColorA_4_797A39C016C4BF072EFE2933021A8561;//[Offset: 0x40, Size: 16]
	FString CBGreenColorB_5_797B3A0016C4BF082EFE2932021A8562;//[Offset: 0x50, Size: 16]
	FString CBGreenColorG_6_79803B4016C4BF0D2EFE290D021A8567;//[Offset: 0x60, Size: 16]
	FString CBGreenColorR_7_798B3E0016C4BF182EFE2902021A8572;//[Offset: 0x70, Size: 16]
	FString CBRedColorA_8_77B50440671A3E3B5F43162201E6BC01;//[Offset: 0x80, Size: 16]
	FString CBRedColorB_9_77B60480671A3E3C5F43162101E6BC02;//[Offset: 0x90, Size: 16]
	FString CBRedColorG_10_77BB05C0671A3E415F43162401E6BC07;//[Offset: 0xa0, Size: 16]
	FString CBRedColorR_11_77C60880671A3E4C5F43163101E6BC12;//[Offset: 0xb0, Size: 16]
	FString ID_19_20AE6F800EBB4E6435B639D10F2D94A4;//[Offset: 0xc0, Size: 16]
	FString NormalColorA_13_203E56802F6BCD1E3143D4E005EDA891;//[Offset: 0xd0, Size: 16]
	FString NormalColorB_14_203F56C02F6BCD1F3143D4E105EDA892;//[Offset: 0xe0, Size: 16]
	FString NormalColorG_15_204458002F6BCD243143D4EA05EDA897;//[Offset: 0xf0, Size: 16]
	FString NormalColorR_16_204F5AC02F6BCD2F3143D49105EDA882;//[Offset: 0x100, Size: 16]

--------------------------------
Class: BP_STRUCT_ColorBlindnessConfig_type
	FString CBBlueColorA_19_362F368060B105F828F4BADE0EAF4721;//[Offset: 0x0, Size: 16]
	FString CBBlueColorB_27_363036C060B105F928F4BADF0EAF4722;//[Offset: 0x10, Size: 16]
	FString CBBlueColorG_29_3635380060B105FE28F4BAA40EAF4727;//[Offset: 0x20, Size: 16]
	FString CBBlueColorR_23_36403AC060B1060928F4BAAF0EAF4732;//[Offset: 0x30, Size: 16]
	FString CBGreenColorA_17_5F0D90C03949D01D2EBEC7C9023492B1;//[Offset: 0x40, Size: 16]
	FString CBGreenColorB_28_5F0E91003949D01E2EBEC7CE023492B2;//[Offset: 0x50, Size: 16]
	FString CBGreenColorG_32_5F1392403949D0232EBEC7C3023492B7;//[Offset: 0x60, Size: 16]
	FString CBGreenColorR_25_5F1E95003949D02E2EBEC7DE023492A2;//[Offset: 0x70, Size: 16]
	FString CBRedColorA_18_12FF5B40473229556BCC523607F696F1;//[Offset: 0x80, Size: 16]
	FString CBRedColorB_26_13005B80473229566BCC522907F696F2;//[Offset: 0x90, Size: 16]
	FString CBRedColorG_30_13055CC04732295B6BCC522C07F696F7;//[Offset: 0xa0, Size: 16]
	FString CBRedColorR_24_13105F80473229666BCC521907F696E2;//[Offset: 0xb0, Size: 16]
	FString ID_35_5A5046801FF3596E474DD8DF0D82F7A4;//[Offset: 0xc0, Size: 16]
	FString NormalColorA_31_0DCD2D8036DBB8744E67B41408EF47F1;//[Offset: 0xd0, Size: 16]
	FString NormalColorB_22_0DCE2DC036DBB8754E67B41508EF47F2;//[Offset: 0xe0, Size: 16]
	FString NormalColorG_21_0DD32F0036DBB87A4E67B41E08EF47F7;//[Offset: 0xf0, Size: 16]
	FString NormalColorR_20_0DDE31C036DBB8854E67B42508EF47E2;//[Offset: 0x100, Size: 16]

--------------------------------
Class: BP_STRUCT_BattleSound_type
	FString Bank_0_184E3DC068C2BF413A229E4A0982F59B;//[Offset: 0x0, Size: 16]
	int ID_1_2A476200426F1DEA2637969B03D982A4;//[Offset: 0x10, Size: 4]
	FString Region_2_79F1F7C0268B0C797F1F0D4403F807DE;//[Offset: 0x18, Size: 16]
	FString Event_3_1B79FF4077296A014966EB0F082BF7C4;//[Offset: 0x28, Size: 16]
	int SoundID_4_46DBA4405283EB7B3BA231390F57D0E4;//[Offset: 0x38, Size: 4]

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 16]
	byte ArgumentValueType;//[Offset: 0x10, Size: 1]
	FText ArgumentValue;//[Offset: 0x18, Size: 24]
	int ArgumentValueInt;//[Offset: 0x30, Size: 4]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 4]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 1]

--------------------------------
Class: BP_STRUCT_EmoteBPTable_type
	FString Path_0_247605C000C1809320361CC70BC26958;//[Offset: 0x0, Size: 16]
	FString CName_1_20BFF38058E1993E3181765E0C385985;//[Offset: 0x10, Size: 16]
	int ID_2_6D1FE5C03D4B9B6365DA363A01FBC3D4;//[Offset: 0x20, Size: 4]
	FString LobbyPath_3_17CBE3C0186812E1377BBB6D07222BE8;//[Offset: 0x28, Size: 16]
	FString LobbyEmoteAdapt_4_6274998039C4B44E5D4A1AFE0DB5A954;//[Offset: 0x38, Size: 16]
	FString BattleLowPath_5_4F3B89400282AC756B607A450BF84618;//[Offset: 0x48, Size: 16]

--------------------------------
Class: ItemRecordData
	int ItemId;//[Offset: 0x4, Size: 4]
	int itemType;//[Offset: 0x8, Size: 4]
	int ItemSubType;//[Offset: 0xc, Size: 4]
	int BPID;//[Offset: 0x10, Size: 4]
	int WeightforOrder;//[Offset: 0x14, Size: 4]
	int Worth;//[Offset: 0x18, Size: 4]
	int ItemCapacity;//[Offset: 0x1c, Size: 4]
	int Durability;//[Offset: 0x20, Size: 4]
	int ItemSoundID;//[Offset: 0x24, Size: 4]
	int ItemQuality;//[Offset: 0x28, Size: 4]
	int ItemPickupRule;//[Offset: 0x2c, Size: 4]
	int AIFullVaule;//[Offset: 0x30, Size: 4]
	float Weight;//[Offset: 0x34, Size: 4]
	int MaxCount;//[Offset: 0x38, Size: 4]
	bool AutoEquipandDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool Consumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool Equipable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	FString ItemName;//[Offset: 0x40, Size: 16]
	FString ItemBigIcon;//[Offset: 0x50, Size: 16]
	FString ItemDesc;//[Offset: 0x60, Size: 16]
	FString ItemSmallIcon;//[Offset: 0x70, Size: 16]
	FString KillWhiteIcon;//[Offset: 0x80, Size: 16]
	FString ItemWhiteIcon;//[Offset: 0x90, Size: 16]
	FString RedEmotionSoundPath;//[Offset: 0xa0, Size: 16]
	FString PickupDesc;//[Offset: 0xb0, Size: 16]
	FString BackpackSimple;//[Offset: 0xc0, Size: 16]
	FString SpecialIcon;//[Offset: 0xd0, Size: 16]
	FString ItemBigIcon2;//[Offset: 0xe0, Size: 16]
	FString ItemSmallIcon2;//[Offset: 0xf0, Size: 16]
	int Electricity;//[Offset: 0x100, Size: 4]

--------------------------------
Class: UIAdaptationStructure
	FString DeviceName_2_A8CF6E1F40D8116DD8A17D97AD6515ED;//[Offset: 0x0, Size: 16]
	float LeftOffset_5_61C5916847A6DB0845C03799C935F0CD;//[Offset: 0x10, Size: 4]
	float RightOffset_7_338321234218040563FB88B423EA8023;//[Offset: 0x14, Size: 4]
	float TopOffset_9_68D32A004301A63A4ABF20B129DBC8DE;//[Offset: 0x18, Size: 4]
	float BottomOffset_11_0C31E5BC4AA9CD8E9DBA4A9D456E101E;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: GlobalConfigActor.Actor.Object
	bool bInitComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	void Init();// 0x3c23558

--------------------------------
Class: BP_SAVEGAME_UIElemLayout_C.SaveGame.Object
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict1;//[Offset: 0x28, Size: 80]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict2;//[Offset: 0x78, Size: 80]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict3;//[Offset: 0xc8, Size: 80]
	bool IsDataValid1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool IsDataValid2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	bool IsDataValid3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 1]
	float RushTriggerLength1;//[Offset: 0x11c, Size: 4]
	float RushTriggerLength2;//[Offset: 0x120, Size: 4]
	float RushTriggerLength3;//[Offset: 0x124, Size: 4]
	FString SaveSlotName;//[Offset: 0x128, Size: 16]
	FString LayoutName1;//[Offset: 0x138, Size: 16]
	FString LayoutName2;//[Offset: 0x148, Size: 16]
	FString LayoutName3;//[Offset: 0x158, Size: 16]
	int TimeTag;//[Offset: 0x168, Size: 4]
	int[] InvalidArray1;//[Offset: 0x170, Size: 16]
	int[] InvalidArray2;//[Offset: 0x180, Size: 16]
	int[] InvalidArray3;//[Offset: 0x190, Size: 16]

--------------------------------
Class: BP_STRUCT_UIElemLayoutDetail
	int Type_23_55DBE0E544DAFBECC9EFB6BB17ABA028;//[Offset: 0x0, Size: 4]
	Vector2D Scale_17_041C81B04F88C44906CC9C9124ED2CF5;//[Offset: 0x4, Size: 8]
	float Opacity_7_DA1E8BC343F74DC18A9B0FBB6DA17CCB;//[Offset: 0xc, Size: 4]
	Anchors AnchorType_16_8C6A88824F5B4009F1532EBCA05CA534;//[Offset: 0x10, Size: 16]
	Vector2D RelativePos_19_41E2D4F647EC741044D6AC9C8DD94ED4;//[Offset: 0x20, Size: 8]
	Vector2D OriginSize_22_61D9CB8A48FFB415806311A1771BDF74;//[Offset: 0x28, Size: 8]

--------------------------------
Class: TemBPDataAddr
	uint64 Value;//[Offset: 0x0, Size: 8]

--------------------------------
Class: PubgmAutoRun.ActorComponent.Object
	delegate PubgmAutoRunSimulateAction;//[Offset: 0x110, Size: 16]
	bool bRoutePointInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	XTPoint*[] RoutePoints;//[Offset: 0x128, Size: 16]
	void VehicleTowardTo(float X, float Y, float Z);// 0x34a18fc
	void VehicleMoveTo(float X, float Y, float Z);// 0x34a180c
	void VehicleMoveAndTowardTo(float X, float Y, float Z, float x1, float y1, float Z1);// 0x34a166c
	void OnPubgmAutoRunSimulateAction__DelegateSignature(int SimActionType);// 0x4033584
	static bool NeedCmdAutoRun();// 0x34a1634
	void NativeSimulateAction(int SimActionType);// 0x34a15b8
	void InitRoutePoint();// 0x34a15a4
	void GMGotoPosition(int X, int Y, int Z);// 0x34a14b4
	Vector[] GetRangeActorsPostions(int ActorType, Vector OriginPos, float RangeRadius);// 0x34a1348
	Vector GetPoisonCircleLocation();// 0x34a1310
	static float GetPlayerSpeed(int SpeedIdx);// 0x34a128c
	bool GetNearestXTPointToVehicle(out Transform FirstPoint, out Transform SecendPoint, bool bNext);// 0x34a1118
	float ForceVehiclePosPull(bool bNext);// 0x34a1084

--------------------------------
Class: XTPoint.Actor.Object
	int CustomIValue;//[Offset: 0x3c8, Size: 4]
	int GetIntValueTwo();// 0x37660dc
	int GetIntValueThree();// 0x37660a0
	int GetIntValueOne();// 0x3766064

--------------------------------
Class: AutoTestInterface.ActorComponent.Object
	void StarJumpPlane();// 0x325d678

--------------------------------
Class: AutoRunTest.ActorComponent.Object
	bool IsSimulateZombieBoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]

--------------------------------
Class: InGameUIManager.GameBusinessManager.LogicManagerBase.Object
	class Object[] InGameUIList;//[Offset: 0x178, Size: 16]
	<FString,UAEUserWidget*> WidgetsMap;//[Offset: 0x1f0, Size: 80]
	<int,DynamicWidgetAsyncLoadData> PendingAsyncLoadRequests;//[Offset: 0x240, Size: 80]
	void SubUIWidgetListWithMountData(out const InGameWidgetData[] InGameWidgetDataList, out const FString[] GameStatusStrList, bool InPersistentUI, bool InUsedByControler, bool InOberverOnly, int inUIControlState);// 0x3a9ba20
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool InPersistentUI, bool InUsedByControler, bool InOberverOnly);// 0x3a9b7c8
	void SubDynamicUIWidgetList(out const DynamicWidgetData[] DynamicWidgetMap);// 0x3a9b6a0
	void OnAsyncLoadWidgetClassObj(Object* InClassObj, int RequestID);// 0x3a9b5e8
	void HandleUIMessage(FString UIMessage);// 0x3a9b540
	void HandleMountWidget(InGameUIManager* IngameManager);// 0x3a9b4c4
	void HandleDynamicDestroy();// 0x3a9b4b0
	void HandleDynamicCreation(bool isAsyncLoad);// 0x3a9b42c
	void GetWidgetHandleAsyncWithCallBack(FString WidgetKey, delegate InCallback);// 0x3a9b324
	UAEUserWidget* GetWidgetHandle(FString WidgetKey);// 0x3a9b26c
	CanvasPanel* GetMountCanvasPanel(FString MountOuterName, FString MountName);// 0x3a9b14c
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x3a9b0a8

--------------------------------
Class: GameBusinessManager.LogicManagerBase.Object
	GameWidgetConfig[] WidgetConfigList;//[Offset: 0xf8, Size: 16]
	UAEPlayerController* OwningController;//[Offset: 0x158, Size: 8]
	LuaClassObj* LuaObject;//[Offset: 0x168, Size: 8]
	UAEUserWidget* GetWidget(int Index);// 0x3a80ddc
	LuaClassObj* GetLuaObject();// 0x3a80da8
	GameFrontendHUD* GetGameFrontendHUD();// 0x3a80d74

--------------------------------
Class: GameWidgetConfig
	FString Path;//[Offset: 0x0, Size: 16]
	FString Container;//[Offset: 0x10, Size: 16]
	int ZOrder;//[Offset: 0x20, Size: 4]
	class Object* WidgetClass;//[Offset: 0x28, Size: 8]

--------------------------------
Class: LuaClassObj.LuaContext.Actor.Object
	GameBusinessManager* pManager;//[Offset: 0x3e0, Size: 8]
	bool bClearSourceCodeAfterInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 1]
	void SubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList, out const FString[] GameStatusStrList, bool bPersistentUI, bool InStatusConcern, bool bDynamicWidget, bool bKeepDynamicWidget);// 0x3aa1a84
	void SubShowHideEvent(out const FString[] WidgetPathList);// 0x3aa1970
	void SubDefaultSceneCamera(const int sceneCameraIndex);// 0x3aa18f4
	void SubDefaultChildUI(out const FString[] childList);// 0x3aa17e0
	void SubDefaultBaseUI(FString baseUI);// 0x3aa1738
	void SubCollapseWidgetList(FString RootWidgetName, out FString[] ChildWidgetNames);// 0x3aa15bc
	void SetWidgetZorder(const int Index, const int ZOrder);// 0x3aa1508
	void RestoreWidgetZorder(const int Index);// 0x3aa148c
	void RestoreAllWidgetZorder();// 0x3aa1478
	bool IsTopStackPanel();// 0x3aa1440
	bool IsPushedPanel();// 0x3aa1408
	bool InCombatState();// 0x3aa13d0
	void HandleUIMessageNoFetch(FString UIMessage);// 0x3aa1328
	void HandleUIMessage(FString UIMessage);// 0x3aa1280
	void HandleStopAsyncLoad();// 0x3aa126c
	void HandleDynamicDestroy();// 0x3aa1258
	void HandleDynamicCreationInternal(bool isAsyncLoad);// 0x3aa11d4
	void HandleDynamicCreation(bool isAsyncLoad);// 0x3aa1150
	void HandleCollapseWidgetList(FString RootWidgetName);// 0x3aa10a8
	FString GetTopStackPanelSrcTag();// 0x3aa1004
	FString GetTopStackPanelDstTag();// 0x3aa0f60
	FString GetGameStatus();// 0x3aa0ebc
	void ChangeSubUIWidgetList(out const GameWidgetConfig[] InWidgetConfigList);// 0x3aa0e18
	void AddToTopStackPanel();// 0x3aa0e04

--------------------------------
Class: LuaContext.Actor.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x3c8, Size: 8]
	Object* OwningObject;//[Offset: 0x3d0, Size: 8]
	ScriptContextComponent* ScriptContextComponent;//[Offset: 0x3d8, Size: 8]

--------------------------------
Class: ScriptContextComponent.ActorComponent.Object
	LuaStateWrapper* OwningLuaStateWrapper;//[Offset: 0x118, Size: 8]
	void PushScriptArrayIndexData(FString ParamName, int Index);// 0x66cdd64
	void PushOneScriptPropertyValues(FString ParamName);// 0x66cdc28
	void PushAllScriptPropertyValues();// 0x66cdc0c
	void FetchScriptArrayIndexData(FString ParamName, int Index);// 0x66cda9c
	void FetchOneScriptPropertyValues(FString ParamName);// 0x66cd960
	void FetchAllScriptPropertyValues();// 0x66cd944
	void CallScriptFunctionWithoutFetch(FString FunctionName);// 0x66cd810
	void CallScriptFunction(FString FunctionName);// 0x66cd6dc

--------------------------------
Class: DynamicWidgetAsyncLoadData
	FString WidgetKey;//[Offset: 0x0, Size: 16]
	DynamicWidgetData DynamicWidgetData;//[Offset: 0x10, Size: 152]
	delegate Callback;//[Offset: 0xa8, Size: 16]

--------------------------------
Class: DynamicWidgetData
	bool bAutoDestory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString MountModule;//[Offset: 0x8, Size: 16]
	InGameWidgetData InGameWidgetData;//[Offset: 0x18, Size: 128]

--------------------------------
Class: InGameWidgetData
	int bAutoShow;//[Offset: 0x0, Size: 4]
	GameWidgetConfig GameWidgetConfig;//[Offset: 0x8, Size: 48]
	WidgetMountData WidgetMountData;//[Offset: 0x38, Size: 72]

--------------------------------
Class: WidgetMountData
	Margin MarginData;//[Offset: 0x0, Size: 16]
	Anchors AnchorsData;//[Offset: 0x10, Size: 16]
	Vector2D Position;//[Offset: 0x20, Size: 8]
	FString MountName;//[Offset: 0x28, Size: 16]
	FString MountOuterName;//[Offset: 0x38, Size: 16]

--------------------------------
Class: LuaTaskComponent.ActorComponent.Object
	XTaskSyncData[] TaskSyncList;//[Offset: 0x110, Size: 16]
	XTaskSaveData[] TaskList;//[Offset: 0x120, Size: 16]
	DailyTaskAwardInfo[] RewardList;//[Offset: 0x130, Size: 16]
	delegate TaskSyncListRefreshDelegate;//[Offset: 0x140, Size: 16]
	delegate OnEndPlay;//[Offset: 0x150, Size: 16]
	delegate TaskAreaStateChangeDelegate;//[Offset: 0x160, Size: 16]
	XTaskExtraSyncData[] TaskExtraSyncData;//[Offset: 0x170, Size: 16]
	delegate TaskExtraSyncDataRefreshDelegate;//[Offset: 0x180, Size: 16]
	void SyncTaskList(out XTaskSaveData[] SyncList);// 0x3409104
	void SetTestTaskReportData();// 0x34090f0
	void RPC_Server_GetReward(int TaskId);// 0x3409040
	void RPC_Client_GetRewardRes(bool IsSuccess);// 0x3408fb4
	void RPC_Client_ExitTaskArea(int TaskId);// 0x3408f30
	void RPC_Client_EnterTaskArea(int TaskId, float Duration);// 0x3408e70
	void RefreshSyncTaskList();// 0x3408e5c
	void RefreshPlayerDailyTaskStoreInfo();// 0x3408e48
	void RecordRewardInfo(int TaskId, TaskAwardItemInfo[] AwardList);// 0x3408cd4
	void OnRep_TaskSyncList();// 0x3408cc0
	void OnRep_TaskExtraSyncData();// 0x3408cac
	void ModifyTaskExtraSyncData(int TaskId, XTaskExtraSyncData SaveData);// 0x3408bc0
	void ModifyTaskBySaveData(int TaskId, XTaskSaveData SaveData);// 0x3408af0
	void ModifyTask(int TaskId, int Progress, int State);// 0x3408a00
	void ModifySyncTask(int TaskId);// 0x3408984
	bool IsTaskDone(int TaskId);// 0x34088f4
	enum GetTaskStateByTaskId(int TaskId);// 0x3408868
	XTaskExtraSyncData GetTaskExtraDataByTaskId(int TaskId);// 0x34087cc
	XTaskSyncData GetTaskDataByTaskId(int TaskId);// 0x3408734
	DailyTaskReportInfo GetDailyTaskReportData();// 0x34085a8
	void DeleteTask(int TaskId);// 0x340852c
	void CollapseTaskInfo();// 0x3408518
	void AddTask(int TaskId, int Aim);// 0x3408464

--------------------------------
Class: XTaskSyncData
	int TaskId;//[Offset: 0x0, Size: 4]
	int CurProgress;//[Offset: 0x4, Size: 4]
	int AimProgress;//[Offset: 0x8, Size: 4]
	enum State;//[Offset: 0xc, Size: 1]
	enum TaskType;//[Offset: 0xd, Size: 1]

--------------------------------
Class: XTaskSaveData
	int TaskId;//[Offset: 0x0, Size: 4]
	int CurProgress;//[Offset: 0x4, Size: 4]
	int AimProgress;//[Offset: 0x8, Size: 4]
	int FobidShow;//[Offset: 0xc, Size: 4]
	enum State;//[Offset: 0x10, Size: 1]
	enum TaskType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: XTaskExtraSyncData
	int TaskId;//[Offset: 0x0, Size: 4]
	enum TaskType;//[Offset: 0x4, Size: 1]
	bool TimerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float CurAccumTime;//[Offset: 0x8, Size: 4]
	float TotalTime;//[Offset: 0xc, Size: 4]
	float ServerStartTime;//[Offset: 0x10, Size: 4]
	Vector Position;//[Offset: 0x14, Size: 12]

--------------------------------
Class: QuickSignComponent_BP_C.QuickSignComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x600, Size: 8]
	void GetTeamateColor(FString PlayerName, out LinearColor Color, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, LinearColor CallFunc_GetPlayerTeamColor_Result, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerState*[] CallFunc_GetTeamMatePlayerStateList_OutList, int CallFunc_Array_Length_ReturnValue, STExtraPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x4033584
	void SetDistanceText(Vector HidPosition, enum MsgType, FString CallFunc_GetLocalizeText_Text, bool CallFunc_NotEqual_VectorVector_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, FText CallFunc_Conv_StringToText_ReturnValue2, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Contains_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* CallFunc_GetCurPlayerCharacter_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Dist2D_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_Round_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_FloatFloat_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x4033584
	void GetAudioEventAndBank(int audioID, int ActorId, out FString OutBankName, out FString OutEventName, FString BankName, FString EventName, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, PlayerController* CallFunc_GetPlayerController_ReturnValue, FText CallFunc_Format_ReturnValue, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess, FString CallFunc_GetActorBankByID_BankName);// 0x4033584
	void GetLocalizeActorID(int AudioKey, out int ActorId, int CallFunc_Divide_IntInt_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsActorInGlobal_IsExist, bool CallFunc_IsBankExistByActorID_bExist, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	void PlayVoiceAndText(QuickSignMsg msgItem, bool IsSelf, int SignType, int TextId, int audioID, int ActorId, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_GetLocalizeActorID_ActorID, int CallFunc_GetAudioIDSignType_AudioID, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_GetAudioEventAndBank_OutBankName, FString CallFunc_GetAudioEventAndBank_OutEventName, QuickSignMsg K2Node_MakeStruct_QuickSignMsg, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, int CallFunc_GetQuickSignText_TextID, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess2, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_GetStrArgument_StrArgument, FString CallFunc_OrganizeMsg_MsgString);// 0x4033584
	int GetVoiceAudioID(enum MsgType, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_GetQuickSignAudio_AudioID);// 0x4033584
	void GetStrArgument(FString QuickSignID, FString StringParam, out FString StrArgument, FString AttachSlotName, FString FinalString, FString CallFunc_GetLocalizeBattleText_Text, FString CallFunc_GetLocalizeBattleText_Text2, bool CallFunc_NotEqual_StrStr_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, ItemRecordData CallFunc_GetItemRecord_ReturnValue2, bool CallFunc_NotEqual_StrStr_ReturnValue3, bool CallFunc_NotEqual_IntInt_ReturnValue2, FString[] CallFunc_ParseIntoArray_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue4, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_GetLocalizeBattleText_Text3, FString CallFunc_GetLocalizeBattleText_Text4, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue5, int ___int_Array_Index_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FString CallFunc_Array_Get_Item, int CallFunc_Conv_StringToInt_ReturnValue3, bool CallFunc_IsNumeric_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizeBattleText_Text5, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x4033584
	void OrganizeMsg(int TextId, FString PlayerName, bool IsSelf, FString StrParam, Vector HitPos, enum MsgType, out FString MsgString, FText DistanceText, FString msgContent, bool CallFunc_Contains_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_StartsWith_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_GetLocalizeText_Text, FString CallFunc_SelectString_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Concat_StrStr_ReturnValue3, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FText CallFunc_Conv_StringToText_ReturnValue2, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetLocalizeText_Text2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_GetLocalizeText_Text3, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11);// 0x4033584
	void PickupWrapperActorHandle(FString Param, out QuickSignMark MarkInfo, int CallFunc_Conv_StringToInt_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_IsNumeric_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x4033584
	bool GenerateMarkInfo(out QuickSignMsg msgItem, out QuickSignMark MarkInfo, QuickSignMark QuickSignMarkInfo, bool K2Node_SwitchString_CmpSuccess, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark);// 0x4033584
	void LoadConfig(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_QuickSignCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool IsSelf);// 0x4033584
	void PlayVoiceCD(float Duration);// 0x4033584
	void ReportQuickSign(out const QuickSignMsg msgItem);// 0x4033584
	void ExecuteUbergraph_QuickSignComponent_BP(int EntryPoint, int ___int_Variable, QuickSignMsg K2Node_Event_MsgItem2, bool K2Node_Event_IsSelf, float K2Node_CustomEvent_Duration, QuickSignMsg K2Node_Event_MsgItem, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue);// 0x4033584
	UAEDataTable* QuickSignDataTable;//[Offset: 0x608, Size: 8]
	<FString,BP_STRUCT_QuickSignCfg_type> QuickTableConfigMap;//[Offset: 0x610, Size: 80]
	<FString,QuickSignMark> QuickMarkMap;//[Offset: 0x660, Size: 80]
	FString TeammateColor;//[Offset: 0x6b0, Size: 16]
	FString SelfColor;//[Offset: 0x6c0, Size: 16]
	FString ColonChar;//[Offset: 0x6d0, Size: 16]
	FString EndChar;//[Offset: 0x6e0, Size: 16]
	FString SelfName;//[Offset: 0x6f0, Size: 16]
	QuickSignMsg CurrMsg;//[Offset: 0x700, Size: 104]
	bool IsPlayVoiceCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	<enum,int> WeaponAttachmentSocketTextIDMap;//[Offset: 0x770, Size: 80]
	<int,int> DefaultAudioMap;//[Offset: 0x7c0, Size: 80]
	FText distanceString;//[Offset: 0x810, Size: 24]
	bool isShowDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	enum[] ShowDistanceTypes;//[Offset: 0x830, Size: 16]
	int CurDistance;//[Offset: 0x840, Size: 4]
	int MaxShowVoiceDistance;//[Offset: 0x844, Size: 4]

--------------------------------
Class: ChatComponent_BP_C.ChatComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3b0, Size: 8]
	FString GetLuaFilePath();// 0x4033584
	void AddMarkAndPlaySound(FString Name, FString Content, int MsgID, int ItemId, FString PlayerKeyString, bool bIsMe, bool PlaySound, bool ShowChat, float Distance);// 0x4033584
	void AddOneMarkToUIInner(bool bIsMe, FString TextMsg, const TemBPDataAddr[] K2Node_MakeArray_Array, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x4033584
	void IsActorInGlobal(int ActorId, out bool IsExist);// 0x4033584
	void CheckIsAddReplyBtn(int MsgID, FString PlayerName, <int> NeedReplyMsgID, <int> K2Node_MakeVariable_MakeVariableOutput, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, TemBPDataAddr[] K2Node_MakeArray_Array, bool CallFunc_Set_Contains_ReturnValue);// 0x4033584
	void GetSpecialDistanceString(FString SendPlayerName, out FText DistanceText, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, PlayerController* CallFunc_GetPlayerController_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Contains_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, STExtraBaseCharacter* CallFunc_GetCurPlayerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Vector CallFunc_K2_GetActorLocation_ReturnValue, STExtraPlayerState*[] CallFunc_GetTeamMatePlayerStateList_OutList, int CallFunc_Array_Length_ReturnValue, STExtraPlayerState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue3, STExtraBaseCharacter* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_Dist2D_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, int CallFunc_Round_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x4033584
	void DistanceToString(int Distance, int MsgID, FString PlayerName, out FText DistanceText, bool IsShowDistanceMsgContainsID, FText CallFunc_GetSpecialDistanceString_DistanceText, int CallFunc_Percent_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_Greater_IntInt_ReturnValue, bool ___bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetLocalizeText_Text, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, QuickChatFlag CallFunc_Array_Get_Item, FText CallFunc_Conv_StringToText_ReturnValue2, FText CallFunc_Format_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2, bool CallFunc_Contains_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	void GetActorNameByID(int ActorId, out FString actorName, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x4033584
	void GetLocalText(int MsgID, int ItemId, FString PlayerKeyString, int Distance, FString PlayerName, out FString ContentMsg, FString Msg2Split, int RealTextID, FText CallFunc_DistanceToString_DistanceText, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_GetLocalizeVoiceText_Text, FString CallFunc_Conv_TextToString_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue2, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_NotEqual_IntInt_ReturnValue2, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue3, int CallFunc_Divide_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, int ___int_Array_Index_Variable, BP_STRUCT_VoiceText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, PlayerController* CallFunc_GetPlayerController_ReturnValue, FString CallFunc_GetCurrentLanguage_ReturnValue, STExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, STExtraPlayerState*[] CallFunc_GetTeamMatePlayerStateList_OutList, int ___int_Loop_Counter_Variable, STExtraPlayerState* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_GetLocalizeVoiceText_Text2, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_SelectString_ReturnValue, FString CallFunc_Split_LeftS2, FString CallFunc_Split_RightS2, bool CallFunc_Split_ReturnValue2, FString CallFunc_SelectString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12);// 0x4033584
	void LoadVehicleModeQuickMsg(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int ___int_Array_Index_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable3, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Array_Get_Item, BP_STRUCT_VehicleWarModeMsgIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item2, FString CallFunc_Array_Get_Item3, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue3);// 0x4033584
	void IsVehicleWarMode(out bool IsVehicleWarMode, GameStateBase* CallFunc_GetGameState_ReturnValue, VehicleWarGameState* K2Node_DynamicCast_AsVehicle_War_Game_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void InitActorIDList();// 0x4033584
	void UpdateInfectModeMsgByPlayerType(enum PlayerType, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, int ___int_Array_Index_Variable3, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable4, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Loop_Counter_Variable4, PVEInfectionPlayerState* K2Node_DynamicCast_AsPVEInfection_Player_State, bool K2Node_DynamicCast_bSuccess2, int CallFunc_Add_IntInt_ReturnValue4, bool CallFunc_IsValid_ReturnValue, enum CallFunc_ConvertSubTypeToMainType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, int CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Percent_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, int CallFunc_Percent_IntInt_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio3, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue4, int CallFunc_Percent_IntInt_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue4, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio4, int CallFunc_Array_AddUnique_ReturnValue2);// 0x4033584
	void LoadInfectModeQuickMsg(FString NewLocalVar, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Loop_Counter_Variable4, int ___int_Loop_Counter_Variable5, int CallFunc_Add_IntInt_ReturnValue4, int CallFunc_Add_IntInt_ReturnValue5, int ___int_Array_Index_Variable3, delegate K2Node_CreateDelegate_OutputDelegate, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, PVEInfectionGameState* K2Node_DynamicCast_AsPVEInfection_Game_State, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable4, PlayerController* CallFunc_GetPlayerController_ReturnValue, int ___int_Array_Index_Variable5, PVEInfectionPlayerState* K2Node_DynamicCast_AsPVEInfection_Player_State, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, enum CallFunc_GetMainType_ReturnValue, int CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue3, BP_STRUCT_InfectModeMsgIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item2, FString CallFunc_Array_Get_Item3, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue3, FString[] CallFunc_ParseIntoArray_ReturnValue3, FString[] CallFunc_ParseIntoArray_ReturnValue4, FString CallFunc_Array_Get_Item4, FString CallFunc_Array_Get_Item5, int CallFunc_Conv_StringToInt_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue4, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Length_ReturnValue4, int CallFunc_Array_Length_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue5);// 0x4033584
	void IsInfectMode(out bool IsInfectMode, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x4033584
	void InitChatFlagList(enum ___byte_Variable, enum ___byte_Variable2, enum ___byte_Variable3, int ___int_Variable, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, UAEDataTable* CallFunc_GetDataTable_ReturnValue, bool CallFunc_IsValid_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_FlagIDCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item2, enum K2Node_Select_Default, int CallFunc_Conv_StringToInt_ReturnValue2, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, float CallFunc_Conv_StringToFloat_ReturnValue, QuickChatFlag K2Node_MakeStruct_QuickChatFlag, int CallFunc_Array_AddUnique_ReturnValue2);// 0x4033584
	void SetTurnplateQuickChatList(int AlternateTextID, int RealTextID, int chatTextID, int[] TextIDList, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, QuickChatIDAndAudio K2Node_SetFieldsInStruct_StructOut, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_VoiceText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, int CallFunc_Array_Add_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x4033584
	void GetActorBankByID(int ActorId, out FString BankName, UAEDataTable* CallFunc_GetDataTable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VoiceActorCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x4033584
	void SwitchActorAudio(int ActorId, int LocalActorID);// 0x4033584
	void LoadSingleAudio(int chatTextID, FString CallFunc_Conv_IntToString_ReturnValue, QuickChatOption K2Node_MakeStruct_QuickChatOption, FText CallFunc_Conv_StringToText_ReturnValue, int CallFunc_Array_Add_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, delegate K2Node_CreateDelegate_OutputDelegate, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue);// 0x4033584
	void LoadAllAudio(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int ___int_Array_Index_Variable2, int ___int_Array_Index_Variable3, int ___int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, int ___int_Array_Index_Variable4, int ___int_Loop_Counter_Variable4, int CallFunc_Add_IntInt_ReturnValue4, int ___int_Loop_Counter_Variable5, int ___int_Loop_Counter_Variable6, int CallFunc_Add_IntInt_ReturnValue5, int CallFunc_Add_IntInt_ReturnValue6, int ___int_Array_Index_Variable5, int ___int_Array_Index_Variable6, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, int CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue4, int CallFunc_Array_Get_Item5, int CallFunc_Array_Length_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue5, int CallFunc_Array_Get_Item6, int CallFunc_Array_Length_ReturnValue6, bool CallFunc_Less_IntInt_ReturnValue6);// 0x4033584
	void CreateAudio(Object* audio, int resID, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void SetQuickChatList(int AlternateTextID, int RealTextID, int chatTextID, int[] TextIDList, int chatQuickID, bool bFind, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, const TemBPDataAddr[] K2Node_MakeArray_Array, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, QuickChatIDAndAudio K2Node_SetFieldsInStruct_StructOut, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_VoiceText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, BP_STRUCT_SupplyText_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, bool K2Node_SwitchEnum_CmpSuccess);// 0x4033584
	void InitFromSetting(SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2);// 0x4033584
	void AddOneMsgToUIInner(bool isMe, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void PlaySound(int MsgID, int ActorId, int LocalActorID, bool CallFunc_IsActorInGlobal_IsExist, bool CallFunc_IsBankExistByActorID_bExist, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Set_Contains_ReturnValue, FString CallFunc_GetPublishRegion_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, bool CallFunc_EqualEqual_StrStr_ReturnValue2, FText CallFunc_Format_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, FString CallFunc_GetActorBankByID_BankName, bool CallFunc_BooleanAND_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue);// 0x4033584
	void AddToArray(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2);// 0x4033584
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x4033584
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x4033584
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x4033584
	void SendDirtyFilter(FString Name, FString Content, bool isMe);// 0x4033584
	void AddOneMsgToUI1(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x4033584
	void OnFilterFinish(FString filterText);// 0x4033584
	void CloseChatHistoryList();// 0x4033584
	void UpdateQuickItemText(int MsgID, int resID, int alternateMsgID);// 0x4033584
	void ReportBattleChat(int MsgID, FString Msg, int msgExtraParam);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void OnLiveStateChanged(enum LiveState);// 0x4033584
	void AddOneMarkToUI(FString Name, FString Content, int MsgID, int audioID, int ItemId, FString PlayerKeyString, bool isMe, bool PlaySound, bool ShowChat, float Distance);// 0x4033584
	void ExecuteUbergraph_ChatComponent_BP(int EntryPoint, FString K2Node_Event_name, FString K2Node_Event_content, int K2Node_Event_msgID, int K2Node_Event_audioID, int K2Node_Event_itemID, FString K2Node_Event_PlayerKeyString, bool K2Node_Event_isMe, bool K2Node_Event_playSound, bool K2Node_Event_ShowChat, float K2Node_Event_Distance, FString K2Node_Event_str_gid3, FString K2Node_Event_sender_name3, FString K2Node_Event_chat_content, bool K2Node_Event_self_msg, FString K2Node_Event_str_gid2, FString K2Node_Event_sender_name2, Actor* CallFunc_GetOwner_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess, FString K2Node_Event_str_gid, FString K2Node_Event_sender_name, bool K2Node_Event_bReply, Actor* CallFunc_GetOwner_ReturnValue2, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller2, bool K2Node_DynamicCast_bSuccess2, Actor* CallFunc_GetOwner_ReturnValue3, FString K2Node_Event_name3, FString K2Node_Event_content3, bool K2Node_Event_isMe3, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller3, bool K2Node_DynamicCast_bSuccess3, Actor* CallFunc_GetOwner_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller4, bool K2Node_DynamicCast_bSuccess4, FString K2Node_Event_name2, FString K2Node_Event_content2, int K2Node_Event_msgID4, int K2Node_Event_audioID2, int K2Node_Event_itemID2, FString K2Node_Event_PlayerKeyString2, bool K2Node_Event_isMe2, bool K2Node_Event_playSound2, bool K2Node_Event_ShowChat2, float K2Node_Event_Distance2, int CallFunc_FTrunc_ReturnValue, FString CallFunc_GetLocalText_ContentMsg, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString K2Node_Event_filterText, Actor* CallFunc_GetOwner_ReturnValue5, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller5, bool K2Node_DynamicCast_bSuccess5, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess6, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue6, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess7, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller6, bool K2Node_DynamicCast_bSuccess8, int K2Node_Event_msgID3, int K2Node_Event_resID, int K2Node_Event_alternateMsgID, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue3, FString CallFunc_GetLocalizeText_Text, FString CallFunc_GetLocalizeText_Text2, FString CallFunc_GetLocalizeText_Text3, FString CallFunc_GetLocalizeText_Text4, FString CallFunc_GetLocalizeText_Text5, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_GetLocalizeText_Text6, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue9, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess9, FString CallFunc_GetLocalizeText_Text7, FString CallFunc_GetLocalizeText_Text8, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_GetLocalizeText_Text9, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, FString CallFunc_Concat_StrStr_ReturnValue15, bool CallFunc_IsInfectMode_IsInfectMode, FString CallFunc_Concat_StrStr_ReturnValue16, FString CallFunc_Concat_StrStr_ReturnValue17, FString CallFunc_Concat_StrStr_ReturnValue18, bool CallFunc_IsVehicleWarMode_IsVehicleWarMode, int K2Node_Event_MsgID2, FString K2Node_Event_msg, int K2Node_Event_msgExtraParam, GameInstance* CallFunc_GetGameInstance_ReturnValue2, BP_STRUCT_LocalizeRes_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess10, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess11, bool CallFunc_IsDedicatedServer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue19, FString CallFunc_Concat_StrStr_ReturnValue20, FString CallFunc_Concat_StrStr_ReturnValue21, bool CallFunc_Set_Contains_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue22, FString CallFunc_GetPublishRegion_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, enum K2Node_CustomEvent_LiveState, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess12, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3);// 0x4033584
	FString addToUIText;//[Offset: 0x3b8, Size: 16]
	FString[] UITextArray;//[Offset: 0x3c8, Size: 16]
	int FirstIndex;//[Offset: 0x3d8, Size: 4]
	FString currContentMsg;//[Offset: 0x3e0, Size: 16]
	bool bInitSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	FString FriendChatStrGid;//[Offset: 0x3f8, Size: 16]
	FString FriendChatSenderName;//[Offset: 0x408, Size: 16]
	FString FriendChatContent;//[Offset: 0x418, Size: 16]
	bool FriendChatSelfMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	FString FriendInviteStrGid;//[Offset: 0x430, Size: 16]
	FString FriendInviteSenderName;//[Offset: 0x440, Size: 16]
	FString FriendInviteBattleTextValue;//[Offset: 0x450, Size: 16]
	FString FriendReplyStrGid;//[Offset: 0x460, Size: 16]
	FString FriendReplySenderName;//[Offset: 0x470, Size: 16]
	bool FriendReplyReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 1]
	int UI_MsgID;//[Offset: 0x484, Size: 4]
	FString UI_ItemName;//[Offset: 0x488, Size: 16]
	int UI_AlternateMsgID;//[Offset: 0x498, Size: 4]
	SettingConfig_C* SettingConfig;//[Offset: 0x4a0, Size: 8]
	int[] ChatFlagTypeList;//[Offset: 0x4a8, Size: 16]
	int[] TmpChatIDList;//[Offset: 0x4b8, Size: 16]
	bool bIsInfectMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	int[] ChatQuikcTextIDList_HumanMenu;//[Offset: 0x4d0, Size: 16]
	int[] ChatQuikcTextIDList_HumanTurnplate;//[Offset: 0x4e0, Size: 16]
	int[] ChatQuikcTextIDList_ZombieMenu;//[Offset: 0x4f0, Size: 16]
	int[] ChatQuikcTextIDList_ZombieTurnplate;//[Offset: 0x500, Size: 16]
	int[] InfectModePlayerType;//[Offset: 0x510, Size: 16]
	enum CurInfectModePlayerType;//[Offset: 0x520, Size: 1]
	QuickChatIDAndAudio QuickChat;//[Offset: 0x524, Size: 12]
	<int> GlobalActorIDList;//[Offset: 0x530, Size: 80]
	bool bIsVehicleWarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	int[] ChatQuikcTextIDList_VWMenu;//[Offset: 0x588, Size: 16]
	int[] ChatQuikcTextIDList_VWTurnplate;//[Offset: 0x598, Size: 16]
	int TraceItemID;//[Offset: 0x5a8, Size: 4]
	<int> MuteOnGlobal;//[Offset: 0x5b0, Size: 80]
	<int> MuteMsgOnBluehole;//[Offset: 0x600, Size: 80]
	int[] SpecialShowDistanceMsgID;//[Offset: 0x650, Size: 16]
	int MaxShowVoiceDistance;//[Offset: 0x660, Size: 4]
	bool bIsMarkText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	FString MarkText;//[Offset: 0x668, Size: 16]
	FString[] MarkTextArray;//[Offset: 0x678, Size: 16]

--------------------------------
Class: BP_STRUCT_VoiceActorCfg_type
	int ActorItemID_1_7EA64A805D4CF7C83F9ED7C20956DD34;//[Offset: 0x0, Size: 4]
	int ActorID_2_66EEA6C00EC097255E83F50D0C7CE884;//[Offset: 0x4, Size: 4]
	FString ActorName_5_084563C0289004B337AECB5D0CE91C45;//[Offset: 0x8, Size: 16]
	int SortKey_9_023E1980778A370A5BD689D703B81F89;//[Offset: 0x18, Size: 4]
	int IsUnLock_11_5BD327406959D86F0700649705BBD32B;//[Offset: 0x1c, Size: 4]
	bool IsPlayInGlobal_12_14DF9BC04FFBCB15583BB67E0769332C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	FString OpenTime_15_14046D8013EB228646C4CC690BBB4AE5;//[Offset: 0x28, Size: 16]
	FString BankDepend_16_1453384006553C13591DBA5107495114;//[Offset: 0x38, Size: 16]
	FString BankName_17_72DF248073CEC0563E7F45210B58A305;//[Offset: 0x48, Size: 16]
	bool IsLimitRegion_19_4FEB4D00214E87C4181FAD020238523E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool IsShowUntilGet_20_24C807804D192C0A34758E20002987D4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	FString OpenPublish_21_4EEE3F807004AA067FA56CB009D6AB28;//[Offset: 0x60, Size: 16]
	FString OpenRegion_22_25FEC2C01D13489B7B49BCAA0B6D05EE;//[Offset: 0x70, Size: 16]

--------------------------------
Class: BP_STRUCT_VoiceText_type
	int VoiceTextId_0_6FC5DE403E05E86B27664BDF0A63A1A4;//[Offset: 0x0, Size: 4]
	FString VoiceTextValue_1_0BE5D24055E8B9FB76C1783D0A09E585;//[Offset: 0x8, Size: 16]

--------------------------------
Class: BP_STRUCT_SupplyText_type
	int ChatID_0_55CE55406726E16144B6347C05241D24;//[Offset: 0x0, Size: 4]
	int AlternateTextID_1_1256E6805FE8A11C280F72C50934EDE4;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BP_STRUCT_VehicleWarModeMsgIDCfg_type
	FString MenuChatIDList_0_07E0C1C07AEC576705A4CE190E543504;//[Offset: 0x0, Size: 16]
	FString TurnplateChatIDList_1_2B152C4068877793720058A50A584EB4;//[Offset: 0x10, Size: 16]

--------------------------------
Class: VehicleWarGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	int MatchCountDownTime;//[Offset: 0x1284, Size: 4]
	VehicleBattleResultData CurResultData;//[Offset: 0x1288, Size: 104]
	delegate OnShowGeneralTip;//[Offset: 0x1300, Size: 16]
	delegate OnMatchCountDownTime;//[Offset: 0x1310, Size: 16]
	float FightStartTime;//[Offset: 0x1320, Size: 4]
	int RoundNum;//[Offset: 0x1324, Size: 4]
	int IconID;//[Offset: 0x1328, Size: 4]
	int InstanceID;//[Offset: 0x132c, Size: 4]
	Vector CircleCenter;//[Offset: 0x1330, Size: 12]
	float Radius;//[Offset: 0x133c, Size: 4]
	VehicleGemRoundData[] RoundData;//[Offset: 0x1340, Size: 16]
	Vector[] TreasureLocations;//[Offset: 0x1350, Size: 16]
	delegate OnGemStoneNumChangeDelegate;//[Offset: 0x1360, Size: 16]
	delegate OnDestoryVehicleCountDelegate;//[Offset: 0x1370, Size: 16]
	int GemStoneForMatchPoint;//[Offset: 0x1380, Size: 4]
	delegate OnGemStoneForMatchPointChangedDelegate;//[Offset: 0x1388, Size: 16]
	delegate OnVehicleEatSuperDelegate;//[Offset: 0x1398, Size: 16]
	VehicleWarRankData[] TeamRankData;//[Offset: 0x13a8, Size: 16]
	delegate OnVehicleWarRankDataDelegate;//[Offset: 0x13b8, Size: 16]
	<int,VehicleWarRouteDetailData> RouteDetailMap;//[Offset: 0x13c8, Size: 80]
	VehicleWarRouteDetailData[] TeamRankDetailData;//[Offset: 0x1418, Size: 16]
	XTPoint*[] RoutePoints;//[Offset: 0x1428, Size: 16]
	float RouteLength;//[Offset: 0x1438, Size: 4]
	VehicleWarTeamKillData[] VehicleWarTeamKillDataArray;//[Offset: 0x1440, Size: 16]
	delegate OnVehicleWarTeamKillDataDelegate;//[Offset: 0x1450, Size: 16]
	VehicleWarCampGroup[] VehicleWarCampGroupArray;//[Offset: 0x1460, Size: 16]
	delegate OnVehicleWarCampGroupArrayDelegate;//[Offset: 0x1470, Size: 16]
	VehicleWarGemMatchState VehicleWarGemMatchState;//[Offset: 0x1480, Size: 12]
	delegate VehicleWarGemMatchStateDelegate;//[Offset: 0x1490, Size: 16]
	delegate VehicleWarKillInfoDelegate;//[Offset: 0x14a0, Size: 16]
	delegate BoxRoundNumDelegate;//[Offset: 0x14b0, Size: 16]
	delegate FightStartTimeDelegate;//[Offset: 0x14c0, Size: 16]
	delegate OnTeamContinueKillNumChangedDelegate;//[Offset: 0x14d0, Size: 16]
	int MatchPointContinueTime;//[Offset: 0x14e0, Size: 4]
	int ShowContinueKillEffectNumV1;//[Offset: 0x14e4, Size: 4]
	int ShowContinueKillEffectNumV2;//[Offset: 0x14e8, Size: 4]
	bool IsCampMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ec, Size: 1]
	int RemainMatchTime;//[Offset: 0x14f0, Size: 4]
	delegate OnRemainMatchTimeDelegate;//[Offset: 0x14f8, Size: 16]
	delegate OnVehicleAddHPDelegate;//[Offset: 0x1508, Size: 16]
	BattleOpenSequencerInfo OpenSequencerInfo;//[Offset: 0x1520, Size: 80]
	delegate OpenSequencerStartVehicleDelegate;//[Offset: 0x1570, Size: 16]
	FString SequenceName;//[Offset: 0x1588, Size: 16]
	<int,uint32> TeamVehicleDriverMap;//[Offset: 0x1598, Size: 80]
	<int,TeamMedalTotalKillData> TeamTotalKillMap;//[Offset: 0x15e8, Size: 80]
	<int,int> TeamContinueKillMap;//[Offset: 0x1638, Size: 80]
	<int,TeamMedalBeAttackedData> TeamRecentBeAttackedMap;//[Offset: 0x1688, Size: 80]
	<int,VehicleBeAttackMapData> TeamBeAttackedMap;//[Offset: 0x16d8, Size: 80]
	float FarMedalRadius;//[Offset: 0x1728, Size: 4]
	float AssistMedalTime;//[Offset: 0x172c, Size: 4]
	float CooperationMedalTime;//[Offset: 0x1730, Size: 4]
	AutoChangeSeatData[] AutoChangeSeatDataArray;//[Offset: 0x1738, Size: 16]
	int WinCampID;//[Offset: 0x1748, Size: 4]
	float GamePlayTime;//[Offset: 0x174c, Size: 4]
	int MatchPointNum;//[Offset: 0x1750, Size: 4]
	int WinCampTreasureScore;//[Offset: 0x1754, Size: 4]
	int FailCampTreasureScore;//[Offset: 0x1758, Size: 4]
	<int,VehicleBattleVehicleStatiscs> VehicleStaticsMap;//[Offset: 0x1760, Size: 80]
	<int,VehicleBattleWeaponStatiscs> WeaponStatiscsMap;//[Offset: 0x17b0, Size: 80]
	int VehicleStuckResetTimes;//[Offset: 0x1800, Size: 4]
	int HealthPropItemTimes;//[Offset: 0x1804, Size: 4]
	int NormalPropItemTimes;//[Offset: 0x1808, Size: 4]
	int SuperPropItemTimes;//[Offset: 0x180c, Size: 4]
	<int,int> TeamLastChooseVehicleIDMap;//[Offset: 0x1810, Size: 80]
	<int,int> TeamLastChooseVehicleShapeMap;//[Offset: 0x1860, Size: 80]
	VehicleCampKills[] VehicleCampsKills;//[Offset: 0x18b0, Size: 16]
	delegate OnVehicleCampsKillsChangedDelegate;//[Offset: 0x18c0, Size: 16]
	TireConfig*[] TireConfigCahce;//[Offset: 0x18d0, Size: 16]
	void VehicleTakeDamageForMedal(uint32 KillerPlayKey, int VictimTeamID, float Damage);// 0x37294e8
	void UpdateRank();// 0x37294d4
	void ShowOpenSequencer(float showTime);// 0x3729458
	void ShowBoxWarning();// 0x3729444
	void SetWinCamp(int InCampId);// 0x37293c8
	void SetUseWeaponID(uint32 PlayerKey, int FirstWeaponID, int SecondWeaponID);// 0x37292d8
	void SetGemMatchState(int GemMatchState, int CampID, float ServerEndTime);// 0x37291e8
	void SetCanAutoChangeSeat(int TeamID, bool bCanAutoChangeSeat);// 0x3729128
	void ServerUpdateVechicleResult();// 0x3729114
	void RecordTeamChooseVehicle(int TeamID, int VehicleID, int VehicleShapeType);// 0x3729024
	void OnRep_VehicleWarTeamRankData();// 0x3729010
	void OnRep_VehicleWarTeamKillDataArray();// 0x3728ffc
	void OnRep_VehicleWarRemainMatchTime();// 0x3728fe8
	void OnRep_VehicleWarGemMatchState();// 0x3728fd4
	void OnRep_VehicleWarCampGroupArray();// 0x3728fc0
	void OnRep_VehicleCampsKills();// 0x3728fac
	void OnRep_RoundNum();// 0x3728f98
	void OnRep_MatchPointContinueTime();// 0x3728f84
	void OnRep_MatchCountDownTime();// 0x3728f70
	void OnRep_GemStoneForMatchPoint();// 0x3728f5c
	void OnRep_FightStartTime();// 0x3728f48
	void OnContinueKillNumChanged(int CampID, int TeamID);// 0x3728e94
	void InitRoutePoint();// 0x3728e80
	void HideBoxWarning();// 0x3728e6c
	float GetVehicleTotalDamageByPlayerKey(int VictimTeamID, uint32 KillerPlayerKey);// 0x3728da8
	int GetTotalContinueKillNum(int CampID, int TeamID);// 0x3728ce4
	VehicleWarRankData GetTeamRankDataByTeamId(int TeamID);// 0x3728c48
	int GetTeamKillDataIndexByTeamID(int TeamID);// 0x3728bbc
	bool GetTeamKillDataByTeamID(int TeamID, out VehicleWarTeamKillData TeamKillData);// 0x3728ad8
	STExtraPlayerState*[] GetPlayerStateListByTeamId(int TeamID);// 0x37289e4
	bool GetPlayersByCampAndTeamID(int CampID, int TeamID, out VehicleWarTeamGroupInfo OutPlayers);// 0x37288a0
	int GetPlayerChoose(uint32 PlayerKey);// 0x3728814
	bool GetIsCooperationKill(int VicTeamId, int KillerTeamId, uint32 KillerPlayerKey);// 0x3728710
	FString GetFormatRemainTimeText();// 0x372866c
	Vector GetFootOfPerpendicularXY(out Vector OutPoint, out Vector BeginPoint, out Vector EndPoint);// 0x3728530
	VehicleWarRankData[] GetCampSortedTeamRankData();// 0x372848c
	int GetCampKillNum(int CampID);// 0x3728400
	bool GetCampGroupByCampID(int CampID, out VehicleWarCampGroup VehicleWarCampGroup);// 0x372829c
	void GenerateVehicleRole(VehicleWarPlayerState* PS);// 0x3728220
	void GenerateCampInfo();// 0x372820c
	void FinishTeamRoute(int TeamID);// 0x3728190
	void DropWeapons(uint32 PlayerKey);// 0x3728114
	void CountAttackForMedal(int KillerTeamId, STExtraBaseCharacter* Killer, int VictimTeamID, int DamageType);// 0x3727fe8
	void ClearAllPlayerStateChoose();// 0x3727fd4
	void CheckPlayIsDriver(VehicleWarPlayerState* PS);// 0x3727f58
	void ChangeMatchCountDownTime();// 0x3727f44
	bool CanAutoChangeSeat(int TeamID);// 0x3727eb4
	void BroadcastTemporaryMessage(FString Message);// 0x3727e04
	void BroadcastGeneralTip(int TipType, FString AdditionParam);// 0x3727d14
	void BroadCast_OnVehicleEatSuper(int CampID);// 0x3727c90
	void BroadCast_OnVehicleAddHP(STExtraVehicleWarVehicle* Vehicle);// 0x3727c0c
	void BeginMatchCountDown(int TimeSeconds);// 0x3727b90
	void AddWeaponKillTimes(int WeaponId, int Num);// 0x3727adc
	void AddWeaponDamage(int WeaponId, float Damage);// 0x3727a24
	void AddWeaponChooseTimes(int WeaponId, int Num);// 0x3727970
	void AddVehicleWeaponDamage(int VehicleType, float Damage);// 0x37278b8
	void AddVehicleKillTimes(int VehicleType, int Num);// 0x3727804
	void AddVehicleHitDamage(int VehicleType, float Damage);// 0x372774c
	void AddVehicleDeadTimes(int VehicleType, int Num);// 0x3727698
	void AddVehicleChooseTimes(int VehicleType, int Num);// 0x37275e4
	void AddTeamBeDestoryedNum(int TeamID, int AddDestoryCount);// 0x3727530
	void AddMedalForPlayer(STExtraBaseCharacter* Killer, FString MedalMessage);// 0x3727448
	void AddCooperationBuffToTeam(int TeamID);// 0x37273cc
	void AddCampKillNum(int CampID, int Num);// 0x3727318

--------------------------------
Class: VehicleBattleResultData
	VehiclePlayerBattleResultData[] playerList;//[Offset: 0x0, Size: 16]
	VehicleCampKills[] VehicleCampKills;//[Offset: 0x10, Size: 16]
	int WinCampID;//[Offset: 0x20, Size: 4]
	float GamePlayTime;//[Offset: 0x24, Size: 4]
	int MatchPointNum;//[Offset: 0x28, Size: 4]
	int WinCampTreasureScore;//[Offset: 0x2c, Size: 4]
	int FailCampTreasureScore;//[Offset: 0x30, Size: 4]
	VehicleBattleVehicleStatiscs[] VehicleStaticsList;//[Offset: 0x38, Size: 16]
	VehicleBattleWeaponStatiscs[] WeaponStatiscsList;//[Offset: 0x48, Size: 16]
	int VehicleStuckResetTimes;//[Offset: 0x58, Size: 4]
	int HealthPropItemTimes;//[Offset: 0x5c, Size: 4]
	int NormalPropItemTimes;//[Offset: 0x60, Size: 4]
	int SuperPropItemTimes;//[Offset: 0x64, Size: 4]

--------------------------------
Class: VehiclePlayerBattleResultData
	uint64 UId;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]
	FString PlayerName;//[Offset: 0x10, Size: 16]
	int TeamID;//[Offset: 0x20, Size: 4]
	int CampID;//[Offset: 0x24, Size: 4]
	int Score;//[Offset: 0x28, Size: 4]
	int Distance;//[Offset: 0x2c, Size: 4]
	int KillNum;//[Offset: 0x30, Size: 4]
	int AssistKillNum;//[Offset: 0x34, Size: 4]
	int DriverKillNum;//[Offset: 0x38, Size: 4]
	int ShooterKillNum;//[Offset: 0x3c, Size: 4]
	int BeKillNum;//[Offset: 0x40, Size: 4]
	int TeamKillNum;//[Offset: 0x44, Size: 4]
	int GetItemNum;//[Offset: 0x48, Size: 4]
	int OpenTreasureNum;//[Offset: 0x4c, Size: 4]
	int ShootTreasureNum;//[Offset: 0x50, Size: 4]
	UseItemFlow[] UseItemFlow;//[Offset: 0x58, Size: 16]
	int StrikeKillVehicleNum;//[Offset: 0x68, Size: 4]
	int ItemKillVehicleNum;//[Offset: 0x6c, Size: 4]
	int GunKillVehicleNum;//[Offset: 0x70, Size: 4]
	float CauseDamage;//[Offset: 0x74, Size: 4]
	int GemStoneCount;//[Offset: 0x78, Size: 4]
	bool HasFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	float FinishedTime;//[Offset: 0x80, Size: 4]
	bool IsEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	int VehicleID;//[Offset: 0x88, Size: 4]
	int VehicleShapeType;//[Offset: 0x8c, Size: 4]
	float ExitPlayerPlayTime;//[Offset: 0x90, Size: 4]

--------------------------------
Class: VehicleCampKills
	int CampID;//[Offset: 0x0, Size: 4]
	int Kills;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleBattleVehicleStatiscs
	int VehicleID;//[Offset: 0x0, Size: 4]
	int ChooseTimes;//[Offset: 0x4, Size: 4]
	int DeadTimes;//[Offset: 0x8, Size: 4]
	int Kills;//[Offset: 0xc, Size: 4]
	float VehicleWeaponDamage;//[Offset: 0x10, Size: 4]
	float HitDamage;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleBattleWeaponStatiscs
	int WeaponId;//[Offset: 0x0, Size: 4]
	int ChooseTimes;//[Offset: 0x4, Size: 4]
	int TotalDamage;//[Offset: 0x8, Size: 4]
	int Kills;//[Offset: 0xc, Size: 4]

--------------------------------
Class: VehicleGemRoundData
	float RoundTime;//[Offset: 0x0, Size: 4]
	int TreasureNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleWarRankData
	int RoundNo;//[Offset: 0x0, Size: 4]
	int TeamID;//[Offset: 0x4, Size: 4]
	int Distance;//[Offset: 0x8, Size: 4]
	int Score;//[Offset: 0xc, Size: 4]
	int GemStoneNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleWarRouteDetailData
	int TeamID;//[Offset: 0x0, Size: 4]
	int RoundNo;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	bool IsFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float FinishTime;//[Offset: 0x10, Size: 4]
	Vector ProjectionPoint;//[Offset: 0x14, Size: 12]
	int CompleteLogicCircleNum;//[Offset: 0x20, Size: 4]
	int[] LastRoutePointRecord;//[Offset: 0x28, Size: 16]

--------------------------------
Class: VehicleWarTeamKillData
	int TeamID;//[Offset: 0x0, Size: 4]
	int ContinueKillNum;//[Offset: 0x4, Size: 4]
	int TotalKillNum;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleWarCampGroup
	int CampID;//[Offset: 0x0, Size: 4]
	VehicleWarTeamGroupInfo[] CampGroups;//[Offset: 0x8, Size: 16]

--------------------------------
Class: VehicleWarTeamGroupInfo
	int TeamID;//[Offset: 0x0, Size: 4]
	VehicleWarPlayerState*[] TeamPlayers;//[Offset: 0x8, Size: 16]

--------------------------------
Class: VehicleWarPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	NetVehilceProps NetVehicleProps;//[Offset: 0x1788, Size: 56]
	delegate OnVehilcePropsChangeDel;//[Offset: 0x17c0, Size: 16]
	int GemStoneNum;//[Offset: 0x17d0, Size: 4]
	delegate OnPlayerGemStoneNumChangeDelegate;//[Offset: 0x17d8, Size: 16]
	int TeamGemStoneNum;//[Offset: 0x17e8, Size: 4]
	delegate OnTeamGemStoneNumChangeDelegate;//[Offset: 0x17f0, Size: 16]
	int DestoryVehicleCount;//[Offset: 0x1800, Size: 4]
	delegate OnDestoryVehicleCountChangeDelegate;//[Offset: 0x1808, Size: 16]
	int BeDestoryedCount;//[Offset: 0x1818, Size: 4]
	int DriverKillNum;//[Offset: 0x181c, Size: 4]
	int ShooterKillNum;//[Offset: 0x1820, Size: 4]
	int AssistKillNum;//[Offset: 0x1824, Size: 4]
	int ContinueDestoryVehicleCount;//[Offset: 0x1828, Size: 4]
	delegate OnContinueDestoryVehicleCountChangeDelegate;//[Offset: 0x1830, Size: 16]
	STExtraVehicleWarVehicle* CurAttackSignTarget;//[Offset: 0x1840, Size: 8]
	STExtraVehicleWarVehicle* CurAttackTarget;//[Offset: 0x1848, Size: 8]
	float CurCumulativeDamage;//[Offset: 0x1850, Size: 4]
	float CumulativeDamageForSign;//[Offset: 0x1854, Size: 4]
	float CurCumulativeDamageTime;//[Offset: 0x1858, Size: 4]
	float CumulativeDamageCalcuTime;//[Offset: 0x185c, Size: 4]
	float SignExistTime;//[Offset: 0x1860, Size: 4]
	float SignStartTime;//[Offset: 0x1864, Size: 4]
	delegate OnCurAttackSignTargetChangeDelegate;//[Offset: 0x1868, Size: 16]
	int OpenTreasureNum;//[Offset: 0x1878, Size: 4]
	int ShootTreasureNum;//[Offset: 0x187c, Size: 4]
	int StrikeKillVehicleNum;//[Offset: 0x1880, Size: 4]
	int ItemKillVehicleNum;//[Offset: 0x1884, Size: 4]
	int GunKillVehicleNum;//[Offset: 0x1888, Size: 4]
	float TotalCauseDamage;//[Offset: 0x188c, Size: 4]
	int ClientTotalDamage;//[Offset: 0x1890, Size: 4]
	delegate OnClientTotalDamageChangeDelegate;//[Offset: 0x1898, Size: 16]
	delegate OnBeDestoryedCountChangeDelegate;//[Offset: 0x18a8, Size: 16]
	bool PlayerIsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b8, Size: 1]
	delegate OnPlayerDriverStateChanged;//[Offset: 0x18c0, Size: 16]
	float VehicleSpawnServerTime;//[Offset: 0x18d0, Size: 4]
	bool PlayerHasLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18d4, Size: 1]
	float VehicleMoveRecordInstance;//[Offset: 0x18d8, Size: 4]
	int VehicleMoveFlowCount;//[Offset: 0x18e0, Size: 4]
	int VehicleN2oSkillId;//[Offset: 0x18e4, Size: 4]
	int VehicleCarPetSkillId;//[Offset: 0x18e8, Size: 4]
	bool CanShowMatchData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1910, Size: 1]
	bool FinishedShowMatchData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1911, Size: 1]
	bool CanShowUseItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1912, Size: 1]
	bool CanShowFireGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1913, Size: 1]
	bool FinishedShowFireGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1914, Size: 1]
	bool CanShowEyesGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1915, Size: 1]
	bool CanShowBuffGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1916, Size: 1]
	bool CanShowAnimFrameGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1917, Size: 1]
	float PlayerExitTime;//[Offset: 0x1918, Size: 4]
	bool PlayerHasExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191c, Size: 1]
	void SetVehicleSpawnServerTime(float STime);// 0x372c76c
	void OnRep_VehicleProps();// 0x372c758
	void OnRep_TeamGemStoneNum();// 0x372c744
	void OnRep_PlayerIsDriver();// 0x372c730
	void OnRep_GemStoneNum();// 0x372c71c
	void OnRep_DestoryVehicleCount();// 0x372c708
	void OnRep_CurAttackSignTarget();// 0x372c6f4
	void OnRep_ContinueDestoryVehicleCount();// 0x372c6e0
	void OnRep_ClientTotalDamage();// 0x372c6cc
	void OnRep_BeDestoryedCount();// 0x372c6b8
	int GetVehiclePropsItem(int Index);// 0x372c62c
	void DispatchPlayerExitEvent();// 0x372c610

--------------------------------
Class: NetVehilceProps
	int ItemNum;//[Offset: 0x0, Size: 4]
	ItemDefineID[] PropsItem;//[Offset: 0x8, Size: 16]
	VehicleWarEquipItem[] ChooseEquip;//[Offset: 0x18, Size: 16]
	int PlayerChoose;//[Offset: 0x28, Size: 4]
	int FirstWeaponID;//[Offset: 0x2c, Size: 4]
	int SecondWeaponID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: VehicleWarEquipItem
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleWarVehicle.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	VehicleWarLockData VehicleWarLockData;//[Offset: 0x1698, Size: 16]
	byte CurVehicleWarBeLockedState;//[Offset: 0x16a8, Size: 1]
	delegate OnVehicleWarBeLockedStateChangedDelegate;//[Offset: 0x16b0, Size: 16]
	delegate OnVehicleWarKillInfoDelegate;//[Offset: 0x16c0, Size: 16]
	VehicleWarVehicleReceiveDamageRecord[] VehicleWarVehicleReceiveDamageRecordArray;//[Offset: 0x16d0, Size: 16]
	delegate ForceShowVehicleHPBarDelegate;//[Offset: 0x16e0, Size: 16]
	float DamageRecordExitTime;//[Offset: 0x16f0, Size: 4]
	float TickVehicleTireFrictionInterval;//[Offset: 0x16f4, Size: 4]
	float DefaultTurnOverBroadcastTime;//[Offset: 0x16fc, Size: 4]
	float CurTurnOverBroadcastTime;//[Offset: 0x1700, Size: 4]
	delegate OnVehicleWarVehicleTurnOver;//[Offset: 0x1708, Size: 16]
	float MinTurnOverDegree;//[Offset: 0x1718, Size: 4]
	float CheckBlockInterval;//[Offset: 0x171c, Size: 4]
	float BlockResetInterval;//[Offset: 0x1724, Size: 4]
	float MaxBlockVelocity;//[Offset: 0x1728, Size: 4]
	float MaxBlockNotInAirWheelNums;//[Offset: 0x172c, Size: 4]
	int MaxCheckTurnOverCount;//[Offset: 0x1734, Size: 4]
	int MaxCheckBlockCount;//[Offset: 0x173c, Size: 4]
	delegate OnVehicleWarVehicleBlockedDelegate;//[Offset: 0x1748, Size: 16]
	bool bOpenShieldHitProtectEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1758, Size: 1]
	int ShieldSkillID;//[Offset: 0x175c, Size: 4]
	SoftObjectPath ShieldHitProtectEffectPath;//[Offset: 0x1760, Size: 24]
	bool bTeammateVehicleDamageFeedback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1778, Size: 1]
	bool bEnableActivePhysicsWhenChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1779, Size: 1]
	PhysicsAsset* SimplePhysicsAsset;//[Offset: 0x1780, Size: 8]
	bool bEnableCheckBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1788, Size: 1]
	void UpdateOwnerLockedState();// 0x3658dc0
	void TickCheckBlockAndAutoTurn();// 0x3658dac
	void StartAllowAvatarOutline();// 0x3658d98
	void SetVehicleMass(float NewMass, bool bAddToCurrent);// 0x3658cd8
	void ServerChangeWeaponRotation(STExtraWeapon* Weapon, Rotator InRot);// 0x3658c18
	void Server_ChangeLockState(byte InState, Actor* CurLockTarget);// 0x3658b28
	void RPCServerChangeWeaponRotation(STExtraWeapon* Weapon, Rotator Rot);// 0x3658a34
	void ReqResetBlockPosition();// 0x36589d4
	void RemoveOfflineBuffToPlayer(STExtraPlayerCharacter* InPlayer);// 0x4033584
	void ProcessAvatarOutline();// 0x36589b8
	void OnVehicleWarKillInfoDelegate__DelegateSignature(out const VehicleWarKillInfoData VehicleWarKillInfoData);// 0x4033584
	void OnVehicleWarBeLockedStateChangedDelegate__DelegateSignature(byte VehicleWarBeLockedState);// 0x4033584
	void OnRep_VehicleWarVehicleReceiveDamageRecordArray();// 0x36589a4
	void OnRep_VehicleWarLockData();// 0x3658990
	bool IsVehicleTurnOver();// 0x3658958
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x36587e4
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x36586e8
	void ForceShowVehicleHPBarDelegate__DelegateSignature(bool bNewShow);// 0x4033584
	void DelayNotifyClientVehicleWarRespawnCallback();// 0x36586d4
	void CheckOnePlayerInFighting();// 0x36586c0
	void ChangeToSimplePhysicsAsset();// 0x36586ac
	void BroadCastFatalDamage(const VehicleWarKillInfoData VehicleWarKillInfoData);// 0x36585cc
	void BPTickCheckBlockAndAutoTurn();// 0x4033584
	void AddOfflineBuffToPlayer(STExtraPlayerCharacter* InPlayer);// 0x4033584

--------------------------------
Class: VehicleWarLockData
	byte LockState;//[Offset: 0x0, Size: 1]
	Actor* LockTarget;//[Offset: 0x8, Size: 8]

--------------------------------
Class: VehicleWarVehicleReceiveDamageRecord
	int DamageFromTeamID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: VehicleWarKillInfoData
	int DamageType;//[Offset: 0x0, Size: 4]
	int AdditionalParam;//[Offset: 0x4, Size: 4]
	FString CauserName;//[Offset: 0x8, Size: 16]
	FString CauserNation;//[Offset: 0x18, Size: 16]
	FString VictimName;//[Offset: 0x28, Size: 16]
	FString VictimNation;//[Offset: 0x38, Size: 16]
	FString KillerIconURL;//[Offset: 0x48, Size: 16]
	int KillerPlayerLevel;//[Offset: 0x58, Size: 4]
	int KillerAvatarBoxId;//[Offset: 0x5c, Size: 4]
	float TotalDamage;//[Offset: 0x60, Size: 4]
	bool IsCooperationKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	int KillerTeamId;//[Offset: 0x68, Size: 4]
	int VictimTeamID;//[Offset: 0x6c, Size: 4]
	float ThisDamage;//[Offset: 0x70, Size: 4]

--------------------------------
Class: VehicleWarGemMatchState
	enum GemMatchState;//[Offset: 0x0, Size: 1]
	int CampID;//[Offset: 0x4, Size: 4]
	float CampWinServerTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TeamMedalTotalKillData
	<int> TotalKillData;//[Offset: 0x0, Size: 80]

--------------------------------
Class: TeamMedalBeAttackedData
	<uint32,float> BeAttackedMap;//[Offset: 0x0, Size: 80]

--------------------------------
Class: VehicleBeAttackMapData
	<uint32,float> BeAttackedMap;//[Offset: 0x0, Size: 80]

--------------------------------
Class: AutoChangeSeatData
	int TeamID;//[Offset: 0x0, Size: 4]
	bool bCanAutoChangeSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: PVEInfectionPlayerState.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	float CurExp;//[Offset: 0x17e0, Size: 4]
	int CurLevel;//[Offset: 0x17e8, Size: 4]
	int MainSkillId;//[Offset: 0x17ec, Size: 4]
	bool IsUseMainSkillInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f0, Size: 1]
	int CurAssistLevel;//[Offset: 0x17f4, Size: 4]
	delegate OnPlayerLevelChanged;//[Offset: 0x17f8, Size: 16]
	delegate OnPlayerExpChanged;//[Offset: 0x1808, Size: 16]
	int SelectCombieCount;//[Offset: 0x1828, Size: 4]
	delegate InfectionClientOnRespawn;//[Offset: 0x1830, Size: 16]
	delegate InfectionClientOnBeKilled;//[Offset: 0x1840, Size: 16]
	bool bSwitchTeammateStateList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1850, Size: 1]
	enum PawnSubType;//[Offset: 0x1851, Size: 1]
	int ShowKillNum;//[Offset: 0x1854, Size: 4]
	delegate OnInfectionKillNumChanged;//[Offset: 0x1858, Size: 16]
	delegate OnLevelUp;//[Offset: 0x1868, Size: 16]
	enum RespawnBeforeType;//[Offset: 0x1878, Size: 1]
	float PlayerRoundStartTime;//[Offset: 0x187c, Size: 4]
	float PlayerMoveDistance;//[Offset: 0x1880, Size: 4]
	float PlayerMoveTime;//[Offset: 0x1884, Size: 4]
	float[] PlayerMoveSpeedArray;//[Offset: 0x1888, Size: 16]
	int PlayerJumpHeightMax;//[Offset: 0x1898, Size: 4]
	int PlayerJumpSpeedMax;//[Offset: 0x189c, Size: 4]
	uint32 RoundStartTime;//[Offset: 0x18a0, Size: 4]
	int8 RoleTypeStart;//[Offset: 0x18a4, Size: 1]
	int8 RoleTypeEnd;//[Offset: 0x18a5, Size: 1]
	int RoleTypeSwitchTime;//[Offset: 0x18a8, Size: 4]
	float AbsorbTime;//[Offset: 0x18ac, Size: 4]
	bool IsInAbsorb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b0, Size: 1]
	bool IsInfectionDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b1, Size: 1]
	bool IsClientChangeDeathPosi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b2, Size: 1]
	void StartMainSkill();// 0x34aadbc
	void SetPawnSubType(enum SubType);// 0x34aad40
	void ServerRPC_ClientStartRound(int64 ClientRoundStartTime);// 0x34aac90
	void ServerRPC_ActorGuidTrigger_TLog(int GuidID);// 0x34aabe0
	void ServerRPC_ActorGuidClose_TLog(int GuidID, bool bArriveClose);// 0x34aaadc
	void RespawnBufferReplay();// 0x34aaac8
	void ResetOnRoundStart();// 0x34aaab4
	void OnRep_ShowKillNum();// 0x34aaaa0
	void OnRep_PawnSubType();// 0x34aaa8c
	void OnRep_CurLevel();// 0x34aaa78
	void OnRep_CurExp();// 0x34aaa64
	void OnRep_CurAssistLevel();// 0x34aaa50
	void OnNewRound();// 0x34aaa34
	void OnClientRemoveBuff(int BuffID, int SkillID);// 0x34aa978
	void OnClientAddBuff(int BuffID, int SkillID);// 0x34aa8bc
	bool IsPlayer();// 0x34aa884
	bool IsCanUseMainSkill();// 0x34aa84c
	int GetShowKillNum();// 0x34aa818
	enum GetMainType();// 0x34aa7e4
	float GetMainSkillInterval();// 0x34aa7b0
	int GetMainSkillId();// 0x34aa77c
	float GetMainSkillCD();// 0x34aa748
	float GetExpPercent();// 0x34aa714
	enum ConvertSubTypeToMainType(enum SubType);// 0x34aa688
	void ClientRPC_OnRevengerSpawn();// 0x34aa66c
	void ClientRPC_OnRespawnInfectionPawn(enum PrevType, enum NewType);// 0x34aa5ac
	void ClientRPC_OnKilled(Pawn* VictimPawn, const DamageType* DamageType, bool bIsRoundEnd);// 0x34aa4ac
	void ClientRPC_OnGeneraterMaternalZombies(enum CurSubType);// 0x34aa428
	void ClientRPC_OnBeKilled(Pawn* KillerPawn, bool bIsRoundEnd);// 0x34aa360
	void ClientRPC_BroadcastInfectionLevelUp(int Level);// 0x34aa2dc
	void ClientRoundStart();// 0x34aa2c8
	void AddShowKillNum(int AddNum);// 0x34aa24c
	void AddExpOnNextFrame();// 0x34aa238
	void AddCurLevelUpBuffCallback();// 0x34aa224

--------------------------------
Class: PVEInfectionGameState.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	int RespawnInvincibleTime;//[Offset: 0x1284, Size: 4]
	delegate OnInfectionTeamMarkGlobalNotifyDelegate;//[Offset: 0x1288, Size: 16]
	delegate GameStart;//[Offset: 0x1298, Size: 16]
	delegate GameEnd;//[Offset: 0x12a8, Size: 16]
	delegate RoundStart;//[Offset: 0x12b8, Size: 16]
	delegate RoundEnd;//[Offset: 0x12c8, Size: 16]
	delegate RoundCountDownEnd;//[Offset: 0x12d8, Size: 16]
	delegate OnPlayerPawnActive;//[Offset: 0x12e8, Size: 16]
	delegate OnInfectionSelfChangeType;//[Offset: 0x12f8, Size: 16]
	delegate OnPlayerUseSkill;//[Offset: 0x1308, Size: 16]
	delegate OnInfectionPlayerAssistNumChanged;//[Offset: 0x1318, Size: 16]
	InfectionGainExpInfo PlayerGainExpConfig;//[Offset: 0x1328, Size: 28]
	InfectionGainExpInfo ZombieGainExpConfig;//[Offset: 0x1344, Size: 28]
	<int,InfectionRoleLevelMap> RoleLevelConfig;//[Offset: 0x1360, Size: 80]
	int CurRoundNum;//[Offset: 0x13b0, Size: 4]
	enum CurRoundState;//[Offset: 0x13b4, Size: 1]
	enum CurInfectionBGMStateType;//[Offset: 0x13b5, Size: 1]
	int MaxRoundNum;//[Offset: 0x13b8, Size: 4]
	delegate OnCurRoundNumChanged;//[Offset: 0x13c0, Size: 16]
	float BeforeRoundTime;//[Offset: 0x13d0, Size: 4]
	FString RoleInfoTablePath;//[Offset: 0x13d8, Size: 16]
	FString ScoreInfoTablePath;//[Offset: 0x13e8, Size: 16]
	int MaxPersonScore;//[Offset: 0x13f8, Size: 4]
	int MaxMonsterScore;//[Offset: 0x13fc, Size: 4]
	float RoundEndWorldTimeSeconds;//[Offset: 0x1400, Size: 4]
	int RoundPlayerNum;//[Offset: 0x1404, Size: 4]
	int RoundZombieNum;//[Offset: 0x1408, Size: 4]
	int RoundAllPlayerNum;//[Offset: 0x140c, Size: 4]
	int RoundAllZombieNum;//[Offset: 0x1410, Size: 4]
	int PersonWinRoundNum;//[Offset: 0x1414, Size: 4]
	int ZombieWinRoundNum;//[Offset: 0x1418, Size: 4]
	int KillZombieNum;//[Offset: 0x141c, Size: 4]
	int InfectedHumanNum;//[Offset: 0x1420, Size: 4]
	int BecomeHeroNum;//[Offset: 0x1424, Size: 4]
	int CurRoundWinRole;//[Offset: 0x1428, Size: 4]
	float CurRoundStartTime;//[Offset: 0x142c, Size: 4]
	delegate ShowRoundResultDelegate;//[Offset: 0x1430, Size: 16]
	InfectionRoundResultData CurRoundResultData;//[Offset: 0x1440, Size: 280]
	int CurRoundResultShowTime;//[Offset: 0x1558, Size: 4]
	delegate OnInfectionKillInfoChanged;//[Offset: 0x1560, Size: 16]
	<uint32,InfectionPlayerScoreData> InfectionPlayerStateDataMap;//[Offset: 0x1570, Size: 80]
	<int,InfectionRoundTlogCountData> InfectionRoundTlogCountDataMap;//[Offset: 0x15c0, Size: 80]
	<int,InfectionRoleTableRow> RoleTableMap;//[Offset: 0x1610, Size: 80]
	delegate RoundPlayerNumChanged;//[Offset: 0x1660, Size: 16]
	delegate RoundZombieNumChanged;//[Offset: 0x1670, Size: 16]
	<FString,InfectionScoreTableRow> ScoreTableMap;//[Offset: 0x1680, Size: 80]
	delegate ShowInfectionKillTipsDelegate;//[Offset: 0x16d0, Size: 16]
	delegate InfectionRoundStateChanged;//[Offset: 0x16e0, Size: 16]
	delegate InfectionBGMStateChanged;//[Offset: 0x16f0, Size: 16]
	int HaveShowRoundResultNum;//[Offset: 0x1700, Size: 4]
	void ShowRoundResult(InfectionRoundResultData RoundData, int showTime);// 0x34a6ca8
	void ShowInfectionKillTips__DelegateSignature(FString KillerName, FString VictimName, FString killerKey, FString victimKey, enum killerSubType, enum victimSubType);// 0x4033584
	void SetRoundZombieNum(int Num);// 0x34a6c2c
	void SetRoundPlayerNum(int Num);// 0x34a6bb0
	void ServerOnRoundStart(int RoundNum);// 0x34a6b34
	void ServerOnRoundEnd(int RoundNum);// 0x34a6ab8
	void OnUseSpringJump(STExtraPlayerCharacter* Character, int SpringID);// 0x34a6a00
	void OnRoundZombieNumChange();// 0x34a69ec
	void OnRoundPlayerNumChange();// 0x34a69d8
	void OnRep_RoundZombieNumChange();// 0x34a69c4
	void OnRep_RoundStateChanged();// 0x34a69b0
	void OnRep_RoundPlayerNumChange();// 0x34a699c
	void OnRep_ReadyStateTime();// 0x34a6980
	void OnRep_InfectionBGMStateChanged();// 0x34a696c
	void OnRep_CurRoundNum();// 0x34a6958
	void OnPlayerSkillStart(STExtraBaseCharacter* SkillOwner, int SkillID);// 0x34a6898
	void OnKillInfoChanged(out const InfectionContinuousKillInfo Info);// 0x34a67cc
	void OnKilledTlog(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x34a669c
	void OnKilled(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x34a656c
	void OnFinishRestartPlayer(Controller* NewPlayer, out const Rotator StartRotation);// 0x34a64a8
	void OnCharacterTakeHeadShot(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x34a63ec
	void OnCharacterTakeDamage(STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState, float Damage);// 0x34a62f4
	void MulticastRPC_InfectionKillInfoChanged(const InfectionContinuousKillInfo Info);// 0x34a6230
	void MulticastRPC_InfectionCharacterList(const STExtraBaseCharacter*[] CharacterList);// 0x34a6180
	void MulticastRPC_BroadcastTeamMarkNotify(const PVEInfectionPlayerState*[] PlayerStateArray);// 0x34a60d0
	bool IsVisibleType(enum OriginType, enum TargetType);// 0x34a6004
	void InitScoreTable();// 0x34a5ff0
	void InitRoleTable();// 0x34a5fdc
	FString GetSkillIcon(enum SubType);// 0x34a5ee8
	InfectionRoundResultPlayerShowData GetRoundResultByPlayerKey(FString PlayerKey);// 0x34a5cb0
	int GetRoundPlayerNum();// 0x34a5c7c
	InfectionPlayerScoreData GetPlayerScoreData(uint32 PlayerKey);// 0x34a5b78
	InfectionRoundScoreData GetPlayerRoundScoreData(uint32 PlayerKey, int RoundNum);// 0x34a5aa8
	float GetLeftRoundTime();// 0x34a5a74
	InfectionRoleTableRow GetInfectionRoleInfo(enum FindPawnType);// 0x34a59c0
	enum GetCurRoundWinCamp();// 0x34a598c
	InfectionRoundTlogCountData GetCurRoundTlogCountData();// 0x34a5954
	STExtraBaseCharacter* GetCharacterByPlayerKey(FString PlayerKey);// 0x34a5818
	<STExtraBaseCharacter*> GetAllCharacterSetWithoutSelf();// 0x34a56d8
	<STExtraBaseCharacter*> GetAllCharacterSet();// 0x34a5598
	STExtraBaseCharacter*[] GetAllCharacter();// 0x34a54f4
	enum ConvertSubTypeToMainType(enum SubType);// 0x34a5468
	STExtraBaseCharacter* ClientGetCharacterByPlayerKey(FString PlayerKey);// 0x34a532c
	void ClientBroadcast_InfectionShowKilledTip(FString KillerName, FString VictimName, uint32 killerKey, uint32 victimKey, enum killerSubType, enum victimSubType);// 0x34a5128
	void CheckInitMatrixEffect(PlayerState* PState);// 0x34a50ac
	void BroadcastClientOnRoundStart(int RoundNum);// 0x34a5028
	void BroadcastClientOnRoundEnd(int RoundNum);// 0x34a4fa4
	void BeginShowRoundResult(int RoundNum, int showTime);// 0x34a4ef0
	void AddUseSpringJumpTimes(uint32 PlayerKey, int Times);// 0x34a4e34
	void AddUseEnhancerTimes(uint32 PlayerKey, int Times);// 0x34a4d78
	void AddRoundWinScore();// 0x34a4d64
	void AddRevengerPlayerKillWinTimes(uint32 PlayerKey, int Times);// 0x34a4cb0
	void AddPlayerScore(Controller* ScorePlayer, Controller* VictimPlayer, FString ScoreType, float DamagePoint);// 0x34a4ab4
	void AddDamageToRevengerPlayer(uint32 PlayerKey, int Damage);// 0x34a4a00
	void AddDamageToMonster(uint32 PlayerKey, int Damage);// 0x34a494c
	void AddChooseZombieTimes(uint32 PlayerKey, enum SubType, int Times);// 0x34a4858
	void AddBeRevengerPlayerTimes(uint32 PlayerKey, int Times);// 0x34a47a4
	void AddBePersonWinTimes(uint32 PlayerKey, int Times);// 0x34a46f0
	void AddBeMonsterWinTimes(uint32 PlayerKey, int Times);// 0x34a463c
	void AddBeMatrixMonsterTimes(uint32 PlayerKey, int Times);// 0x34a4588

--------------------------------
Class: InfectionGainExpInfo
	int KillExp;//[Offset: 0x0, Size: 4]
	int AssistExp;//[Offset: 0x4, Size: 4]
	float AssistExpAcceptRange;//[Offset: 0x8, Size: 4]
	float DamageExpRate;//[Offset: 0xc, Size: 4]
	float HealthExpRate;//[Offset: 0x10, Size: 4]
	float SecondExp;//[Offset: 0x14, Size: 4]
	float GainExpInterval;//[Offset: 0x18, Size: 4]

--------------------------------
Class: InfectionRoleLevelMap
	<int,InfectionRoleLevelInfo> LevelMap;//[Offset: 0x0, Size: 80]
	int MaxLevel;//[Offset: 0x50, Size: 4]

--------------------------------
Class: InfectionRoleLevelInfo
	int Exp;//[Offset: 0x0, Size: 4]
	int BuffID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: InfectionRoundResultData
	int RoundNum;//[Offset: 0x0, Size: 4]
	enum WinType;//[Offset: 0x4, Size: 1]
	InfectionRoundResultPlayerShowData BestPerson;//[Offset: 0x8, Size: 128]
	InfectionRoundResultPlayerShowData BestMonster;//[Offset: 0x88, Size: 128]
	InfectionRoundResultPlayerShowData[] AllDataArray;//[Offset: 0x108, Size: 16]

--------------------------------
Class: InfectionRoundResultPlayerShowData
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	FString PlayerName;//[Offset: 0x8, Size: 16]
	int TeamID;//[Offset: 0x18, Size: 4]
	InfectionPlayerInfo InfectionPlayerInfo;//[Offset: 0x20, Size: 72]
	InfectionShowRoundScoreData RoundScoreData;//[Offset: 0x68, Size: 20]

--------------------------------
Class: InfectionPlayerInfo
	uint64 UId;//[Offset: 0x0, Size: 8]
	FString UIDString;//[Offset: 0x8, Size: 16]
	FString PlayerName;//[Offset: 0x18, Size: 16]
	FString iconUrl;//[Offset: 0x28, Size: 16]
	byte gender;//[Offset: 0x38, Size: 1]
	byte PlatformGender;//[Offset: 0x39, Size: 1]
	int PlayerLevel;//[Offset: 0x3c, Size: 4]
	int SegmentLevel;//[Offset: 0x40, Size: 4]
	int AvatarBoxId;//[Offset: 0x44, Size: 4]

--------------------------------
Class: InfectionShowRoundScoreData
	int RoundNo;//[Offset: 0x0, Size: 4]
	int MonsterScore;//[Offset: 0x4, Size: 4]
	int PersonScore;//[Offset: 0x8, Size: 4]
	int KillMonsters;//[Offset: 0xc, Size: 4]
	int KillPersons;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InfectionPlayerScoreData
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	FString PlayerName;//[Offset: 0x8, Size: 16]
	int TeamID;//[Offset: 0x18, Size: 4]
	float PlayerEnterGameTime;//[Offset: 0x1c, Size: 4]
	InfectionPlayerInfo InfectionPlayerInfo;//[Offset: 0x20, Size: 72]
	<int,InfectionRoundScoreData> RoundScoreData;//[Offset: 0x68, Size: 80]

--------------------------------
Class: InfectionRoundScoreData
	int RoundNo;//[Offset: 0x0, Size: 4]
	float MonsterScore;//[Offset: 0x4, Size: 4]
	float PersonScore;//[Offset: 0x8, Size: 4]
	int KillMonsters;//[Offset: 0xc, Size: 4]
	int KillPersons;//[Offset: 0x10, Size: 4]
	float RoundDamage;//[Offset: 0x14, Size: 4]
	int BeMatrixMonsterTimes;//[Offset: 0x18, Size: 4]
	int BeRevengerPlayerTimes;//[Offset: 0x1c, Size: 4]
	uint32 Headshot4Avenger;//[Offset: 0x20, Size: 4]
	int RevengerPlayerKillWinTimes;//[Offset: 0x24, Size: 4]
	int BeMonsterWinTimes;//[Offset: 0x28, Size: 4]
	int BePersonWinTimes;//[Offset: 0x2c, Size: 4]
	int UseSpringJumpTimes;//[Offset: 0x30, Size: 4]
	int UseEnhancerTimes;//[Offset: 0x34, Size: 4]
	int DamageToMonster;//[Offset: 0x38, Size: 4]
	int DamageToRevengerPlayer;//[Offset: 0x3c, Size: 4]
	int ChooseZombieFirstTimes;//[Offset: 0x40, Size: 4]
	int ChooseZombieSecondTimes;//[Offset: 0x44, Size: 4]
	int ChooseZombieThirdTimes;//[Offset: 0x48, Size: 4]
	uint32 PlayerKilled;//[Offset: 0x4c, Size: 4]
	uint32 PlayerHurtCount;//[Offset: 0x50, Size: 4]
	uint32 PlayerDamageCount;//[Offset: 0x54, Size: 4]
	uint32 HeadshotCounts;//[Offset: 0x58, Size: 4]
	uint32 GunKillingTimes;//[Offset: 0x5c, Size: 4]
	int8 RoleType;//[Offset: 0x60, Size: 1]
	int8 RoleTypeEnd;//[Offset: 0x61, Size: 1]
	uint32 RoleTypeSwitchTime;//[Offset: 0x64, Size: 4]
	int PlayerJumpHeightMax;//[Offset: 0x68, Size: 4]
	int PlayerJumpSpeedMax;//[Offset: 0x6c, Size: 4]
	uint32 PlayerMoveDistance;//[Offset: 0x70, Size: 4]
	uint32 PlayerMoveTime;//[Offset: 0x74, Size: 4]
	int PlayerMoveSpeedAvg;//[Offset: 0x78, Size: 4]

--------------------------------
Class: InfectionRoundTlogCountData
	float RoundStartTime;//[Offset: 0x0, Size: 4]
	float RoundEndTime;//[Offset: 0x4, Size: 4]
	int WinCamp;//[Offset: 0x8, Size: 4]
	bool bSpawnRevenger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float RevengerSpawmTime;//[Offset: 0x10, Size: 4]
	int RevengerDoSkillCount;//[Offset: 0x14, Size: 4]
	int ZombieReviveCount;//[Offset: 0x18, Size: 4]
	int NormalZombieDoSkillCount;//[Offset: 0x1c, Size: 4]
	int InvisibleZombieDoSkillCount;//[Offset: 0x20, Size: 4]
	int ThrowerZombieDoSkillCount;//[Offset: 0x24, Size: 4]
	int MotherZombieDoSkillCount;//[Offset: 0x28, Size: 4]
	<int,InfectionRoundTlogGuidData> GuidCount;//[Offset: 0x30, Size: 80]
	InfectionPlayerDeadTlogData[] DeadList;//[Offset: 0x80, Size: 16]
	<int,int> ZombieLevelNumMap;//[Offset: 0x90, Size: 80]
	int[] EnhancerUserList;//[Offset: 0xe0, Size: 16]
	<int,InfectionSpringUseData> SpringUseMap;//[Offset: 0xf0, Size: 80]

--------------------------------
Class: InfectionRoundTlogGuidData
	int GuidTriggerCount;//[Offset: 0x0, Size: 4]
	int GuidHandCloseCount;//[Offset: 0x4, Size: 4]
	int GuidArriveCloseCount;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InfectionPlayerDeadTlogData
	int DeadPawnSubType;//[Offset: 0x0, Size: 4]
	float DeadPosiX;//[Offset: 0x4, Size: 4]
	float DeadPosiY;//[Offset: 0x8, Size: 4]
	float DeadPosiZ;//[Offset: 0xc, Size: 4]
	int KillPawnSubType;//[Offset: 0x10, Size: 4]
	float KillPosiX;//[Offset: 0x14, Size: 4]
	float KillPosiY;//[Offset: 0x18, Size: 4]
	float KillPosiZ;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: InfectionSpringUseData
	int SpringTag;//[Offset: 0x0, Size: 4]
	int NormalPlayerUseTimes;//[Offset: 0x4, Size: 4]
	int AvengerPlayerUseTimes;//[Offset: 0x8, Size: 4]
	int MotherZombieUseTimes;//[Offset: 0xc, Size: 4]
	int NormalZombieUseTimes;//[Offset: 0x10, Size: 4]
	int InvisibleZombieUseTimes;//[Offset: 0x14, Size: 4]
	int ThrowerZombieUseTimes;//[Offset: 0x18, Size: 4]

--------------------------------
Class: InfectionRoleTableRow
	int ID;//[Offset: 0x0, Size: 4]
	FString RoleName;//[Offset: 0x8, Size: 16]
	int DieExchange;//[Offset: 0x18, Size: 4]
	int MatrixEffect;//[Offset: 0x1c, Size: 4]
	int BornChoose;//[Offset: 0x20, Size: 4]
	FString WeIcon;//[Offset: 0x28, Size: 16]
	FString EnemyIcon;//[Offset: 0x38, Size: 16]
	enum[] VisibleRange;//[Offset: 0x48, Size: 16]
	int MainSkillId;//[Offset: 0x58, Size: 4]
	int[] BornSkillList;//[Offset: 0x60, Size: 16]
	FString SkillIcon;//[Offset: 0x70, Size: 16]
	FString SkillCDIcon;//[Offset: 0x80, Size: 16]
	FString SkillName;//[Offset: 0x90, Size: 16]
	FString SkillDetail;//[Offset: 0xa0, Size: 16]
	float SkillCD;//[Offset: 0xb0, Size: 4]
	FString HeroIcon;//[Offset: 0xb8, Size: 16]

--------------------------------
Class: InfectionScoreTableRow
	int ID;//[Offset: 0x0, Size: 4]
	int Identity;//[Offset: 0x4, Size: 4]
	FString Action;//[Offset: 0x8, Size: 16]
	int param1;//[Offset: 0x18, Size: 4]
	int Score;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: InfectionContinuousKillInfo
	enum PawnType;//[Offset: 0x0, Size: 1]
	int KillNumber;//[Offset: 0x4, Size: 4]
	FString KillerName;//[Offset: 0x8, Size: 16]

--------------------------------
Class: BP_STRUCT_InfectModeMsgIDCfg_type
	int FlagType_0_72B3F500739E321A0A23CC9D077EF635;//[Offset: 0x0, Size: 4]
	FString TurnplateChatIDList_1_096F880020F397FC54CCF31403E9DA74;//[Offset: 0x8, Size: 16]
	FString MenuChatIDList_2_3D047D80224763B807E924800784F994;//[Offset: 0x18, Size: 16]

--------------------------------
Class: BP_STRUCT_FlagIDCfg_type
	FString MinDist_6_0B46994033686B57353ADBF500714494;//[Offset: 0x0, Size: 16]
	FString ChatIDList_1_4EF37580641F954251E0DAFB019B9714;//[Offset: 0x10, Size: 16]
	int FlagType_2_11577240100B60A917DCD1AD0B460365;//[Offset: 0x20, Size: 4]
	int FlagIndex_3_792107C04BF74D1D091F4261042C7A78;//[Offset: 0x24, Size: 4]
	FString TraceDist_7_58300C000EE7C4781954B3CD040DA8B4;//[Offset: 0x28, Size: 16]
	int AlternateChatID_5_30B4D68067E6F79C260EA2C400C3E5D4;//[Offset: 0x38, Size: 4]

--------------------------------
Class: BP_STRUCT_LocalizeRes_type
	FString TextValue_0_4D37165A410D67320AF278A1C1028E4F;//[Offset: 0x0, Size: 16]
	int TextId_1_20B947934F165858A322E599888F816E;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BP_STRUCT_QuickSignCfg_type
	FString AudioPath_15_542FCCC0273B734F1E867B74099F88F8;//[Offset: 0x0, Size: 16]
	FString IconBGPath_16_5BDF54C04BC63EDF39F3D4B505D210D8;//[Offset: 0x10, Size: 16]
	FString IconPath_17_79023280522DA7F41B3040310874D6D8;//[Offset: 0x20, Size: 16]
	FString ID_18_3F8DB04004E99B570550F27B0E37BE54;//[Offset: 0x30, Size: 16]
	int LifeSpan_19_0AFEB18006FB71A602526E5601FD19DE;//[Offset: 0x40, Size: 4]
	int MaxNum_20_73CA82807AF1FB3255FB24340FB7020D;//[Offset: 0x44, Size: 4]
	FString RespondID_21_0E2787006157EE48655D98DC092FB8F4;//[Offset: 0x48, Size: 16]
	FString ScriptParam_22_3C7BC68011D8B81C27E5F03F0C67C40D;//[Offset: 0x58, Size: 16]
	int TextID_23_7A2819807E81ADFC4845A72A0F22CF64;//[Offset: 0x68, Size: 4]
	int SignSubType_24_6FD8044017325E7F589E0E8C0146BF25;//[Offset: 0x6c, Size: 4]
	FString OutScreenArrowPath_27_3B0A390024BFB9D000BD28FC0036EE38;//[Offset: 0x70, Size: 16]
	FString IconOutScreenBGPath_30_365F3AC03DE161730C8814750C718E08;//[Offset: 0x80, Size: 16]
	FString IconOutScreenPath_31_3B2818806791463445FB230906AD7548;//[Offset: 0x90, Size: 16]

--------------------------------
Class: BP_MapUIMarkManager_C.MapUIMarkManager.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: BP_ChangeWearingComp_C.ChangeWearingComponent.ActorComponent.Object

--------------------------------
Class: ChangeWearingComponent.ActorComponent.Object
	int WillChangeWearIndex;//[Offset: 0x110, Size: 4]
	float CoolDownTime;//[Offset: 0x114, Size: 4]
	float SocialIslandCoolDownTime;//[Offset: 0x118, Size: 4]
	float LastChangeWearTime;//[Offset: 0x11c, Size: 4]
	void ServerRequestChangeWear(int Index);// 0x32fe6dc
	bool RequestChangeWearInBattle(int Index);// 0x32fe64c
	bool RequestChangeWear(int Index);// 0x32fe5bc
	void RealChangeWearInBattle(int Index);// 0x32fe540
	bool IsInCoolDownTime(bool bWithLog);// 0x32fe4a8
	bool IsInBattleState(bool bWithLog);// 0x32fe410
	bool IsChangeWearingOpend();// 0x32fe3d8
	bool IsAllowChangeWearingState(bool bWithLog);// 0x32fe340
	float GetCoolDownTime();// 0x32fe30c
	void ClientChangeWearDone(int Index, float ChangeWearTime, const GameModePlayerRolewearInfo[] AllWearData);// 0x32fe1f4
	bool CheckCanChangeWearing(bool bWithLog);// 0x32fe15c

--------------------------------
Class: BP_GameEventListener_C.GameEventListener.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1e0, Size: 8]
	void SetDefaultNearClipPlane(bool CallFunc_IsIOSPlatform_IsIOS);// 0x4033584
	void IsIOSPlatform(out bool IsIOS, int CallFunc_GetPlatformInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x4033584
	void SetDefaultRendering();// 0x4033584
	void EnableGrassLOD(int Enable, GameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void ChangeStreamingLevel(GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x4033584
	void InitIncaseReconnect(GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsPlayerLandFromTheAir_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsIOSPlatform_IsIOS, bool CallFunc_IsIOSPlatform_IsIOS2, bool CallFunc_IsPlayerFlying_ReturnValue);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void CustomEvent(byte gamePawnEvent);// 0x4033584
	void ReceiveEndPlay(byte EndPlayReason);// 0x4033584
	void UnloadTree();// 0x4033584
	void LoadTree();// 0x4033584
	void ExecuteUbergraph_BP_GameEventListener(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_gamePawnEvent, byte K2Node_Event_EndPlayReason, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsDedicatedServer_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, int CallFunc_GetDeviceLevel_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue3, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance3, bool K2Node_DynamicCast_bSuccess3);// 0x4033584

--------------------------------
Class: GameEventListener.ActorComponent.Object
	delegate OnGameEventListener;//[Offset: 0x110, Size: 16]
	float HeightCheck_High;//[Offset: 0x120, Size: 4]
	float HeightCheck_Mid;//[Offset: 0x124, Size: 4]
	float HeightCheck_Low;//[Offset: 0x128, Size: 4]
	float FlyingScreenSizeCullingFactor;//[Offset: 0x130, Size: 4]
	float FlyingDistanceCullingFactor;//[Offset: 0x134, Size: 4]
	float HighMidFightingScreenSizeCullingFactor;//[Offset: 0x138, Size: 4]
	float HighMidFightingDistanceCullingFactor;//[Offset: 0x13c, Size: 4]
	float LowFightingScreenSizeCullingFactor;//[Offset: 0x140, Size: 4]
	float LowFightingDistanceCullingFactor;//[Offset: 0x144, Size: 4]
	float HighFastSpeedMoveScreenFactor;//[Offset: 0x148, Size: 4]
	float HighFastSpeedMoveCullFactor;//[Offset: 0x14c, Size: 4]
	float MidLowFastSpeedScreenFactor;//[Offset: 0x150, Size: 4]
	float MidLowFastSpeedMoveCullFactor;//[Offset: 0x154, Size: 4]
	float DelaySecondsForExitNgiht;//[Offset: 0x15c, Size: 4]
	float[] LODDistanceScaleAtNight;//[Offset: 0x160, Size: 16]
	float[] ViewDistanceScaleAtNight;//[Offset: 0x178, Size: 16]
	float[] FoliageViewDistanceScaleAtNight;//[Offset: 0x190, Size: 16]
	float[] ScreenSizeCullingFactorAtNight;//[Offset: 0x1a8, Size: 16]
	bool bUsetoControlNearClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	bool bNearClipInPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 1]
	int NearClipLanded;//[Offset: 0x1c0, Size: 4]
	int NearClipFlying;//[Offset: 0x1c4, Size: 4]
	void StarCalcJump();// 0x339533c
	void SetClearPlaneFast(int Val);// 0x33952c0
	void ScaleScreenSizeCulling(byte pawnevent);// 0x3395244
	void ScaleCullingFastMode(byte pawnevent);// 0x33951c8
	bool ScaleCullingFast(float ScreenSize, float Distance);// 0x3395100
	void OnChangeViewTarget();// 0x33950ec
	bool IsPlayerLandFromTheAir();// 0x33950b4
	bool IsPlayerLanded();// 0x339507c
	bool IsPlayerFlying();// 0x3395044
	void HeightCheck();// 0x3395030
	void GameEventReBirth();// 0x339501c
	void GameEventPlane_KeepNearClipNotChanged();// 0x3395008
	void GameEventPlane();// 0x3394ff4
	void GameEventParachute();// 0x3394fe0
	void GameEventLanded();// 0x3394fcc
	void GameEventJump();// 0x3394fb8
	void GameEventFinished();// 0x3394fa4
	void GameEventFighting();// 0x3394f90
	void GameEventExitNight();// 0x3394f7c
	void GameEventEnterNight();// 0x3394f68
	void GameEventDie(float currentHP, float ratioHP);// 0x3394eb4
	void GameEventBirth();// 0x3394ea0
	void ChangeViewtargetToPlane();// 0x3394e8c

--------------------------------
Class: GuideComponent_BP_C.GuideComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x138, Size: 8]
	void ShowGuideByStep(int Data, Vector2D Offset, Vector2D focusAbsPos, Vector2D focusAbsSize, Widget* FocusWidget, Image* guideImage, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void AddUIGuide(Widget* widget1, int guildUI1, Vector2D offset1, Vector2D size1, int childData1, GuideInfo K2Node_MakeStruct_GuideInfo, int CallFunc_Array_Add_ReturnValue);// 0x4033584
	void InitUIGuide(Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void CreateGuideUI();// 0x4033584
	void ExecuteUbergraph_GuideComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	int guideStep;//[Offset: 0x140, Size: 4]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]

--------------------------------
Class: BP_ServerSwitcher_C.ServerSwitchComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x178, Size: 8]
	void ReceiveBeginPlay();// 0x4033584
	void CustomEvent(bool BoolValue);// 0x4033584
	void ExecuteUbergraph_BP_ServerSwitcher(int EntryPoint, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_CustomEvent_BoolValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584

--------------------------------
Class: ServerSwitchComponent.ActorComponent.Object
	delegate OnFPSMonitorConfigSwitchRecv;//[Offset: 0x110, Size: 16]
	delegate OnFPSLowWarning;//[Offset: 0x120, Size: 16]
	FPSMonitorConfigSwitch FPSMonitorConfigSwitch;//[Offset: 0x130, Size: 20]
	float LowFPSWarningTipsLastTime;//[Offset: 0x144, Size: 4]
	FString[] FPSLowWarningSDKMatch;//[Offset: 0x148, Size: 16]
	bool bLocalSwitcherFPSLowWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	void RequireConfigRPC();// 0x34d7a00
	void OnUserQualitySettingChanged(int renderlevel);// 0x34d7984
	void MakeLowFPSWarningEx();// 0x34d7970
	void MakeLowFPSWarning(float targetFPS, float currentFPS);// 0x34d78bc
	void CountingDown();// 0x34d78a8
	void CloseFPSCheck();// 0x34d7894
	void AnswerconfigRPC(FPSMonitorConfigSwitch configswitch);// 0x34d77e4

--------------------------------
Class: FPSMonitorConfigSwitch
	bool bFPSMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float FPSCollectInternal;//[Offset: 0x4, Size: 4]
	int FPSCollectCountForGroup;//[Offset: 0x8, Size: 4]
	float FPSThreshold;//[Offset: 0xc, Size: 4]
	int FPSLowActionType;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BP_CommonBtn_C.CommonBtnComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x130, Size: 8]
	void OnChangeOpenDoorMode(int openmode);// 0x4033584
	void UnRegistShowDoorButton();// 0x4033584
	void OnShowDoorButton(byte Type);// 0x4033584
	void RegistShowDoorButton();// 0x4033584
	void ShowDoorButton(bool Show, bool Open, int openmode, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController);// 0x4033584
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void CharacterStatusChanged(bool IsNearDeath, bool IsRescueingOther);// 0x4033584
	void PlayerControllerReconnectedDelegate_Event();// 0x4033584
	void UI_Click(bool bSimulateExtraDoor);// 0x4033584
	void ToogleDoor();// 0x4033584
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x4033584
	void AutoOpenDoor(bool BoolValue);// 0x4033584
	void BP_SimulateUIClick(bool bExtraDoor);// 0x4033584
	void ExecuteUbergraph_BP_CommonBtn(int EntryPoint, bool ___bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool ___bool_Whether_the_gate_is_currently_open_or_close_Variable, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_IsNearDeath, bool K2Node_CustomEvent_IsRescueingOther, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool K2Node_CustomEvent_bSimulateExtraDoor, bool ___bool_Has_Been_Initd_Variable, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, bool ___bool_IsClosed_Variable, bool K2Node_Event_bShow, bool K2Node_Event_bOpen, int K2Node_Event_doorOpenMode, bool CallFunc_IsValid_ReturnValue2, BP_DoorMetallic_C* K2Node_DynamicCast_AsBP_Door_Metallic, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue3, BP_DoorNormal_C* K2Node_DynamicCast_AsBP_Door_Normal, bool K2Node_DynamicCast_bSuccess3, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue4, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess4, bool K2Node_CustomEvent_BoolValue, bool ___bool_Variable2, bool K2Node_Event_bExtraDoor, PUBGDoor* CallFunc_GetPriorityDoor_ReturnValue, bool CallFunc_IsAimingExtraDoor_ReturnValue, bool CallFunc_IsValid_ReturnValue5, bool K2Node_Select_Default);// 0x4033584
	int openmode;//[Offset: 0x138, Size: 4]
	byte BtnType;//[Offset: 0x13c, Size: 1]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 1]

--------------------------------
Class: BP_DoorMetallic_C.PUBGDoor.UAENetActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x648, Size: 8]
	void UserConstructionScript();// 0x4033584
	void Timeline_0__FinishedFunc();// 0x4033584
	void Timeline_0__UpdateFunc();// 0x4033584
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x4033584
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4033584
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4033584
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void OnBPRespawned();// 0x4033584
	void ExecuteUbergraph_BP_DoorMetallic(int EntryPoint, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue3, bool ___bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, int ___int_Variable, int ___int_Variable2, int K2Node_Event_doorStateDst2, bool K2Node_Event_bExtraDoor2, float CallFunc_Lerp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, int K2Node_Event_doorStateDst, bool K2Node_Event_bExtraDoor, bool K2Node_SwitchInteger2_CmpSuccess, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, int K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue4, bool CallFunc_IsValid_ReturnValue3);// 0x4033584
	BoxComponent* InterForce;//[Offset: 0x650, Size: 8]
	BoxComponent* Interaction;//[Offset: 0x658, Size: 8]
	SceneComponent* Scene;//[Offset: 0x660, Size: 8]
	BoxComponent* Box;//[Offset: 0x668, Size: 8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x670, Size: 8]
	float Timeline_0_DoorNormalCurve_3AD59F7245D2BF58B24C7D8879A0FBEE;//[Offset: 0x678, Size: 4]
	byte Timeline_0__Direction_3AD59F7245D2BF58B24C7D8879A0FBEE;//[Offset: 0x67c, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x680, Size: 8]
	float from;//[Offset: 0x688, Size: 4]
	float to;//[Offset: 0x68c, Size: 4]
	int FromState;//[Offset: 0x690, Size: 4]
	int ToState;//[Offset: 0x694, Size: 4]
	AkAudioEvent* OpenDoorAudio;//[Offset: 0x698, Size: 8]
	AkAudioEvent* CloseDoorAudio;//[Offset: 0x6a0, Size: 8]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0x110, Size: 160]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b0, Size: 1]
	void Stop();// 0x5c85478
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x5c853c4
	void SetTimelineLengthMode(byte NewLengthMode);// 0x5c85348
	void SetTimelineLength(float NewLength);// 0x5c852cc
	void SetPlayRate(float NewRate);// 0x5c85250
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x5c85144
	void SetNewTime(float NewTime);// 0x5c850c8
	void SetLooping(bool bNewLooping);// 0x5c85044
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x5c84f90
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x5c84f0c
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x5c84e58
	void ReverseFromEnd();// 0x5c84e44
	void Reverse();// 0x5c84e30
	void PlayFromStart();// 0x5c84e1c
	void Play();// 0x5c84e08
	void OnRep_Timeline();// 0x5c84df4
	bool IsReversing();// 0x5c84dbc
	bool IsPlaying();// 0x5c84d84
	bool IsLooping();// 0x5c84d4c
	float GetTimelineLength();// 0x5c84d18
	float GetPlayRate();// 0x5c84ce4
	float GetPlaybackPosition();// 0x5c84cb0
	bool GetIgnoreTimeDilation();// 0x5c84c78

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 1]
	float Length;//[Offset: 0x4, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	float PlayRate;//[Offset: 0xc, Size: 4]
	float Position;//[Offset: 0x10, Size: 4]
	TimelineEventEntry[] Events;//[Offset: 0x18, Size: 16]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x28, Size: 16]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x38, Size: 16]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x48, Size: 16]
	delegate TimelinePostUpdateFunc;//[Offset: 0x58, Size: 16]
	delegate TimelineFinishedFunc;//[Offset: 0x68, Size: 16]
	Object* PropertySetObject;//[Offset: 0x88, Size: 8]
	FName DirectionPropertyName;//[Offset: 0x90, Size: 8]
	Property* DirectionProperty;//[Offset: 0x98, Size: 8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 4]
	delegate EventFunc;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 8]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* VectorProperty;//[Offset: 0x28, Size: 8]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 8]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 8]
	FloatProperty* FloatProperty;//[Offset: 0x28, Size: 8]

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 8]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* LinearColorProperty;//[Offset: 0x28, Size: 8]

--------------------------------
Class: BP_DoorNormal_C.PUBGDoor.UAENetActor.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x648, Size: 8]
	void UserConstructionScript();// 0x4033584
	void ZeroToOne__FinishedFunc();// 0x4033584
	void ZeroToOne__UpdateFunc();// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x4033584
	void EventTimer();// 0x4033584
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4033584
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4033584
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x4033584
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x4033584
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x4033584
	void OnBPRespawned();// 0x4033584
	void ExecuteUbergraph_BP_DoorNormal(int EntryPoint, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue3, bool ___bool_Variable, bool K2Node_SwitchInteger_CmpSuccess, int ___int_Variable, int ___int_Variable2, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, const BP_GrenadeDamageType_C* K2Node_DynamicCast_AsBP_Grenade_Damage_Type, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, float CallFunc_Lerp_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, int K2Node_Event_doorStateDst2, bool K2Node_Event_bExtraDoor3, FString CallFunc_Concat_StrStr_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Rotator CallFunc_GetSocketRotation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue3, Vector CallFunc_GetRightVector_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue, bool K2Node_Event_isBeginPlay, bool K2Node_Event_bExtraDoor2, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int K2Node_Event_doorStateDst, bool K2Node_Event_bExtraDoor, bool K2Node_SwitchInteger2_CmpSuccess, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult2, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult3, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult4, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue4, int CallFunc_PostEventAtLocation_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2, float CallFunc_Multiply_IntFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue3, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue5, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_K2_IsValidTimerHandle_ReturnValue2);// 0x4033584
	BoxComponent* InterForce;//[Offset: 0x650, Size: 8]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x658, Size: 8]
	BoxComponent* Interaction;//[Offset: 0x660, Size: 8]
	SceneComponent* Scene;//[Offset: 0x668, Size: 8]
	BoxComponent* Box;//[Offset: 0x670, Size: 8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x678, Size: 8]
	float ZeroToOne_DoorNormalCurve_E90A1C0246A80C0D1E9E33BE7ED870B3;//[Offset: 0x680, Size: 4]
	byte ZeroToOne__Direction_E90A1C0246A80C0D1E9E33BE7ED870B3;//[Offset: 0x684, Size: 1]
	TimelineComponent* ZeroToOne;//[Offset: 0x688, Size: 8]
	StaticMesh* BrokenMesh;//[Offset: 0x690, Size: 8]
	float HP;//[Offset: 0x698, Size: 4]
	float HPTimer;//[Offset: 0x69c, Size: 4]
	float to;//[Offset: 0x6a0, Size: 4]
	float from;//[Offset: 0x6a4, Size: 4]
	float HPDummy;//[Offset: 0x6a8, Size: 4]
	TimerHandle DummyTimerHandler;//[Offset: 0x6b0, Size: 8]
	float GrenadeDamageRatio;//[Offset: 0x6b8, Size: 4]
	int FromState;//[Offset: 0x6bc, Size: 4]
	int ToState;//[Offset: 0x6c0, Size: 4]
	AkAudioEvent* CloseDoorAudio;//[Offset: 0x6c8, Size: 8]
	AkAudioEvent* OpenDoorAudio;//[Offset: 0x6d0, Size: 8]

--------------------------------
Class: BP_GrenadeDamageType_C.DamageType.Object

--------------------------------
Class: BP_VehicleUser_C.VehicleUserComponent.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x418, Size: 8]
	void EditorAxisMoveFreezed();// 0x4033584
	void SetUAVSpeedPercent(float SpeedPercent);// 0x4033584
	void SetUAVCameraMode(bool FreeCamera);// 0x4033584
	void OnUnmanedVehicleHPChanged(float HP, float MaxHp, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void OnUnmanedVehicleFuelChanged(float Fuel, float MacFuel, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int CallFunc_PostEvent_ReturnValue, STExtraUAVVehicleBase* K2Node_DynamicCast_AsSTExtra_UAVVehicle_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue3);// 0x4033584
	void SendUIMsgWhenChangeSeatCompleted(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void SendUIMsgWhenEnterVehicleCompleted(bool CallFunc_IsUAV_ReturnValue, SurfBoardComp* CallFunc_GetComponentByClass_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x4033584
	void SendUIMsgWhenExitVehicleCompleted(class STExtraVehicleBase CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsUAV_ReturnValue, FString CallFunc_GetClassDisplayName_ReturnValue, bool CallFunc_EqualEqual_StriStri_ReturnValue, SurfBoardComp* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue2);// 0x4033584
	void GetVehicleGoStraight(out float VehicleGoStraight, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void SetHelicopterCameraMode(bool IsFreeCamera);// 0x4033584
	void HandleCharacterUnequipWeapon(STExtraWeapon* NewParam);// 0x4033584
	void HandleCharacterEquipWeapon(STExtraWeapon* NewWeapon, byte Slot);// 0x4033584
	void SwitchToLastWeapon(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SwitchWeaponBySlot_ReturnValue);// 0x4033584
	void CacheLastUseWeaponSlot(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, byte CallFunc_GetCurrentUsingPropSlot_ReturnValue);// 0x4033584
	void SetPlayMusic(bool Enabled);// 0x4033584
	void SetDrivingViewMode(int int mode, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsUCAV_ReturnValue, VehicleSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x4033584
	void ResetInputs(bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void OnMotorcycleContactChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void FixGoStraight(float InMoveRightRate, float GoStraightThreshold, out float OutMoveRightRate, float absInputRight, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_FMax_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2);// 0x4033584
	void OnUpdateSeatGUI(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void OnVehicleWheelsHPChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void StopPlayerAutoSprint(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void OnVehicleFuelChanged(float Fuel, float FuelMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void OnVehicleHPChanged(float HP, float HPMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void ExitVehicle();// 0x4033584
	void EnterVehicle(bool IsDriver, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, Pawn* CallFunc_K2_GetPawn_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, BaseVaultComponent* CallFunc_GetVaultComponent_ReturnValue, bool CallFunc_HasState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController2, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue2, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess2);// 0x4033584
	void OnEnterVehicleCompleted(enum SeatType);// 0x4033584
	void OnExitVehicleCompleted();// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x4033584
	void OnCurrrentClosestVehicleChanged();// 0x4033584
	void EventSetDrivingViewMode(int IntValue);// 0x4033584
	void OnInputAxisMoveForward(float Rate);// 0x4033584
	void OnInputAxisMoveRight(float Rate);// 0x4033584
	void EventSetCarMusicSwitch(bool BoolValue);// 0x4033584
	void EventSetHelicopterFreeCamera(bool BoolValue);// 0x4033584
	void OnShutDownUnmannedVehicleCompleted(float cdTime);// 0x4033584
	void OnLaunchUnmannedVehicleCompleted();// 0x4033584
	void OnPauseUnmannedVehicleCompleted();// 0x4033584
	void EventSetUAVFreeCamera(bool BoolValue);// 0x4033584
	void EventSetSpeedPercent(float FloatValue);// 0x4033584
	void EventUAVSingleOperate(bool BoolValue);// 0x4033584
	void ExecuteUbergraph_BP_VehicleUser(int EntryPoint, enum K2Node_Event_SeatType2, enum K2Node_Event_SeatType, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue2, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetFuelMax_ReturnValue, float CallFunc_GetVehicleHPMax_ReturnValue, float CallFunc_GetFuel_ReturnValue, float CallFunc_GetVehicleHP_ReturnValue, bool CallFunc_IsValid_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate3, bool CallFunc_IsValid_ReturnValue3, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue4, bool CallFunc_IsValid_ReturnValue4, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate4, BP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController2, bool CallFunc_IsValid_ReturnValue7, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController3, bool CallFunc_IsValid_ReturnValue8, delegate K2Node_CreateDelegate_OutputDelegate8, GameBackendHUD* CallFunc_GetInstance_ReturnValue, int K2Node_CustomEvent_IntValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, SaveGame* CallFunc_GetUserSettings_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess3, float K2Node_Event_rate2, float K2Node_Event_rate, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController4, bool K2Node_CustomEvent_BoolValue4, bool CallFunc_IsValid_ReturnValue9, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController5, delegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_IsValid_ReturnValue10, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4, delegate K2Node_CreateDelegate_OutputDelegate10, bool K2Node_CustomEvent_BoolValue3, float CallFunc_GetVehicleGoStraight_VehicleGoStraight, float CallFunc_FixGoStraight_OutMoveRightRate, bool CallFunc_IsValid_ReturnValue11, delegate K2Node_CreateDelegate_OutputDelegate11, float K2Node_Event_cdTime, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController6, bool K2Node_CustomEvent_BoolValue2, float K2Node_CustomEvent_FloatValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController7, bool K2Node_CustomEvent_BoolValue, bool CallFunc_IsValid_ReturnValue12, delegate K2Node_CreateDelegate_OutputDelegate12, delegate K2Node_CreateDelegate_OutputDelegate13, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue13, bool CallFunc_IsValid_ReturnValue14, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue15, delegate K2Node_CreateDelegate_OutputDelegate14, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess5, bool CallFunc_GetActorEnableCollision_ReturnValue);// 0x4033584
	bool AxisMoveForwardFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	bool AxisMoveRightFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 1]
	float Fuel;//[Offset: 0x424, Size: 4]
	float FuelMax;//[Offset: 0x428, Size: 4]
	float HP;//[Offset: 0x42c, Size: 4]
	float HPMax;//[Offset: 0x430, Size: 4]
	float OutMoveRightRate;//[Offset: 0x434, Size: 4]
	float RawSpeed;//[Offset: 0x438, Size: 4]
	enum SeatType;//[Offset: 0x43c, Size: 1]
	byte LastWeaponSlot;//[Offset: 0x43d, Size: 1]
	float UnmanedFuel;//[Offset: 0x440, Size: 4]
	float UnmanedFuelMax;//[Offset: 0x444, Size: 4]
	float UnmanedHP;//[Offset: 0x448, Size: 4]
	float UnmanedHPMax;//[Offset: 0x44c, Size: 4]
	float UnmanedCallBackTime;//[Offset: 0x450, Size: 4]
	bool bShowUnmanedLowPowerTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]

--------------------------------
Class: STExtraUAVVehicleBase.STExtraVehicleBase.Pawn.Actor.Object
	VehicleUserComponent* UAVVehicleUserComponent;//[Offset: 0x1338, Size: 8]
	CameraComponent* CameraComponent;//[Offset: 0x1340, Size: 8]
	SpringArmComponent* SpringArmComp;//[Offset: 0x1348, Size: 8]
	FName CameraBoneName;//[Offset: 0x1350, Size: 8]
	delegate OnVehicleUAVStateChanged;//[Offset: 0x1360, Size: 16]
	float FPP_TargetArmLength;//[Offset: 0x1370, Size: 4]
	float TPP_TargetArmLength;//[Offset: 0x1374, Size: 4]
	float UAVFPPCameraFovPercent;//[Offset: 0x1378, Size: 4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x137c, Size: 1]
	enum UAVVehicleState;//[Offset: 0x1384, Size: 1]
	float CoolDownTimeSpeed;//[Offset: 0x1388, Size: 4]
	float CoolDownTimeMin;//[Offset: 0x138c, Size: 4]
	float MaxOperateDistanceToPlayer;//[Offset: 0x1390, Size: 4]
	float MaxOperateFalloffDistance;//[Offset: 0x1394, Size: 4]
	float LowFuelWarning;//[Offset: 0x1398, Size: 4]
	float SkillRecallingTime;//[Offset: 0x139c, Size: 4]
	float SkillDisappearingTime;//[Offset: 0x13a0, Size: 4]
	float SkillDestoryTime;//[Offset: 0x13a4, Size: 4]
	float MaxCameraFOV;//[Offset: 0x13c4, Size: 4]
	float MinCameraFOV;//[Offset: 0x13c8, Size: 4]
	DriverAttachmentData[] DriverAttachmentDataList;//[Offset: 0x13d0, Size: 16]
	void SetViewTargetAgainForOB();// 0x36415a0
	void SetUAVVehicleState(enum NewState);// 0x3641524
	void SetFPPCameraFov(float factor);// 0x36414a8
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x36413cc
	void SendToServerUAVFPPCameraFovPercent(float percent);// 0x364131c
	void SendToServerIsFPP(bool IsFirstPerson);// 0x3641258
	void SendToServerClientInitOK();// 0x36411f8
	void SendToServerChangeCameraMode(bool isFreeMode);// 0x3641134
	void SendToAllChangeCameraMode(bool isFreeMode);// 0x36410a8
	void OnRep_UAVVehicleState();// 0x364108c
	void OnRep_IsFPPChanged();// 0x3641078
	void OnRep_FPPCameraFovChanged();// 0x3641064
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x3640f3c
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x3640da8
	float GetDisToPlayer();// 0x3640d74
	bool CheckCanSwitchFPP();// 0x3640d34

--------------------------------
Class: DriverAttachmentData
	FName AttachmentDataName;//[Offset: 0x0, Size: 8]
	StaticMesh* AttachmentMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* AttachmentMeshLod;//[Offset: 0x30, Size: 40]
	FName AttachSocket;//[Offset: 0x58, Size: 8]
	float AttachDelayTime;//[Offset: 0x60, Size: 4]
	float DettachDelayTime;//[Offset: 0x64, Size: 4]
	StaticMeshComponent* AttachmentComponentInstance;//[Offset: 0x70, Size: 8]
	STExtraPlayerCharacter* AttachDriverCache;//[Offset: 0x78, Size: 8]

--------------------------------
Class: SurfBoardComp.ActorComponent.Object
	float SpeedThresholds;//[Offset: 0x110, Size: 4]
	float JumpImpulse;//[Offset: 0x114, Size: 4]
	float JumpImpulseBig;//[Offset: 0x118, Size: 4]
	float MaxStateTime_Jump;//[Offset: 0x11c, Size: 4]
	float RealStateTime_Jump;//[Offset: 0x120, Size: 4]
	float FloorInWaterLow;//[Offset: 0x124, Size: 4]
	float HalfInWaterLow;//[Offset: 0x128, Size: 4]
	float RealInWaterLow;//[Offset: 0x12c, Size: 4]
	float MaxHalfInWaterLowTime;//[Offset: 0x130, Size: 4]
	float JumpCeilingHeight;//[Offset: 0x134, Size: 4]
	float HalfJumpHeight;//[Offset: 0x138, Size: 4]
	float RealJumpHeight;//[Offset: 0x13c, Size: 4]
	float MaxInHalfJumpHeightTime;//[Offset: 0x140, Size: 4]
	float MaxSpeed;//[Offset: 0x144, Size: 4]
	float RealMaxSpeed;//[Offset: 0x148, Size: 4]
	float InWaterTolerance;//[Offset: 0x14c, Size: 4]
	int LeaveFlyPointNum;//[Offset: 0x15c, Size: 4]
	int PersistanceFrameThreshold;//[Offset: 0x160, Size: 4]
	float AutoExitHeightThreshold;//[Offset: 0x164, Size: 4]
	float HitTestToSeaLevelBias;//[Offset: 0x168, Size: 4]
	enum SurfBoardState;//[Offset: 0x16c, Size: 1]
	void ServerSetSurfBoardState(enum InState);// 0x366b07c
	void OnRep_SurfBoardState();// 0x366b068
	void ClientSetSurfBoardState(enum InState);// 0x366afb8

--------------------------------
Class: BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1610, Size: 8]
	void OnClientVehicleHealthStateChangedToDestory();// 0x4033584
	void CreateDMI();// 0x4033584
	void SetDMIParam(MaterialInstanceDynamic* Dim, FName Name, float Value, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void UpdateExhaustFx(FName ExhaustName, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, ParticleSoftWrapperArray CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, ParticleSoftWrapper CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, CustomParticleSystemComponent* CallFunc_SpawnCustomEmitterAttached_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x4033584
	void OnClientVehicleHealthStateChanged(enum VehicleHealthState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x4033584
	void UserConstructionScript();// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void OnSetTailLightValue(float LightValue);// 0x4033584
	void OnBoostingChanged();// 0x4033584
	void OnEngineStart();// 0x4033584
	void OnEngineStop();// 0x4033584
	void VehicleMeshChanged();// 0x4033584
	void BPPlayOverlapDamageCameraShake();// 0x4033584
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x4033584
	void AdvanceVehicleMeshChanged();// 0x4033584
	void ExecuteUbergraph_BP_STExtraWheeledVehicle(int EntryPoint, FName CallFunc_Conv_StringToName_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, float K2Node_Event_LightValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate3, PlayerController* CallFunc_GetPlayerController_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, CameraShake* CallFunc_PlayCameraShake_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor* K2Node_Event_OtherActor, VehicleAdvanceAvatarComponent* CallFunc_GetVehicleAdvanceAvatar_ReturnValue, bool CallFunc_IsValid_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetTailLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFFPLightDIM_ReturnValue, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue2, MaterialInstanceDynamic* CallFunc_GetFrontLightDIM_ReturnValue3, MaterialInstanceDynamic* CallFunc_GetFFPLightDIM_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue2);// 0x4033584
	WheeledVehicleProtectionComponent* VehicleProtection;//[Offset: 0x1618, Size: 8]
	BP_VehicleShowFrameComp_C* BP_VehicleShowFrameComp;//[Offset: 0x1620, Size: 8]
	VehicleAvatarComponent_BP_C* VehicleAvatarComponent_BP;//[Offset: 0x1628, Size: 8]
	CameraComponent* Camera;//[Offset: 0x1630, Size: 8]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0x1638, Size: 8]
	bool IsPlayingEngineAk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1640, Size: 1]
	FName TailLightParamName;//[Offset: 0x1648, Size: 8]
	FName FrontLightParamName;//[Offset: 0x1650, Size: 8]
	FName FPPBoostLightParamName;//[Offset: 0x1658, Size: 8]
	bool bEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1660, Size: 1]
	float LastOverlapShakeTime;//[Offset: 0x1664, Size: 4]
	float OverlapShakeInterval;//[Offset: 0x1668, Size: 4]
	bool bLobbyShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166c, Size: 1]
	bool bInvincibleProtect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166d, Size: 1]

--------------------------------
Class: WheeledVehicleProtectionComponent.VehicleComponent.LuaActorComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0x1d8, Size: 16]
	delegate OnProtectionEnable;//[Offset: 0x1e8, Size: 16]
	bool bEnableProtection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	byte QueryShapeType;//[Offset: 0x1f9, Size: 1]
	float ValidHeight;//[Offset: 0x27c, Size: 4]
	float DistBetweenValidTrans;//[Offset: 0x280, Size: 4]
	float DistSqBetweenValidTrans;//[Offset: 0x284, Size: 4]
	int NumValidTrans;//[Offset: 0x288, Size: 4]
	float MaxDistToValidTrans;//[Offset: 0x28c, Size: 4]
	float MaxDistSqToValidTrans;//[Offset: 0x290, Size: 4]
	bool bEnablePreventPene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	byte[] IgnoredObjectTypesForPene;//[Offset: 0x2b0, Size: 16]
	bool bPreventPene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bEnableResolveStuck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool bEnableResolveStuckOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	float CheckStuckInterval;//[Offset: 0x2d4, Size: 4]
	float StuckDuration;//[Offset: 0x2d8, Size: 4]
	float StuckTolerance;//[Offset: 0x2dc, Size: 4]
	bool bEnablePreventFly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	void SetValidTransform(Vector NewCenter, Transform NewValidTransform);// 0x3756f24
	void SetQueryShapeType(byte InQueryBodyType);// 0x3756ea8
	void ResetValidTransform();// 0x3756e94
	void ProtectoinEnableDelegate__DelegateSignature(bool Enable);// 0x4033584
	bool IsProtectionEnabled();// 0x3756e5c
	void HandleStartResolveStuck();// 0x3756e48
	void HandleFlyByHit(out const VehicleHitImpulse InHitImpulse, bool IsFromClilent);// 0x3756cf4
	void HandleEndResolveStuck();// 0x3756ce0
	void HandleDSSwitchChanged();// 0x3756ccc
	void HandleActorHitFromClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3756b7c
	void HandleActorHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x3756a2c
	void EnableProtection(bool InEnable);// 0x37569a8

--------------------------------
Class: VehicleHitImpulse

--------------------------------
Class: BP_VehicleShowFrameComp_C.ShowActorFrameComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ShowActorFrameComponent.SceneComponent.ActorComponent.Object
	FrameUITransformData FrameUITransformData;//[Offset: 0x2d0, Size: 64]
	MaterialBillboardComponent* FrameUI;//[Offset: 0x310, Size: 8]
	int TranslucentSortPriority;//[Offset: 0x318, Size: 4]
	MaterialInterface* Material;//[Offset: 0x320, Size: 8]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x328, Size: 8]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x338, Size: 8]
	FString FrameDetailsUIPath;//[Offset: 0x340, Size: 16]
	FString FrameDetailsParentWidgetName;//[Offset: 0x350, Size: 16]
	FString FrameDetailsParentOuterName;//[Offset: 0x360, Size: 16]
	FString BPFunction_WhenWidgetCreate;//[Offset: 0x370, Size: 16]
	FString BPFunction_WhenWidgetDestroy;//[Offset: 0x380, Size: 16]
	ActorPositionWidget* DetailsWidget;//[Offset: 0x390, Size: 8]
	ActorPositionWidget* GetDetailsWidget();// 0x34ddac8
	void DestroyFrameUI();// 0x34ddab4
	bool CreateFrameUI(int ParamIfNecessary);// 0x34dda24

--------------------------------
Class: FrameUITransformData
	Transform Offset;//[Offset: 0x0, Size: 48]
	float BaseSizeX;//[Offset: 0x30, Size: 4]
	float BaseSizeY;//[Offset: 0x34, Size: 4]

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x700, Size: 16]
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x5bcb794
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x5bcb5e4

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 8]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x8, Size: 8]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	float BaseSizeX;//[Offset: 0x14, Size: 4]
	float BaseSizeY;//[Offset: 0x18, Size: 4]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x20, Size: 8]

--------------------------------
Class: ActorPositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* MyCanvasPanelSlot;//[Offset: 0x3d0, Size: 8]
	TextBlock* TextBlockDist;//[Offset: 0x3d8, Size: 8]
	Actor* AttachedActor;//[Offset: 0x3e0, Size: 8]
	Vector4 Limit;//[Offset: 0x3f0, Size: 16]
	Vector2D UIOffset;//[Offset: 0x400, Size: 8]
	Vector LocOffset;//[Offset: 0x408, Size: 12]
	bool BNeedShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	float AlphaBegin;//[Offset: 0x418, Size: 4]
	float AlphaEnd;//[Offset: 0x41c, Size: 4]
	float AlphaStep;//[Offset: 0x420, Size: 4]
	float AlphaBeginDistance;//[Offset: 0x424, Size: 4]
	float AlphaEndDistance;//[Offset: 0x428, Size: 4]
	float ScaleBegin;//[Offset: 0x42c, Size: 4]
	float ScaleEnd;//[Offset: 0x430, Size: 4]
	float ScaleStep;//[Offset: 0x434, Size: 4]
	float ScaleBeginDistance;//[Offset: 0x438, Size: 4]
	float ScaleEndDistance;//[Offset: 0x43c, Size: 4]
	float MaxShowDistance;//[Offset: 0x440, Size: 4]
	int TargetDistance;//[Offset: 0x444, Size: 4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x458, Size: 8]
	void ShowArrowAngle(bool Visible, float Angle);// 0x4033584
	void SetCurrentWidgetVisible(bool Visible);// 0x4033584
	void SetActorImage(Texture2D* Texture);// 0x4033584
	void PostAttachmentChanged();// 0x4033584
	void DetachFromActor(Actor* InActor);// 0x322dab4
	void AttachToActor(Actor* InActor);// 0x322da38

--------------------------------
Class: VehicleAvatarComponent_BP_C.VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5c8, Size: 8]
	FName GetReflectionCubeName_Lobby();// 0x4033584
	void TryAddLightEffect(BackpackCommonAvatarHandle* CallFunc_GetValidAvatarHandle_ReturnValue, BackpackVehicleAvatarHandle* K2Node_DynamicCast_AsBackpack_Vehicle_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, class BackpackVehicleAvatarHandle CallFunc_GetObjectClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue);// 0x4033584
	FString GetItemAvatarHandlePath(int ItemId, ItemRecordData CallFunc_GetItemRecord_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_GetPath_ReturnValue, FString CallFunc_GetPath_ReturnValue2, bool CallFunc_IsBattleItemHandlePathExist_ReturnValue);// 0x4033584
	BackpackCommonAvatarHandle* GetItemAvatarHandle(int ItemId, bool NewLocalVar, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue2, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class Object CallFunc_GetClass_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, BackpackCommonAvatarHandle* K2Node_DynamicCast_AsBackpack_Common_Avatar_Handle2, bool K2Node_DynamicCast_bSuccess2);// 0x4033584
	void OnLoaded_F4972C3D46F3CFC0E0742D8E88D4527B(Object* Loaded);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void VehicleAvatarEquiped();// 0x4033584
	void OnAddLightEffect(ParticleSystem* LightEffect);// 0x4033584
	void VehicleFPPMeshLoaded();// 0x4033584
	void LoadedBrokenMat();// 0x4033584
	void ClearVehicleLightEffect();// 0x4033584
	void BPBeginPlay();// 0x4033584
	void ExecuteUbergraph_VehicleAvatarComponent_BP(int EntryPoint, Object* K2Node_CustomEvent_Loaded, delegate K2Node_CreateDelegate_OutputDelegate, Object* ___object_Variable, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, ParticleSystem* K2Node_CustomEvent_LightEffect, delegate K2Node_CreateDelegate_OutputDelegate4, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_EqualEqual_SoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x4033584
	ParticleSystem* CurLightEffect;//[Offset: 0x5d0, Size: 40]
	ParticleSystemComponent* LightEffect;//[Offset: 0x5f8, Size: 8]
	bool VehicleBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]

--------------------------------
Class: UAELoadedClassManager.Object
	<FString,BPTable*> BPTableMap;//[Offset: 0x28, Size: 80]
	<FString,BPTable*> BPTableMap_Mod;//[Offset: 0x78, Size: 80]
	<int,FString> BPTableNameMap;//[Offset: 0xc8, Size: 80]
	FString LoadedClassManagerClassName;//[Offset: 0x118, Size: 16]
	<Object*,SoftClassPath> AsyncLoadClassDict;//[Offset: 0x2e8, Size: 80]
	void InitTableData();// 0x385462c
	void InitialModTableItemMap();// 0x3854610
	void InitBPTableMap_Mod();// 0x4033584
	void InitBPTableMap();// 0x4033584
	void HandleTableModNameChanged(FString InModName);// 0x3854568
	FString GetWrapperPath(FString BPTableName, int ID);// 0x3854410
	class Object GetWrapperClass(FString BPTableName, int ID);// 0x3854318
	FString GetPath(FString BPTableName, int ID, bool IsLobby, bool bForceLobby);// 0x3854138
	Object* GetObject(FString BPTableName, int ID, Object* Outer, bool IsLobby, bool IsLowDevice);// 0x3853f7c
	class Object GetCustom1Class(FString BPTableName, int ID);// 0x3853e84
	class Object GetClass(FString BPTableName, int ID, bool IsLobby, bool IsLowDevice);// 0x3853d04
	FString GetBPTableName(int Type);// 0x3853c10
	void GetAssetByAssetReferenceAsync(SoftObjectPath AssetReference, delegate AssetLoadSuccessDelegate);// 0x3853a78
	static UAELoadedClassManager* Get();// 0x3853a44
	BPTable* CreateAndAddBPTable_Mod(FString BPTableName);// 0x385398c
	BPTable* CreateAndAddBPTable(FString BPTableName);// 0x38538d4
	void ClearModTableItemMap();// 0x38538b8
	void ClearBPTable_Mod();// 0x38538a4
	void ClearBPTable();// 0x3853890
	void ClearAssetByAssetReferenceAsync(delegate AssetLoadSuccessDelegate);// 0x38537f4
	void ClearAllData();// 0x38537e0

--------------------------------
Class: BPTable.Object
	FString BPTableName;//[Offset: 0x28, Size: 16]
	<int,BPTableItem> BPTableItemMap;//[Offset: 0x38, Size: 80]
	<int,BPTableItem> BPTableItemMap_Mod;//[Offset: 0x88, Size: 80]
	FString GetWrapperPath(int ID);// 0x385305c
	class Object GetWrapperClass(int ID);// 0x3852fd0
	FString GetPath(int ID, bool IsLobby, bool bForceLobby);// 0x3852e54
	Object* GetObject(int ID, Object* Outer, bool IsLobby, bool IsLowDevice);// 0x3852d04
	Object* GetModObject(int ID, Object* Outer, bool IsLobby);// 0x3852bf8
	class Object GetModClass(int ID, bool IsLobby);// 0x3852b28
	class Object GetCustom1Class(int ID);// 0x3852a9c
	class Object GetClass(int ID, bool IsLobby, bool IsLowDevice);// 0x3852988
	void ConvertPath(int ID);// 0x385290c

--------------------------------
Class: BPTableItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x8, Size: 16]
	FString Path;//[Offset: 0x18, Size: 16]
	FString LobbyPath;//[Offset: 0x28, Size: 16]
	FString WrapperPath;//[Offset: 0x38, Size: 16]
	FString Custom1;//[Offset: 0x48, Size: 16]

--------------------------------
Class: DecalBakingActorMgr.DecalBakingActor.Actor.Object
	DecalBakingRTCache[] DecalBakingRTCacheList;//[Offset: 0x420, Size: 16]
	DecalBakingRTCache[] DecalBakingRTCacheListII;//[Offset: 0x430, Size: 16]
	float RTCacheLifeTime;//[Offset: 0x440, Size: 4]
	int MaxRTCacheCount;//[Offset: 0x444, Size: 4]
	float RTCacheLifeTimeII;//[Offset: 0x448, Size: 4]
	int MaxRTCacheCountII;//[Offset: 0x44c, Size: 4]
	float TickUpdateCacheInterval;//[Offset: 0x450, Size: 4]
	void ResetDecalBakingRTCacheParam();// 0x333e46c
	static DecalBakingActorMgr* GetWorldInstance(Object* WorldContextObject);// 0x333e3f0
	Vector GetSpawanDBPActorLocationByDiyData(out const DIYData InDIYData, SceneComponent* InSceneComponent);// 0x333e2e0
	DecalParameter[] GetRelativeDecalParameterFromWorld(SceneComponent* InSceneComponent);// 0x333e1ec
	static DecalBakingActorMgr* GetInstance();// 0x333e1b8
	DecalParameter[] GetDecalParameterFromWorld(Actor* InActor);// 0x333e0c4
	DecalParameter GetDecalParameter(SceneComponent* InSceneComponent, DecalBakingParameterComponent* InComponent);// 0x333dfd0
	TextureRenderTarget2D* CreateNewTextureRenderTarget2D(int X, int Y);// 0x333df0c
	DecalParameter ConvertDIYDataToDecalParam(out const DIYData InDIYData);// 0x333de0c
	DIYData ConvertDecalParamToDIYData(SceneComponent* InSceneComponent, DecalBakingParameterActor* InDBPActor, bool ZProjection);// 0x333dcf4
	void ClearDecalBackingRTCacheII(enum InType, FString PlayerUID);// 0x333db80
	void ClearDecalBackingRTCache(enum InType, FString PlayerUID, bool bCacheII);// 0x333d9c0

--------------------------------
Class: DecalBakingActor.Actor.Object
	uint32 MaxDecalProcessPerFame;//[Offset: 0x3c8, Size: 4]
	DecalBakingRequest[] DecalBakeRequests;//[Offset: 0x3d0, Size: 16]
	void SetMaxDecalProcessPerFame(int InValue);// 0x5b21050
	void OnBakingFinished(TextureRenderTarget2D* InRenderTarget);// 0x5b20fcc
	int GetMaxDecalProcessPerFame();// 0x5b20fb0
	int FindDecalBakingRequestID(TextureRenderTarget2D* RenderTarget);// 0x5b20f24
	void EndDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x5b20ea8
	void DoCompression(TextureRenderTarget2D* InRenderTarget);// 0x5b20e2c
	Texture* CompressTexture(TextureRenderTarget2D* InRenderTarget, bool bInRGBA, bool bUsePunchthroughAlpha, bool bUseOptimizeOpaque);// 0x5b20ccc
	void CancelDecalBakingRequest(int RequestID);// 0x5b20c50
	void BeginDecalBakingCache(TextureRenderTarget2D* RenderTarget);// 0x5b20bd4
	int BakeDecalForStaticMesh(TextureRenderTarget2D* RenderTarget, StaticMesh* StaticMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x5b209cc
	int BakeDecalForSkeletalMesh(TextureRenderTarget2D* RenderTarget, SkeletalMesh* SkeletalMesh, int UVIndex, out const DecalParameter[] InDecalParams, bool bIntermidiate, int CachedDecalIndex);// 0x5b207c4

--------------------------------
Class: DecalBakingRTCache
	enum DecalBakingType;//[Offset: 0x0, Size: 1]
	FString PlayerUID;//[Offset: 0x8, Size: 16]
	int WeaponAvatarID;//[Offset: 0x18, Size: 4]
	TextureRenderTarget2D* TextureRenderTarget;//[Offset: 0x20, Size: 8]
	float LastActiveTime;//[Offset: 0x28, Size: 4]
	bool bMainRoleRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: DIYData
	Texture2D* Texture;//[Offset: 0x0, Size: 8]
	LinearColor Color;//[Offset: 0x8, Size: 16]
	Vector2D Scale;//[Offset: 0x18, Size: 8]
	Vector2D Offset;//[Offset: 0x20, Size: 8]
	float Rotation;//[Offset: 0x28, Size: 4]
	enum Direction;//[Offset: 0x2c, Size: 1]
	LinearColor UVClip;//[Offset: 0x30, Size: 16]
	LinearColor UVInfo;//[Offset: 0x40, Size: 16]

--------------------------------
Class: DecalBakingParameterComponent.SceneComponent.ActorComponent.Object
	Texture2D* DecalTexture;//[Offset: 0x2d0, Size: 8]
	Vector DecalSize;//[Offset: 0x2d8, Size: 12]
	Vector4 UVScaleBias;//[Offset: 0x2f0, Size: 16]
	LinearColor TintColor;//[Offset: 0x300, Size: 16]
	Vector4 CropUVScaleBias;//[Offset: 0x310, Size: 16]
	float CropRotation;//[Offset: 0x320, Size: 4]
	bool bEnableDepthCompare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	LinearColor GetUVScaleBias();// 0x5b21a40
	BoxSphereBounds GetDecalBounds();// 0x5b219f4
	LinearColor GetCropUVScaleBias();// 0x5b219c4

--------------------------------
Class: DecalBakingParameterActor.Actor.Object
	DecalBakingParameterComponent* DecalBakingParam;//[Offset: 0x3c8, Size: 8]

--------------------------------
Class: BattleInteractiveDataStruct
	int SkillID_19_1D6468514D718E7627333080FB209A4A;//[Offset: 0x0, Size: 4]
	FText IconName_6_22CFFB1A44CD620353D81E87883E0DA7;//[Offset: 0x8, Size: 24]
	SlateBrush Image_9_01E299E646738D7FC060038B27EF9890;//[Offset: 0x20, Size: 184]
	float CDTime_12_BC8E32844653869F92AF27AFA2C8A0B2;//[Offset: 0xd8, Size: 4]
	enum[] DisallowedPawnState_16_ACA978204905C4EF34088B9F68648767;//[Offset: 0xe0, Size: 16]
	bool TriggerActivityFromSkillAction_18_BFD8BC9C41BC0FA191B542862807C9F0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]

--------------------------------
Class: BP_STRUCT_WeaponScopeFOV_type
	FString ScopeGroupID_6_49CF3E400C41B18D667A9238018BF244;//[Offset: 0x0, Size: 16]
	float ScopeFov_f_7_6553D3C0033D7BFF701FD78D06949766;//[Offset: 0x10, Size: 4]
	int AimedAngle_8_3E02AB0072EDDA440E9C5E950B8A5745;//[Offset: 0x14, Size: 4]

--------------------------------
Class: STR_CameraSetting
	float TargetArmLength_30_2007ABB34694949F7A9AC4BB2C7AE57D;//[Offset: 0x0, Size: 4]
	float LagSpeed_34_CBFA29604D40F5BC431D969F9216FCF7;//[Offset: 0x4, Size: 4]
	Vector SocketOffset_26_FD34F6424351327A3F447882FEBC198D;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BP_UseZipline_C.UseZiplineComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: UseZiplineComponent.LuaActorComponent.ActorComponent.Object
	int SkillID;//[Offset: 0x1d4, Size: 4]
	void TriggerZiplineSkill(Actor* InPulley);// 0x4033584
	void ServerTriggerZiplineSkill(Actor* InPulley);// 0x36efbac
	void ServerExitZipline(Actor* InZipline);// 0x36efafc
	void ExitZipline(Actor* InZipline);// 0x4033584

--------------------------------
Class: BP_CharacterCarryBackComp_C.STCharacterCarryBackComp.LuaActorComponent.ActorComponent.Object
	void FindFreedomLocationAndRotation(Character* Character, out bool bValid, out Vector Location, out Rotator Rotation, Actor*[] ___object_Variable, Vector CallFunc_GetActorForwardVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_GetActorRightVector_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue3, Rotator CallFunc_Conv_VectorToRotator_ReturnValue4, Vector CallFunc_GetActorForwardVector_ReturnValue3, Vector CallFunc_K2_GetActorLocation_ReturnValue, int ___int_Array_Index_Variable, int ___int_Variable, Rotator K2Node_Select_Default, int ___int_Loop_Counter_Variable, Vector CallFunc_Array_Get_Item, Vector CallFunc_Multiply_VectorVector_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_BoxTraceSingle_OutHit, bool CallFunc_BoxTraceSingle_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x4033584
	Vector[] PutDownLocationOffset;//[Offset: 0x290, Size: 16]

--------------------------------
Class: InteractManagerComponent.ActorComponent.Object
	float CheckInteractInterval;//[Offset: 0x110, Size: 4]
	InteractItemComponent*[] ActivityComponentList;//[Offset: 0x118, Size: 16]
	InteractItemComponent* CurActivityComponent;//[Offset: 0x128, Size: 8]
	void RPC_Server_OnStopInteract(InteractItemComponent* InInteractItem);// 0x33ea678
	void RPC_Server_OnHandleInteract(InteractItemComponent* InInteractItem);// 0x33ea5c8
	void OnFinishCurInteract();// 0x33ea5b4
	bool HasActivityComponent(InteractItemComponent* InComponent);// 0x33ea51c
	InteractItemComponent* GetCurActivityComponent();// 0x33ea4e0
	void DeleteActivityComponent(InteractItemComponent* InComponent);// 0x33ea45c
	void ClientUpdateNewActivityCompOverlap();// 0x33ea440
	void ClientNotifyActivityCompOverlap(InteractItemComponent* ActiveComp, bool isBeginOverlap);// 0x33ea378
	bool ClientClickButton();// 0x33ea340
	void AddActivityComponent(InteractItemComponent* InComponent);// 0x33ea2bc

--------------------------------
Class: InteractItemComponent.LuaActorComponent.ActorComponent.Object
	bool bActivityEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	InteractData CurInteractData;//[Offset: 0x1d4, Size: 12]
	bool bCanIteractInFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	int SkillIndex;//[Offset: 0x1e4, Size: 4]
	int MaxTryCountConfig;//[Offset: 0x1e8, Size: 4]
	bool bShowButtonWhenActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec, Size: 1]
	bool bShowButtonWhenOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed, Size: 1]
	enum[] SpecialInteractivePawnState;//[Offset: 0x1f0, Size: 16]
	float CoolDownTime;//[Offset: 0x200, Size: 4]
	bool bShouldOccupy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 1]
	float OccupiedStateTimeout;//[Offset: 0x208, Size: 4]
	bool bButtonShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 1]
	bool bIsInFightingUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d, Size: 1]
	bool bUseCodeKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20e, Size: 1]
	int CodeKey;//[Offset: 0x210, Size: 4]
	ShapeComponent* ShapeCollision;//[Offset: 0x218, Size: 8]
	delegate OnCoolDownDelegate;//[Offset: 0x220, Size: 16]
	delegate OnUpdateButton;//[Offset: 0x230, Size: 16]
	Character* ClientMainCharacter;//[Offset: 0x250, Size: 8]
	void UpdateInteractUIInfo(Character* Character, bool bForce);// 0x33e55e0
	void TriggerSkillEvent(Character* Character);// 0x33e555c
	void StartOccupied();// 0x33e5548
	void StartCoolDown();// 0x33e5534
	void SetCurActiveCharacter(Character* InCharacter);// 0x33e54b8
	void SetActivityEnable(bool bEnable);// 0x33e5434
	void ServerStopInteract();// 0x33e5418
	void OnServerHandleInteract(Character* Character);// 0x33e539c
	void OnRep_CurInteractData();// 0x33e5388
	void OnOccupyFinished();// 0x33e5374
	void OnHandleSkillEndEvent(Character* Character, enum StopReason, int SkillID);// 0x33e5278
	void OnFinishInteract(Character* Character, bool bIsOccupied);// 0x33e51b8
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x33e5084
	void OnCoolDownFinished();// 0x33e5070
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x33e4e90
	bool LocalStartActive(Character* Character);// 0x33e4df8
	void LocalReset(Character* Character);// 0x33e4d74
	bool LocalInterruptActive(Character* Character);// 0x33e4cdc
	bool LocalActiveFinished(Character* Character);// 0x33e4c44
	bool IsOccupied();// 0x33e4c0c
	bool IsNoneInteract();// 0x33e4bd4
	bool IsInteracting();// 0x33e4b9c
	bool IsCoolingDown();// 0x33e4b64
	bool IsAllowInteractive(Character* Character, out int Reason, bool bEanbleSimulated);// 0x33e4a40
	Character* GetMainCharacter();// 0x33e4a0c
	enum GetCurInteractState();// 0x33e49c8
	Character* GetActivedCharacter();// 0x33e4990
	bool CheckInteracterIsMe(Character* Character);// 0x33e4900
	bool BPStartActive(Character* Character, bool bSuccess, bool bClient);// 0x33e47e0
	void BPServerHandleInteract(Character* Character);// 0x33e475c
	void BPReset(Character* Character);// 0x33e46d8
	bool BPInterruptActive(Character* Character, bool bSuccess, bool bClient);// 0x33e45b8
	void BPInteractStateChange();// 0x4033584
	bool BPClientClickButtonFailed(Character* Character, int Reason);// 0x4033584
	bool BPAllowShowButton(Character* Character, out int Reason);// 0x33e44d4
	bool BPAllowInteractive(Character* Character);// 0x33e443c
	bool BPAllowClickButton(Character* Character);// 0x33e43a4
	bool BPActiveFinished(Character* Character, bool bSuccess, bool bClient);// 0x33e4284
	bool AllowShowButton(Character* Character, out int Reason);// 0x33e41a0
	bool AllowInteractive(Character* Character, out int Reason);// 0x33e40bc
	bool AllowClickButton(Character* Character, out int Reason);// 0x33e3fd8

--------------------------------
Class: InteractData
	enum InteractState;//[Offset: 0x0, Size: 1]
	bool bIsCoolingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	Character* CurActiveCharacter;//[Offset: 0x4, Size: 8]

--------------------------------
Class: BuildSystemComp_BP_C.STBuildSystemComponent.BuildSystemComponent.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x450, Size: 8]
	Rotator GetNewDestRotation(Rotator DestRotation, Actor* CacheActor, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, Rotator CallFunc_MakeRotator_ReturnValue);// 0x4033584
	bool IsLocationValid(Vector Location, float MaxBuildDist, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSizeSquared_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x4033584
	Vector GetNewDestLocation(Vector DestLocation, Actor* CacheActor, Vector ViewLocation, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FMax_ReturnValue, Vector CallFunc_MakeVector_ReturnValue);// 0x4033584
	bool BPProcessNothingHitTrace(Vector DestLocation, Rotator DestRotation, float MaxBuildDist, int buildIndex, out Vector OutLocation, Vector TempOutLocation, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_GetCDOByIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsLocationValid_ReturnValue, Actor*[] ___object_Variable, FString CallFunc_Conv_VectorToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, byte[] K2Node_MakeArray_Array, HitResult[] CallFunc_LineTraceMultiForObjects_OutHits, bool CallFunc_LineTraceMultiForObjects_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BuildingGridComponent* K2Node_DynamicCast_AsBuilding_Grid_Component, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_CheckShouldSkipByVisibility_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue, bool CallFunc_DoesImplementInterface_ReturnValue, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x4033584
	bool BPCheckPlacement(out HitResult[] HitArray, Vector BoxExtent, BuildingData CurBuildData, Rotator ControlRot, Vector ViewLocation, out Vector OutLocation, out bool bHasForbiddenObject, bool TempHasForbiddenObject, Vector TempDestLcation, Vector TempOutLocation, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Actor* CallFunc_GetCDOByIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue3, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, int ___int_Array_Index_Variable, float CallFunc_VSizeSquared_ReturnValue, HitResult CallFunc_Array_Get_Item, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_CheckShouldSkipByVisibility_ReturnValue, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Actor*[] ___object_Variable, byte[] K2Node_MakeArray_Array, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit2, bool CallFunc_BreakHitResult_bInitialOverlap2, float CallFunc_BreakHitResult_Time2, float CallFunc_BreakHitResult_Distance2, Vector CallFunc_BreakHitResult_Location2, Vector CallFunc_BreakHitResult_ImpactPoint2, Vector CallFunc_BreakHitResult_Normal2, Vector CallFunc_BreakHitResult_ImpactNormal2, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat2, Actor* CallFunc_BreakHitResult_HitActor2, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent2, FName CallFunc_BreakHitResult_HitBoneName2, int CallFunc_BreakHitResult_HitItem2, int CallFunc_BreakHitResult_FaceIndex2, Vector CallFunc_BreakHitResult_TraceStart2, Vector CallFunc_BreakHitResult_TraceEnd2, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Conv_VectorToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x4033584
	bool ProccessNothingHitTraceOverlap(out Vector DestLocation, out Rotator DestRotation, float MaxBuildDist, out Vector OutLocation, int buildIndex, out Vector ViewLocation, Vector TempOutLocation, int ___int_Array_Index_Variable, Actor* CallFunc_GetCDOByIndex_ReturnValue, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_GetNewDestRotation_ReturnValue, bool CallFunc_IsLocationValid_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Actor* CallFunc_GetCDOByIndex_ReturnValue2, bool CallFunc_IsValid_ReturnValue, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base2, bool K2Node_DynamicCast_bSuccess2, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Actor*[] ___object_Variable, byte[] K2Node_MakeArray_Array, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_GetNewDestLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, HitResult[] CallFunc_BoxTraceMultiForObjects_OutHits, bool CallFunc_BoxTraceMultiForObjects_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_CheckShouldSkipByVisibility_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue, bool CallFunc_DoesImplementInterface_ReturnValue, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2);// 0x4033584
	bool CheckPlacementOverlap(out HitResult[] HitArray, out Vector OutLocation, out Vector BoxExtent, out BuildingData CurBuildData, out Rotator BuildRotation, out Rotator ControlRot, out Vector ViewLocation, out bool HasForbiddenObject, bool TempHasForbiddenObject, Vector TempDestLcation, Vector TempOutLocation, Vector CallFunc_BPCheckPlacement_OutLocation, bool CallFunc_BPCheckPlacement_bHasForbiddenObject, bool CallFunc_BPCheckPlacement_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, int ___int_Array_Index_Variable, HitResult CallFunc_Array_Get_Item, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_CheckShouldSkipByVisibility_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, Actor* CallFunc_GetCDOByIndex_ReturnValue, Rotator CallFunc_GetNewDestRotation_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue3, Actor* CallFunc_GetCDOByIndex_ReturnValue2, bool CallFunc_IsValid_ReturnValue, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, float CallFunc_VSizeSquared_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue3, int CallFunc_Subtract_IntInt_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue, Actor* CallFunc_GetCDOByIndex_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BuildingActorBase* K2Node_DynamicCast_AsBuilding_Actor_Base2, bool K2Node_DynamicCast_bSuccess2, byte[] K2Node_MakeArray_Array, Vector CallFunc_GetNewDestLocation_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Actor*[] ___object_Variable, FString CallFunc_Conv_VectorToString_ReturnValue2, HitResult CallFunc_BoxTraceSingleForObjects_OutHit, bool CallFunc_BoxTraceSingleForObjects_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_BreakHitResult_bBlockingHit2, bool CallFunc_BreakHitResult_bInitialOverlap2, float CallFunc_BreakHitResult_Time2, float CallFunc_BreakHitResult_Distance2, Vector CallFunc_BreakHitResult_Location2, Vector CallFunc_BreakHitResult_ImpactPoint2, Vector CallFunc_BreakHitResult_Normal2, Vector CallFunc_BreakHitResult_ImpactNormal2, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat2, Actor* CallFunc_BreakHitResult_HitActor2, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent2, FName CallFunc_BreakHitResult_HitBoneName2, int CallFunc_BreakHitResult_HitItem2, int CallFunc_BreakHitResult_FaceIndex2, Vector CallFunc_BreakHitResult_TraceStart2, Vector CallFunc_BreakHitResult_TraceEnd2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_CheckObjectIsOneOfTheTemplate_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x4033584
	bool ShouldEnableDoubleTouchMode(bool CallFunc_NotEqual_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	bool IsCanPlaceBuildingBP(int InBuildID, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_BuildingActorTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, byte CallFunc_GetRole_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, BackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, int CallFunc_GetItemCountByItemSpecialID_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void InitBuildDataFromDataTable();// 0x4033584
	void OnConstructionComplete_Event(bool bWasSuccessful, byte ConstructionType, bool bIsFromServer);// 0x4033584
	void OnInsufficientMaterial_Event(byte BuildType);// 0x4033584
	void RegisterUIEvents();// 0x4033584
	void CustomEvent(float FloatValue);// 0x4033584
	void UpdateParameters();// 0x4033584
	void CustomEvent(int IntValue);// 0x4033584
	void CustomEvent(int IntValue);// 0x4033584
	void CustomEvent(float FloatValue);// 0x4033584
	void LuaReceiveBeginPlay();// 0x4033584
	void TryAttachToMoveablePlatform(Actor* SpawnedBuilding, Vector BuildLocation);// 0x4033584
	void ExecuteUbergraph_BuildSystemComp_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, bool ___bool_Variable, FString ___string_Variable, FString ___string_Variable2, Actor*[] ___object_Variable, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, int ___int_Array_Index_Variable, bool ___bool_Variable2, delegate K2Node_CreateDelegate_OutputDelegate3, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, bool CallFunc_GetIsHasInitData_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, UAELoadedClassManager* CallFunc_Get_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, byte[] K2Node_MakeArray_Array, byte[] K2Node_MakeArray_Array2, bool K2Node_CustomEvent_bWasSuccessful, byte K2Node_CustomEvent_ConstructionType, bool K2Node_CustomEvent_bIsFromServer, byte K2Node_CustomEvent_BuildType, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString K2Node_Select_Default, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, float K2Node_CustomEvent_FloatValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, int ___int_Loop_Counter_Variable3, delegate K2Node_CreateDelegate_OutputDelegate4, int CallFunc_Add_IntInt_ReturnValue3, int K2Node_CustomEvent_IntValue2, float CallFunc_Conv_IntToFloat_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, int K2Node_CustomEvent_IntValue, Controller* CallFunc_GetControllerSafety_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, float K2Node_CustomEvent_FloatValue, bool CallFunc_IsEditor_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess4, UTSkillManagerComponent* CallFunc_GetSkillManager_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate5, UAESkillManagerComponent* K2Node_DynamicCast_AsUAESkill_Manager_Component, bool K2Node_DynamicCast_bSuccess5, int[] CallFunc_GetCurSkillIDs_ReturnValue, int CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate6, int CallFunc_Array_Length_ReturnValue2, int ___int_Array_Index_Variable3, bool CallFunc_Less_IntInt_ReturnValue2, FName CallFunc_Array_Get_Item2, BP_STRUCT_BuildingActorTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue3, float CallFunc_Conv_IntToFloat_ReturnValue4, BuildingConsumeData K2Node_MakeStruct_BuildingConsumeData, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, byte[] K2Node_Select2_Default, FString CallFunc_GetTableData_String_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue3, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess6, BuildingData K2Node_MakeStruct_BuildingData, UTSkillManagerComponent* CallFunc_GetSkillManager_ReturnValue2, UAESkillManagerComponent* K2Node_DynamicCast_AsUAESkill_Manager_Component2, bool K2Node_DynamicCast_bSuccess7, int[] CallFunc_GetCurSkillIDs_ReturnValue2, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue3, Actor* K2Node_Event_SpawnedBuilding, Vector K2Node_Event_BuildLocation, byte[] K2Node_MakeArray_Array3, bool CallFunc_IsValid_ReturnValue3, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_ComponentHasTag_ReturnValue);// 0x4033584
	UAEDataTable* DataTable;//[Offset: 0x458, Size: 8]
	bool bPNHDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	bool bCPODebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	bool bOverlapPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 1]

--------------------------------
Class: STBuildSystemComponent.BuildSystemComponent.LuaActorComponent.ActorComponent.Object
	delegate OnInsufficientMaterial;//[Offset: 0x400, Size: 16]
	int CurrentUIBuildingID;//[Offset: 0x410, Size: 4]
	class ConstructBot* ConstructBotTemplate;//[Offset: 0x418, Size: 8]
	bool hasConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	int MaxmumBuildingAllowed;//[Offset: 0x424, Size: 4]
	ConstructBot* ConstructBot;//[Offset: 0x428, Size: 8]
	STExtraPlayerController* CachedOwnerPlayerController;//[Offset: 0x430, Size: 8]
	STExtraBaseCharacter* OwnerPlayer;//[Offset: 0x440, Size: 8]
	void SpawnConstructBot();// 0x35314a8
	void SetCheatBuilding(bool IsCheat);// 0x3531424
	void SetBuildingConfig(const int Config);// 0x35313a8
	void ServerSpawnConstructBot();// 0x3531348
	void ServerDestroyConstructBot();// 0x35312e8
	void RestartConstructBot();// 0x4033584
	void PlayerControllerReconnectedHandler();// 0x35312d4
	void OnUIInterfaceCreated();// 0x35312c0
	void OnLostConnectionHandler(UAEPlayerController* Controller);// 0x353123c
	void OnControllerBeginTouch(out const Vector2D ScreenPosition);// 0x35311b4
	void OnConnectionRestoredHandler(UAEPlayerController* Controller);// 0x3531130
	void JoystickTouchBeginHandler(out const Vector2D ScreenPosition, int PointerIndex, bool IsBegin);// 0x353101c
	bool IsCanPlaceBuilding(int InBuildID, byte _TYPE);// 0x3530f48
	void InitializeComponent();// 0x3530f2c
	void InitBuildDataFromDataTable();// 0x4033584
	void HandleStopPlaceBuilding();// 0x3530f10
	void HandleStartPlaceBuilding();// 0x3530ef4
	void HandleServerPlaceBuildingSuccess(Actor* BuiltActor);// 0x3530e70
	PlayerController* GetOwnerPlayerController();// 0x3530e34
	STExtraPlayerController* GetExtraPlayerController();// 0x3530e00
	int GetCurrentBuildIDFromUI();// 0x3530dc4
	static bool GetBuildingConsumeDataByID(int InBuildingID, out BuildingConsumeData OutBuildData);// 0x3530cf0
	void DoSpawnConstructBot();// 0x3530cdc
	void DoShutdownConstructBot();// 0x3530cc8
	void DestroyConstructBot();// 0x3530cb4
	bool CustomizedCheck(out const BuildingData CurBuildData, out const Rotator DestRotation, out const Vector DestLocation);// 0x3530b18
	void BindTouchEvents();// 0x3530b04
	void BeginPlay();// 0x3530ae8
	void AddBuildingConsumeData(BuildingConsumeData InData);// 0x3530a60

--------------------------------
Class: BuildSystemComponent.LuaActorComponent.ActorComponent.Object
	bool UseFixedDistanceBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	delegate OnConstructionComplete;//[Offset: 0x1d8, Size: 16]
	delegate OnDoubleClickMode2Event;//[Offset: 0x1e8, Size: 16]
	delegate OnDoubleClickMode2PercentEvent;//[Offset: 0x1f8, Size: 16]
	float MaxmumConstructingDistance;//[Offset: 0x208, Size: 4]
	class SelectBuildActor* BuildingSelectorClass;//[Offset: 0x210, Size: 8]
	class SelectBuildActor* SelectBuildMeshClass;//[Offset: 0x218, Size: 8]
	float UpdateBuildEnableTimer;//[Offset: 0x220, Size: 4]
	float MinBuildDist;//[Offset: 0x224, Size: 4]
	float GridGroundThreshold;//[Offset: 0x228, Size: 4]
	bool AIIsOpenAdsorb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	bool AIIsOpenLeftAndRightTry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	float GridGroundCheckDepth;//[Offset: 0x230, Size: 4]
	WorldGridData WorldGridData;//[Offset: 0x234, Size: 12]
	bool bCanPlaceOnConstructableActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	int bIsFastPlacementMode;//[Offset: 0x244, Size: 4]
	int Mode2PressTouchBuildIndex;//[Offset: 0x248, Size: 4]
	bool bIsStartPreBuildMode2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	Vector2D Mode2PreBuildPos;//[Offset: 0x250, Size: 8]
	float CurrentDoubleClickDuration;//[Offset: 0x258, Size: 4]
	float ValidDoubleClickDuration;//[Offset: 0x25c, Size: 4]
	float ValidDoubleClickInterval;//[Offset: 0x260, Size: 4]
	float ValidDoubleClickDistance;//[Offset: 0x264, Size: 4]
	bool bSouldSkipOwningPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool bNativeTouchActorBuildEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool bNativeDoubleCkickBuildEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	<int,class SelectBuildActor> ActorSelectorMap;//[Offset: 0x270, Size: 80]
	class Object[] SkippingObjects;//[Offset: 0x2c0, Size: 16]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool bPickLocationDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	class Object[] FilterTemplates;//[Offset: 0x2d8, Size: 16]
	class Object[] ActorsShouldSkipVisiblityCheck;//[Offset: 0x2e8, Size: 16]
	byte BuildingGridChannel;//[Offset: 0x2f8, Size: 1]
	float MaxCanAdsorbAngle;//[Offset: 0x2fc, Size: 4]
	float SnappingDistance;//[Offset: 0x300, Size: 4]
	float SnappingDetectRadius;//[Offset: 0x304, Size: 4]
	float AIMaxCanRotateAngle;//[Offset: 0x308, Size: 4]
	FName[] BlackBuildTags;//[Offset: 0x310, Size: 16]
	float BlackTracelineTopDist;//[Offset: 0x320, Size: 4]
	float BlackTracelineDownDist;//[Offset: 0x324, Size: 4]
	bool bBPOverrideLineTraceSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bCheckPlaceActorPosSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	SelectBuildActor* SelectBuildActor;//[Offset: 0x330, Size: 8]
	int CachedCDOIndex;//[Offset: 0x358, Size: 4]
	Actor* CachedCDOActor;//[Offset: 0x360, Size: 8]
	void TryAttachToMoveablePlatform(Actor* SpawnedBuilding, Vector BuildLocation);// 0x4033584
	void StopPlaceBuilding();// 0x695d804
	void StartPrePlaceBuilding(int InBuildID, byte viewType);// 0x695d744
	void SkipCDTimeByBuildID(int InBuildID, float IncreaseRate);// 0x695d68c
	bool ShouldEnableDoubleTouchMode();// 0x695d64c
	void SetPrebuildEnabled(bool CanBePlaced, bool IsVisible);// 0x695d57c
	void ServerStopPlaceBuilding();// 0x695d51c
	void ServerStartPrePlaceBuilding();// 0x695d4bc
	void ServerPlaceBuildActor(int BuildingIndex, Vector BuildLocation, Rotator BuildRotation, uint32 InResult);// 0x695d344
	void S2C_SkipCDTimeByBuildID(int InBuildID, float IncreaseRate);// 0x695d284
	void S2C_ResetBuildngCDByBuildID(int InBuildID, float InNewCDTime);// 0x695d1c4
	void ResetBuildngCDByBuildID(int InBuildID, float InNewCDTime);// 0x695d10c
	void ResetBuildList();// 0x695d0f8
	bool ProccessNothingHitTraceOverlap(out const Vector DestLocation, out const Rotator DestRotation, const float MaxBuildDist, out Vector OutLocation, int buildIndex, out const Vector ViewLocation);// 0x4033584
	void PlaceBuildingWithIndex(int buildIndex);// 0x695d074
	void PlaceBuildingAtLocation(int buildIndex, out const Vector Loc, out const Rotator Rot);// 0x695cf54
	void PlaceBuilding();// 0x695cf38
	void OverriveDeploymentTransform(out const Rotator rotIn, out const Vector locIn, out Rotator rotOut, out Vector locOut);// 0x695cdb4
	void OverrideBuildingMaxBuildDistance(float BuildingMaxDistance, bool SetAll, int BuildingID);// 0x695ccb0
	void OnTouchedConstructableBoxEnded(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x695cbf0
	void OnTouchedConstructableBox(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x695cb30
	void OnTouchActorBuild(out const Vector2D ScreenPosition, PlayerController* Controller);// 0x695ca58
	void OnAsyncLoadingEffectFinished(ParticleSystem* EffectPtr, int buildIndex);// 0x695c8dc
	void OnAsyncLoadingBuildingFinished(class Actor AcotrPtr, int buildIndex);// 0x695c760
	bool LineTraceToBlackTag(Vector BuildLocation);// 0x695c6d0
	bool IsInPreBuildingMode();// 0x695c6ac
	bool IsCanPlaceBuildingBP(int InBuildID);// 0x695c614
	bool IsCanPlaceBuilding(int InBuildID, byte _TYPE);// 0x695c540
	SoftObjectPath GetPreBuildingEffectPath(int InBuildID);// 0x4033584
	PlayerController* GetOwnerPlayerController();// 0x695c504
	float GetMaxDistance();// 0x695c4c8
	bool GetIsHasInitData();// 0x695c488
	int GetIndexByBuildingID(int BuildID);// 0x695c3fc
	byte GetCurrentBuildType();// 0x695c3c8
	Actor* GetCDOByIndex(int Index);// 0x695c33c
	BuildingData[] GetBuildingList();// 0x695c2d0
	void EnableBuildingByID(int BuildID, bool bEnable);// 0x695c210
	void DoSceenTouchBuild(int buildIndex, out const Vector2D ScreenPostion, int PointerIndex, byte _TYPE, bool IsBegin, byte CustomBuildEvent);// 0x695c040
	bool DensityCheck(out const BuildingActorDensityCheck DensityCheckParmas);// 0x695bf5c
	bool CheckShouldSkipByVisibility(PrimitiveComponent* _comp, int buildIndex);// 0x695be90
	bool CheckPlacementOverlap(out const HitResult[] HitArray, out Vector OutLocation, out const Vector BoxExtent, out const BuildingData CurBuildData, out const Rotator BuildRotation, out const Rotator ControlRot, out const Vector ViewLocation, out bool HasForbiddenObject);// 0x4033584
	bool CheckObjectIsOneOfTheTemplate(Object* Obj, class Object[] _ActorFilterTemplates);// 0x695bd08
	bool BuildAtWorldLoc(int buildIndex, out const Transform tranx, Vector EndLocation, bool bUseTrace, byte BuildType);// 0x695bb44
	bool BP_LineTraceToBlackTag(Vector BuildLocation);// 0x4033584
	void AddBuildingData(BuildingData InData);// 0x695ba18

--------------------------------
Class: SelectBuildActor.Actor.Object
	ParticleSystemComponent* SelectBuildEffect;//[Offset: 0x3c8, Size: 8]
	void SetSelectActorTemplate(ParticleSystem* Template);// 0x695e9d4
	void SetSelectActorPlacementEnable(bool PlacementEnable, bool IsVisible);// 0x695e904
	void SetIsPlacementEnable(bool Val);// 0x695e884
	void OnParticleLoaded();// 0x695e868
	bool IsCurrentPlacementEnable();// 0x695e84c
	bool GetIsPlacementEnable();// 0x695e830

--------------------------------
Class: WorldGridData
	Vector GridSize;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ConstructBot.Actor.Object
	AnimationAsset* StartupAnimation;//[Offset: 0x3c8, Size: 8]
	AnimationAsset* LoopAnimation;//[Offset: 0x3d0, Size: 8]
	AnimationAsset* ShutdownAnimation;//[Offset: 0x3d8, Size: 8]
	SkeletalMeshComponent* Mesh;//[Offset: 0x3e0, Size: 8]
	ParticleSystemComponent* GFX;//[Offset: 0x3e8, Size: 8]
	void ShutdownConstructBot();// 0x331fe0c
	void RestartConstructBot();// 0x331fdf0
	void OnLoopAnimation();// 0x331fddc
	void OnEndingAnimation();// 0x331fdc8

--------------------------------
Class: BuildingActorBase.LuaActor.Actor.Object
	bool bCustomBlockingChannels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	byte[] CustomBlockingChannels;//[Offset: 0x4b0, Size: 16]
	bool bCheckVisibilitySkipTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	class Object[] VisibilitySkipTypes;//[Offset: 0x4c8, Size: 16]
	BuildingActorWorldSnapSetup WorldSnapSetup;//[Offset: 0x4d8, Size: 36]
	float DebugHealthDistance;//[Offset: 0x4fc, Size: 4]
	Vector DebugHealthOffset;//[Offset: 0x500, Size: 12]
	class Object[] ProhibitedActorTemplateList;//[Offset: 0x510, Size: 16]
	class Object[] EnableBuildingList;//[Offset: 0x520, Size: 16]
	SoftObjectPath PreBuildingEffectPath;//[Offset: 0x530, Size: 24]
	bool CanBuildUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	bool bShouldSnapToWorldGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 1]
	float UnderWaterMaxBuildDepth;//[Offset: 0x54c, Size: 4]
	Transform DestroyedParticleTransformOffset;//[Offset: 0x550, Size: 48]
	SoftObjectPath DestroyBuildingEffectPath;//[Offset: 0x580, Size: 24]
	bool bUseExtraCenterOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	bool bUseExtraCenterRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 1]
	Vector ActorCollisionBoxExtern;//[Offset: 0x59c, Size: 12]
	Vector ActorCollisionBoxCenter;//[Offset: 0x5a8, Size: 12]
	Rotator ActorCollisionBoxRotator;//[Offset: 0x5b4, Size: 12]
	float Health;//[Offset: 0x5c0, Size: 4]
	float MaxDeviation;//[Offset: 0x5c4, Size: 4]
	float MaxTraceDepth;//[Offset: 0x5c8, Size: 4]
	bool bDoQuadTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	byte ConstructingMode;//[Offset: 0x5cd, Size: 1]
	bool bEnableOverlayPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ce, Size: 1]
	bool bAutoPickValidPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cf, Size: 1]
	float OverlayPlaceHeight;//[Offset: 0x5d0, Size: 4]
	float DetectDeath;//[Offset: 0x5d4, Size: 4]
	int MaxCountLimit;//[Offset: 0x5dc, Size: 4]
	bool bDoDensityCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	FString LuaModPath;//[Offset: 0x5e8, Size: 16]
	static void SpawnDestroyParticle(bool bSpawnParticle, out const Transform Loc, out const SoftObjectPath DestroyBuildingEffectPath, World* World);// 0x6955ca4
	void PlayDestroyAnimation(bool bUseParticle);// 0x6955c18
	void OnTakeDamageFromVehicle(Actor* DamagedActor, float ForwardSpeed, Actor* DamageCauser);// 0x4033584
	void OnPlayDestroyAnimation(bool bUseParticle);// 0x4033584
	void OnBuildingActorDamaged(float Health);// 0x6955b94
	void OnBornAnimationPlayEndInClient();// 0x4033584
	int GetBuildID();// 0x6955b78
	void BPOnOwnerChanged();// 0x4033584

--------------------------------
Class: BuildingActorWorldSnapSetup
	Vector GridSizeScale;//[Offset: 0x0, Size: 12]
	Vector Pivot;//[Offset: 0xc, Size: 12]
	Rotator SnapRotation;//[Offset: 0x18, Size: 12]

--------------------------------
Class: BuildingGridComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FName CollisionProfileName;//[Offset: 0x730, Size: 8]
	Vector BuildCenterOffset;//[Offset: 0x738, Size: 12]

--------------------------------
Class: BuildingData
	int BuildingID;//[Offset: 0x0, Size: 4]
	byte BuildingType;//[Offset: 0x4, Size: 1]
	SoftObjectPath BuildingActorClassPath;//[Offset: 0x8, Size: 24]
	byte[] BlockingChannels;//[Offset: 0x20, Size: 16]
	float MaxBuildDist;//[Offset: 0x30, Size: 4]
	float CDInterval;//[Offset: 0x34, Size: 4]
	int MaxBuildCount;//[Offset: 0x38, Size: 4]
	bool bConstructable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool bAutoRefreshCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: BP_STRUCT_BuildingActorTable_type
	int BTID_0_3793920014AA44EA3F8AC81C094E2BF4;//[Offset: 0x0, Size: 4]
	int resourcenumber_1_6E94858029572FE007491E400595BD82;//[Offset: 0x4, Size: 4]
	FString Icon_2_4A928B8000C0CF663ABCCB64094EAB7E;//[Offset: 0x8, Size: 16]
	int ID_3_13C46C806EB23C1217AC50B203294E84;//[Offset: 0x18, Size: 4]
	int restoreresourcenumber_4_695E468011AD406E67743BD300C0A132;//[Offset: 0x1c, Size: 4]
	int resourceID_5_703EA68056B5EB047B5EC0B70F854614;//[Offset: 0x20, Size: 4]
	FString BuildingName_6_226D9500201382A22B469D4F0284ADD5;//[Offset: 0x28, Size: 16]
	int SortID_7_719B368018040ECC2FDAF80F0FD5B194;//[Offset: 0x38, Size: 4]
	FString Tips_8_4BCBD14041A035173A8EC8CC09500353;//[Offset: 0x40, Size: 16]
	FString SupportedGameMode_9_52EDDA8005B096F03B4DDD31065D8B75;//[Offset: 0x50, Size: 16]
	int MaxBuildDist_10_6EE473C0608F72AF353F108E01435054;//[Offset: 0x60, Size: 4]
	int ColdDownTime_11_6BB0738075B1199C5ED781B10814AFC5;//[Offset: 0x64, Size: 4]
	int MaxCount_12_6ED335003D1A56A802F234F10BE12534;//[Offset: 0x68, Size: 4]
	int AutoRefreshCD_13_4E0365006E419CBA2E98B29700754024;//[Offset: 0x6c, Size: 4]
	int CheckItemID_14_7DCB47C038E5146B6D7D77080CE678D4;//[Offset: 0x70, Size: 4]

--------------------------------
Class: UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	<int,int> IndexOfMapID;//[Offset: 0x7f8, Size: 80]
	UTSkillEntryConfig[] SkillEntryConfigs;//[Offset: 0x898, Size: 16]
	FString SkillTableName;//[Offset: 0x8a8, Size: 16]
	FString SkillBuffTableName;//[Offset: 0x8b8, Size: 16]
	FString PropSkillMapTableName;//[Offset: 0x8c8, Size: 16]
	byte TriggerSkillEventFromRole;//[Offset: 0x8f0, Size: 1]
	GSListenerBase* CurrentGSListener;//[Offset: 0x8f4, Size: 8]
	UAESkillStringEventEffectMapForEditor*[] TriggerSkillListenerByString;//[Offset: 0x900, Size: 16]
	UAESkillEventEffectMapForEditor*[] TriggerSkillListenerByUAEEume;//[Offset: 0x910, Size: 16]
	UTSkillEventEffectMapForEditor*[] TriggerSkillListenerByUTEume;//[Offset: 0x920, Size: 16]
	UAEGSLisenterEffectMapForEditor*[] TriggerSkillListenerByGS;//[Offset: 0x930, Size: 16]
	void TriggerStringEventLocal(int SkillID, FString EventTypeStr);// 0x36cb068
	void TriggerStringEvent(int SkillID, FString EventTypeStr);// 0x36caee4
	void TriggerSkillEvent_RPC_UTSkillEventType(byte InEventEume, int SkillID, byte InFromRole);// 0x36cade8
	void TriggerSkillEvent_RPC_String(FString InEventName, int SkillID, byte InFromRole);// 0x36cacbc
	void TriggerSkillEvent_RPC_EUAESkillEvent(byte InEventEume, int SkillID, byte InFromRole);// 0x36cabc0
	void TriggerEvent(int SkillID, byte EventType);// 0x36cab00
	void TriggerCurSkillEvent_Mutil(byte UAEEvent, int SkillID);// 0x36caa40
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x36ca980
	void SetSkillAnimListAttach(bool bAttach, bool bNotReplaceTurnAnimWithReplaceMoveAnim);// 0x36ca8a8
	void SetIsAutoAddSkill(bool InAutoAdd);// 0x36ca824
	void ServerTriggerStringEvent(int SkillID, FString EventTypeStr);// 0x36ca704
	void ServerTriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x36ca614
	void RPC_Server_SkillBlackBoardKey(int InSkillID, const UAEBlackboardKeySelector[] KeySelectors, const byte[] Content, FString EventName, bool bNetMulticast);// 0x36ca3d0
	void RPC_NetMulticast_SkillBlackBoardKey(int InSkillID, const UAEBlackboardKeySelector[] KeySelectors, const byte[] Content, FString EventName);// 0x36ca218
	void RPC_Client_SkillBlackBoardKey(int InSkillID, const UAEBlackboardKeySelector[] KeySelectors, const byte[] Content, FString EventName);// 0x36ca060
	void ReplaceSkillJumpAnimList(SkillReplaceJumpAnimData[] AnimDataList);// 0x36c9e70
	void ReplaceSkillAnimList(SkillReplaceCharAnimData[] AnimDataList);// 0x36c9c80
	void OnSkillManagerInitFinish();// 0x36c9c6c
	void OnRep_SkillSynSinglePhaseData();// 0x36c9c50
	void OnRep_SkillSynData();// 0x36c9c34
	void OnGsListenerTrigger(GSListenerBase* Listener);// 0x36c9bb8
	void LocalTriggerStringEvent(int SkillID, FString EventTypeStr);// 0x36c9a44
	void HandleSkillStop(int SkillID, enum StopReason);// 0x36c9984
	void HandleSkillStart(int SkillID);// 0x36c9900
	UTSkillWidget* GetSkillWidget(int SkillID);// 0x36c986c
	FString GetSkillIconBySkillID(int SkillID);// 0x36c9778
	UTSkill* GetSkillByEntry(enum Entry);// 0x36c96e4
	byte GetRealOwnerRoleSafety();// 0x36c96a8
	int GetPropMappedSkillID(int PropID, int PropSkillLevel);// 0x36c95e4
	PropSkillMapTableRow GetPropMappedRow(int PropSkillID, int PropSkillLevel);// 0x36c9448
	int GetPropMappedAuxSkillID(int PropID, int PropSkillLevel);// 0x36c9384
	void DynamicRemoveSkill(int InSkillID);// 0x36c9300
	void DynamicAddSkill(int InSkillID);// 0x36c927c
	bool CheckPropSkillFilterGun(int PropSkillID, int PropSkillLevel, int GunID);// 0x36c9178

--------------------------------
Class: UTSkillEntryConfig
	enum Entry;//[Offset: 0x0, Size: 1]
	int SkillIndex;//[Offset: 0x4, Size: 4]
	int SkillID;//[Offset: 0x8, Size: 4]
	FString Interrupts;//[Offset: 0x10, Size: 16]

--------------------------------
Class: UAESkillStringEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	FString EventString;//[Offset: 0xa8, Size: 16]

--------------------------------
Class: UAESkillEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	byte UAESkillEventType;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: UAEGSLisenterEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.Object
	SkillGSLisenterWarpper GSLisenter;//[Offset: 0xa8, Size: 8]
	bool bIsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]

--------------------------------
Class: SkillGSLisenterWarpper
	GSListenerBase* ListenerBase;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SkillReplaceJumpAnimData
	byte JumpAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset*[] JumpAnimList;//[Offset: 0x8, Size: 16]
	AnimationAsset*[] FPPJumpAnimList;//[Offset: 0x18, Size: 16]

--------------------------------
Class: PropSkillMapTableRow
	int SkillMapID;//[Offset: 0x0, Size: 4]
	int PropID;//[Offset: 0x4, Size: 4]
	int PropSkillLevel;//[Offset: 0x8, Size: 4]
	int PropSkillID;//[Offset: 0xc, Size: 4]
	int AuxPropSkillID;//[Offset: 0x10, Size: 4]
	int[] FilterGunIDs;//[Offset: 0x18, Size: 16]
	FString PropSkillIconPath;//[Offset: 0x28, Size: 16]
	FString PropSkillUseIconPath;//[Offset: 0x38, Size: 16]
	FString PropSkillDesc;//[Offset: 0x48, Size: 16]

--------------------------------
Class: BuildingConsumeData
	int BuildingID;//[Offset: 0x0, Size: 4]
	int ConsumeItemID;//[Offset: 0x4, Size: 4]
	int ConsumeItemCount;//[Offset: 0x8, Size: 4]
	int ReturnItemCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BuildingActorDensityCheck
	bool bDoCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector Location;//[Offset: 0x4, Size: 12]
	FString LuaModPath;//[Offset: 0x10, Size: 16]

--------------------------------
Class: HoldComponent_C.ActorComponent.Object
	void HoldTime(out float Time, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x4033584
	void Release(byte FingerIndex, int CallFunc_Conv_ByteToInt_ReturnValue, float CallFunc_HoldTime_Time, PlayerController* CallFunc_GetPlayerController_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x4033584
	void Push(int FingerIndex, float CallFunc_GetTimeSeconds_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void HoldAndRelease__DelegateSignature(int FingeerIndex);// 0x4033584
	delegate HoldAndRelease;//[Offset: 0x110, Size: 16]
	float HoldTimeThreshold;//[Offset: 0x120, Size: 4]
	int HoldFingerIndex;//[Offset: 0x124, Size: 4]
	byte HoldMode;//[Offset: 0x128, Size: 1]
	float PushTime;//[Offset: 0x12c, Size: 4]
	bool IsPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]

--------------------------------
Class: BP_SkillManagerComponent_C.UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object

--------------------------------
Class: UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.LuaActorComponent.ActorComponent.Object
	void TriggerEvent(int SkillID, byte EventType);// 0x369d68c
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x369d5cc
	void SetSkillOwner(Actor* Pawn);// 0x369d548

--------------------------------
Class: CustomCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	void InterpToTargetFov(float FOV, float InterpSpeed, bool DeltaValue);// 0x33250c4

--------------------------------
Class: CharacterAnimList_Skill_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: CharacterAnimList_Parachute_C.UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x2e0, Size: 1376]
	float Priority;//[Offset: 0x840, Size: 4]
	float BlendRadius;//[Offset: 0x844, Size: 4]
	float BlendWeight;//[Offset: 0x848, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84c, Size: 1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x5c3801c

--------------------------------
Class: CharacterAnimList_Base_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: PetComponent_BP_C.STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e0, Size: 8]
	void IsFppMode(out bool Out, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void GetPetOwnerPlayerPawn(out BP_PlayerPawn_C* Out, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void GetPetPawn(out BasePetCharacter_BP_C* Out, BasePetCharacter_BP_C* K2Node_DynamicCast_AsBase_Pet_Character_BP, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void SetPetPawn(STExtraPetCharacter* InPetPawn, out STExtraPetCharacter* Out, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x4033584
	void SetPetOwnerPlayerPawn(STExtraBaseCharacter* InPlayerPawn, out STExtraBaseCharacter* Out, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x4033584
	void ResetAttachTrans(BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out2, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out3, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x4033584
	void SpawnPetWithInfo(GameModePlayerPetInfo Info, bool ___bool_Variable, bool CallFunc_IsFppMode_Out, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetLevelTable_type CallFunc_GetPetLevelCfg_Out_Row, Actor* CallFunc_GetOwner_ReturnValue, FString K2Node_Select_Default, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue, class BasePetCharacter_BP_C K2Node_ClassDynamicCast_AsBase_Pet_Character_BP, bool K2Node_ClassDynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x4033584
	void SpawnPet(class BasePetCharacter_BP_C PetClass);// 0x4033584
	void RemovePet();// 0x4033584
	void PlayerStateChange(enum State, byte changeType);// 0x4033584
	void OnOwnerPlayerPossessed(GameModePlayerPetInfo PetInfo);// 0x4033584
	void OnOwnerDetachedVehicle();// 0x4033584
	void OnRep_PetPawn();// 0x4033584
	void OnRep_PetOwnerPlayerPawn();// 0x4033584
	void ExecuteUbergraph_PetComponent_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, Actor*[] K2Node_MakeArray_Array, STExtraBaseCharacter* CallFunc_SetPetOwnerPlayerPawn_out, class BasePetCharacter_BP_C K2Node_CustomEvent_PetClass, Transform CallFunc_GetTransform_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, enum K2Node_Event_State, byte K2Node_Event_changeType, FString CallFunc_Concat_StrStr_ReturnValue, GameModePlayerPetInfo K2Node_CustomEvent_PetInfo, FString CallFunc_Concat_StrStr_ReturnValue2, STExtraPetCharacter* CallFunc_SetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out2, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsPlayer_Event_for_Pet, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out3, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out4, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out5, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out6, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_IsValid_ReturnValue6, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_IsValid_ReturnValue7, FString CallFunc_Conv_BoolToString_ReturnValue2, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out7, FString CallFunc_Concat_StrStr_ReturnValue5, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out8, bool CallFunc_IsValid_ReturnValue8, BasePetCharacter_BP_C* CallFunc_GetPetPawn_Out9, FString CallFunc_Conv_BoolToString_ReturnValue3, bool CallFunc_IsValid_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out2, BP_PlayerPawn_C* CallFunc_GetPetOwnerPlayerPawn_out3, bool CallFunc_IsValid_ReturnValue10, FString CallFunc_Conv_BoolToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue8, PetLevelInfo K2Node_MakeStruct_PetLevelInfo, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, BasePetCharacter_BP_C* CallFunc_FinishSpawningActor_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, STExtraPetCharacter* CallFunc_SetPetPawn_Out2, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, Vector CallFunc_BreakTransform_Location2, Rotator CallFunc_BreakTransform_Rotation2, Vector CallFunc_BreakTransform_Scale2, FString CallFunc_Concat_StrStr_ReturnValue12, Vector CallFunc_Add_VectorVector_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue13, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_BreakTransform_Location3, Rotator CallFunc_BreakTransform_Rotation3, Vector CallFunc_BreakTransform_Scale3, Transform CallFunc_MakeTransform_ReturnValue);// 0x4033584
	void OnRepPetPawnCalled__DelegateSignature();// 0x4033584
	class BasePetCharacter_BP_C* SpawnPetClass;//[Offset: 0x2e8, Size: 8]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x2f0, Size: 32]
	Transform SpawnTrans;//[Offset: 0x310, Size: 48]
	Actor*[] NewVar;//[Offset: 0x340, Size: 16]
	delegate OnRepPetPawnCalled;//[Offset: 0x350, Size: 16]

--------------------------------
Class: STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	STExtraBaseCharacter* PetOwnerPlayerPawn;//[Offset: 0x2d0, Size: 8]
	STExtraPetCharacter* PetPawn;//[Offset: 0x2d8, Size: 8]
	void OnRep_PetPawn();// 0x4033584
	void OnRep_PetOwnerPlayerPawn();// 0x4033584

--------------------------------
Class: STExtraPetComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool[] PetStateList;//[Offset: 0x1078, Size: 16]
	bool[] ClientDiffPetStateList;//[Offset: 0x1088, Size: 16]
	float MovementTickInterval;//[Offset: 0x1098, Size: 4]
	int PetStateNum;//[Offset: 0x109c, Size: 4]
	int RelevantCloseTime;//[Offset: 0x10a0, Size: 4]
	PetVisibilityInfo PetVisibilityInfo;//[Offset: 0x10a4, Size: 8]
	PetLevelInfo PetLevelInfo;//[Offset: 0x10ac, Size: 8]
	bool OwnerPlayerIsOnMoveBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b4, Size: 1]
	float OwnerPlayerMoveBaseCheckTime;//[Offset: 0x10b8, Size: 4]
	float OwnerPlayerCurMoveBaseCheckTime;//[Offset: 0x10bc, Size: 4]
	bool PetDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c0, Size: 1]
	STExtraBaseCharacter* PetOwnerPlayerCharacter;//[Offset: 0x10c8, Size: 8]
	byte PetRelevantType;//[Offset: 0x10d0, Size: 1]
	byte CurPetState;//[Offset: 0x10d1, Size: 1]
	delegate OnPetStateChangeDelegate;//[Offset: 0x10d8, Size: 16]
	delegate OnPetCurExecuteEventDelegate;//[Offset: 0x10e8, Size: 16]
	delegate OnPetMontageDelegate;//[Offset: 0x10f8, Size: 16]
	PetEventItem* CurExecuteEvent;//[Offset: 0x1108, Size: 8]
	PetMontageData PetCurMontage;//[Offset: 0x1110, Size: 8]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x4033584
	void SetRenderInTwoPass(bool InValue);// 0x35d1a78
	void SetPetVisibility(bool Visible);// 0x4033584
	void SetPetMontage(out const PetMontageData Data);// 0x35d19e8
	void SetCurExecuteEvent(PetEventItem* Event);// 0x35d196c
	bool PetOwnerIsAutonomous();// 0x35d1934
	void PetOwnerCharacterBecomeValid();// 0x4033584
	void PetLeaveState(byte State);// 0x35d18b8
	bool PetHasState(byte State);// 0x35d1828
	bool PetEnterState(byte ToState);// 0x35d1798
	void OwnerPlayerMoveBaseCheck();// 0x35d1784
	void OnRep_PetVisibilityInfo();// 0x35d1770
	void OnRep_PetStateList();// 0x35d175c
	void OnRep_PetStateChange();// 0x35d1748
	void OnRep_PetOwnerCharacter();// 0x35d1734
	void OnRep_PetCurMontageChange();// 0x35d1720
	void OnRep_CurExecuteEvent();// 0x35d170c
	void OnRep_AttachmentReplication();// 0x35d16f0
	void OnOwnerAvatarEquipped(enum SlotType, bool IsEquipped, int InItemID);// 0x35d15e4
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x4033584
	bool IsPetCanAppear();// 0x35d15a4
	bool IsAnimLimited(int AnimId);// 0x35d150c
	int[] GetPetUnlockAnimIds();// 0x4033584
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x4033584
	FString GetPetAnimLimitePlayerState(int AnimId);// 0x4033584
	bool ClientPredictEnterState(byte ToState);// 0x35d147c
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x35d13e4
	void BroadcastPetLeaveDisappear();// 0x35d13c8
	void BindDelegateInCpp();// 0x35d13ac

--------------------------------
Class: PetVisibilityInfo
	bool Visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PetLevelInfo
	int PetId;//[Offset: 0x0, Size: 4]
	int PetLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PetEventItem.Object
	byte EventType;//[Offset: 0x28, Size: 1]
	int EventPriority;//[Offset: 0x2c, Size: 4]
	float EventExecTime;//[Offset: 0x30, Size: 4]
	float EventMaxWaitTime;//[Offset: 0x34, Size: 4]
	bool NotEnterWaitList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	byte EnterPetState;//[Offset: 0x39, Size: 1]
	byte LeavePetState;//[Offset: 0x3a, Size: 1]
	BehaviorTree* BehaviorTree;//[Offset: 0x40, Size: 8]
	int AnimationAssetId;//[Offset: 0x48, Size: 4]
	PetMontageConfig[] MontageList;//[Offset: 0x50, Size: 16]
	PetMontageConfig[] UnlockMontageList;//[Offset: 0x60, Size: 16]
	PetMontageConfig[] RealPlayMontageList;//[Offset: 0x70, Size: 16]
	bool bIgnoreUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	bool bCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 1]
	delegate OnPetEventStartDelegate;//[Offset: 0x88, Size: 16]
	delegate OnPetEventEndDelegate;//[Offset: 0x98, Size: 16]
	STExtraPetCharacter* PetCharacter;//[Offset: 0xa8, Size: 8]
	void UpdateCanPlayMontageList();// 0x345ffbc
	void SelectRandomMontage();// 0x345ffa0
	void OnEventStart(STExtraPetCharacter* Pet);// 0x345ff1c
	void OnEventEnd();// 0x345ff00
	bool IsSameEvent(const PetWaitEventInfo* WaitEvent);// 0x345fe68

--------------------------------
Class: PetMontageConfig
	int AnimationAssetId;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PetWaitEventInfo.Object
	byte EventType;//[Offset: 0x28, Size: 1]
	float EventMaxWaitTime;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PetMontageData
	int AnimationAssetId;//[Offset: 0x0, Size: 4]
	float MontageStartTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BasePetCharacter_BP_C.STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1140, Size: 8]
	void HandleAirAttack(Vector Area, bool IsAirAttacking, bool CallFunc_IsServer_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue2, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x4033584
	void SetPetHidden(bool bHidden, bool CallFunc_Not_PreBool_ReturnValue);// 0x4033584
	void OnPetSwimmingStateChange(bool bEnter);// 0x4033584
	void GetGameModeType(out enum GameModeType, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void HandleOnOwnerWin(int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue);// 0x4033584
	void OnPetOwnerFallingModeChange(bool IsFalling, Vector PlayerLoc, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x4033584
	void StopCurMontage(AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void ChangeToDefaultAttachInfo(PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity2, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult);// 0x4033584
	void OnDelayLeaveDisappear();// 0x4033584
	void OnPetLeaveState(byte LeaveState, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_GetPetDefaultFollowType_FollowType, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	void OnPetEnterState(byte EnterState, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x4033584
	void OnPetAppearAnimEnd();// 0x4033584
	void OnPetDisappearStateChange(bool IsEnter, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void GetPetParachuteEquipments(out int[] Out);// 0x4033584
	void HandlePetStopParachute(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int[] CallFunc_GetPetParachuteEquipments_out, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x4033584
	void HandlePetStartParachute(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, int[] CallFunc_GetPetParachuteEquipments_out, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x4033584
	void DetachFromOwnerPlayer();// 0x4033584
	void InitPetAvatar(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsServer_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_HandleEquipItem_ReturnValue);// 0x4033584
	void SetPetFollowType(byte Type, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x4033584
	void PetHasDisappearState(out bool Out, bool CallFunc_PetHasState_ReturnValue, bool CallFunc_PetHasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x4033584
	void OnPetFlyAroundStateChange(bool IsEnter, bool CallFunc_IsServer_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x4033584
	void OnPetFollowStateChange(bool IsEnter, AnimMontage* CallFunc_GetCurrentMontage_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x4033584
	void UpdateAttachInfoByOwnerDefaultAvatar(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, AvatarSlotDesc[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, AvatarSlotDesc CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue);// 0x4033584
	void ResetAttachInfo(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo2, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x4033584
	void GetPetInfo(out GameModePlayerPetInfo PetInfo);// 0x4033584
	void GetPetEntity(out PetEntityComponent_BP_C* PetEntity);// 0x4033584
	void DisableUnuseComponent();// 0x4033584
	void CalcInAirAttackArea(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, Vector CallFunc_K2_GetActorLocation_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x4033584
	void SelfPetVisibleSettingChanged(bool In, bool CallFunc_PetHasDisappearState_out, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	void OtherPetVisibleSettingChanged(bool In, bool CallFunc_PetHasDisappearState_out, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	void PetOtherVisibleSetting(out bool Out, SettingConfig_C* SettingConfig, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void PetSelfVisibleSetting(out bool Out, SettingConfig_C* SettingConfig, bool ___bool_Variable, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, bool CallFunc_IsValid_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_Select_Default, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void GetPetDefaultFollowType(out byte FollowType);// 0x4033584
	void DrawPetDebugInfo(bool CallFunc_HasAuthority_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue);// 0x4033584
	void OnRep_AttachToOwner(Transform TempTrans, bool CallFunc_PetEnterState_ReturnValue, Transform CallFunc_GetFollowPos_out, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool CallFunc_K2_SetActorRotation_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue);// 0x4033584
	void AttachToOwnerPlayer(BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo, bool CallFunc_IsServer_ReturnValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter2, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo2, PetAttachInfo CallFunc_GetPetAttachInfo_AttachInfo3, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, HitResult CallFunc_K2_SetActorRelativeRotation_SweepHitResult);// 0x4033584
	void PetOwnerStopEmote(int EmoteId, int StopReason, bool CallFunc_IsServer_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetPetRspInfoWithPlayerEmoteId_Out_Row, bool CallFunc_GetPetRspInfoWithPlayerEmoteId_Found, bool CallFunc_Greater_IntInt_ReturnValue, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void PetOwnerPlayEmote(int EmoteId, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, PetEmotionEventInfo* CallFunc_SpawnObject_ReturnValue, bool CallFunc_PetEnterState_ReturnValue, DateTime CallFunc_Now_ReturnValue, int CallFunc_GetSecond_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, PetVisibilityInfo K2Node_MakeStruct_PetVisibilityInfo, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetPetRspInfoWithPlayerEmoteId_Out_Row, bool CallFunc_GetPetRspInfoWithPlayerEmoteId_Found, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AnimIdIsValid_IsValid);// 0x4033584
	void AnimIdIsValid(int AnimId, out bool IsValid, int[] CallFunc_GetPetUnlockAnimIds_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsAnimLimited_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	void GetPetRspInfoWithPlayerEmoteId(int PlayerEmoteId, out BP_STRUCT_PetPlayerEmoteTable_type Out Row, out bool found, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_PetPlayerEmoteTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x4033584
	FString GetPetAnimLimitePlayerState(int AnimId, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_PetActPlayerStateTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x4033584
	int[] GetPetUnlockAnimIds(int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, GameModePlayerPetInfo CallFunc_GetPetInfo_PetInfo, BP_STRUCT_PetLevelTable_type CallFunc_GetPetLevelCfg_Out_Row, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue);// 0x4033584
	STExtraBaseCharacter* GetPetOwnerCharacter();// 0x4033584
	void GetPetAttachInfo(out PetAttachInfo AttachInfo, PetAttachInfo CallFunc_GetCurrentAttachInfo_ReturnValue);// 0x4033584
	void GetPetEventManager(out PetEventManagerComponent* PetEventManager);// 0x4033584
	void SetOwnerCharacterPC(STExtraPlayerController* CallFunc_GetController_ReturnValue);// 0x4033584
	void GetOwnerCharacter(out BP_PlayerPawn_C* OwnerCharacter, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void SetOwnerCharacter(BP_PlayerPawn_C* Owner, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool ___bool_Variable, byte ___byte_Variable, byte ___byte_Variable2, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_HasState_ReturnValue3, bool CallFunc_HasState_ReturnValue4, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, bool CallFunc_BooleanOR_ReturnValue2, Controller* CallFunc_GetController_ReturnValue, BasePetController_BP_C* K2Node_DynamicCast_AsBase_Pet_Controller_BP, bool K2Node_DynamicCast_bSuccess, FName CallFunc_MakeLiteralName_ReturnValue, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue3, byte K2Node_Select_Default);// 0x4033584
	void GetFollowPos(float MinRadius, float MaxRadius, out Transform Out, WaterSwimActor* NewLocalVar, Vector ActorLoc, Rotator ActorRot, float CallFunc_RandomFloatInRange_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue2, Rotator CallFunc_MakeRotFromZY_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Vector K2Node_MathExpression_ReturnValue, Actor*[] ___object_Variable, Vector K2Node_MathExpression_ReturnValue2, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, WaterSwimActor* K2Node_DynamicCast_AsWater_Swim_Actor, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_Subtract_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, Transform CallFunc_MakeTransform_ReturnValue3);// 0x4033584
	void UserConstructionScript();// 0x4033584
	void Timeline_0__FinishedFunc();// 0x4033584
	void Timeline_0__UpdateFunc();// 0x4033584
	void PlayerStateChange(enum State, byte changeType);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void PetOwnerCharacterBecomeValid();// 0x4033584
	void UpdateSplineInfo();// 0x4033584
	void PetStopParchute();// 0x4033584
	void PetStartParachute();// 0x4033584
	void OnPetStateChangeEvent(byte State, bool IsEnter);// 0x4033584
	void BndEvt__PetEventManager_K2Node_ComponentBoundEvent_0_PetEventDelegate__DelegateSignature(PetWaitEventInfo* EventInfo);// 0x4033584
	void OnPetMontageEvent(PetMontageData MontageData);// 0x4033584
	void OnAsyncLoadPetAnimRes(Object* LoadObject);// 0x4033584
	void SetPetVisibility(bool Visible);// 0x4033584
	void BindEvent();// 0x4033584
	void OnOwnerWinEvent();// 0x4033584
	void OnOwnerKillSomeone();// 0x4033584
	void OnOwnerAssistKill();// 0x4033584
	void OnMoveVoiceAround(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x4033584
	void OnShotVoiceAround(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isExplosion);// 0x4033584
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x4033584
	void NotifyBpDrawDebugLineChange(bool Draw);// 0x4033584
	void DebugLineTimerEvent();// 0x4033584
	void OnPetOwnerStateInterruptEvent(enum State, enum InterruptedBy);// 0x4033584
	void OnOwnerAvatarEquipped(enum SlotType, bool IsEquipped, int InItemID);// 0x4033584
	void PetEnterPlane();// 0x4033584
	void OnPetOwnerFallingModeChangeEvent(bool IsFalling);// 0x4033584
	void OnOwnerPerspectiveChanged(bool IsFPP);// 0x4033584
	void OnOwnerHoldGrenadeStateChange();// 0x4033584
	void OnPetOwnerShoot(enum State);// 0x4033584
	void OnPetVisibility_EnterHide();// 0x4033584
	void OnPetVisibility_EnterVisible();// 0x4033584
	void OnPlayerEnterParachute();// 0x4033584
	void OnPlayerExitParachute();// 0x4033584
	void MyPetVisibleSettingTPP(bool BoolValue);// 0x4033584
	void MyPetVisibleSettingFPP(bool BoolValue);// 0x4033584
	void On(STExtraBaseCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4033584
	void ExecuteUbergraph_BasePetCharacter_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, delegate K2Node_CreateDelegate_OutputDelegate6, delegate K2Node_CreateDelegate_OutputDelegate7, delegate K2Node_CreateDelegate_OutputDelegate8, delegate K2Node_CreateDelegate_OutputDelegate9, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate10, enum K2Node_Event_State, byte K2Node_Event_changeType, delegate K2Node_CreateDelegate_OutputDelegate11, delegate K2Node_CreateDelegate_OutputDelegate12, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate13, delegate K2Node_CreateDelegate_OutputDelegate14, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter, SplineComponent*[] CallFunc_GetComponentsByTag_ReturnValue, SplineComponent* CallFunc_Array_Get_Item, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager2, delegate K2Node_CreateDelegate_OutputDelegate15, byte K2Node_CustomEvent_State3, bool K2Node_CustomEvent_IsEnter, delegate K2Node_CreateDelegate_OutputDelegate16, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate17, PetWaitEventInfo* K2Node_ComponentBoundEvent_EventInfo, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter2, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue, PetMontageData K2Node_CustomEvent_MontageData, Object* K2Node_CustomEvent_LoadObject, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_PetActionTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, bool K2Node_Event_Visible, bool CallFunc_IsServer_ReturnValue, bool CallFunc_PetOwnerIsAutonomous_ReturnValue, bool CallFunc_PetSelfVisibleSetting_out, bool CallFunc_IsServer_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_PetOtherVisibleSetting_out, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate18, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager3, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue2, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager4, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue3, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue4, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager5, Vector CallFunc_GetLocationAtTime_ReturnValue, STExtraBaseCharacter* K2Node_CustomEvent_nowCharacter, Vector K2Node_CustomEvent_posVector2, float K2Node_CustomEvent_showTime2, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, STExtraShootWeapon* K2Node_CustomEvent_nowWeapon, Vector K2Node_CustomEvent_posVector, float K2Node_CustomEvent_showTime, bool K2Node_CustomEvent_isslience, bool K2Node_CustomEvent_isExplosion, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager6, PetWaitEventInfo* CallFunc_SpawnObject_ReturnValue5, PetWaitEventInfo* K2Node_Event_Event, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager7, bool K2Node_Event_Draw, bool CallFunc_IsServer_ReturnValue3, enum K2Node_CustomEvent_State2, enum K2Node_CustomEvent_InterruptedBy, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager8, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue6, enum K2Node_Event_slotType, bool K2Node_Event_isEquipped, int K2Node_Event_InItemID, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity, byte CallFunc_GetPetDefaultFollowType_FollowType, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter3, bool CallFunc_PetHasDisappearState_out, bool CallFunc_IsHiddenByOtherSlot_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue3, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter4, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_HasState_ReturnValue, byte CallFunc_GetPetDefaultFollowType_FollowType2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate19, byte CallFunc_GetPetDefaultFollowType_FollowType3, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, byte CallFunc_GetPetDefaultFollowType_FollowType4, FName CallFunc_Conv_StringToName_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, BP_STRUCT_PetPlayerOffsetTable_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, FixPetAttachInfo K2Node_MakeStruct_FixPetAttachInfo, bool CallFunc_IsServer_ReturnValue4, bool CallFunc_PetOwnerIsAutonomous_ReturnValue2, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity2, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager9, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, bool CallFunc_EqualEqual_ByteByte_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_EqualEqual_ByteByte_ReturnValue9, bool CallFunc_BooleanAND_ReturnValue5, PetEventPlayerStateTypeSt K2Node_MakeStruct_PetEventPlayerStateTypeSt, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager10, bool CallFunc_EqualEqual_ByteByte_ReturnValue10, byte CallFunc_GetPredictPetOwnerState_Enter, byte CallFunc_GetPredictPetOwnerState_Leave, bool CallFunc_GetPredictPetOwnerState_ReturnValue, PetEntityComponent_BP_C* CallFunc_GetPetEntity_PetEntity3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_ClientPredictEnterState_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate20, bool CallFunc_BooleanAND_ReturnValue6, bool K2Node_CustomEvent_IsFalling, bool CallFunc_PetEnterState_ReturnValue, bool CallFunc_PetEnterState_ReturnValue2, bool K2Node_CustomEvent_IsFPP, delegate K2Node_CreateDelegate_OutputDelegate21, bool CallFunc_EqualEqual_ByteByte_ReturnValue11, bool CallFunc_EqualEqual_ByteByte_ReturnValue12, bool CallFunc_BooleanAND_ReturnValue7, bool CallFunc_PetSelfVisibleSetting_out2, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter5, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue8, delegate K2Node_CreateDelegate_OutputDelegate22, enum K2Node_CustomEvent_state, bool CallFunc_EqualEqual_ByteByte_ReturnValue13, PetPawnStateEventInfo* CallFunc_SpawnObject_ReturnValue7, PetEventManagerComponent* CallFunc_GetPetEventManager_PetEventManager11, bool CallFunc_PetEnterState_ReturnValue3, bool CallFunc_PetEnterState_ReturnValue4, byte CallFunc_GetPetDefaultFollowType_FollowType5, TimerHandle CallFunc_K2_SetTimer_ReturnValue, bool K2Node_CustomEvent_BoolValue2, bool K2Node_CustomEvent_BoolValue, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter6, BP_PlayerPawn_C* CallFunc_GetOwnerCharacter_OwnerCharacter7, STExtraBaseCharacter* K2Node_CustomEvent_DeadCharacter, Controller* K2Node_CustomEvent_Killer, Actor* K2Node_CustomEvent_DamageCauser, const HitResult K2Node_CustomEvent_KillingHitInfo, Vector K2Node_CustomEvent_KillingHitImpulseDir, class DamageType K2Node_CustomEvent_KillingHitDamageType);// 0x4033584
	void PetOwnerStateChangeDispatcher__DelegateSignature(enum State, byte changeType);// 0x4033584
	PetAvatarComponent_BP_C* PetAvatarComponent_BP;//[Offset: 0x1148, Size: 8]
	STBuffSystemComponent* STBuffSystem;//[Offset: 0x1150, Size: 8]
	PetEntityComponent_BP_C* PetEntity;//[Offset: 0x1158, Size: 8]
	PetEventManagerComponent* PetEventManager;//[Offset: 0x1160, Size: 8]
	float Timeline_0_Track_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0x1168, Size: 4]
	byte Timeline_0__Direction_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0x116c, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x1170, Size: 8]
	STExtraPlayerController* OwnerCharacterController;//[Offset: 0x1178, Size: 8]
	delegate PetOwnerStateChangeDispatcher;//[Offset: 0x1180, Size: 16]
	int[] UnlockAnimIds;//[Offset: 0x1190, Size: 16]
	bool AttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a0, Size: 1]
	SplineComponent* PetParachuteSpline;//[Offset: 0x11a8, Size: 8]
	SplineMeshComponent* ParachuteSpline;//[Offset: 0x11b0, Size: 8]
	bool VisibilityToSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b8, Size: 1]
	TimerHandle CheckAirAttackTimer;//[Offset: 0x11c0, Size: 8]
	Vector CurAttackArea;//[Offset: 0x11c8, Size: 12]
	bool IsInAttackArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d4, Size: 1]
	TimerHandle DebugLineTimer;//[Offset: 0x11d8, Size: 8]
	bool IsPlayingAppearAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e0, Size: 1]
	float PetAppearTime;//[Offset: 0x11e4, Size: 4]
	float PetDelayLeaveDisappearTime;//[Offset: 0x11e8, Size: 4]
	TimerHandle PetDelayLeaveDisappearTimer;//[Offset: 0x11f0, Size: 8]
	bool HasResetAttachByAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f8, Size: 1]
	enum TPlayerState;//[Offset: 0x11f9, Size: 1]
	byte TChangeType;//[Offset: 0x11fa, Size: 1]
	float TeleportMinAngle;//[Offset: 0x11fc, Size: 4]
	float TeleportMaxAngle;//[Offset: 0x1200, Size: 4]
	bool ShouldHideOnFirstPersonView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1204, Size: 1]
	Vector SwimOffset;//[Offset: 0x1208, Size: 12]
	int CountToPlayWinAnim;//[Offset: 0x1214, Size: 4]
	int MaxCountToPlayWinAnim;//[Offset: 0x1218, Size: 4]
	float IntervalToPlayWinAnim;//[Offset: 0x121c, Size: 4]
	bool bPetHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1220, Size: 1]

--------------------------------
Class: STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bEnablePetReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1118, Size: 1]
	bool bEnableTraceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1119, Size: 1]
	float DefaultTraceDeltaTime;//[Offset: 0x111c, Size: 4]
	float TraceLength;//[Offset: 0x1120, Size: 4]
	float CurrentTraceDeltaTime;//[Offset: 0x1124, Size: 4]
	byte[] TraceTypeConfig;//[Offset: 0x1128, Size: 16]
	SimulateSyncSmoothComponent* PetSimulateSyncSmooth;//[Offset: 0x1138, Size: 8]
	void TraceForward();// 0x35a4030
	SimulateSyncSmoothComponent* GetSyncSmoothComponent();// 0x35a3ffc

--------------------------------
Class: BasePetController_BP_C.STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4d8, Size: 8]
	void CalcInAirAttackArea();// 0x4033584
	void OnPlayerStopEmote(int EmoteId, int Reason, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x4033584
	void OnPlayerPlayEmote(int Emote, BlackboardComponent* CallFunc_GetBlackboard_ReturnValue);// 0x4033584
	void UserConstructionScript();// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void ExecuteUbergraph_BasePetController_BP(int EntryPoint, BehaviorTreeComponent* CallFunc_GetComponentByClass_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_RunBehaviorTree_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	BehaviorTree* CurBT;//[Offset: 0x4e0, Size: 8]
	FName PetOwnerEmoteId;//[Offset: 0x4e8, Size: 8]
	FName IsAirAttacking;//[Offset: 0x4f0, Size: 8]
	FName AirAttackArea;//[Offset: 0x4f8, Size: 8]
	TimerHandle CheckAirAttackTimer;//[Offset: 0x500, Size: 8]
	Vector CurAttackArea;//[Offset: 0x508, Size: 12]

--------------------------------
Class: STExtraFightPetController.STExtraPetController.AIController.Controller.Actor.Object
	bool bEnableUpdateControlPetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 1]
	float PetBlockDetectionDistance;//[Offset: 0x4cc, Size: 4]
	float PetBlockDetectionInterval;//[Offset: 0x4d0, Size: 4]
	int PetBlockDetectionSampleCount;//[Offset: 0x4d4, Size: 4]

--------------------------------
Class: STExtraPetController.AIController.Controller.Actor.Object
	void ChangeBehaviorTree(BehaviorTree* BTAsset);// 0x35d25e4

--------------------------------
Class: PetEventManagerComponent.ActorComponent.Object
	PetWaitEventInfo*[] WaitEventList;//[Offset: 0x110, Size: 16]
	PetEventItemIns[] EventConfigs;//[Offset: 0x120, Size: 16]
	BehaviorTree* DefaultBT;//[Offset: 0x130, Size: 8]
	BehaviorTree* CurrentBT;//[Offset: 0x138, Size: 8]
	STExtraPetController* PetController;//[Offset: 0x140, Size: 8]
	STExtraPetCharacter* PetCharacter;//[Offset: 0x148, Size: 8]
	PetEventItem* CurExecuteEvent;//[Offset: 0x150, Size: 8]
	int MaxWaitEventNum;//[Offset: 0x158, Size: 4]
	delegate OnPetEventDelegate;//[Offset: 0x160, Size: 16]
	void TriggerPetEvent(PetWaitEventInfo* Event);// 0x3461944
	void StartEventExecTimer(float ExecTime);// 0x34618c8
	void ProcessWaitEvent(float Delta);// 0x346184c
	bool GetPredictPetOwnerState(PetEventPlayerStateTypeSt StateSt, out byte Enter, out byte Leave);// 0x3461714
	PetEventItem* GetEventItem(PetWaitEventInfo* EventInfo);// 0x3461688
	void EnqueueWaitEvent(PetWaitEventInfo* Info);// 0x346160c
	void DequeueWaitEvent(bool bNeedExec);// 0x3461588
	bool CheckCanInterruptCurEvent(PetEventItem* NextEventItem);// 0x34614f8
	bool CanResponseEvent();// 0x34614c0
	bool AddPetMontageConfig(PetMontageConfig MontageConfig, byte eEventType, bool bRemove);// 0x34613b4

--------------------------------
Class: PetEventItemIns
	FString Tips;//[Offset: 0x0, Size: 16]
	PetEventItem* EventItem;//[Offset: 0x10, Size: 8]

--------------------------------
Class: PetEventPlayerStateTypeSt
	enum PawnState;//[Offset: 0x0, Size: 1]
	byte StateChangeType;//[Offset: 0x1, Size: 1]

--------------------------------
Class: PetEntityComponent_BP_C.PetEntityComponent.ActorComponent.Object
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_PetPlayerOffsetTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue, FString[] CallFunc_ParseIntoArray_ReturnValue2, FString CallFunc_Array_Get_Item, FString CallFunc_Array_Get_Item2, float CallFunc_Conv_StringToFloat_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue2, FString CallFunc_Array_Get_Item3, FString CallFunc_Array_Get_Item4, float CallFunc_Conv_StringToFloat_ReturnValue3, float CallFunc_Conv_StringToFloat_ReturnValue4, FString CallFunc_Array_Get_Item5, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Conv_StringToFloat_ReturnValue5, FString CallFunc_Array_Get_Item6, float CallFunc_Conv_StringToFloat_ReturnValue6, Rotator CallFunc_MakeRotator_ReturnValue, PetAttachInfo K2Node_MakeStruct_PetAttachInfo);// 0x4033584

--------------------------------
Class: PetEntityComponent.ActorComponent.Object
	STExtraPetCharacter* PetCharacter;//[Offset: 0x110, Size: 8]
	PetAttachInfo AttachInfo;//[Offset: 0x118, Size: 32]
	PetAttachInfo FollowAttachInfo;//[Offset: 0x138, Size: 32]
	PetAttachInfo FlyAroundAttachInfo;//[Offset: 0x158, Size: 32]
	PetAttachInfo CurAttachInfo;//[Offset: 0x178, Size: 32]
	FixPetAttachInfo[] FixAttachInfoList;//[Offset: 0x198, Size: 16]
	byte FollowType;//[Offset: 0x1a8, Size: 1]
	int[] ParachuteEquipItems;//[Offset: 0x1b0, Size: 16]
	enum[] PredictOwnerStates;//[Offset: 0x1c0, Size: 16]
	void UpdateAttachInfoList(bool bAdd, FixPetAttachInfo Info);// 0x345f968
	void OnPetStateChanged(byte State, bool IsEnter);// 0x345f8a0
	STExtraPetCharacter* GetPetCharacter();// 0x345f86c
	PetAttachInfo GetCurrentAttachInfo();// 0x345f820
	PetAttachInfo GetAttachInfoFromTable(FixPetAttachInfo Info);// 0x4033584

--------------------------------
Class: FixPetAttachInfo
	int ItemId;//[Offset: 0x0, Size: 4]
	int PetId;//[Offset: 0x4, Size: 4]
	int Priority;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PetAttachInfo
	FName AttachSocketName;//[Offset: 0x0, Size: 8]
	Vector AttachOffset;//[Offset: 0x8, Size: 12]
	Rotator AttachRotation;//[Offset: 0x14, Size: 12]

--------------------------------
Class: BP_STRUCT_PetPlayerOffsetTable_type
	int Priority_0_4534D740055E57BF79E04F1E0692B319;//[Offset: 0x0, Size: 4]
	FString ItemPetId_1_71823800373EB13632B5E93E0D64F5B4;//[Offset: 0x8, Size: 16]
	FString RelativeRotation_2_622D21C02715F60B1B6C03BB0A3B34BE;//[Offset: 0x18, Size: 16]
	FString RelativeLocation_3_7CA9FC003FA2AAD634B0A8A1090B10DE;//[Offset: 0x28, Size: 16]

--------------------------------
Class: BP_STRUCT_PetPlayerEmoteTable_type
	int PetAnimID_0_0B8EF24060CA81E759CB86EB0B9DC804;//[Offset: 0x0, Size: 4]
	int PetResponse_1_315B018079F8B5826BBD3D2B05F09FE5;//[Offset: 0x4, Size: 4]
	FString PlayerEmotePetId_2_6616D2C02A115EB56446D9F30AF4E924;//[Offset: 0x8, Size: 16]

--------------------------------
Class: PetEmotionEventInfo.PetWaitEventInfo.Object
	int EmotionId;//[Offset: 0x30, Size: 4]

--------------------------------
Class: BP_STRUCT_PetActPlayerStateTable_type
	int PetID_0_7B9998C012D880D53C70B12C0D2280B4;//[Offset: 0x0, Size: 4]
	int PetActionID_1_26FA70406D0CF0E967A9660B078EE2C4;//[Offset: 0x4, Size: 4]
	FString PetLimiteState_3_107B0EC027578F8F39A3C9B002BE9A85;//[Offset: 0x8, Size: 16]

--------------------------------
Class: BP_STRUCT_PetLevelTable_type
	int ActionID1_0_54564EC00C46D1792A24097D014062A1;//[Offset: 0x0, Size: 4]
	int KeyID_1_38C8754040A625D32E969D6F0A59B604;//[Offset: 0x4, Size: 4]
	int ActionID2_2_54574F000C46D17A2A24097C014062A2;//[Offset: 0x8, Size: 4]
	int PetLevel_3_0EFEB00033E6898053D6CAD40B4F695C;//[Offset: 0xc, Size: 4]
	int ActionCnt_4_6ED1A8806F6E05482A2429B001406784;//[Offset: 0x10, Size: 4]
	int PetID_5_0C7F3540138C63E52ED3D2E20A5EB304;//[Offset: 0x14, Size: 4]
	int ActionID5_6_545A4FC00C46D17D2A240979014062A5;//[Offset: 0x18, Size: 4]
	int ActionID4_7_54594F800C46D17C2A24097A014062A4;//[Offset: 0x1c, Size: 4]
	int ActionID3_8_54584F400C46D17B2A24097B014062A3;//[Offset: 0x20, Size: 4]
	int PetNeedExp_9_5C9DFC4020A68805594D9EAF091E67B0;//[Offset: 0x24, Size: 4]
	FString PetCharacter_10_0EB0D54006ABD083521623E20D6C9E82;//[Offset: 0x28, Size: 16]
	FString AllAction_11_64FEE580365AA5C6529430360BA1003E;//[Offset: 0x38, Size: 16]
	FString LobbyPetBP_12_6856D48026D8CEBA5718878204437A40;//[Offset: 0x48, Size: 16]
	FString PetFPPCharacter_13_2475CEC05F8CAFC156D174270BE8BD92;//[Offset: 0x58, Size: 16]
	FString PetLevelRewards_15_5109E60006928866497DD8620C3B1E13;//[Offset: 0x68, Size: 16]

--------------------------------
Class: PetPawnStateEventInfo.PetWaitEventInfo.Object
	enum PawnState;//[Offset: 0x30, Size: 1]
	byte StateChangeType;//[Offset: 0x31, Size: 1]

--------------------------------
Class: BP_STRUCT_PetActionTable_type
	int PetID_7_6745CEC017101D417C9B58B90A755B44;//[Offset: 0x0, Size: 4]
	FString PetAnimRes_8_1054B74062846F873F7F61870FE97D73;//[Offset: 0x8, Size: 16]
	FString PetActionName_9_59EBE3401D89CA4B649608870B1AA8E5;//[Offset: 0x18, Size: 16]
	int PetActionID_10_44C4A640765EB8DD578572F800DB1934;//[Offset: 0x28, Size: 4]
	FString PetActionIcon_11_0E01054077EEE9A96496CC090B191A8E;//[Offset: 0x30, Size: 16]
	int PetActionScale_13_14B83D0078112AE64FD26A6101879B95;//[Offset: 0x40, Size: 4]
	FString PetActionOffset_14_563A3CC0122E069573D974410ABC02D4;//[Offset: 0x48, Size: 16]
	int SortKey_15_4284558068BCA7003662F2D30BFA2BB9;//[Offset: 0x58, Size: 4]
	int ShowInLobby_17_19FCF54003CF4A8B499026D50669DDB9;//[Offset: 0x5c, Size: 4]
	int PetLevelSequence_18_620F97C0416DE81971E437D407E050C5;//[Offset: 0x60, Size: 4]
	int MasterLevelSequence_19_7E9F6880389AC7D05D27B6F50E5E3325;//[Offset: 0x64, Size: 4]
	int MasterActionID_20_41F257005172E64A6B5508ED0B3D43A4;//[Offset: 0x68, Size: 4]
	FString PetActionDes_21_4DEDCA007AFFDB12510AFD0F0DB194C3;//[Offset: 0x70, Size: 16]
	int PetActionQuality_22_0B0B3D40109F72EB3D20AE6206BBA139;//[Offset: 0x80, Size: 4]
	FString LobbyPetAnimRes_23_14DFB5407421995D3FD421710D4C3683;//[Offset: 0x88, Size: 16]
	int NeedResetTransform_24_2D3D5000702BED64355585DF0DB7ED2D;//[Offset: 0x98, Size: 4]
	int IsShowInWorkshop_25_6C8D7D80144A232A340D11C70E5E4DE0;//[Offset: 0x9c, Size: 4]
	int ActionPattern_26_451A10400F2D985D0AA3122602B22CDE;//[Offset: 0xa0, Size: 4]
	FString SubActions_27_2602A0000DDFB1263FBCEEF30E0D7803;//[Offset: 0xa8, Size: 16]

--------------------------------
Class: PetAvatarComponent_BP_C.PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	void PetHasEquippedItem(int ID, out bool Out, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HasLogicEquipped_ReturnValue);// 0x4033584
	void PetUnequipItemById(int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleUnEquipItem_ReturnValue);// 0x4033584
	void PetEquipItemById(int ID, AvatarCustom K2Node_MakeStruct_AvatarCustom, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x4033584
	AvatarTableData MakeAvatarTableData(out ItemDefineID InItemID, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_PetDressBlueprintTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, AvatarTableData K2Node_MakeStruct_AvatarTableData);// 0x4033584

--------------------------------
Class: PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	SkeletalMesh* MasterBoneDefualtSkeletalMesh;//[Offset: 0x860, Size: 8]
	bool IsMasterMeshSlotID(int InSlotID, ItemHandleBase* InItemHandle);// 0x345d640
	void InitMasterComponent();// 0x345d62c
	void Initialize();// 0x345d610
	void InitialAvatarParam();// 0x345d5fc

--------------------------------
Class: BP_STRUCT_PetDressBlueprintTable_type
	int Slot_0_31125FC006688BBB2E6646B20FAFCD34;//[Offset: 0x0, Size: 4]
	int ID_1_688F3A8033A7814C565560B30E5FAEF4;//[Offset: 0x4, Size: 4]
	FString Path_2_51589A804E9002622E9485530FAF46F8;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CharacterAvatarComp2_BP_C.CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xfd0, Size: 8]
	void HandlePlayerScopeInOrOut(bool bScopeIn);// 0x4033584
	void EnableAvatarAnimation(bool IsEnable, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue, MeshComponent* CallFunc_GetMeshCompBySlot_ReturnValue2, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, STClothAnimInstance* K2Node_DynamicCast_AsSTCloth_Anim_Instance, bool K2Node_DynamicCast_bSuccess2, SkirtAnimInstanceBase* K2Node_DynamicCast_AsSkirt_Anim_Instance_Base, bool K2Node_DynamicCast_bSuccess3, SkirtAnimInstanceBase* K2Node_DynamicCast_AsSkirt_Anim_Instance_Base2, bool K2Node_DynamicCast_bSuccess4, STClothAnimInstance* K2Node_DynamicCast_AsSTCloth_Anim_Instance2, bool K2Node_DynamicCast_bSuccess5);// 0x4033584
	int GetRepalceIDOnVehicle(int OriginID);// 0x4033584
	enum GetForceHideState(int InSlotID, Actor* CallFunc_GetOwner_ReturnValue, enum CallFunc_GetForceHideState_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue2, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x4033584
	enum GetBPSlotNameConfigType(BackpackAvatarHandle* InAvatarHandle, BattleItemHandle_AvatarBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Avatar_BP, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x4033584
	bool IsEnableItemDownload(int ItemId);// 0x4033584
	SoftObjectPath GetBatchDefaultBodyPath(int ___int_Variable, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue2, SoftObjectPath K2Node_Select_Default);// 0x4033584
	bool HideHeadMesh(MeshComponent* MasterBoneComp, SkeletalMesh* SkeletalMesh, SkeletalMaterial[] MatArray);// 0x4033584
	bool PutOffEquimentByResID(int resID, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, ItemDefineID K2Node_MakeStruct_ItemDefineID, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_HandleUnEquipItem_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_HasLogicEquipped_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x4033584
	bool PutOnEquipmentByResID(int resID, int CallFunc_GetBPIDByResID_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x4033584
	void IsNeedConsiderHairCut(int InSlotID, out ItemDefineID ItemDefineID, BackpackAvatarHandle* Handle, out bool Result, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, enum CallFunc_IntToType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x4033584
	int GetFakeAvatarHandleItem_InDev(int InSlotID, int InItemID, int AdditionalItemID, int CallFunc_GetFakeAvatarHandleItem_ReturnValue);// 0x4033584
	bool GenerateClientDefaultAvatar(BattleItemHandleBase* InAvatarHandle, int ___int_Variable, int ___int_Variable2, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, ItemDefineID K2Node_MakeStruct_ItemDefineID3, int ___int_Variable3);// 0x4033584
	bool BPClientPostProcessViewDataMiddle();// 0x4033584
	void ProcessGodzillaSuit(int CallFunc_TypeToInt_ReturnValue, int CallFunc_TypeToInt_ReturnValue2, int CallFunc_TypeToInt_ReturnValue3, bool CallFunc_ModifySyncDataByReplace_ReturnValue, int CallFunc_TypeToInt_ReturnValue4, int CallFunc_TypeToInt_ReturnValue5, int CallFunc_TypeToInt_ReturnValue6, bool CallFunc_ModifySyncDataByReplace_ReturnValue2, int CallFunc_TypeToInt_ReturnValue7, int CallFunc_TypeToInt_ReturnValue8, bool CallFunc_ModifySyncDataByReplace_ReturnValue3, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc, bool CallFunc_GetSyncDataBySlot_ReturnValue, bool CallFunc_IsLobbyAvatar_ReturnValue, int CallFunc_TypeToInt_ReturnValue9, bool CallFunc_EqualEqual_ByteByte_ReturnValue, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc2, bool CallFunc_GetSyncDataBySlot_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, int CallFunc_TypeToInt_ReturnValue10, int CallFunc_TypeToInt_ReturnValue11, int CallFunc_TypeToInt_ReturnValue12, bool CallFunc_ModifySyncDataByHide_ReturnValue, bool CallFunc_ModifySyncDataByReplace_ReturnValue4, int CallFunc_TypeToInt_ReturnValue13, int CallFunc_TypeToInt_ReturnValue14, int CallFunc_TypeToInt_ReturnValue15, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, AvatarSyncData CallFunc_GetSyncDataBySlot_OutSlotDesc3, bool CallFunc_GetSyncDataBySlot_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_Array_Contains_ReturnValue3, bool CallFunc_IsLobbyAvatar_ReturnValue2, bool CallFunc_IsBattleItemHandleExist_ReturnValue2);// 0x4033584
	bool IsItemHasMutilReplaceMesh(int InSlotID, out ItemDefineID InItemID, bool CallFunc_IsLobbyAvatar_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, BackpackAvatarHandle* CallFunc_GetLoadedHandle_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result);// 0x4033584
	bool IsUseDefaultReplaceModel(int InSlotID, out ItemDefineID InItemDefineID, BackpackAvatarHandle* Handle, int CallFunc_TypeToInt_ReturnValue, bool CallFunc_IsNeedConsiderHairCut_result, int CallFunc_TypeToInt_ReturnValue2, AvatarSlotDesc CallFunc_GetViewDataBySlot_OutSlotDesc, bool CallFunc_GetViewDataBySlot_ReturnValue, int CallFunc_TypeToInt_ReturnValue3, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue2);// 0x4033584
	int GetFakeAvatarHandleItem(int InSlotID, int InItemID, int AdditionalItemID, enum CallFunc_IntToType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2);// 0x4033584
	void CheckAvatarWhoHideWho(enum SlotType, ItemDefineID resID, out int[] HideSomeAvatar, out int[] HideBySomeAvatar, int[] OutHideSomeAvatar, int[] OutHideBySomeAvatar, int ___int_Array_Index_Variable, int CallFunc_TypeToInt_ReturnValue, int[] CallFunc_GetSyncDataStateBy_OutHideSlotID, int[] CallFunc_GetSyncDataStateBy_OutReplaceSlotID, int[] CallFunc_GetSyncDataStateFor_OutHideSlotID, int[] CallFunc_GetSyncDataStateFor_OutReplaceSlotID, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, enum CallFunc_IntToType_ReturnValue, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID, bool CallFunc_GetSyncDataItemID_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Conv_IntToBool_ReturnValue, int ___int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable2, int ___int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item2, ItemDefineID CallFunc_GetSyncDataItemID_OutItemDefineID2, bool CallFunc_GetSyncDataItemID_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2);// 0x4033584
	void PutOnCustomEquipmentByID(int resID, int ColorID, int PatternID, out bool Result, int CallFunc_GetBPIDByResID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue2, AvatarCustom K2Node_MakeStruct_AvatarCustom, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleEquipItem_ReturnValue);// 0x4033584
	void SetEquipmentPattern(enum SlotType, Texture* MaskGrayTexture, SlotToMatPattern K2Node_MakeStruct_SlotToMatPattern, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x4033584
	void SetEquipmentColor(enum SlotType, LinearColor MaskColor1, LinearColor MaskColor2, LinearColor MaskColor3, Texture* MaskGrayTextrue, LinearColor[] K2Node_MakeArray_Array, SlotToMatColor K2Node_MakeStruct_SlotToMatColor, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Add_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, FName CallFunc_GetClothMaterialColorName_ReturnValue, MaterialInstanceDynamic* CallFunc_GetMaterialBySlotName_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x4033584
	BackpackAvatarItemPattern* CreateAvatarItemPattern(enum InSlotType, int InPatternID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarItemPattern K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Pattern, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemPattern* CallFunc_SpawnObject_ReturnValue);// 0x4033584
	BackpackAvatarItemColor* CreateAvatarItemColor(enum InSlotType, int InColorID, UAELoadedClassManager* CallFunc_Get_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class BackpackAvatarItemColor K2Node_ClassDynamicCast_AsBackpack_Avatar_Item_Color, bool K2Node_ClassDynamicCast_bSuccess, BackpackAvatarItemColor* CallFunc_SpawnObject_ReturnValue);// 0x4033584
	int GetEquipmentSkinItemID(int InItemID, BackpackBlueprintUtils* CallFunc_GetBPUtils_ReturnValue, BackpackBlueprintUtils_BP_C* K2Node_DynamicCast_AsBackpack_Blueprint_Utils_BP, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerController* CallFunc_GetController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetEquipmentSkinIDByAvatar_SkinItemID);// 0x4033584
	void Bp_ProcessAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue);// 0x4033584
	void Bp_ProcessAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID, bool CallFunc_IsDedicatedServer_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BackpackComponent* CallFunc_GetBackpackComponentFromCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_DisuseItem_ReturnValue);// 0x4033584
	bool PutOnDefaultEquipment(BackpackAvatarHandle* ItemHandle, ItemDefineID CallFunc_GetDefineID_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue);// 0x4033584
	bool InitBodyMeshByHead(out ItemDefineID InItemID, BackpackAvatarHandle* InAvatarHandle, int[] TempBodyResIDList, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int ___int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AvatarCustom K2Node_MakeStruct_AvatarCustom, bool CallFunc_HandleEquipItem_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_AvatarDefaultConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_Split_LeftS2, FString CallFunc_Split_RightS2, bool CallFunc_Split_ReturnValue2, int CallFunc_Conv_StringToInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue2, ItemDefineID K2Node_MakeStruct_ItemDefineID, ItemDefineID K2Node_MakeStruct_ItemDefineID2, int CallFunc_Conv_StringToInt_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue4, FString CallFunc_Split_LeftS3, FString CallFunc_Split_RightS3, bool CallFunc_Split_ReturnValue3, int CallFunc_Conv_StringToInt_ReturnValue5, int CallFunc_Conv_StringToInt_ReturnValue6, ItemDefineID K2Node_MakeStruct_ItemDefineID3);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void Bp_EventAvatarLogicEquipped(int SlotID, ItemDefineID NewItemID, ItemDefineID OldItemID);// 0x4033584
	void Bp_EventAvatarLogicUnequipped(int SlotID, ItemDefineID OldItemID);// 0x4033584
	void PreHanleEquipCloth(const BattleItemUseTarget Target, BackpackAvatarHandle* InAvatarHandle, enum Reason);// 0x4033584
	void ClearEventFromOnAvatarEquippedEvent();// 0x4033584
	void OnPlayerScopeIn(bool bIsBegin);// 0x4033584
	void OnPlayerScopeOut(bool bIsBegin);// 0x4033584
	void ExecuteUbergraph_CharacterAvatarComp2_BP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, int K2Node_CustomEvent_SlotID2, ItemDefineID K2Node_CustomEvent_NewItemID, ItemDefineID K2Node_CustomEvent_OldItemID2, int K2Node_CustomEvent_SlotID, ItemDefineID K2Node_CustomEvent_OldItemID, BattleItemUseTarget K2Node_Event_Target, BackpackAvatarHandle* K2Node_Event_InAvatarHandle, enum K2Node_Event_Reason, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_bIsBegin2, bool K2Node_CustomEvent_bIsBegin);// 0x4033584
	BackpackAvatarItemColor* BasedAvatarColorHandle;//[Offset: 0xfd8, Size: 8]
	BackpackAvatarItemPattern* BasedAvatarPatternHandle;//[Offset: 0xfe0, Size: 8]
	int[] HoodClothSubTypeMap;//[Offset: 0xfe8, Size: 16]
	enum PreEquipClothReason;//[Offset: 0xff8, Size: 1]
	SkeletalMesh* MaleBatchBodySoftPath;//[Offset: 0x1000, Size: 40]
	SkeletalMesh* FemaleBatchBodySoftPath;//[Offset: 0x1028, Size: 40]
	bool bForbidBindAvatarEquippedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1050, Size: 1]
	int[] NeedModifyVehicleID;//[Offset: 0x1058, Size: 16]
	<enum,int> SlotToFakeHandleMap;//[Offset: 0x1068, Size: 80]

--------------------------------
Class: STClothAnimInstance.AnimInstance.Object
	enum AnimInstanceType;//[Offset: 0x3c8, Size: 1]
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x3d0, Size: 8]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool C_IsSimulatCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	float C_BlendFactorInLobby;//[Offset: 0x3dc, Size: 4]
	float C_BlendFactorInBattle;//[Offset: 0x3e0, Size: 4]
	float C_MoveThreshold;//[Offset: 0x3e4, Size: 4]
	float C_BlendScaleThreshold;//[Offset: 0x3e8, Size: 4]
	float C_BlendScale;//[Offset: 0x3ec, Size: 4]
	SkeletalMeshComponent* ParentMesh;//[Offset: 0x3f8, Size: 8]
	Vector LastLocation;//[Offset: 0x400, Size: 12]
	SkeletalMeshComponent* TryGetParentMeshComponent();// 0x353d3ec
	bool isCothAnimEnable();// 0x353d3b4
	void EnableClothAnim();// 0x353d3a0
	void DisableClothAnim();// 0x353d38c

--------------------------------
Class: SkirtAnimInstanceBase.AvatarDynamicAnimInstance.AnimInstance.Object
	byte CurrentPoseType;//[Offset: 0x3e0, Size: 1]
	bool IsOnMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	bool IsInParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 1]
	Vector PawnCurVelocity;//[Offset: 0x3e4, Size: 12]
	CharacterAvatarComponent2* AvatarComp;//[Offset: 0x3f0, Size: 8]
	int gender;//[Offset: 0x3f8, Size: 4]
	bool IsBackpackEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	bool IsLobbyPawnRotating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	bool IsWindEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 1]
	bool IsLobbyActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ff, Size: 1]
	bool IsUsingSpecialIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool AllowSKMeshCorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	bool bParachuteWindFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x402, Size: 1]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x408, Size: 8]
	STExtraLobbyCharacter* OwnerLobbyCharacter;//[Offset: 0x410, Size: 8]
	SkeletalMeshComponent* OwnerReAttachMesh;//[Offset: 0x428, Size: 8]
	bool bTriggerIKWhenHoldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	enum[] TriggerIKStateList;//[Offset: 0x438, Size: 16]
	enum[] ForceIgnoreBoneRetargetStateList;//[Offset: 0x448, Size: 16]
	bool bAnimNotifyForceIKState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	bool AnyMontageIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	bool bForceIgnoreBoneRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45a, Size: 1]
	bool bIsEquippedAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45b, Size: 1]
	bool bIsInIKState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	void SetIsInIKState(const bool InIsInIKState);// 0x34eb500
	void SetForceIgnoreBoneRetarget(bool Ignore);// 0x34eb47c
	void RefreshIKVariableState();// 0x34eb460
	void RefreshForceIgnoreBoneRetarget();// 0x34eb444
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x34eb390
	void OnSimulateCharStateChanged(const uint64 InCurrentStates, const uint64 InPrevStates);// 0x34eb2d4
	void OnOwnerLobbyCharWeaponVisibilityChange();// 0x34eb2c0
	void OnOwnerLobbyCharChangeWeapon();// 0x34eb2ac
	void OnOwnerCharChangeWeapon(byte TargetChangeSlot);// 0x34eb230
	bool IsEnableCustomIK();// 0x34eb1f0
	bool isCothAnimEnable();// 0x34eb1b8
	bool IsAnyMontagePlayingOnOwner();// 0x34eb180
	void HandleStateChanged(enum EnteredState);// 0x34eb104
	void HandleCorectSkMeshAnim(bool bOpenCorrect);// 0x34eb080
	void EnableClothAnim();// 0x34eb06c
	void DisableClothAnim();// 0x34eb058
	void AnimNotifyForceIKState(const bool InIsForce);// 0x34eafcc

--------------------------------
Class: AvatarDynamicAnimInstance.AnimInstance.Object
	enum InGameSimulationSpace;//[Offset: 0x3c8, Size: 1]
	enum LobbySimulationSpace;//[Offset: 0x3c9, Size: 1]
	float AnimDynAlpha;//[Offset: 0x3cc, Size: 4]
	enum CurrentSimulateSpace;//[Offset: 0x3d0, Size: 1]
	SkeletalMeshComponent* OwnerCharacterMesh;//[Offset: 0x3d8, Size: 8]

--------------------------------
Class: STExtraLobbyCharacter.Character.Pawn.Actor.Object
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 1]
	FString LobbyPlayerKey;//[Offset: 0x870, Size: 16]
	bool bWeaponAnimOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	delegate lobbyCharacterSceneTypeChangeEvent;//[Offset: 0x888, Size: 16]
	byte charSceneType;//[Offset: 0x898, Size: 1]
	byte lobbyPosIdx;//[Offset: 0x899, Size: 1]
	int LocalLobbyPos;//[Offset: 0x89c, Size: 4]
	delegate lobbyCharGenderChangeDelegate;//[Offset: 0x8a0, Size: 16]
	delegate LobbyCharWeaponChangeDelegate;//[Offset: 0x8b0, Size: 16]
	delegate ChangeWeaponVisibilityDelegate;//[Offset: 0x8c0, Size: 16]
	byte lobbyGender;//[Offset: 0x8d0, Size: 1]
	class AnimInstance* LobbyMaleAnimClass;//[Offset: 0x8d8, Size: 40]
	class AnimInstance* LobbyFemaleAnimClass;//[Offset: 0x900, Size: 40]
	STExtraWeapon* curEquipWeapon;//[Offset: 0x928, Size: 8]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x930, Size: 8]
	int resultAvatarPoseIndex;//[Offset: 0x938, Size: 4]
	LobbyCharacterWeaponAnimData[] AddCharacterWeaponAnimList;//[Offset: 0x940, Size: 16]
	delegate lobbyCharPosChangeDelegate;//[Offset: 0x950, Size: 16]
	BackpackEmoteHandle* curHandle;//[Offset: 0x960, Size: 8]
	delegate EmoteMontageStartEvent;//[Offset: 0x968, Size: 16]
	delegate EmoteStartWithMainCharacterConfigEvent;//[Offset: 0x978, Size: 16]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x988, Size: 16]
	AkComponent* emoteSound_Comp;//[Offset: 0x998, Size: 8]
	LobbyGodEffectComponent* GodEffectComponent;//[Offset: 0x9a0, Size: 8]
	class LobbyGodEffectComponent* GodEffectComponentPath;//[Offset: 0x9a8, Size: 40]
	bool IsMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 1]
	delegate LobbyPoseWithFriend;//[Offset: 0x9e0, Size: 16]
	delegate LobbyCancelPoseWithFriend;//[Offset: 0x9f0, Size: 16]
	FString LuaFilePath;//[Offset: 0xa00, Size: 16]
	void UnequipWeapon(STExtraWeapon* Weapon);// 0x35c3944
	void StopGodEffect();// 0x35c3930
	void SetStatueInfo(out const CharacterStatueInfo Info);// 0x35c3858
	void SetResultAvatarPosIndex(int PosIndex);// 0x35c37dc
	void SetMaleAnimClass();// 0x35c37c0
	void SetLobbyPosIndexInAvatarScene(int pos);// 0x35c3744
	void SetLobbyPosIndex(byte pos);// 0x35c36c0
	void SetLobbyCharacterProperty(byte sceneType, byte pos, byte gender);// 0x35c35b4
	void SetLobbyAnimGender(byte gender);// 0x35c3530
	void SetFemaleAnimClass();// 0x35c3514
	void SetCharSceneType(byte sceneType);// 0x35c3490
	bool SetAddCharacterWeaponAnimList(out const LobbyCharacterWeaponAnimData[] addAnimData);// 0x35c33d0
	void PlayGodEffect(int Level);// 0x35c3354
	void PlayEmoteInterruptSound();// 0x35c3340
	bool OnStopEmote();// 0x35c3308
	bool OnPlayEmote(int EmoteId, FString ExtraInfo);// 0x35c3180
	void HandleOnCharAnimLoadingFinished(STExtraWeapon* Weapon);// 0x35c3104
	AELobbyCharAnimListComp* GetWeaponAnimComponent();// 0x35c30d0
	AnimationAsset* GetWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x35c2fcc
	int GetPosIndex();// 0x35c2f98
	byte GetLobbyPosIndex();// 0x35c2f64
	byte GetLobbyAnimGender();// 0x35c2f30
	BackpackEmoteHandle* GetEmoteHandle(int ItemId);// 0x4033584
	STExtraWeapon* GetCurrentWeapon();// 0x35c2efc
	byte GetCharSceneType();// 0x35c2ec8
	AnimationAsset* GetCharacterPlayWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int AnimIndex);// 0x35c2dc4
	AnimationAsset* GetCharacterAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x35c2cc0
	void ForceRefreshCharacterAnimation();// 0x35c2cac
	void EquipWeapon(STExtraWeapon* Weapon);// 0x35c2c30
	void CallGlobalLuaFunction(FString FunctionName);// 0x35c2b88
	void BroadcastWeaponVisibilityChange();// 0x35c2b74

--------------------------------
Class: LobbyCharacterWeaponAnimData
	byte PosIndex;//[Offset: 0x0, Size: 1]
	FString CharPosName;//[Offset: 0x8, Size: 16]
	LobbyCharacterGenderWeaponAnimData[] GenderWeaponAnimList;//[Offset: 0x18, Size: 16]

--------------------------------
Class: LobbyCharacterGenderWeaponAnimData
	byte GenderType;//[Offset: 0x0, Size: 1]
	FString GenderTypeName;//[Offset: 0x8, Size: 16]
	AnimationAsset* WeaponAnimSoftPtr;//[Offset: 0x18, Size: 40]
	AnimationAsset* WeaponAddAnimSoftPtr;//[Offset: 0x40, Size: 40]
	AnimationAsset*[] WeaponPlayAnimSoftPtrArray;//[Offset: 0x68, Size: 16]

--------------------------------
Class: LobbyGodEffectComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* ParticleEffect1;//[Offset: 0x2d0, Size: 40]
	ParticleSystem* ParticleEffect2;//[Offset: 0x2f8, Size: 40]
	ParticleSystem* ParticleEffect3;//[Offset: 0x320, Size: 40]
	ParticleSystem* ParticleEffect100;//[Offset: 0x348, Size: 40]
	ParticleSystem* ParticleEffect101;//[Offset: 0x370, Size: 40]
	ParticleSystem* ParticleEffect102;//[Offset: 0x398, Size: 40]
	ParticleSystem* ParticleEffect103;//[Offset: 0x3c0, Size: 40]
	ParticleSystem* ParticleEffect104;//[Offset: 0x3e8, Size: 40]
	class UserWidget* GodEffectWidget;//[Offset: 0x410, Size: 8]
	WidgetComponent* WidgetComponent;//[Offset: 0x418, Size: 8]
	ParticleSystemComponent*[] effects;//[Offset: 0x428, Size: 16]
	void StopEffect();// 0x33ff9e0
	void SetNameText(int TextId);// 0x33ff95c
	void PlayGodEffect(int Level, Vector Location);// 0x33ff8a4
	void OnAsyncLoadEffectFinish(int Level, Vector Location);// 0x33ff7ec

--------------------------------
Class: CharacterStatueInfo
	int AGender;//[Offset: 0x0, Size: 4]
	int Head;//[Offset: 0x4, Size: 4]
	int Hair;//[Offset: 0x8, Size: 4]
	int WeaponId;//[Offset: 0xc, Size: 4]
	FString Name;//[Offset: 0x10, Size: 16]
	FString Nation;//[Offset: 0x20, Size: 16]
	int[] AvatarList;//[Offset: 0x30, Size: 16]
	GameModePlayerItem[] AvatarInfoList;//[Offset: 0x40, Size: 16]
	int Index;//[Offset: 0x50, Size: 4]

--------------------------------
Class: AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	LobbyCharacterWeaponAnimData[] CharacterWeaponAnimEditList;//[Offset: 0x218, Size: 16]
	LobbyCharacterWeaponAnimData[] AvatarSceneCharacterWeaponAnimEditList;//[Offset: 0x228, Size: 16]
	LobbyCharacterWeaponAnimData[] LobbyWithCarCharacterWeaponAnimEditList;//[Offset: 0x238, Size: 16]
	LobbyCharacterWeaponAnimData[] LobbySystemCharacterWeaponAnimEditList;//[Offset: 0x248, Size: 16]
	int resultAvatarPoseIndex;//[Offset: 0x258, Size: 4]
	void OnAsyncLoadingFinished(LobbyAsyncLoadCharAnimParams LoadingParam);// 0x3c57904
	void InitPendingList(out LobbyCharacterWeaponAnimData[] animEditList, out SoftObjectPath[] PendingList);// 0x3c57780
	AnimationAsset* GetCharacterAnim(byte PosIdx, byte GenderType, int WeaponAnimType, byte sceneType);// 0x3c57640
	void BuildAnimMap(out LobbyCharacterWeaponAnimData[] AnimList, byte sceneType);// 0x3c57550

--------------------------------
Class: LobbyAsyncLoadCharAnimParams

--------------------------------
Class: BattleItemHandle_AvatarBP_C.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	bool BPNeedCheckCapacityInHandleDisuse(enum Reason, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x4033584
	void GetWrapperClass(out class PickUpWrapperActor WrapperClass, ItemDefineID CallFunc_GetDefineID_ReturnValue, class Object CallFunc_GetWrapperActorClass_ReturnValue, class PickUpWrapperActor K2Node_ClassDynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_ClassDynamicCast_bSuccess);// 0x4033584
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, ItemDefineID CallFunc_GetDefineID_ReturnValue, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x4033584
	void LocalHandleDisuse(FName CallFunc_GetEnumeratorName_ReturnValue);// 0x4033584
	World* GetWorldInternal(World* CallFunc_GetWorld_BP_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	void SpawnWrapperOnGround(class PickUpWrapperActor WrapperClass, bool bUseRandomLoc, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue, PickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_GetRandomPutDownLocation_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue2);// 0x4033584
	bool HandleDisuse(enum Reason, bool CallFunc_HandleDisuse_ReturnValue);// 0x4033584
	bool HandleDrop(int InCount, enum Reason, class PickUpWrapperActor CallFunc_GetWrapperClass_WrapperClass, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleDrop_ReturnValue);// 0x4033584
	bool HandlePickup(out interface class ItemContainer, BattleItemPickupInfo pickupInfo, enum Reason, bool CallFunc_HandlePickup_ReturnValue, BattleItemHandleBase* CallFunc_GetCharacterVirtualItemHandleInBackpack_ReturnValue, BackpackComponent* K2Node_DynamicCast_AsBackpack_Component, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_DynamicCast_AsActor, bool K2Node_DynamicCast_bSuccess2, Transform CallFunc_GetTransform_ReturnValue, Object* CallFunc_GetOwningObject_ReturnValue, Controller* K2Node_DynamicCast_AsController, bool K2Node_DynamicCast_bSuccess3, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4);// 0x4033584
	bool HandleUse(BattleItemUseTarget Target, enum Reason, bool CallFunc_HandleUse_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, ItemRecordData CallFunc_GetItemRecord_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, ItemAssociation K2Node_MakeStruct_ItemAssociation, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_NotEqual_IntInt_ReturnValue2, ItemDefineID CallFunc_GetDefineID_ReturnValue3, bool CallFunc_IsValid_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue4, ItemAssociation K2Node_MakeStruct_ItemAssociation2);// 0x4033584
	STExtraPlayerController* OwningPlayerController;//[Offset: 0xa90, Size: 8]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xa98, Size: 8]
	BackpackComponent* OwningBackpackComponent;//[Offset: 0xaa0, Size: 8]
	Transform SourceWrapperTrans;//[Offset: 0xab0, Size: 48]
	Transform WrapperPutdownTrans;//[Offset: 0xae0, Size: 48]
	class PickUpWrapperActor* WrapperClass;//[Offset: 0xb10, Size: 8]
	BattleItemHandleBase* CharacterItemHandle;//[Offset: 0xb18, Size: 8]
	byte SlotNameConfig;//[Offset: 0xb20, Size: 1]
	byte ForceGender;//[Offset: 0xb21, Size: 1]

--------------------------------
Class: BackpackBlueprintUtils.Object
	CustomAccessoriesData[] CustomAccessoriesData;//[Offset: 0xf8, Size: 16]
	CreateBattleItemHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0x108, Size: 16]
	<int,CreateBattleItemHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0x118, Size: 80]
	<int,enum> TClipTypeMap;//[Offset: 0x168, Size: 80]
	<int,int> mapPickupBullet;//[Offset: 0x1b8, Size: 80]
	<int,enum> mapAttachPos;//[Offset: 0x208, Size: 80]
	<int,int> CustomPickupItemIDMap;//[Offset: 0x258, Size: 80]
	PickupSetting PickupSetting;//[Offset: 0x2a8, Size: 456]
	PickupSettingForTPlan PickupSettingForMod;//[Offset: 0x470, Size: 488]
	PickupProposeData proposeData;//[Offset: 0x658, Size: 384]
	int[] NeedToShowTypeList;//[Offset: 0x7d8, Size: 16]
	int[] ConsumeableMissionItemID;//[Offset: 0x7e8, Size: 16]
	int[] CanNotAutoSwitchGrenadeList;//[Offset: 0x7f8, Size: 16]
	<int,FName> ItemSubTypeNameMap;//[Offset: 0x808, Size: 80]
	enum CurrentGameModeType;//[Offset: 0x858, Size: 1]
	FString ItemTableName;//[Offset: 0x860, Size: 16]
	FString AttachTableName;//[Offset: 0x870, Size: 16]
	FString ItemAttrsTableName;//[Offset: 0x880, Size: 16]
	FString SuitEmoteTableName;//[Offset: 0x890, Size: 16]
	FString OccupationTableName;//[Offset: 0x8a0, Size: 16]
	enum[] AvatarDownloadGameModeTypes;//[Offset: 0x8b0, Size: 16]
	<enum,int> AvatarDownloadPriority;//[Offset: 0x8c0, Size: 80]
	ActivityItemData ActivityData;//[Offset: 0x910, Size: 48]
	ActivityConfigData ActivityConfig;//[Offset: 0x940, Size: 80]
	SpecialItemData SpecialData;//[Offset: 0x990, Size: 1]
	bool bShowWeaponPendant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x991, Size: 1]
	<int,int> itemGuid2Useful;//[Offset: 0x998, Size: 80]
	<int,int> gunMainTypeUseful;//[Offset: 0x9e8, Size: 80]
	<int,int> attachMainTypeUseful;//[Offset: 0xa38, Size: 80]
	<int,int> bulletMainTypeUseful;//[Offset: 0xa88, Size: 80]
	<int,int> medicineAndGrenadeMainTypeUseful;//[Offset: 0xad8, Size: 80]
	<int,int> constructTypeUseful;//[Offset: 0xb28, Size: 80]
	<int,int> skillpropsTypeUseful;//[Offset: 0xb78, Size: 80]
	<int,bool> itemPathExist;//[Offset: 0xbc8, Size: 80]
	int[] ItemToDownload;//[Offset: 0xc18, Size: 16]
	int AvatarDownloadMaxLimitTimes;//[Offset: 0xc28, Size: 4]
	bool bAvatarDownloadClientSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2c, Size: 1]
	<int,EquipmentBrief> EquipmentBriefMap;//[Offset: 0xc30, Size: 80]
	bool bEnableTableOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc80, Size: 1]
	bool bEnableDSAvatarOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc81, Size: 1]
	int[] TombBoxItemBlackList;//[Offset: 0xc88, Size: 16]
	int CharacterVirtualItem_Type;//[Offset: 0xc98, Size: 4]
	int CharacterVirtualItem_TypeSpecificID;//[Offset: 0xc9c, Size: 4]
	<int,class BattleItemHandleBase> VirtualItemClassMap;//[Offset: 0xca0, Size: 80]
	<int> NoUseVirtualItemIDs;//[Offset: 0xcf0, Size: 80]
	bool bAutoPickIngoreBackpackCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd40, Size: 1]
	void ResetItemToDownload();// 0x32a67e0
	void ResetBattleItemHandleExist(out const ItemDefineID DefineID);// 0x32a6750
	void OnPostSwitchGameStatut(FString InGameStatus);// 0x32a66a8
	void OnGameModeTypeChanged();// 0x32a668c
	bool IsVirtualItemData(out const BattleItemData ItemData);// 0x32a65c4
	bool IsRollItem(out const PickUpItemData SearchItemResult);// 0x32a6488
	bool IsParachuteItemType(int ItemId);// 0x32a63f0
	bool IsInPveMode();// 0x4033584
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID);// 0x32a6320
	bool IsGrenadeCanAutoSwitch(int ItemId);// 0x32a6288
	bool IsGlideItemType(int ItemId);// 0x32a61f0
	bool IsGhillieSuitItemType(int ItemId);// 0x32a6158
	bool IsForceLoadLobbyHandle(out const ItemDefineID InItemID);// 0x32a60ac
	bool IsEquipmentItem(int ItemId);// 0x32a6014
	bool IsConsumableMissionItemType(int ItemId);// 0x32a5f7c
	bool IsBattleItemHandlePathExist(FString HandlePath);// 0x32a5ec0
	bool IsBattleItemHandleExist(out const ItemDefineID DefineID, bool bUseCache, bool bLobby, bool bForceLobby);// 0x32a5d44
	bool Is3BackpackID(int ID);// 0x4033584
	void Initialize();// 0x32a5d30
	void InitialItemTable();// 0x32a5d14
	bool HasTagSub(int ItemId, out const FName TagName);// 0x32a5c38
	bool HasTag(int ItemId, out const FName TagName);// 0x32a5b5c
	int GetWeaponSkinMappingID(int InWeaponSkinID);// 0x4033584
	WeaponAttachItemUnit[] GetWeaponAttachByWeaponDefineID(out const ItemDefineID DefineID, BackpackComponent* BackpackComp);// 0x32a5a0c
	FString GetRawBattleTextByType(enum Type, int InSubType);// 0x32a58d4
	FString GetRawBattleTextByRawTextID(int ID);// 0x32a57d8
	int GetPendantIDByWeaponID(int WeaponId);// 0x32a5744
	int GetItemSubTypeID(int SpecificID);// 0x4033584
	ItemRecordData GetItemRecord(int ItemId);// 0x32a5690
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName);// 0x4033584
	int GetGrenadePriorityByType(int InGrenadeType);// 0x32a55fc
	int GetEquipmentLevel(int ItemId);// 0x32a5568
	int GetEquipmentBagLevel(int ItemId);// 0x32a54d4
	int GetCustomPickupItemCountByDefineID(BackpackComponent* BackpackComp, out const ItemDefineID DefineID, out const JudgePickupUsefulItem JudgePickUseful);// 0x32a52fc
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp);// 0x32a5240
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp);// 0x32a51ac
	FString GetBPTableNameByItemID(out const ItemDefineID DefineID);// 0x32a509c
	int GetBPIDByResID(int resID);// 0x32a5008
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out const ItemDefineID DefineID);// 0x32a4eb0
	FString GetBattleItemHandlePathInner(out const ItemDefineID DefineID, bool bLobby, bool bForceLobby);// 0x32a4d14
	FString GetBattleItemHandlePath(out const ItemDefineID DefineID, bool bLobby, bool bForceLobby);// 0x32a4b70
	class Object GetBattleItemHandleClass(out const ItemDefineID DefineID);// 0x32a4ac8
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out const ItemDefineID DefineID);// 0x32a4a08
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID);// 0x32a48e0
	ItemRecordData FindItemRecord(int ItemId);// 0x32a482c
	BattleItemHandleBase* CreateVirtualItemHandle(out const ItemDefineID DefineID, Object* Outer);// 0x32a4744
	BattleItemHandleBase* CreateBattleItemHandleInner(out const ItemDefineID DefineID, Object* Outer, bool bLobby, bool bLowDevice);// 0x32a45d4
	BattleItemHandleBase* CreateBattleItemHandle(out const ItemDefineID DefineID, Object* Outer, bool bLobby);// 0x32a44a8
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);// 0x32a43ec
	BattleItemData ConstructBattleItemDataByDefineID(out const ItemDefineID DefineID);// 0x32a431c
	void ClearItemRecord();// 0x32a4308
	bool CheckItem(int ItemTableID);// 0x32a4270
	bool CheckHasItemRecord(int ItemId);// 0x32a41e0
	bool CanNotAutoSwitchToGrenade(int InGrenadeID);// 0x32a4148
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x32a408c

--------------------------------
Class: CreateBattleItemHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	Object* Outer;//[Offset: 0x18, Size: 8]
	FString Path;//[Offset: 0x20, Size: 16]
	delegate Callback;//[Offset: 0x30, Size: 16]

--------------------------------
Class: CreateBattleItemHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 16]
	FString[] PathList;//[Offset: 0x10, Size: 16]
	Object* Outer;//[Offset: 0x20, Size: 8]
	delegate Callback;//[Offset: 0x28, Size: 16]

--------------------------------
Class: PickupSetting
	int LimitBandage;//[Offset: 0x0, Size: 4]
	int LimitMedical;//[Offset: 0x4, Size: 4]
	int LimitFirstAidKit;//[Offset: 0x8, Size: 4]
	int LimitAnodyne;//[Offset: 0xc, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0x10, Size: 4]
	int LimitAdrenaline;//[Offset: 0x14, Size: 4]
	int LimitShouliudan;//[Offset: 0x18, Size: 4]
	int LimitYanwudan;//[Offset: 0x1c, Size: 4]
	int LimitZhenbaodan;//[Offset: 0x20, Size: 4]
	int LimitRanshaodan;//[Offset: 0x24, Size: 4]
	int LimitViscidityBomb;//[Offset: 0x28, Size: 4]
	int LimitGrenadeZombie;//[Offset: 0x2c, Size: 4]
	int LimitGrenadeYedan;//[Offset: 0x30, Size: 4]
	int LimitAntidote;//[Offset: 0x34, Size: 4]
	int LimitBatteryChip;//[Offset: 0x38, Size: 4]
	int LimitGameCoin;//[Offset: 0x3c, Size: 4]
	int LimitBullet9mm;//[Offset: 0x40, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x44, Size: 4]
	int Limit12koujing;//[Offset: 0x48, Size: 4]
	int Limit45koujing;//[Offset: 0x4c, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x50, Size: 4]
	int Limitbolt;//[Offset: 0x54, Size: 4]
	int LimitBullet5;//[Offset: 0x58, Size: 4]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	int LimitSniper2X;//[Offset: 0x60, Size: 4]
	int LimitSniper3X;//[Offset: 0x64, Size: 4]
	int LimitSniper4X;//[Offset: 0x68, Size: 4]
	int LimitSniper6X;//[Offset: 0x6c, Size: 4]
	int LimitSniper8X;//[Offset: 0x70, Size: 4]
	bool AutoPickupSkillProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	int LimitSkillProps;//[Offset: 0x78, Size: 4]
	int LimitSnowMan;//[Offset: 0x7c, Size: 4]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int AutoPickClipType;//[Offset: 0x84, Size: 4]
	<int,int> LimitDrugMap;//[Offset: 0x88, Size: 80]
	<int,int> LimitThrowObjMap;//[Offset: 0xd8, Size: 80]
	<int,int> LimitMultipleMirrorMap;//[Offset: 0x128, Size: 80]
	<int,int> LimitFixConsumeItemMap;//[Offset: 0x178, Size: 80]

--------------------------------
Class: PickupSettingForTPlan
	int LimitSkillProps;//[Offset: 0x0, Size: 4]
	<int,int> LimitBulletMap_XT;//[Offset: 0x8, Size: 80]
	<int,int> LimitDrugMap_XT;//[Offset: 0x58, Size: 80]
	<int,int> LimitThrowObjMap_XT;//[Offset: 0xa8, Size: 80]
	<int,int> LimitMultipleMirrorMap_XT;//[Offset: 0xf8, Size: 80]
	<int,int> LimitNormalInfillingMap_XT;//[Offset: 0x148, Size: 80]
	<int,int> LimitHalloweenInfillingMap_XT;//[Offset: 0x198, Size: 80]

--------------------------------
Class: PickupProposeData
	PickupFirstCount[] pickFirst;//[Offset: 0x0, Size: 16]
	int closeSubType;//[Offset: 0x10, Size: 4]
	int crossbowSubType;//[Offset: 0x14, Size: 4]
	int panID;//[Offset: 0x18, Size: 4]
	int pistolSubType;//[Offset: 0x1c, Size: 4]
	int gunType;//[Offset: 0x20, Size: 4]
	int specialType;//[Offset: 0x24, Size: 4]
	int specialType2;//[Offset: 0x28, Size: 4]
	int lens2ID;//[Offset: 0x2c, Size: 4]
	int lens3ID;//[Offset: 0x30, Size: 4]
	int lens4ID;//[Offset: 0x34, Size: 4]
	int lens6ID;//[Offset: 0x38, Size: 4]
	int lens8ID;//[Offset: 0x3c, Size: 4]
	int ID2Type;//[Offset: 0x40, Size: 4]
	int pistolClipSubType;//[Offset: 0x44, Size: 4]
	int SubMachineGunClipSubType;//[Offset: 0x48, Size: 4]
	int SniperClipSubType;//[Offset: 0x4c, Size: 4]
	int RifleClipSubType;//[Offset: 0x50, Size: 4]
	int gasSubID;//[Offset: 0x54, Size: 4]
	int backSubType;//[Offset: 0x58, Size: 4]
	int back3ID;//[Offset: 0x5c, Size: 4]
	int BandageID;//[Offset: 0x60, Size: 4]
	int QuickBandageID;//[Offset: 0x64, Size: 4]
	int EnergyDrinksID;//[Offset: 0x68, Size: 4]
	int AdrenalineID;//[Offset: 0x6c, Size: 4]
	int AnodyneID;//[Offset: 0x70, Size: 4]
	int Medical1ID;//[Offset: 0x74, Size: 4]
	int QuickMedical1ID;//[Offset: 0x78, Size: 4]
	int Medical2ID;//[Offset: 0x7c, Size: 4]
	int AntidoteID;//[Offset: 0x80, Size: 4]
	int BatteryChipID;//[Offset: 0x84, Size: 4]
	int GameCoinID;//[Offset: 0x88, Size: 4]
	int ZhenBaoDan;//[Offset: 0x8c, Size: 4]
	int YanWuDan;//[Offset: 0x90, Size: 4]
	int RanShaoPing;//[Offset: 0x94, Size: 4]
	int ShouLei;//[Offset: 0x98, Size: 4]
	int FlarePistolID;//[Offset: 0x9c, Size: 4]
	int[] SideMirrorList;//[Offset: 0xa0, Size: 16]
	int[] MirrorList;//[Offset: 0xb0, Size: 16]
	int ViscidityBomb;//[Offset: 0xc0, Size: 4]
	int GrenadeZombie;//[Offset: 0xc4, Size: 4]
	int GrenadeYedan;//[Offset: 0xc8, Size: 4]
	int DefaultMedicineNum;//[Offset: 0xcc, Size: 4]
	int helmetSubType;//[Offset: 0xd0, Size: 4]
	int armorSubType;//[Offset: 0xd4, Size: 4]
	int ScoreItemSubType;//[Offset: 0xd8, Size: 4]
	int SpecialNoDropItemSubType;//[Offset: 0xdc, Size: 4]
	int IceDrinkItemSubType;//[Offset: 0xe0, Size: 4]
	int IsAutoPickUpTaskSubType;//[Offset: 0xe4, Size: 4]
	int[] carryOnPlane;//[Offset: 0xe8, Size: 16]
	int CapacityThreshold;//[Offset: 0xf8, Size: 4]
	int GlideSubType;//[Offset: 0xfc, Size: 4]
	int ParachuteItemSubType;//[Offset: 0x100, Size: 4]
	int revivalCardID;//[Offset: 0x104, Size: 4]
	int SnowManID;//[Offset: 0x108, Size: 4]
	float revivalCardValidTime;//[Offset: 0x10c, Size: 4]
	int[] firewoodPriority;//[Offset: 0x110, Size: 16]
	int[] meatPriority;//[Offset: 0x120, Size: 16]
	int[] UAVList;//[Offset: 0x130, Size: 16]
	int[] ElectricityList;//[Offset: 0x140, Size: 16]
	int[] ToUseInBackpackSubList;//[Offset: 0x150, Size: 16]
	int[] ToUseInBackpackIDList;//[Offset: 0x160, Size: 16]
	int[] notExtractItemIDList;//[Offset: 0x170, Size: 16]

--------------------------------
Class: PickupFirstCount
	int pickID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActivityItemData
	ItemDefineID PumpkinLanternItem;//[Offset: 0x0, Size: 24]
	ItemDefineID PumpkinEnergyItem;//[Offset: 0x18, Size: 24]

--------------------------------
Class: ActivityConfigData
	<int,int> Lv2EnergyCount;//[Offset: 0x0, Size: 80]

--------------------------------
Class: SpecialItemData

--------------------------------
Class: EquipmentBrief
	int ItemId;//[Offset: 0x0, Size: 4]
	int ItemSubType;//[Offset: 0x4, Size: 4]
	int BPID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum socket;//[Offset: 0x18, Size: 1]

--------------------------------
Class: JudgePickupUsefulItem
	PickUpItemData MainItemData;//[Offset: 0x0, Size: 56]
	int NetGUIDOffsetValue;//[Offset: 0x38, Size: 4]
	bool DropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: BattleWeaponItemDisplayData
	FString ItemName;//[Offset: 0x0, Size: 16]
	FString WhiteIconPath;//[Offset: 0x10, Size: 16]

--------------------------------
Class: BackpackBlueprintUtils_BP_C.BackpackBlueprintUtils.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd48, Size: 8]
	bool IsForceLoadLobbyHandle(out ItemDefineID InItemID, int CallFunc_GetClothAvatarTemplateID_ReturnValue, AvatarTableData CallFunc_GetAvatarDataFromTable_OutAvatarTableData, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x4033584
	void IsSinkMode(out bool Out, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x4033584
	int GetCustomPickupItemCountByDefineID(BackpackComponent* BackpackComp, out ItemDefineID DefineID, out JudgePickupUsefulItem JudgePickUseful, int CallFunc_GetItemCountByDefineID_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Max_ReturnValue);// 0x4033584
	class Object GetBattleItemHandleClass(out ItemDefineID DefineID, UAELoadedClassManager* CallFunc_Get_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, class Object CallFunc_GetClass_ReturnValue);// 0x4033584
	bool CanNotAutoSwitchToGrenade(int InGrenadeID, bool CallFunc_Array_Contains_ReturnValue);// 0x4033584
	void PreModifyPickupSettingData(SettingConfig_C* SettingConfig, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int ___int_Variable4, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2);// 0x4033584
	bool IsConsumableMissionItemType(int ItemId, bool CallFunc_Array_Contains_ReturnValue);// 0x4033584
	int GetGrenadePriorityByType(int InGrenadeType, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x4033584
	bool IsIceDrinkEmoteIDInBackpack(int InItemID, int InEmoteID, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, UAEDataTable* CallFunc_GetDataTableStatic_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, BP_STRUCT_DrinkCompoundConfig_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	bool IsEquipmentItem(int ItemId, bool CallFunc_Map_Contains_ReturnValue);// 0x4033584
	BattleItemHandleBase* CreateVirtualItemHandle(out ItemDefineID DefineID, Object* Outer, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, class BattleItemHandleBase CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	int GetPendantIDByWeaponID(int WeaponId, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponAttrBPTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x4033584
	int GetWeaponSkinMappingID(int InWeaponSkinID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_WeaponSkinMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x4033584
	bool GetItemOperationSoundAndBank(int ItemSoundID, enum ItemOperation, out FString OutBankName, out FString OutSoundName, FString CallFunc_Concat_StrStr_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_ItemSoundTable_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x4033584
	bool IsGlideItemType(int ItemId, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	bool IsGhillieSuitItemType(int ItemId, bool CallFunc_Array_Contains_ReturnValue);// 0x4033584
	int GetEquipmentBagLevel(int ItemId, int ResultBagLevel, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, BP_STRUCT_Item_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_EqualEqual_IntInt_ReturnValue6, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, FString CallFunc_GetGameStatus_ReturnValue, FString CallFunc_ToLower_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x4033584
	int GetEquipmentLevel(int ItemId, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, int CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3);// 0x4033584
	bool Is3BackpackID(int ID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	bool IsInPveMode(bool CallFunc_IsPveMode_out);// 0x4033584
	void IsPVEMode(out bool Out, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x4033584
	void GetEquipmentSkinIDByAvatar(int InItemID, GameModePlayerEquipmentAvatar EquipmentAvatar, out int SkinItemID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue2, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow2, bool CallFunc_GetTableData_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, bool CallFunc_Conv_IntToBool_ReturnValue3, BP_STRUCT_BackpackMapping_type CallFunc_GetTableData_OutRow3, bool CallFunc_GetTableData_ReturnValue3, int CallFunc_GetEquipmentLevel_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int ___int_Variable, int ___int_Variable2, int ___int_Variable3, int ___int_Variable4, int ___int_Variable5, int ___int_Variable6, int K2Node_Select_Default, int K2Node_Select2_Default, int K2Node_Select3_Default, FString CallFunc_Concat_StrStr_ReturnValue3, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x4033584
	void ModifySetting();// 0x4033584
	void ModifyPickupSetting(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, PickupSettingForTPlan K2Node_MakeStruct_PickupSettingForTPlan, PickupSetting K2Node_MakeStruct_PickupSetting);// 0x4033584
	void ModifyBulletAndMedician(int ___int_Array_Index_Variable, bool CallFunc_IsSinkMode_out, UAEDataTable* CallFunc_GetDataTable_ReturnValue, int ___int_Loop_Counter_Variable, FName[] CallFunc_GetDataTableRowNames_OutRowNames, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_STRUCT_ArmoryConfig_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Get_Item2, int CallFunc_Add_IntInt_ReturnValue2);// 0x4033584
	int GetBPIDByResID(int resID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue);// 0x4033584
	void AddToWeaponAttachPos(int attachID, enum socket, enum CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x4033584
	void InitItemTable(delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue);// 0x4033584
	FString GetBattleItemHandlePath(out ItemDefineID DefineID, bool bLobby, bool bForceLobby, FString CallFunc_GetBattleItemHandlePathInner_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, FString CallFunc_GetPath_ReturnValue);// 0x4033584
	FString GetRawBattleTextByRawTextID(int ID, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x4033584
	FString GetRawBattleTextByType(enum Type, int InSubType, FName RowName, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchString_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, BP_STRUCT_LocalizeRes_type CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue);// 0x4033584
	int GetItemSubTypeID(int SpecificID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue);// 0x4033584
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(out ItemDefineID DefineID, FString CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, FString CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, BattleWeaponItemDisplayData K2Node_MakeStruct_BattleWeaponItemDisplayData);// 0x4033584
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2);// 0x4033584
	bool IsVirtualItemData(out BattleItemData ItemData, bool CallFunc_Greater_IntInt_ReturnValue);// 0x4033584
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, interface classNone CallFunc_GetItemHandleListByDefineID_self_CastInput, ItemHandleBase*[] CallFunc_GetItemHandleListByDefineID_ReturnValue, int CallFunc_Array_Length_ReturnValue, ItemHandleBase* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, BattleItemHandleBase* K2Node_DynamicCast_AsBattle_Item_Handle_Base, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void CreateBattleItemHandle_Character(Object* Outer, out BattleItemHandleBase* BattleItemHandle, BattleItemHandle_VirtualCharacter_C* CallFunc_SpawnObject_ReturnValue);// 0x4033584
	void CreateBattleItemHandle_Default(int Type, int ID, Object* Outer, bool bLobby, out BattleItemHandleBase* BattleItemHandle, bool CallFunc_NeedUseLowDeviceHandle_ReturnValue, int CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, int CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue, FString CallFunc_GetBPTableName_ReturnValue, class Object CallFunc_GetClass_ReturnValue, class Object CallFunc_GetClass_ReturnValue2, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base, bool K2Node_ClassDynamicCast_bSuccess, class BattleItemHandleBase K2Node_ClassDynamicCast_AsBattle_Item_Handle_Base2, bool K2Node_ClassDynamicCast_bSuccess2, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue, BattleItemHandleBase* CallFunc_SpawnObject_ReturnValue2);// 0x4033584
	void GetBattleItemFeatureData(ItemDefineID DefineID, out BattleItemFeatureData FeatureData, int CountLimit, BattleItemFeatureData BattleItemFeatureData, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData7 CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, BattleItemFeatureData K2Node_MakeStruct_BattleItemFeatureData);// 0x4033584
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(out ItemDefineID DefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData);// 0x4033584
	BattleItemHandleBase* CreateBattleItemHandle(out ItemDefineID DefineID, Object* Outer, bool bLobby, bool UseLobby, BattleItemHandleBase* Handle, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Character_BattleItemHandle, bool CallFunc_NeedUseLowDeviceHandle_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandleInner_ReturnValue, bool CallFunc_IsBattleItemHandleExist_ReturnValue, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_Default_BattleItemHandle, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x4033584
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemData[] CallFunc_GetItemListByDefineID_ReturnValue, BattleItemData CallFunc_Array_Get_Item);// 0x4033584
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID, FString CallFunc_Conv_IntToString_ReturnValue, ItemRecordData5 CallFunc_GetTableData_OutRow, bool CallFunc_GetTableData_ReturnValue, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x4033584
	BattleItemData ConstructBattleItemDataByDefineID(out ItemDefineID DefineID, int TypeSpecificID, BattleItemFeatureData CallFunc_GetBattleItemFeatureData_FeatureData, FString CallFunc_GetTableDataField_Out, bool CallFunc_GetTableDataField_ReturnValue, FString CallFunc_GetTableDataField_Out2, bool CallFunc_GetTableDataField_ReturnValue2, FString CallFunc_GetTableDataField_Out3, bool CallFunc_GetTableDataField_ReturnValue3, BattleItemData K2Node_MakeStruct_BattleItemData);// 0x4033584
	void GetItemTableRowByItemTableID(int ID, out ItemRecordData ItemTableRow, ItemRecordData CallFunc_GetItemRecord_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x4033584
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x4033584
	void InitialItemTable();// 0x4033584
	void ExecuteUbergraph_BackpackBlueprintUtils_BP(int EntryPoint, UAEDataTable* CallFunc_GetDataTable_ReturnValue, BackpackComponent* K2Node_Event_BackpackComp, STExtraBaseCharacter* K2Node_Event_Character, ItemDefineID K2Node_MakeStruct_ItemDefineID, BattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, BattleItemPickupInfo K2Node_MakeStruct_BattleItemPickupInfo, UAEDataTable* CallFunc_GetDataTable_ReturnValue2, ItemDefineID CallFunc_GenerateItemDefineIDWithRandomInstanceID_ReturnValue, bool CallFunc_PickupItem_ReturnValue);// 0x4033584
	BattleItemAdditionalData[] EmptyAdditionalData;//[Offset: 0xd50, Size: 16]
	<FName,ItemAssociation> EmptyAssociationMap;//[Offset: 0xd60, Size: 80]
	ItemAssociation[] EmptyAssociationArray;//[Offset: 0xdb0, Size: 16]
	<int,enum> EquipmentID2SlotID_Map;//[Offset: 0xdc0, Size: 80]
	<int,int> EquipmentBagID2Level_Map;//[Offset: 0xe10, Size: 80]
	<int,int> EquipmentHelmetID2Level_Map;//[Offset: 0xe60, Size: 80]
	<int,int> EquipmentArmorID2Level_Map;//[Offset: 0xeb0, Size: 80]
	int[] GhillieSuitItem;//[Offset: 0xf00, Size: 16]
	<int,int> GrenadeTypeToPriority;//[Offset: 0xf10, Size: 80]
	<int,int> CacheItemId2BagLevelMap;//[Offset: 0xf60, Size: 80]

--------------------------------
Class: BP_STRUCT_DrinkCompoundConfig_type
	int awardID_0_2BBEB1403F5A9B0B0EB1D00709609964;//[Offset: 0x0, Size: 4]
	int awardNum_1_37D1DA0026A0923C7757AA8B0609AE2D;//[Offset: 0x4, Size: 4]
	int descID_2_1FD235403A90703F024A7AEA0BB716C4;//[Offset: 0x8, Size: 4]
	int ID_3_2F902D8037E77FA46237D6880B8119C4;//[Offset: 0xc, Size: 4]
	int isMayCarry_4_2AB2AB40581603397B72EE3809C59429;//[Offset: 0x10, Size: 4]
	int JpKrAwardID_5_49A847000D2541FE5295535A097982A4;//[Offset: 0x14, Size: 4]
	int JpKrAwardNum_6_2ECC8FC045A856D735DAF8570798322D;//[Offset: 0x18, Size: 4]
	FString Name_7_3AE82A806F13962C42B917EB011A5DB5;//[Offset: 0x20, Size: 16]
	FString solt_8_7F0FFAC007CB390F4285A58D011A9FB4;//[Offset: 0x30, Size: 16]
	int EmoteID_9_4C84EC007C583218352536360B9EB844;//[Offset: 0x40, Size: 4]
	FString PhizExplain_10_2575C54064E510CF536AC4300D724F0E;//[Offset: 0x48, Size: 16]
	FString EmoteVoiceName_11_60ECC6803A15389C4AA097EC0673F2D5;//[Offset: 0x58, Size: 16]

--------------------------------
Class: BP_STRUCT_WeaponAttrBPTable_type
	FString AttachmentSkinIDList_1_68C117003440A0EE1A2DDA300D678804;//[Offset: 0x0, Size: 16]
	int BPID_2_5A4F6D006A4E746E1527F1660046AA94;//[Offset: 0x10, Size: 4]
	int[] AttachmentIDList_a_5_6E7001C028E30A41653FBE36025F1751;//[Offset: 0x18, Size: 16]
	int[] ParentIDList_a_6_3486FA0030D9987A663B62F90FFCB731;//[Offset: 0x28, Size: 16]
	FString DeadInventoryBoxPath_7_1883E1C0339C8C7958767FF2080EC2C8;//[Offset: 0x38, Size: 16]
	int PendantID_8_32B77B0039C6C1D620F9E77400A423B4;//[Offset: 0x48, Size: 4]
	FString DeadInventoryBoxIDs_10_7CB7FE8050FC74B432EE0A820680F713;//[Offset: 0x50, Size: 16]

--------------------------------
Class: BP_STRUCT_WeaponSkinMapping_type
	FString OutputDesc_0_4C755C4055DE81011AC086EE07D9D3D3;//[Offset: 0x0, Size: 16]
	int SkinID_1_6AF5A0C03E8D665F2B8E33D5019212C4;//[Offset: 0x10, Size: 4]
	int WeaponID_2_1D11360041F2AB4A2B54AC9608775314;//[Offset: 0x14, Size: 4]
	FString URL_3_276895001829BC3265405AC70F011B5C;//[Offset: 0x18, Size: 16]
	FString iconURL_4_1C201F405280621B7F9C0B550EBB3B4C;//[Offset: 0x28, Size: 16]

--------------------------------
Class: BP_STRUCT_ItemSoundTable_type
	FString EquipSound_0_068B68C066212493052EBF3305D63E14;//[Offset: 0x0, Size: 16]
	FString DropSound_1_4DD7CD003E11476C25039DA50902AA34;//[Offset: 0x10, Size: 16]
	int ID_2_42F748C040D81BA3690F7C020EF58C44;//[Offset: 0x20, Size: 4]
	FString PickUpSound_3_0B99FAC07345086D4963B6D504877D14;//[Offset: 0x28, Size: 16]
	FString DropBank_4_1D8769C022E35E311709B3FF07910C6B;//[Offset: 0x38, Size: 16]
	FString EquipBank_5_30BCE58001E2251E07D41C7C055C432B;//[Offset: 0x48, Size: 16]
	FString UnEquipBank_6_4FF4964008C1F90F14F8C45904D7459B;//[Offset: 0x58, Size: 16]
	FString UnEquipSound_7_0376B980772F43423C77A2D80D665704;//[Offset: 0x68, Size: 16]
	FString PickUpBank_8_3C7477801367726A5EFE3B0D0549773B;//[Offset: 0x78, Size: 16]

--------------------------------
Class: BP_STRUCT_Item_type
	FString ItemBigIcon_0_733663734EEB8DD5D7FF41A6E96480D4;//[Offset: 0x0, Size: 16]
	int MaxCount_1_D5BF33434E37E75739D213989C4FA372;//[Offset: 0x10, Size: 4]
	int BPID_2_F73A5EF243D620CE49BBCAA8832C6AF9;//[Offset: 0x14, Size: 4]
	int ItemType_3_4CBCE77A4D2A20BEBD861AADEF3B616B;//[Offset: 0x18, Size: 4]
	bool AutoEquipAndDrop_4_144B885646B92B9836CE33923842AB1E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int ItemID_5_29F7B64741688A0A853FD281FAE4E28D;//[Offset: 0x20, Size: 4]
	bool Consumable_7_B08070BD407AD029B7CDA7BDB341A342;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	FString ItemDesc_8_8ED919494479E8A62F11DBB9C7AD0F9A;//[Offset: 0x28, Size: 16]
	FString ItemSmallIcon_9_B13D206C4A153C963FCE478A1B39C15F;//[Offset: 0x38, Size: 16]
	FString ItemName_10_B257B36A422BB69651454E90EBC1323B;//[Offset: 0x48, Size: 16]
	FString WardrobeTab_11_6562B47746AECB0B5C84BC9C96EACD9D;//[Offset: 0x58, Size: 16]
	int ItemSubType_12_087F026E41DAB82F567758A4F56D72CF;//[Offset: 0x68, Size: 4]
	bool Equippable_13_BB222DC04DCB195FCB3F29B89EA210CA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	float UnitWeight_f_14_725EBB604F31443B93AF3597580ECAE4;//[Offset: 0x70, Size: 4]
	FString ItemWhiteIcon_15_AA35FD8045790AA9F73F58829F202B94;//[Offset: 0x78, Size: 16]
	int ItemQuality_16_3EF7461D45D14FC186EB3DBB70D01484;//[Offset: 0x88, Size: 4]
	FString KillWhiteIcon_27_16289384496FF361F9005580DEF9CAD1;//[Offset: 0x90, Size: 16]
	int NeedShare_73_D9C0818D40A3C6AB07231BABA5477060;//[Offset: 0xa0, Size: 4]
	int WeightforOrder_29_4373EFCD4D78E7DF4067FF9D3E213664;//[Offset: 0xa4, Size: 4]
	FString Preview_32_1997D4634D3D3F8CC7360283D2AF4E6C;//[Offset: 0xa8, Size: 16]
	FString ExTime_33_8299B7454C71BC6A899937AF00BFF0C5;//[Offset: 0xb8, Size: 16]
	FString PickupDesc_36_D5D621864C55ED8C6ABE728B6F002D4E;//[Offset: 0xc8, Size: 16]
	int WardrobeMainTab_38_D234FCBE4A19AAF3066394AD7C7D98DF;//[Offset: 0xd8, Size: 4]
	int Durability_39_7B54DEB94CD411488438539500D225E1;//[Offset: 0xdc, Size: 4]
	bool IsBatchUse_40_88AB90DA48C707B0FE6DB18185C6253A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	int AIFullVaule_43_6A3A6FC023E58D4B4FDDDF270E81E075;//[Offset: 0xe4, Size: 4]
	int LongDescID_44_4E8350406652C05F7794F90804562904;//[Offset: 0xe8, Size: 4]
	FString ItemSmallIcon2_46_6ED99A00141F4C900B45252101330012;//[Offset: 0xf0, Size: 16]
	FString ItemBigIcon2_47_2C0E40404ED554873AD82D3A053DBC62;//[Offset: 0x100, Size: 16]
	FString BackpackSimple_48_26F807C06BB149650FE17C280F83D985;//[Offset: 0x110, Size: 16]
	FString ItemRegion_49_3899A60047215AA47D8652720D715E6E;//[Offset: 0x120, Size: 16]
	int ShowSexInMall_56_0C9F0CC01B8DDF89290B2B7F0D9E026C;//[Offset: 0x130, Size: 4]
	int AvatarID_68_319E644077E02FFF04B5C19B04157FD4;//[Offset: 0x134, Size: 4]
	FString SpecialIcon_72_55E01BC05ADCEE1500E06C0F01021C3E;//[Offset: 0x138, Size: 16]
	FString ValidRegionCodes_74_2EA4F9C02DC66B4573D87CB8064AB793;//[Offset: 0x148, Size: 16]
	int ValidTimes_75_5BC6A5C03028B6616FF746180062B373;//[Offset: 0x158, Size: 4]
	int RateType_77_176334C00292E359401D0B6600355865;//[Offset: 0x15c, Size: 4]
	FString QualityRate_78_5F4A46807D1C4B2C0A08E8F50F3EB745;//[Offset: 0x160, Size: 16]
	int character_param_81_2F2A70804AD88C7E6E8F5B83071E93DD;//[Offset: 0x170, Size: 4]
	int JKBPID_82_1FF3B64037160BBF09A6FDF60967EB24;//[Offset: 0x174, Size: 4]
	int ItemSoundID_83_7010328028DE3D6841FCD9F407C46B04;//[Offset: 0x178, Size: 4]
	int ResSeprateType_84_5349D1400501D3B166D23C1D0CBC9FE5;//[Offset: 0x17c, Size: 4]
	int CanIntoBag_85_416CF6C01FD7CDED0F5E477601A418C7;//[Offset: 0x180, Size: 4]
	int Electricity_86_19A7E9806DE4A79A2FAD5505041B42E9;//[Offset: 0x184, Size: 4]
	int ItemPickupRule_87_49300E005A58193E16239C7A00F80F05;//[Offset: 0x188, Size: 4]
	FString SpecialIconSize_89_4BBF62802BA083E043328BD00C42A315;//[Offset: 0x190, Size: 16]

--------------------------------
Class: BP_STRUCT_BackpackMapping_type
	int ItemIDLv1_0_21A3A0400039E85B0FB4B5AE02FC6161;//[Offset: 0x0, Size: 4]
	int ItemIDLv3_4_21A5A0C00039E85D0FB4B5A802FC6163;//[Offset: 0x4, Size: 4]
	int SkinID_5_0CC9E5002CE60FA0348CD8800DC46CC4;//[Offset: 0x8, Size: 4]
	int ItemIDLv2_6_21A4A0800039E85C0FB4B5AF02FC6162;//[Offset: 0xc, Size: 4]
	int SkinItemIDLv1_8_54E5658067900F920ABA96CA085B62E1;//[Offset: 0x10, Size: 4]
	int SkinItemIDLv3_9_54E7660067900F940ABA96CC085B62E3;//[Offset: 0x14, Size: 4]
	int LobbyShowItemID_10_2F22E9C00E7C61770577495A0A75F1B4;//[Offset: 0x18, Size: 4]
	int SkinItemIDLv2_11_54E665C067900F930ABA96CD085B62E2;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BP_STRUCT_ArmoryConfig_type
	FString Power_0_66023CC06166E049160058F001EA47E2;//[Offset: 0x0, Size: 16]
	FString ShotRange_1_59BA1C40037657B76427F9810CB9A205;//[Offset: 0x10, Size: 16]
	int WeaponID_2_04A777401625BC6D3B1E56BA09255CF4;//[Offset: 0x20, Size: 4]
	int BulletID_3_7D8136C0262C958112A0BCFE0A90D7B4;//[Offset: 0x24, Size: 4]
	int IsShow_4_4C2F70C02E814ECD68323BF600FA3D47;//[Offset: 0x28, Size: 4]
	FString VerticalRecoil_5_34839F80315AFB6669A7FB050FB382AC;//[Offset: 0x30, Size: 16]
	FString Shake_6_7E9B148046BA7452166E7E6601E6CE35;//[Offset: 0x40, Size: 16]
	int WeaponType_7_482A1C8059A944560A6FD461055DA945;//[Offset: 0x50, Size: 4]
	FString ShootInterval_8_49712E00653738B65705EBAE034CD55C;//[Offset: 0x58, Size: 16]
	FString HorizontalRecoil_9_1EB63B80354249506510039F02A0FBAC;//[Offset: 0x68, Size: 16]
	FString ReloadSpeed_10_13836B803042987230C406AD067DC2C4;//[Offset: 0x78, Size: 16]
	FString ClipCapacity_11_3EA5A7000BBA4130106249B307164639;//[Offset: 0x88, Size: 16]
	FString WeaponName_12_715DB4407742DAAB0A7C764D055D6F15;//[Offset: 0x98, Size: 16]
	FString ExtCapcity_13_128419002CEBB022532CC2890B99BD99;//[Offset: 0xa8, Size: 16]

--------------------------------
Class: BattleItemHandle_VirtualCharacter_C.BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x4033584

--------------------------------
Class: BattleItemHandle_VirtualItem_C.BattleItemHandleBase.ItemHandleBase.Object

--------------------------------
Class: ItemRecordData7
	int ItemType_2_CC000069486107946E5ECAAF21EFAF0B;//[Offset: 0x0, Size: 4]
	int WeightforOrder_4_E72E5D4C4B2B91B238136B89316C7DEF;//[Offset: 0x4, Size: 4]
	float UnitWeight_f_7_1AEC4D7B4F3AC4894A33FBAAC0165559;//[Offset: 0x8, Size: 4]
	int MaxCount_10_ADC2EE5A44ABBCF4C00515AB724AD5AA;//[Offset: 0xc, Size: 4]
	bool AutoEquipandDrop_13_CC1AD656453F2BAB5FCB9586C6793874;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool Consumable_15_B2094A1644FCC44D1EBC08B3D9578342;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool Equippable_17_D54B5E3C4807D350ED7429BF09AAB7D1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]

--------------------------------
Class: ItemRecordData5
	int ItemID_2_2F9636FC420298B4EF34E588F58E38B0;//[Offset: 0x0, Size: 4]
	int ItemType_4_B2ED20EE489C1F500EBA389884CAC16D;//[Offset: 0x4, Size: 4]
	FString ItemName_7_DEB27023488D6036B9B24AB5DB114F34;//[Offset: 0x8, Size: 16]
	FString ItemBigIcon_9_A4409DA14B47CD0F4D6A7EBB7CBF2F2F;//[Offset: 0x18, Size: 16]
	FString ItemDesc_11_8AB433674EC5E4AF7F82069136B23CF5;//[Offset: 0x28, Size: 16]

--------------------------------
Class: BP_STRUCT_AvatarDefaultConfig_type
	int id_0_582DD74020EEE8C12D00E1A40C84B664;//[Offset: 0x0, Size: 4]
	FString pant_1_00F930C0654EFFCD6B08CAF404B7FCD4;//[Offset: 0x8, Size: 16]
	FString shirt_2_53D54E8062374FD817805CCA0B7038D4;//[Offset: 0x18, Size: 16]
	FString shoe_3_12522FC065073BE56B0E507104B703D5;//[Offset: 0x28, Size: 16]

--------------------------------
Class: ObserverCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x8ac, Size: 4]
	float FreeCameraOffsetRadius;//[Offset: 0x8cc, Size: 4]
	<byte,float> FreeCameraOffsetRadiusMap;//[Offset: 0x8d0, Size: 80]
	bool DrawDebugGraphics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x920, Size: 1]
	Vector DrawDebugGraphicsOffset;//[Offset: 0x924, Size: 12]
	float ProbeRadius;//[Offset: 0x930, Size: 4]
	float SpecialStatePitchLimitMin;//[Offset: 0x934, Size: 4]
	float SpecialStatePitchLimitMax;//[Offset: 0x938, Size: 4]
	float DefaultFieldOfView;//[Offset: 0x93c, Size: 4]
	float WeaponOffsetDistance;//[Offset: 0x940, Size: 4]
	bool EnableUsePawnRotationCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x944, Size: 1]
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x344d730

--------------------------------
Class: FPPSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	CameraOffsetData InVehicleCameraData;//[Offset: 0x418, Size: 28]
	Transform InVehicleCameraTrans;//[Offset: 0x440, Size: 48]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x470, Size: 28]
	void SetFPPCameraDataEnable(byte CameraDataType, bool IsEnable);// 0x33943c4

--------------------------------
Class: FPPComponent_C.BaseFPPComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x318, Size: 8]
	MaterialInstance* GetScopeMaterialOverride(STExtraShootWeapon* Weapon, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, byte CallFunc_GetCurSightType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_Array_Find_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Find_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue2, MaterialInstance* CallFunc_Array_Get_Item, MaterialInstance* CallFunc_Array_Get_Item2, MaterialInstance* CallFunc_Array_Get_Item3, MaterialInstance* CallFunc_Array_Get_Item4, MaterialInstance* CallFunc_Array_Get_Item5, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue3);// 0x4033584
	void ResetScreenPercentage(byte CallFunc_GetSightType_ReturnValue, byte CallFunc_GetRole_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x4033584
	void DownScreenPercentage(byte CallFunc_GetSightType_ReturnValue, byte CallFunc_GetRole_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetExactDeviceLevel_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x4033584
	void ChangeScopeTPPGlassMat(MeshComponent* ScopeMeshComp, int ScopeID, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_IsValid_ReturnValue, BP_STRUCT_WeaponScopeGlassMat_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue);// 0x4033584
	void GetScopeMatTableKey(STExtraPlayerController* PlayerController, STExtraShootWeapon* Weapon, enum ScopeType, out FString Key, int MatTableKey, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsScopeSpecialMatExist_exist, int CallFunc_IsScopeSpecialMatExist_MatTableKey, int CallFunc_GetScopeID_ReturnValue, SightMaterialConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x4033584
	void IsScopeSpecialMatExist(STExtraWeapon* Weapon, enum ScopeType, out bool exist, out int MatTableKey, int ___int_Loop_Counter_Variable, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, AvatarDIYEntity* CallFunc_GetAvatarEntity_ReturnValue, int ___int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, BattleItemHandleBase* CallFunc_GetLoadedHandle_ReturnValue, BackpackWeaponAttachHandle* K2Node_DynamicCast_AsBackpack_Weapon_Attach_Handle, bool K2Node_DynamicCast_bSuccess, int ___int_Array_Index_Variable2, WeaponAttachmentConfig CallFunc_GetAttachmentConfig_ReturnValue, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int ___int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2);// 0x4033584
	float SwitchAngledSightConfigMaterial(bool forceSwitch, MeshComponent* ScopeMeshComp, int AngledSightID, bool CallFunc_IsServer_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, FString CallFunc_GetScopeMatTableKey_Key, bool CallFunc_IsValid_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue3, LinearColor CallFunc_Conv_StringToColor_OutConvertedColor, bool CallFunc_Conv_StringToColor_OutIsValid, FName CallFunc_Conv_StringToName_ReturnValue2, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue, int CallFunc_GetMaterialIndex_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x4033584
	float ShowAngledSightTPPMaterial(bool forceADSState, float CallFunc_SwitchAngledSightConfigMaterial_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue2, MeshComponent* CallFunc_GetScopeAimCameraTransform_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue3, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	float SwitchSightConfigMaterial(int SpecialMatFlag, STExtraShootWeapon* CurShootWeapon, MeshComponent* ScopeMeshComp, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsServer_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, FString CallFunc_GetScopeMatTableKey_Key, bool CallFunc_IsValid_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue, LinearColor CallFunc_Conv_StringToColor_OutConvertedColor, bool CallFunc_Conv_StringToColor_OutIsValid, FName CallFunc_Conv_StringToName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_GetMaterialIndex_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x4033584
	float ShowReflectorSightTPPMaterial(bool forceADSState, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, float CallFunc_SwitchSightConfigMaterial_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, byte CallFunc_GetCurSightType_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_GetScopeID_ReturnValue);// 0x4033584
	float GetScopeFov(STExtraWeapon* Weapon, bool bIsAngled, float CallFunc_GetCurrentScopeZoomFov_MinFov, float CallFunc_GetCurrentScopeZoomFov_CurFov, int CallFunc_GetScopeID_ReturnValue, float CallFunc_GetSpecialScopeFov_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_GetAdjustWeaponID_ReturnValue, FName CallFunc_GetFNameFromTwoID_ReturnValue, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsUseZoomScope_ReturnValue);// 0x4033584
	void SetTagCullingBP(bool IsUse, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	void requestResourceGuarantee(int InOrOut, byte loadMode, byte applyStatus, int CallFunc_GetPlatformInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue2, byte CallFunc_GetSightType_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue3, int K2Node_MathExpression_ReturnValue);// 0x4033584
	void ReloadEvent();// 0x4033584
	void SetTagCulling(bool IsUse);// 0x4033584
	void PlayScopeInTimeline();// 0x4033584
	void ScopeInEnd();// 0x4033584
	void ScopeOutEnd();// 0x4033584
	void StopScopeIn();// 0x4033584
	void AttachToSight();// 0x4033584
	void AttachTo(SceneComponent* NewParam);// 0x4033584
	void Detach(SceneComponent* NewParam);// 0x4033584
	void ReceiveTick(float DeltaSeconds);// 0x4033584
	void AutoReloadEvent(STExtraShootWeapon* ShootWeapon);// 0x4033584
	void AttachToSightKeepTransform();// 0x4033584
	void ExecuteUbergraph_FPPComponent(int EntryPoint, STExtraWeapon* CallFunc_GetCurScopeWeapon_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, ShootWeaponEntity* CallFunc_GetShootWeaponEntityComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_Event_IsUse, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue3, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue4, SceneComponent* K2Node_CustomEvent_NewParam2, SceneComponent* K2Node_CustomEvent_NewParam, float K2Node_Event_DeltaSeconds, STExtraShootWeapon* K2Node_CustomEvent_ShootWeapon, bool CallFunc_Greater_FloatFloat_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_K2_AttachToComponent_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_K2_AttachToComponent_ReturnValue2, bool CallFunc_IsUseZoomScope_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x4033584
	BP_PlayerPawn_C* PawnBP;//[Offset: 0x320, Size: 8]
	float DeltaTime;//[Offset: 0x328, Size: 4]
	SkeletalMeshComponent* NewVar;//[Offset: 0x330, Size: 8]
	StaticMesh* SightLens;//[Offset: 0x338, Size: 8]
	MaterialInstance*[] ScopeMaterialOverride;//[Offset: 0x340, Size: 16]
	int[] Scope4XType1;//[Offset: 0x350, Size: 16]
	int[] Scope4XType2;//[Offset: 0x360, Size: 16]

--------------------------------
Class: BP_STRUCT_WeaponScopeGlassMat_type
	FString MaterialPath_0_5C2E3480396102E244C9A5850B9B5408;//[Offset: 0x0, Size: 16]
	FString ScopeID_1_0872E740109AD1491DFC990E05CF6BF4;//[Offset: 0x10, Size: 16]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0x158, Size: 552]
	class AnimInstance* animBP;//[Offset: 0x380, Size: 8]
	class AnimInstance* animBPClass;//[Offset: 0x388, Size: 40]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x3b0, Size: 16]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x3c0, Size: 16]
	BackpackComponent* BackpackComp;//[Offset: 0x3d0, Size: 8]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x32ac4f8
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x32ac4dc
	bool IsVirtualAvatarHandle();// 0x32ac49c
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x32ac420
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x32ac360
	int GetSubSlotID();// 0x32ac324
	int GetSlotID();// 0x32ac2e8
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x32ac27c
	void GetMeshPackCfg(out WeaponMeshCfg MeshCfg);// 0x32ac10c
	WeaponAttachmentConfig GetAttachmentConfig();// 0x32ac0a0
	class Object GetAnimationBP();// 0x32ac064
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x32abf54

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 24]
	enum AttachmentSocketType;//[Offset: 0x18, Size: 1]
	enum SubSlot;//[Offset: 0x19, Size: 1]
	enum SightType;//[Offset: 0x1a, Size: 1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x20, Size: 16]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x30, Size: 16]
	<int,FName> socketTypeToName;//[Offset: 0x40, Size: 80]
	WeaponMeshCfg MeshPackage;//[Offset: 0x90, Size: 336]
	WeaponMeshCfg[] ExtMeshList;//[Offset: 0x1e0, Size: 16]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x1f0, Size: 16]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x200, Size: 16]
	ItemDefineID ParentID;//[Offset: 0x210, Size: 24]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 16]
	enum Op;//[Offset: 0x10, Size: 1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	float ModifyValue;//[Offset: 0x14, Size: 4]
	Object* ModifyResValue;//[Offset: 0x18, Size: 40]

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0, Size: 24]
	FText DescValue;//[Offset: 0x18, Size: 24]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 16]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 336]
	WeaponMeshCfg[] ExtReplacedAttachmentCfgList;//[Offset: 0x160, Size: 16]
	int replacedAttachmentMatIndex;//[Offset: 0x170, Size: 4]

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0, Size: 1]
	int PendantIndex;//[Offset: 0x4, Size: 4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10, Size: 96]

--------------------------------
Class: WeaponPendantMap
	int WeaponId;//[Offset: 0x0, Size: 4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: BP_STRUCT_WeaponScopeMaterial_type
	FString ScopeGroupID_0_289E4F406E35B6A1337959050F04DD14;//[Offset: 0x0, Size: 16]
	FString ScopeMaterial_1_4BEFD48030177D8A6925FD700F8D124C;//[Offset: 0x10, Size: 16]
	FString ScopeMaterialSocket_2_63700EC07064DCC960E067A00E289394;//[Offset: 0x20, Size: 16]
	FString ScopeMaterialColor_3_1DC014403E6A0BAB129284A605F29442;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Vault_Controller_C.PlayerMantleComponent.BaseVaultComponent.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5d0, Size: 8]
	void JumpVault();// 0x4033584
	void VaultFail(FString Reason);// 0x4033584
	void VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossblockMaxFall, float crossblockMaxDis, Vector HitPoint, Actor* WindowActor, Rotator movedir);// 0x4033584
	void VaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* checkActor, float crossmaxFalling, float crossmaxDis, Vector HitPoint, Rotator movedir);// 0x4033584
	void StopVault();// 0x4033584
	void DSCheckStopVault();// 0x4033584
	void ExecuteUbergraph_Vault_Controller(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FString K2Node_Event_Reason, float K2Node_CustomEvent_dis2, float K2Node_CustomEvent_height2, float K2Node_CustomEvent_length2, FString K2Node_CustomEvent_vaultKey2, Vector K2Node_CustomEvent_StartPos2, Actor* K2Node_CustomEvent_CheckActor2, float K2Node_CustomEvent_crossblockMaxFall, float K2Node_CustomEvent_crossblockMaxDis, Vector K2Node_CustomEvent_hitpoint2, Actor* K2Node_CustomEvent_WindowActor, Rotator K2Node_CustomEvent_movedir2, float K2Node_CustomEvent_Dis, float K2Node_CustomEvent_Height, float K2Node_CustomEvent_length, FString K2Node_CustomEvent_VaultKey, Vector K2Node_CustomEvent_StartPos, Actor* K2Node_CustomEvent_CheckActor, float K2Node_CustomEvent_crossmaxFalling, float K2Node_CustomEvent_crossmaxDis, Vector K2Node_CustomEvent_HitPoint, Rotator K2Node_CustomEvent_movedir, bool CallFunc_IsLocallyControlled_ReturnValue);// 0x4033584

--------------------------------
Class: PlayerMantleComponent.BaseVaultComponent.LuaActorComponent.ActorComponent.Object
	float NowBlockDis;//[Offset: 0x26c, Size: 4]
	float NowBlockHeight;//[Offset: 0x270, Size: 4]
	float NowAfterBlockMaxFallingHeight;//[Offset: 0x274, Size: 4]
	float NowCrossBlockMaxDis;//[Offset: 0x278, Size: 4]
	float NowBlockLength;//[Offset: 0x27c, Size: 4]
	float maxCheckDis;//[Offset: 0x280, Size: 4]
	float MaxCheckOppSiteDis;//[Offset: 0x284, Size: 4]
	float UnActiveMaxAngle;//[Offset: 0x288, Size: 4]
	float MaxCheckHeight;//[Offset: 0x28c, Size: 4]
	Actor* checkActor;//[Offset: 0x290, Size: 8]
	Vector HitPoint;//[Offset: 0x298, Size: 12]
	PrimitiveComponent* HitComponent;//[Offset: 0x2a8, Size: 8]
	float CapsuleRadius;//[Offset: 0x2b0, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x2b4, Size: 4]
	Vector BlockDir;//[Offset: 0x2b8, Size: 12]
	float MaxJumpLength;//[Offset: 0x2c4, Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	float nowMaxX;//[Offset: 0x2cc, Size: 4]
	float nowMinFallingY;//[Offset: 0x2d0, Size: 4]
	float realStartZ;//[Offset: 0x2d4, Size: 4]
	Vector oppositeHitPoint;//[Offset: 0x2d8, Size: 12]
	Vector upHitPoint;//[Offset: 0x2e4, Size: 12]
	float heightoffsetcheck;//[Offset: 0x2f0, Size: 4]
	float HeightForwardCheck;//[Offset: 0x2f4, Size: 4]
	float minVaultHeight;//[Offset: 0x2f8, Size: 4]
	float minCheckHeight;//[Offset: 0x2fc, Size: 4]
	float AfterBlockMaxFallingHeightoffset;//[Offset: 0x300, Size: 4]
	float JumpValueMinDisToland;//[Offset: 0x304, Size: 4]
	float blockledgeZ;//[Offset: 0x308, Size: 4]
	float SpeedDisRatio;//[Offset: 0x30c, Size: 4]
	float CurHeightToLand;//[Offset: 0x310, Size: 4]
	float JumpOverMinHeightDiff;//[Offset: 0x314, Size: 4]
	Vector PlayerStartPosition;//[Offset: 0x318, Size: 12]
	Rotator PlayerRotation;//[Offset: 0x324, Size: 12]
	Vector PlayerStartDir;//[Offset: 0x330, Size: 12]
	float LastStandDis;//[Offset: 0x33c, Size: 4]
	float lastwalkDis;//[Offset: 0x340, Size: 4]
	float lastsprintDis;//[Offset: 0x344, Size: 4]
	float DeltaTime;//[Offset: 0x348, Size: 4]
	float CountTime;//[Offset: 0x34c, Size: 4]
	bool IsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	float realStartTime;//[Offset: 0x354, Size: 4]
	bool IsEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	float offsetSpeed;//[Offset: 0x35c, Size: 4]
	float nowAnimSpeed;//[Offset: 0x360, Size: 4]
	float animSpeedChangeTime;//[Offset: 0x364, Size: 4]
	float animChangeSpeedRate;//[Offset: 0x368, Size: 4]
	bool IsInStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	bool waitStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36d, Size: 1]
	float stopVaultOppDis;//[Offset: 0x370, Size: 4]
	float FpsVaultSpeed;//[Offset: 0x374, Size: 4]
	Vector FpsVaultStartPosition;//[Offset: 0x378, Size: 12]
	Vector FpsVaultTopoffsetPosition;//[Offset: 0x384, Size: 12]
	Vector FpsVaultTopPosition;//[Offset: 0x390, Size: 12]
	Vector FpsVaultEndPosition;//[Offset: 0x39c, Size: 12]
	bool FpsVaultIsJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	float FpsVaultMontageTotalTime;//[Offset: 0x3ac, Size: 4]
	FString FpsVaultMontageName;//[Offset: 0x3b0, Size: 16]
	float FpsVaultMontageTopTime;//[Offset: 0x3c0, Size: 4]
	float FpsVaultCheckDis;//[Offset: 0x3c4, Size: 4]
	float FpsVaultCheckHeight;//[Offset: 0x3c8, Size: 4]
	float FpsVaultCheckThick;//[Offset: 0x3cc, Size: 4]
	bool NowIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	float FpsCheatingVaule;//[Offset: 0x3d4, Size: 4]
	float FpsMinHtight;//[Offset: 0x3d8, Size: 4]
	bool fpsisplayedcamerashake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	float fpsvaultshakeoffsetheight;//[Offset: 0x3e0, Size: 4]
	Vector DataStartPos;//[Offset: 0x3e4, Size: 12]
	FString NowVaultKey;//[Offset: 0x3f0, Size: 16]
	bool bClimbMovableActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	STExtraPlayerCharacter* PlayerPawn;//[Offset: 0x408, Size: 8]
	byte NowDrawDebugType;//[Offset: 0x410, Size: 1]
	byte gunSlot;//[Offset: 0x411, Size: 1]
	bool IsPreUseMedicine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x412, Size: 1]
	bool IsChangeMontageSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x413, Size: 1]
	bool iswondowbroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	float windowsbrokenoffsetdis;//[Offset: 0x418, Size: 4]
	float ShouldAdjustHeight;//[Offset: 0x41c, Size: 4]
	float MoveSeconds;//[Offset: 0x420, Size: 4]
	Vector StartOffsetToBase;//[Offset: 0x424, Size: 12]
	float StartZToBase;//[Offset: 0x430, Size: 4]
	<FString,VaultDataParam> VaultDataMap;//[Offset: 0x438, Size: 80]
	VaultDataParam NowVaultData;//[Offset: 0x488, Size: 96]
	VaultCheckRule[] CheckRuleListCPP;//[Offset: 0x4e8, Size: 16]
	FpsVaultDataParam[] FpsVaultAnimationListCPP;//[Offset: 0x4f8, Size: 16]
	UAEWindowComponent*[] VaultWindows;//[Offset: 0x508, Size: 16]
	bool bControlCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	float CameraUpperThanBlock;//[Offset: 0x51c, Size: 4]
	bool bEnableAutoVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	bool bAutoVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 1]
	float AutoVaultMaxHeightToLand;//[Offset: 0x52c, Size: 4]
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	TimerHandle AutoVaultTimerHandle;//[Offset: 0x558, Size: 8]
	<byte,VaultAnimDataPath> VaultAnimPathMap;//[Offset: 0x560, Size: 80]
	AnimMontage* VaultMontage;//[Offset: 0x5b0, Size: 8]
	AnimMontage* TeamVaultMontage;//[Offset: 0x5b8, Size: 8]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x5c8, Size: 8]
	void VaultLeave(enum State);// 0x347b778
	bool VaultFromCPP();// 0x347b738
	void VaultFail(FString Reason);// 0x4033584
	void UpdateVault_BluePrint();// 0x347b71c
	void UpdatePosition();// 0x347b700
	void UpdateMontageSpeed();// 0x347b6ec
	void TpsVaultUpdate();// 0x347b6d8
	void StopVaultAndReverse();// 0x347b6c4
	void StartVault();// 0x347b6b0
	void StartAsyncLoadVaultAnimRes(bool IsTDM);// 0x347b62c
	void StartAsyncLoadTeamVaultAnimRes();// 0x347b610
	void SetVaultData(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossmaxFalling, float crossmaxDis, Vector InHitPoint, Rotator movedir);// 0x347b29c
	void SetPlayerStartPositionInternal(Vector InStartPosition, bool UseInputStart);// 0x347b1dc
	void SetNowUseFpsVault();// 0x347b1c8
	void SetLimitPostion(float XValue, float ZValue);// 0x347b114
	void SetEnd();// 0x347b100
	void ServerRPC_VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Actor* WindowActor, Rotator movedir);// 0x347ad7c
	void ServerRPC_StopVault();// 0x347ad1c
	void ServerRPC_FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x347aabc
	void ServerFpsVaultBlockDisCheck(Vector StartPos, Vector topPos, out bool Result);// 0x347a9b8
	void ServerCrossingBlockCheck(Vector StartPos, float blockdis, float blockheight, Rotator movedir, out bool Result);// 0x347a840
	void ServerBlockDisCheck(Vector InHitPoint, FString Key, Vector StartPos, float blockdis, float blockheight, float BlockLength, Actor* InCheckActor, out bool Result);// 0x347a5e0
	void PredictAutoVault(float blockdis, Vector BlockNormalDir);// 0x347a52c
	void OnRespawned_BlueprintImpl();// 0x4033584
	void MulticastRPC_VaultFail(FString Reason);// 0x347a47c
	void MulticastRPC_VaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* InCheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector InHitPoint, Rotator movedir);// 0x347a1a4
	void MulticastRPC_StopVault();// 0x347a188
	void MulticastRPC_FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x3479f84
	void LeaveAvoidSimulateCharacterShake();// 0x3479f70
	void JumpVaultCheck(out bool Result);// 0x3479ee4
	void jumpFromUI();// 0x3479ed0
	void IsVaultOnBase(out bool ShouldVault);// 0x3479e44
	void IsValidVault(out bool IsValid);// 0x3479db8
	FString GetVaultKeyByBlockHeight(float Height);// 0x3479cbc
	Rotator GetRelicateRotator();// 0x3479c84
	void GetRealStartZHeight(out float ResStartZ);// 0x3479bf8
	void GetPlayerStartPositionInternal(bool bRelationLoc, out Vector StartPos);// 0x3479b24
	void GetNowOppSideDis(out float Result);// 0x3479a98
	void GetNowData(bool IsInFalling, out bool IsGet);// 0x34799c0
	void GetDataStartPosition(out Vector StartPos);// 0x3479938
	float GetCurHeightToLand();// 0x3479904
	void GetCrossMaxBlockDisOffset(out bool Result);// 0x3479878
	void GetCrossMaxBlockDisForward(out bool Result);// 0x34797ec
	void GetCrossBlockMaxFallingHeight(out bool Result);// 0x3479760
	void FpsVaultUpdate();// 0x347974c
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool bIsjump, Rotator movedir, float blobkthick);// 0x3479548
	void FpsVaultStart(Vector StartPos, Vector topPos, float OffsetMaxX, float OffsetMaxY, bool bIsjump, Rotator InPlayerRotation, float BlockLength);// 0x347934c
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool bIsjump, Rotator movedir, float blobkthick);// 0x3479148
	void ForwardTestObjectType(Actor* Actor, out bool Result);// 0x3479080
	void EnterAvoidSimulateCharacterShake();// 0x347906c
	void EnableCulling(bool bEnable);// 0x3478fe8
	void DealBrokenWindows();// 0x3478fd4
	void CheckVaultWindows(Vector CheckStart, Vector CheckEnd);// 0x3478f1c
	void CheckUpLengthBlock(out bool Result);// 0x3478e90
	void CheckNowisJumpAnimation(float Height, float thcikLength, out bool Result, out bool ishasAnimation);// 0x3478d38
	void CheckIsValidByHeightCheckDis(float nowheight, float checkDis, out bool IsValid);// 0x3478c38
	void CheckHeight(float Height, out bool IsActive, out Vector Point);// 0x3478b1c
	void CheckForward(out bool IsActive);// 0x3478a90
	void CheckCanVault(out bool IsActive);// 0x34789fc
	bool CheckCanStandOn();// 0x34789c4
	void CacultLimitData();// 0x34789b0
	void AutoVaultInternal();// 0x347899c
	void AutoVault(STExtraBaseCharacter* Char, out const HitResult Impact);// 0x34788c0
	void AsyncLoadVaultAnimResFinish(byte PawnSubType);// 0x3478844

--------------------------------
Class: VaultDataParam
	FString montageSectionName;//[Offset: 0x0, Size: 16]
	CurveFloat* upCurve;//[Offset: 0x10, Size: 8]
	CurveFloat* forwardCurve;//[Offset: 0x18, Size: 8]
	float blockdis;//[Offset: 0x20, Size: 4]
	float blockheight;//[Offset: 0x24, Size: 4]
	float blokcThicklength;//[Offset: 0x28, Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool forceStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float CountTime;//[Offset: 0x30, Size: 4]
	float playSpeed;//[Offset: 0x34, Size: 4]
	float speedChangeTime;//[Offset: 0x38, Size: 4]
	float changeSpeedRate;//[Offset: 0x3c, Size: 4]
	bool standState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool walkState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool SprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	bool isPutUpGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43, Size: 1]
	float BreakWindowDelayTime;//[Offset: 0x44, Size: 4]
	bool isCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float MinCancelVTimer;//[Offset: 0x4c, Size: 4]
	float MaxCancelVTimer;//[Offset: 0x50, Size: 4]
	bool fallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	float fallingvaultMinHeight;//[Offset: 0x58, Size: 4]

--------------------------------
Class: VaultCheckRule
	float CheckHeight;//[Offset: 0x0, Size: 4]
	float standCheckDis;//[Offset: 0x4, Size: 4]
	float walkCheckDis;//[Offset: 0x8, Size: 4]
	float sprintCheckDis;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FpsVaultDataParam
	float Height;//[Offset: 0x0, Size: 4]
	FString montageName;//[Offset: 0x8, Size: 16]
	float TimeLength;//[Offset: 0x18, Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float movespeed;//[Offset: 0x20, Size: 4]
	float SpeedRate;//[Offset: 0x24, Size: 4]

--------------------------------
Class: VaultAnimDataPath
	FString VaultAnimPath;//[Offset: 0x0, Size: 16]
	FString TeamVaultAnimPath;//[Offset: 0x10, Size: 16]

--------------------------------
Class: BP_SwimController_C.PlayerSwimComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1f0, Size: 8]
	void EnterWater_BluePrint();// 0x4033584
	void BP_UnderWaterStateChanged(bool bEnterWater);// 0x4033584
	void ExecuteUbergraph_BP_SwimController(int EntryPoint, Pawn* CallFunc_GetPlayerPawn_ReturnValue, bool ___bool_Variable, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AkAudioEvent* ___object_Variable, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, AkAudioEvent* ___object_Variable2, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetWaterObject_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, WaterSwimObject_C* K2Node_DynamicCast_AsWater_Swim_Object, bool K2Node_DynamicCast_bSuccess2, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, CameraAnimInst* CallFunc_PlayCameraAnim_ReturnValue, Pawn* CallFunc_GetPlayerPawn_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Rotator CallFunc_K2_GetComponentRotation_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, int CallFunc_PostEventAtLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool K2Node_Event_bEnterWater, AkAudioEvent* K2Node_Select_Default, int CallFunc_PostEventAtLocation_ReturnValue2);// 0x4033584

--------------------------------
Class: BP_AutoAimingComponent_C.WeaponAutoAimingComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x618, Size: 8]
	bool CheckInAngle(STExtraBaseCharacter* EnemyPawn, float MaxAngle, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, float CallFunc_DegAcos_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x4033584
	bool CheckSmoke(out Vector StartPoint, out Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName, Rotator CallFunc_FindLookAtRotation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_VSize_ReturnValue, Actor*[] ___object_Variable, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x4033584
	bool CanEnemeyRaycastReach(out Vector StartPoint, out Vector EndPoint, STExtraPlayerCharacter* Pawn, out FName OutHitBoneName, Vector CallFunc_Subtract_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Actor*[] ___object_Variable, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_IsValid_ReturnValue, STExtraVehicleWarVehicle* K2Node_DynamicCast_AsSTExtra_Vehicle_War_Vehicle, bool K2Node_DynamicCast_bSuccess, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess2, STExtraFloatingVehicle* K2Node_DynamicCast_AsSTExtra_Floating_Vehicle, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess4);// 0x4033584
	void BPDrawDebugInfo(out const float[] AutoAimParams);// 0x4033584
	void ExecuteUbergraph_BP_AutoAimingComponent(int EntryPoint, bool CallFunc_IsValid_ReturnValue, float[] K2Node_Event_AutoAimParams, PlayerController* CallFunc_GetPlayerController_ReturnValue, UserWidget* CallFunc_CreateWidgetByClass_ReturnValue, AutoAimDebug_C* K2Node_DynamicCast_AsAuto_Aim_Debug, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	byte DrawDebugType;//[Offset: 0x620, Size: 1]
	UserWidget* DebugUI;//[Offset: 0x628, Size: 8]

--------------------------------
Class: STExtraFloatingVehicle.STExtraVehicleBase.Pawn.Actor.Object
	float BoostModifier;//[Offset: 0x1330, Size: 4]
	STExtraFloatingVehicleMovementComponent* FloatingVehicleMovement;//[Offset: 0x1338, Size: 8]
	void HandleOnMeshAwake(PrimitiveComponent* WakingComponent, FName BoneName);// 0x35a6458
	Vector GetRotationInputDir();// 0x35a6418

--------------------------------
Class: STExtraFloatingVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxAcceleration;//[Offset: 0x190, Size: 4]
	float StartAccelerationRate;//[Offset: 0x194, Size: 4]
	float StopAccelerationRate;//[Offset: 0x198, Size: 4]
	float MaxRotationYawAngle;//[Offset: 0x19c, Size: 4]
	float RotationYawRate;//[Offset: 0x1a0, Size: 4]
	float BackwardForceScale;//[Offset: 0x1a4, Size: 4]
	float Acceleration;//[Offset: 0x1a8, Size: 4]
	float RotationYawAngle;//[Offset: 0x1ac, Size: 4]
	FName ApplyForceSocketName;//[Offset: 0x1b0, Size: 8]
	CurveFloat* SlideCompensationCurve;//[Offset: 0x1b8, Size: 8]
	bool bClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	float STThrottleInput;//[Offset: 0x1cc, Size: 4]
	float STSteeringInput;//[Offset: 0x1d0, Size: 4]
	BuoyancyForceComponent* buoyancyForce;//[Offset: 0x1d8, Size: 8]
	bool DisableWhenTurnOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	float MinTurnOverDegree;//[Offset: 0x1e8, Size: 4]
	void ServerUpdateInput(float InSteeringInput, float InThrottleInput);// 0x35a687c
	float GetThrottleInput();// 0x35a6860
	float GetSteeringInput();// 0x35a6844

--------------------------------
Class: AutoAimDebug_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x218, Size: 8]
	FText Get_TextBlock_7_Text(FText CallFunc_Conv_IntToText_ReturnValue);// 0x4033584
	FText Get_TextBlock_3_Text(FText CallFunc_Conv_FloatToText_ReturnValue);// 0x4033584
	void HandleDamage(bool NewParam, bool NewParam1);// 0x4033584
	FText Get_TextBlock_14_Text(FText CallFunc_Conv_IntToText_ReturnValue);// 0x4033584
	FText Get_TextBlock_12_Text(FText CallFunc_Conv_IntToText_ReturnValue);// 0x4033584
	void OnPaint(out PaintContext Context, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x4033584
	void DrawDebug(out float[] DebugInfo, float[] InDebugInfo, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Array_Get_Item, float CallFunc_Array_Get_Item2, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Array_Add_ReturnValue, float CallFunc_Array_Get_Item3, TextBlock* CallFunc_Array_Get_Item4, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_Array_Get_Item5, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x4033584
	void Construct();// 0x4033584
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x4033584
	void OnEquip(STExtraWeapon* Weapon, byte Slot);// 0x4033584
	void CustomEvent();// 0x4033584
	void CustomEvent();// 0x4033584
	void CustomEvent(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet);// 0x4033584
	void CustomEvent(STExtraShootWeapon* ShootWeapon, STExtraShootWeaponBulletBase* Bullet, out const HitResult HitRet);// 0x4033584
	void CustomEvent(float Damage, out const DamageEvent DamageEvent, Actor* Casuer, Actor* Victim);// 0x4033584
	void ExecuteUbergraph_AutoAimDebug(int EntryPoint, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, int CallFunc_Array_Add_ReturnValue3, int CallFunc_Array_Add_ReturnValue4, int CallFunc_Array_Add_ReturnValue5, int CallFunc_Array_Add_ReturnValue6, int CallFunc_Array_Add_ReturnValue7, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraWeapon* K2Node_CustomEvent_Weapon, byte K2Node_CustomEvent_Slot, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, STExtraShootWeapon* K2Node_CustomEvent_ShootWeapon2, STExtraShootWeaponBulletBase* K2Node_CustomEvent_Bullet2, STExtraShootWeapon* K2Node_CustomEvent_ShootWeapon, STExtraShootWeaponBulletBase* K2Node_CustomEvent_Bullet, const HitResult K2Node_CustomEvent_HitRet, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Pawn* CallFunc_GetOwnerPawn_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_EqualEqual_StrStr_ReturnValue, enum CallFunc_GetHitBodyTypeByHitPos_ReturnValue, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess4, int CallFunc_Add_IntInt_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate6, PlayerController* CallFunc_GetPlayerController_ReturnValue2, Pawn* CallFunc_K2_GetPawn_ReturnValue2, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character3, bool K2Node_DynamicCast_bSuccess5, float K2Node_CustomEvent_Damage, const DamageEvent K2Node_CustomEvent_DamageEvent, Actor* K2Node_CustomEvent_Casuer, Actor* K2Node_CustomEvent_Victim, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, STExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon2, bool K2Node_DynamicCast_bSuccess6, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue3, int CallFunc_Subtract_IntInt_ReturnValue);// 0x4033584
	TextBlock* t1;//[Offset: 0x220, Size: 8]
	TextBlock* t2;//[Offset: 0x228, Size: 8]
	TextBlock* t3;//[Offset: 0x230, Size: 8]
	TextBlock* t4;//[Offset: 0x238, Size: 8]
	TextBlock* t5;//[Offset: 0x240, Size: 8]
	TextBlock* t6;//[Offset: 0x248, Size: 8]
	TextBlock* t7;//[Offset: 0x250, Size: 8]
	TextBlock* TextBlock;//[Offset: 0x258, Size: 8]
	TextBlock* TextBlock;//[Offset: 0x260, Size: 8]
	TextBlock* TextBlock;//[Offset: 0x268, Size: 8]
	TextBlock* TextBlock;//[Offset: 0x270, Size: 8]
	TextBlock*[] TextWidgetArray;//[Offset: 0x278, Size: 16]
	float LastAimTime;//[Offset: 0x288, Size: 4]
	float[] AimDelta;//[Offset: 0x290, Size: 16]
	int Debug_Hit_Num;//[Offset: 0x2a0, Size: 4]
	int Debug_Miss_Num;//[Offset: 0x2a4, Size: 4]
	float Damage;//[Offset: 0x2a8, Size: 4]
	int headShot;//[Offset: 0x2ac, Size: 4]

--------------------------------
Class: CameraSettingComponent_C.ActorComponent.Object
	void SaveCurCameraSetting(SpringArmComponent* SprintArm);// 0x4033584
	void LerpCameraSettings(float LerpAlpha, STR_CameraSetting CameraSettings, SpringArmComponent* SpringArm, SpringArmComponent* TargetSpringArm, Vector TargetSocketOffset, float TargetLagSpeed, float TargetSpringArmLength, float Alpha, Vector CallFunc_VLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2);// 0x4033584
	float Current Target Arm Length;//[Offset: 0x110, Size: 4]
	float CurrentCameraLagSpeed;//[Offset: 0x114, Size: 4]
	Vector CurrentSocketOffset;//[Offset: 0x118, Size: 12]

--------------------------------
Class: BP_WateringArea_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3c8, Size: 8]
	void OnAreaOverlapEnd(Object* Object, bool CallFunc_HasAuthority_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2);// 0x4033584
	void OnAreaOverlapBegin(Object* Object, bool CallFunc_HasAuthority_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AllowWater_bCanEnter, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_Array_Contains_ReturnValue);// 0x4033584
	void StartDrop(Vector CallFunc_K2_GetActorLocation_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, WaitDropData K2Node_MakeStruct_WaitDropData, bool CallFunc_IsValid_ReturnValue, ItemDropMgrComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x4033584
	void UserConstructionScript();// 0x4033584
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4033584
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4033584
	void ShowAnimationButton(BP_PlayerPawn_C* PlayerPawn, bool IsShow);// 0x4033584
	void ServerDoWaterLogic(out const PlayerController* PlayerController);// 0x4033584
	void OnWateringUIChanged(bool Show);// 0x4033584
	void DelayResetParticleCD();// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void SpawnTreeParticle();// 0x4033584
	void CustomEvent();// 0x4033584
	void ExecuteUbergraph_BP_WateringArea(int EntryPoint, BP_WateringArea_C* ___object_Variable, int ___int_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FString ___string_Variable, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, BP_PlayerPawn_C* K2Node_CustomEvent_PlayerPawn, bool K2Node_CustomEvent_IsShow, const PlayerController* K2Node_CustomEvent_PlayerController, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, STExtraPlayerState* CallFunc_GetCurPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool K2Node_CustomEvent_Show, FString ___string_Variable2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool ___bool_Variable, bool CallFunc_IsValid_ReturnValue4, FString K2Node_Select_Default, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool ___bool_Variable2, BP_WateringArea_C* K2Node_Select2_Default, int CallFunc_PostAkEvent_ReturnValue, int CallFunc_PostAkEvent_ReturnValue2, int CallFunc_PostAkEvent_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2);// 0x4033584
	StaticMeshComponent* ReplaceMesh;//[Offset: 0x3d0, Size: 8]
	StaticMeshComponent* FormerMesh;//[Offset: 0x3d8, Size: 8]
	SceneComponent* LoopParticlePoint;//[Offset: 0x3e0, Size: 8]
	AkComponent* Ak;//[Offset: 0x3e8, Size: 8]
	SceneComponent* ParticleSpawnPoint;//[Offset: 0x3f0, Size: 8]
	StaticMeshComponent* StaticMesh;//[Offset: 0x3f8, Size: 8]
	SphereComponent* Sphere;//[Offset: 0x400, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x408, Size: 8]
	ParticleSystemComponent* ParticleSystemRef;//[Offset: 0x410, Size: 8]
	PlayerController*[] WaterDoneList;//[Offset: 0x418, Size: 16]
	TimerHandle TimerHandle;//[Offset: 0x428, Size: 8]
	int[] DropPlanIDList;//[Offset: 0x430, Size: 16]
	bool bShowLoopParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	FString ShowButtonTextID;//[Offset: 0x448, Size: 16]
	PaperSprite* ShowButtonPic;//[Offset: 0x458, Size: 8]
	ParticleSystem* ParticleTrigger;//[Offset: 0x460, Size: 8]
	Vector ParticleTriggerPos;//[Offset: 0x468, Size: 12]
	ParticleSystem* ParticleLoop;//[Offset: 0x478, Size: 8]
	Vector ParticleLoopPos;//[Offset: 0x480, Size: 12]
	float ParticleLoopWait;//[Offset: 0x48c, Size: 4]
	AkAudioEvent* AudioTrigger;//[Offset: 0x490, Size: 8]
	AkAudioEvent* AudioParticleLoop;//[Offset: 0x498, Size: 8]
	AkAudioEvent* AudioLoop;//[Offset: 0x4a0, Size: 8]
	bool IsCandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	int ActivityButtonId;//[Offset: 0x4ac, Size: 4]

--------------------------------
Class: WaitDropData
	STExtraBaseCharacter* KillerPawn;//[Offset: 0x0, Size: 8]
	FString DeadPawnDesc;//[Offset: 0x8, Size: 16]
	Vector DropGroundPoint;//[Offset: 0x18, Size: 12]
	class PlayerTombBox* DropTomb;//[Offset: 0x28, Size: 8]
	int[] DropPlanIDList;//[Offset: 0x30, Size: 16]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: ItemDropMgrComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x170, Size: 16]
	bool GM_CloseItemDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	int GM_SpawnItemFrame;//[Offset: 0x184, Size: 4]
	bool bEnableAIBulletDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	class PlayerTombBox* DefaultTomb;//[Offset: 0x190, Size: 8]
	class PlayerRemainTombBox* LastGameRemainTomb;//[Offset: 0x198, Size: 8]
	FString DropItemCfgTableName;//[Offset: 0x1a0, Size: 16]
	FString DropItemRuleTableName;//[Offset: 0x1b0, Size: 16]
	int GridStep;//[Offset: 0x1c0, Size: 4]
	WaitDropData[] WaitDropList;//[Offset: 0x1c8, Size: 16]
	int MaxRandomWeight;//[Offset: 0x1d8, Size: 4]
	bool bEnableDropItemAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 1]
	float RadiusStep;//[Offset: 0x1e0, Size: 4]
	float ZBias;//[Offset: 0x1e4, Size: 4]
	float LookUpDistance;//[Offset: 0x1e8, Size: 4]
	UAEDataTable* DropRuleTable;//[Offset: 0x1f0, Size: 8]
	Property*[] DropRuleTablePropertys;//[Offset: 0x1f8, Size: 16]
	UAEDataTable* DropConfigTable;//[Offset: 0x208, Size: 8]
	int CurSpawnItemFrame;//[Offset: 0x210, Size: 4]
	<int,DropIDData> DropIDMap;//[Offset: 0x218, Size: 80]
	FString RemainItemRuleTableName;//[Offset: 0x268, Size: 16]
	RemainItemRuleDataRow[] RemainItemRuleList;//[Offset: 0x278, Size: 16]
	Vector TraceGroundPoint(Vector StartPos, Actor* IgnoreActor);// 0x33f06c8
	int PickItemByUnionRandom(float WeightCount, out RandomDropData[] WeightMap);// 0x33f05d4
	int PickItemByIndependentRandom(float Weight);// 0x33f0548
	void NavMeshDrop(out const DropToGroundData[] PropDatas, Transform PawnTrans, bool bDropedByPlayer);// 0x33f03ec
	void InitRemainItemRuleTable();// 0x33f03d8
	void InitDropIDMap();// 0x33f03c4
	void HandleActorDie(Actor* Actor, Actor* Killer);// 0x33f0310
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x33f0204
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x33f0160
	void GetWeaponBulletNum(STExtraBaseCharacter* Character, STExtraWeapon* TWeapon, out int BulletID, out int BulletClipNum, out int BulletPackageNum, out int BulletClipMaxNum);// 0x33eff60
	LastGameRemainItemData GetRemainItemData(out PickUpItemData[] ItemDataList, STExtraPlayerController* PC);// 0x33efdd4
	void GetMonsterBulletDropIdList(out int[] DropIdList, out int[] DropParams, MonsterSingleBulletDropIds[] BulletDropIds);// 0x33efbbc
	FString GetDropItemCfgList(out DropItemConfig[] DropList, int DropConfigID);// 0x33efa50
	void GetDropIdList(out int[] DropIdList, MonsterSingleDropIds[] DropIds);// 0x33ef800
	int GetCountStrNum(FString CountStr);// 0x33ef6c4
	void GetBulletDropListByPlanIDs(Actor* Killer, out int[] BulletDropPlanIDList, out int[] BulletDropParams, out int[] DropIdList);// 0x33ef4d4
	PickUpItemData[] GeneratePickupListByDropID(int DropConfigID);// 0x33ef420
	DropPropData[] GenerateItemAttachments(int ItemId, int MinNum, int MaxNum);// 0x33ef2b0
	void DropToTombBox(out const PickUpItemData[] PropData, out WaitDropData DropData);// 0x33ef158
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* backpack);// 0x33ef054
	void DropToGround(out const DropToGroundData PropData, Transform WrapperTrans, bool bDropedByPlayer, Actor* InAttachActor);// 0x33eee38
	void DropOutItems(out WaitDropData DropData, out DropPropData[] DropItems);// 0x33eecd0
	void DropLastGameRemainTombBox(LastGameRemainItemData LastGameRemainItemData);// 0x33eebc0
	void CheckNeedDropItem();// 0x33eebac
	void CheckMonsterAddBulletDrop(Actor* Actor, Actor* Killer, out int[] DropIdList);// 0x33eea7c
	void CheckCharacterAddBulletDrop(Actor* Actor, Actor* Killer, out int[] DropIdList);// 0x33ee94c
	bool CheckCanRemain(int ItemId);// 0x33ee8bc
	void CalcDropItemListByDropRule(out DropPropData[] DropItemList, int DropPlanId);// 0x33ee7b8
	void CalcDropItemListByDropCfg(out const DropItemConfig DropRuleCfg, out DropPropData[] ItemList);// 0x33ee69c
	void BulletDropStrategy(out int[] BulletIdList, out int[] BulletIdNum, out int[] BulletDropPlanIDList, out int[] BulletDropParams, out int[] DropIdList, out int[] BulletClipMaxNum);// 0x33ee370
	void BulletDropById(int BulletID, out int[] BulletDropPlanIDList, out int[] DropIdList);// 0x33ee1f8
	void AddToWaitDropList(out const WaitDropData AddWaitDropData);// 0x33ee110

--------------------------------
Class: DropIDData
	FName[] DropRowList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: RemainItemRuleDataRow
	int KeyID;//[Offset: 0x0, Size: 4]
	int ItemId;//[Offset: 0x4, Size: 4]
	int itemType;//[Offset: 0x8, Size: 4]
	int ItemSubType;//[Offset: 0xc, Size: 4]
	int RemainPerc;//[Offset: 0x10, Size: 4]

--------------------------------
Class: RandomDropData
	int[] ItemIdList;//[Offset: 0x0, Size: 16]
	int RuleID;//[Offset: 0x10, Size: 4]
	int[] ItemCountList;//[Offset: 0x18, Size: 16]
	float Weight;//[Offset: 0x28, Size: 4]
	int DropMode;//[Offset: 0x2c, Size: 4]
	int MinAttachment;//[Offset: 0x30, Size: 4]
	int MaxAttachment;//[Offset: 0x34, Size: 4]
	int ItemIDStyle;//[Offset: 0x38, Size: 4]
	bool bDropOnDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: DropToGroundData
	PickUpItemData PickUpItemData;//[Offset: 0x0, Size: 56]
	int ItemId;//[Offset: 0x38, Size: 4]

--------------------------------
Class: MonsterSingleBulletDropIds
	int[] BulletDropIds;//[Offset: 0x0, Size: 16]
	int[] BulletDropParams;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MonsterSingleDropIds

--------------------------------
Class: PaperSprite.Object
	Vector2D SourceUV;//[Offset: 0x38, Size: 8]
	Vector2D SourceDimension;//[Offset: 0x40, Size: 8]
	Texture2D* SourceTexture;//[Offset: 0x48, Size: 8]
	Texture*[] AdditionalSourceTextures;//[Offset: 0x50, Size: 16]
	Vector2D BakedSourceUV;//[Offset: 0x60, Size: 8]
	Vector2D BakedSourceDimension;//[Offset: 0x68, Size: 8]
	Texture2D* BakedSourceTexture;//[Offset: 0x70, Size: 8]
	MaterialInterface* DefaultMaterial;//[Offset: 0x78, Size: 8]
	MaterialInterface* AlternateMaterial;//[Offset: 0x80, Size: 8]
	PaperSpriteSocket[] Sockets;//[Offset: 0x88, Size: 16]
	byte SpriteCollisionDomain;//[Offset: 0x98, Size: 1]
	float PixelsPerUnrealUnit;//[Offset: 0x9c, Size: 4]
	BodySetup* BodySetup;//[Offset: 0xa0, Size: 8]
	int AlternateMaterialSplitIndex;//[Offset: 0xa8, Size: 4]
	Vector4[] BakedRenderData;//[Offset: 0xb0, Size: 16]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0, Size: 48]
	FName SocketName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: BlockOceanAndRiverVoice_C.Actor.Object
	void UserConstructionScript();// 0x4033584
	BoxComponent* Box;//[Offset: 0x3c8, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3d0, Size: 8]

--------------------------------
Class: RiverZone_C.Actor.Object
	void UserConstructionScript();// 0x4033584
	BoxComponent* Box;//[Offset: 0x3c8, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3d0, Size: 8]

--------------------------------
Class: RiverDetectZone_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3c8, Size: 8]
	void CalcRTPCValue(out float OutValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_FindLocationClosestToWorldLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x4033584
	void StopRiverVoice();// 0x4033584
	void UserConstructionScript();// 0x4033584
	void ReceiveTick(float DeltaSeconds);// 0x4033584
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4033584
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x4033584
	void ExecuteUbergraph_RiverDetectZone(int EntryPoint, float CallFunc_CalcRTPCValue_OutValue, float K2Node_Event_DeltaSeconds, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_IsLocallyControlled_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsLocallyControlled_ReturnValue2, bool CallFunc_IsActorTickEnabled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_PostAkEvent_ReturnValue, float CallFunc_CalcRTPCValue_OutValue2);// 0x4033584
	AkComponent* Ak;//[Offset: 0x3d0, Size: 8]
	SplineComponent* Spline;//[Offset: 0x3d8, Size: 8]
	BoxComponent* Box;//[Offset: 0x3e0, Size: 8]
	SceneComponent* Scene;//[Offset: 0x3e8, Size: 8]
	float MaxHearableDistance;//[Offset: 0x3f0, Size: 4]
	float CurRTPCValue;//[Offset: 0x3f4, Size: 4]

--------------------------------
Class: BP_MiniMapStandardPoint_C.MiniMapStandardPoint.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x400, Size: 8]
	void UserConstructionScript();// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void ExecuteUbergraph_BP_MiniMapStandardPoint(int EntryPoint, const TemBPDataAddr[] K2Node_MakeArray_Array, bool CallFunc_Array_IsValidIndex_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue, TemBPDataAddr[] K2Node_MakeArray_Array2, bool CallFunc_IsDedicatedServer_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue2, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue3, float CallFunc_MakeLiteralFloat_ReturnValue, TemBPDataAddr CallFunc_AddrFromWild_ReturnValue4, TemBPDataAddr[] K2Node_MakeArray_Array3);// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x408, Size: 8]
	FString[] TagStrArray;//[Offset: 0x410, Size: 16]

--------------------------------
Class: MiniMapStandardPoint.Actor.Object
	float LevelBoundExtent;//[Offset: 0x3c8, Size: 4]
	float EachTileExtent;//[Offset: 0x3cc, Size: 4]
	FString LevelName;//[Offset: 0x3d0, Size: 16]
	float FakeEdgeExtent;//[Offset: 0x3e0, Size: 4]
	enum GameModeType;//[Offset: 0x3e4, Size: 1]
	Vector2D AirDropBoundOffset;//[Offset: 0x3e8, Size: 8]
	VisualFieldLayerConfig VisualLayerConfig;//[Offset: 0x3f0, Size: 16]

--------------------------------
Class: VisualFieldLayerConfig
	VisualFieldLayer[] VisualLayerList;//[Offset: 0x0, Size: 16]

--------------------------------
Class: VisualFieldLayer
	float LayerFloorHeight;//[Offset: 0x0, Size: 4]
	float LayerRoofHeight;//[Offset: 0x4, Size: 4]
	int LayerID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: Baltic_ObjectPoolMgr_C.AObjectPoolManager.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x500, Size: 8]

--------------------------------
Class: AObjectPoolManager.Actor.Object
	PoolPreloadObjectItem[] Preloads;//[Offset: 0x3c8, Size: 16]
	PoolPreloadClassItem[] PreloadClasses;//[Offset: 0x3d8, Size: 16]
	PoolPreloadObjectItem[] PreloadTblRes;//[Offset: 0x3e8, Size: 16]
	PoolPreloadTableConfigItem[] PreLoadConfigTable;//[Offset: 0x3f8, Size: 16]
	Object*[] PreLoadQuotes;//[Offset: 0x408, Size: 16]
	UAEDataTable*[] LoadedTableArray;//[Offset: 0x4f0, Size: 16]
	void PreSpawnToPool(out const PoolPreloadObjectItem Item, out SoftObjectPath SoftObjectPath);// 0x32570a4
	void PreLocalSpawnToPool(out const PoolPreloadClassItem Item, out SoftObjectPath SoftObjectPath);// 0x3256f40
	void PreLoadObjectsFinish(PoolPreloadAysncLoadParams loadParams);// 0x3256ec4
	void PreLoadClassesFinish();// 0x3256eb0
	void OnOpenObjectPool();// 0x3256e9c

--------------------------------
Class: PoolPreloadObjectItem
	Object* Object;//[Offset: 0x0, Size: 40]
	bool IsSpawnToPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int PreloadNum;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PoolPreloadClassItem
	class Object* Object;//[Offset: 0x0, Size: 40]
	bool IsSpawnToPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int PreloadNum;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PoolPreloadTableConfigItem
	int LoadPriority;//[Offset: 0x0, Size: 4]
	FString CSVFilePath;//[Offset: 0x8, Size: 16]

--------------------------------
Class: PoolPreloadAysncLoadParams

--------------------------------
Class: BattleItemHandlePreLoad.Actor.Object
	FString[] BattleItemHandlePreLoadGameMode;//[Offset: 0x3d8, Size: 16]
	FString[] PreLoadBattleHandlePatch;//[Offset: 0x3e8, Size: 16]
	Object*[] LoadedBattleHandle;//[Offset: 0x3f8, Size: 16]

--------------------------------
Class: Baltic_Main_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3d0, Size: 8]
	void ReceiveBeginPlay();// 0x4033584
	void ReceiveEndPlay(byte EndPlayReason);// 0x4033584
	void ExecuteUbergraph_Baltic_Main(int EntryPoint, byte K2Node_Event_EndPlayReason, bool CallFunc_CreateMyLandscape_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x4033584
	FString MatPath;//[Offset: 0x3d8, Size: 16]
	FString GeoPath;//[Offset: 0x3e8, Size: 16]
	float fFactor;//[Offset: 0x3f8, Size: 4]
	Landscape* Landscape_0_ExecuteUbergraph_Baltic_Main_RefProperty;//[Offset: 0x400, Size: 8]

--------------------------------
Class: Water_C.OceanManager.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4c0, Size: 8]

--------------------------------
Class: BP_GlobalConfig_C.GlobalConfigActor.Actor.Object
	void UserConstructionScript();// 0x4033584
	BP_WaveConfig_C* BP_WaveConfig;//[Offset: 0x3d8, Size: 8]
	BP_WeatherConfig_C* BP_WeatherConfig;//[Offset: 0x3e0, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e8, Size: 8]

--------------------------------
Class: BP_WaveConfig_C.LuaActorComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1d8, Size: 8]
	void IsOpenWave(out bool bOpen, int CallFunc_GetConsoleVariableIntValue_ReturnValue, int CallFunc_GetConsoleVariableIntValue_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void OnRenderQualitySettingsChanged_Event(RenderQualitySettings RenderQualitySettings);// 0x4033584
	void ExecuteUbergraph_BP_WaveConfig(int EntryPoint, bool CallFunc_IsOpenWave_bOpen, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsServer_ReturnValue, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_IsOpenWave_bOpen2, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, RenderQualitySettings K2Node_CustomEvent_RenderQualitySettings);// 0x4033584
	FName WaveLevelName;//[Offset: 0x1e0, Size: 8]

--------------------------------
Class: BP_WeatherConfig_C.WeatherConfigComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x158, Size: 8]
	void ReceiveBeginPlay();// 0x4033584
	void DelaySyncWeatherLevelInfo();// 0x4033584
	void OnWeatherLevelChanged();// 0x4033584
	void ExecuteUbergraph_BP_WeatherConfig(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, STExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetOwner_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate2, GameModeBase* CallFunc_GetGameMode_ReturnValue, BattleRoyaleGameMode* K2Node_DynamicCast_AsBattle_Royale_Game_Mode, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue3, DirectionalLight*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_HasAuthority_ReturnValue2, DirectionalLight* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, LinearColor CallFunc_Conv_VectorToLinearColor_ReturnValue, FString CallFunc_Conv_ColorToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x4033584

--------------------------------
Class: STExtraDelegateMgr.BlueprintFunctionLibrary.Object
	delegate OnPlayerStateNameChange;//[Offset: 0x28, Size: 16]
	delegate OnHPChange;//[Offset: 0x38, Size: 16]
	delegate OnCanRescueOtherChange;//[Offset: 0x48, Size: 16]
	delegate OnRescueingStatusChangeChange;//[Offset: 0x58, Size: 16]
	delegate OnCaptivingStatusChangeChange;//[Offset: 0x68, Size: 16]
	delegate OnCanCarryOtherChange;//[Offset: 0x78, Size: 16]
	delegate OnBreathChange;//[Offset: 0x88, Size: 16]
	delegate OnVehicleHPChange;//[Offset: 0x98, Size: 16]
	delegate OnCharacterStateChangeDelegate;//[Offset: 0xa8, Size: 16]
	delegate OnEnterBornIsland;//[Offset: 0xb8, Size: 16]
	delegate OnCorpsOutGame;//[Offset: 0xc8, Size: 16]
	delegate OnCorpsJoinGame;//[Offset: 0xd8, Size: 16]
	static STExtraDelegateMgr* STExtraDelegateMgrInstance();// 0x35a3218

--------------------------------
Class: BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnGameModeEnterFlying;//[Offset: 0x2140, Size: 16]
	delegate OnGameModeExitFlying;//[Offset: 0x2150, Size: 16]
	FString LogicAreaDataPath;//[Offset: 0x2160, Size: 16]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x217c, Size: 1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2190, Size: 1]
	bool bOpenVehicleAnti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2191, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2192, Size: 1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x2194, Size: 4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2198, Size: 1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x219c, Size: 4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x21a0, Size: 8]
	float DragOnGroundDownTraceDistance;//[Offset: 0x21a8, Size: 4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x21ac, Size: 4]
	bool EnableAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21b0, Size: 1]
	CrowdManagerComponent* CrowdManager;//[Offset: 0x21d0, Size: 8]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d8, Size: 1]
	delegate OnGameModeEnterPlane;//[Offset: 0x21e0, Size: 16]

--------------------------------
Class: BattleRoyaleGameModeBase.UAEGameMode.LuaGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bUseSpawnSpotAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a4, Size: 1]
	bool bUseSpawnActorAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a5, Size: 1]
	bool bSpawnAdjustCollisionConsiderHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a6, Size: 1]
	int DefaultRevivalCount;//[Offset: 0x14a8, Size: 4]
	int DefaultBuyLifeCount;//[Offset: 0x14ac, Size: 4]
	bool EnableTeamMotivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b0, Size: 1]
	GameModeParms GameModeParms;//[Offset: 0x14b8, Size: 432]
	STExtraPlayerStart*[] STEPlayerStartsList;//[Offset: 0x1668, Size: 16]
	<int,BornPlayerStartData> BornIDToPlayerStartsMap;//[Offset: 0x1678, Size: 80]
	enum GameModeType;//[Offset: 0x16c8, Size: 1]
	enum GameModeSubType;//[Offset: 0x16c9, Size: 1]
	AIActingComponent* AIActingComp;//[Offset: 0x16d0, Size: 8]
	int bEnableAIPolicyDecisionLog;//[Offset: 0x16d8, Size: 4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0x16dc, Size: 4]
	bool IsDestroyNoActiveWorldActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16e0, Size: 1]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0x16e4, Size: 4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0x16e8, Size: 4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0x16ec, Size: 4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f0, Size: 1]
	FString SubAISuffix;//[Offset: 0x16f8, Size: 16]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0x1708, Size: 8]
	class AIController* AIControllerClass;//[Offset: 0x1710, Size: 8]
	class AIController* NewAIControllerClass;//[Offset: 0x1718, Size: 8]
	class AIController* MLAIControllerClass;//[Offset: 0x1720, Size: 8]
	class UAELevelDirector* LevelDirectorClass;//[Offset: 0x1728, Size: 8]
	UAELevelDirector* LevelDirector;//[Offset: 0x1730, Size: 8]
	byte WorldLoadedType;//[Offset: 0x1738, Size: 1]
	int MaxNoConsiderActorNum;//[Offset: 0x173c, Size: 4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0x1740, Size: 4]
	int PlayerNumPerTeam;//[Offset: 0x1744, Size: 4]
	bool IgnoreWorldLevelProbeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1748, Size: 1]
	bool IsRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1749, Size: 1]
	FString GameModeDisplayName;//[Offset: 0x1750, Size: 16]
	float CircleSpeedMultiplicator;//[Offset: 0x1760, Size: 4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1764, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1765, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1766, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1767, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1768, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1769, Size: 1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176a, Size: 1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176b, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176c, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176d, Size: 1]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176e, Size: 1]
	float ResetSignalHP_FatalDamage;//[Offset: 0x1770, Size: 4]
	float ResetSignalHP_Rescued;//[Offset: 0x1774, Size: 4]
	<float,float> SignalHPApplyExtraDamageConfigMap;//[Offset: 0x1778, Size: 80]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c8, Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c9, Size: 1]
	int[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0x17d0, Size: 16]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0x17e0, Size: 4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e4, Size: 1]
	bool bEnableArmorEquipmentToBeAutoDroped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e5, Size: 1]
	FString GameModeConfigPath;//[Offset: 0x17e8, Size: 16]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f8, Size: 1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f9, Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17fa, Size: 1]
	bool bUseFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17fb, Size: 1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17fc, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17fd, Size: 1]
	GameModeParam CurPlaneRouteData;//[Offset: 0x1800, Size: 88]
	Vector BornLocation;//[Offset: 0x1858, Size: 12]
	Vector AIBornLocation;//[Offset: 0x1864, Size: 12]
	float BornRadius;//[Offset: 0x1870, Size: 4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0x1874, Size: 1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0x1875, Size: 1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0x1878, Size: 4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0x187c, Size: 4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x1880, Size: 8]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1888, Size: 1]
	float MaxAIAllowJumpRadius;//[Offset: 0x18a8, Size: 4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0x18ac, Size: 4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b0, Size: 1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0x18b8, Size: 8]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c0, Size: 1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c1, Size: 1]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0x18c8, Size: 8]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0x18d0, Size: 8]
	SeasonStatueBase* StatueBaseActor;//[Offset: 0x18d8, Size: 8]
	float OverrideBackpackCapacity;//[Offset: 0x18e0, Size: 4]
	bool bOverrideBackpackCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18e4, Size: 1]
	FString LuaModPath;//[Offset: 0x1910, Size: 16]
	FString LuaSubMod;//[Offset: 0x1920, Size: 16]
	FString[] CustomWidgets;//[Offset: 0x1930, Size: 16]
	FString CustomUIName;//[Offset: 0x1940, Size: 16]
	GameModeState* CurrentState;//[Offset: 0x1950, Size: 8]
	GameModeState*[] AllGameModeStates;//[Offset: 0x1958, Size: 16]
	GameModeState* GameModeStateActive;//[Offset: 0x1968, Size: 8]
	GameModeState* GameModeStateReady;//[Offset: 0x1970, Size: 8]
	GameModeState* GameModeStateFighting;//[Offset: 0x1978, Size: 8]
	GameModeState* GameModeStateFinished;//[Offset: 0x1980, Size: 8]
	FName CurGameModeState;//[Offset: 0x1988, Size: 8]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a0, Size: 1]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x19a8, Size: 8]
	EventReportComponent* EventReportComponent;//[Offset: 0x19b0, Size: 8]
	Actor* PlanePawn;//[Offset: 0x19b8, Size: 8]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c0, Size: 1]
	GameModeProbeComponent*[] AllProbeComps;//[Offset: 0x19c8, Size: 16]
	AIProbeComponent* RegisterAIProbe;//[Offset: 0x19d8, Size: 8]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0x19e0, Size: 8]
	float OutBoundDamage;//[Offset: 0x19e8, Size: 4]
	AIGroupManagerComponent* AIGroupManagerComp;//[Offset: 0x1a88, Size: 8]
	AnimalTeleportComponent* AnimalTeleportComp;//[Offset: 0x1a90, Size: 8]
	<uint32,byte> AISpawnTypeCache;//[Offset: 0x1a98, Size: 80]
	PlaneComponent* PlaneComp;//[Offset: 0x1ae8, Size: 8]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0x1af0, Size: 8]
	RespawnItemConfig* DefaultGeneratePlayerItemConfig;//[Offset: 0x1af8, Size: 8]
	ShowVehicleComponent* ShowVehicle;//[Offset: 0x1b00, Size: 8]
	delegate OnSpawnAISuccessDelegate;//[Offset: 0x1b48, Size: 16]
	PlaneTypes[] SeasonPlanes;//[Offset: 0x1c08, Size: 16]
	int MatchGoal;//[Offset: 0x1c74, Size: 4]
	bool bIsNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c78, Size: 1]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x1c98, Size: 80]
	ItemAttach[] ItemAttachListCfg;//[Offset: 0x1ce8, Size: 16]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf8, Size: 1]
	RespawnItemConfigInst[] RespawnItemConfigList;//[Offset: 0x1d00, Size: 16]
	RespawnItemConfig* RespawnItemConfig;//[Offset: 0x1d10, Size: 8]
	FakePlayerCustomComponent* FakePlayerCustomComponent;//[Offset: 0x1d18, Size: 8]
	FName FeatureDefaultPawnName;//[Offset: 0x1d20, Size: 8]
	FName FeaturePlayerControllerName;//[Offset: 0x1d28, Size: 8]
	FName FeatureWeaponName;//[Offset: 0x1d30, Size: 8]
	bool CallTeamMateStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d38, Size: 1]
	bool CircleDefaultActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d39, Size: 1]
	int VehicleExplosionLifeSpan;//[Offset: 0x1d3c, Size: 4]
	bool IsEnableReqEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d40, Size: 1]
	bool IsEnableReqExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d41, Size: 1]
	bool IsEnableReqChangeVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d42, Size: 1]
	bool bEnableDSAITickDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d43, Size: 1]
	bool bEnableDSAIPhysicsDistanceOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d44, Size: 1]
	bool bEnableDSAITickRateOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d45, Size: 1]
	DSTickRateOptimize DSTickRateOptimizeConfig;//[Offset: 0x1d48, Size: 16]
	float DelaySpawnVehicleTime;//[Offset: 0x1d58, Size: 4]
	float DelayDestroyVehicleTime;//[Offset: 0x1d5c, Size: 4]
	int MaxAllowSpawnVehicleCount;//[Offset: 0x1d60, Size: 4]
	bool bIgnorePlayerStartWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d64, Size: 1]
	<uint32,Actor*> PlayerVehicleInReady;//[Offset: 0x1d68, Size: 80]
	int MaxVehiclesInReady;//[Offset: 0x1db8, Size: 4]
	int MaxVehiclesPerGroupInReady;//[Offset: 0x1dbc, Size: 4]
	int MaxWingmanInReady;//[Offset: 0x1dc0, Size: 4]
	int MaxWingmanPerGroupInReady;//[Offset: 0x1dc4, Size: 4]
	bool EnableSuperCarPreTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc8, Size: 1]
	int SuperCarNum;//[Offset: 0x1dcc, Size: 4]
	int MaxGroups;//[Offset: 0x1dd0, Size: 4]
	int MaxPlayersPerGroup;//[Offset: 0x1dd4, Size: 4]
	<int,GroupPlayers> PlayersInGroup;//[Offset: 0x1dd8, Size: 80]
	PVSNetRelevantHelper* PVSNetRelevantHelper;//[Offset: 0x2008, Size: 8]
	bool bOpenPVSNetRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2010, Size: 1]
	bool bDelayAddPawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2011, Size: 1]
	STExtraPlayerController*[] WaitAddWeaponPlayerList;//[Offset: 0x2018, Size: 16]
	GameModeCVarConfigItem[] CVarConfigs;//[Offset: 0x2028, Size: 16]
	bool bAliveOnNonePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2038, Size: 1]
	<uint64,PlayerController*> PlayerMap;//[Offset: 0x2040, Size: 80]
	bool bNeedBroadcastFatalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2090, Size: 1]
	bool bNeedBroadcastLastBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2091, Size: 1]
	<int,AIControllerList> AIDeathResIDToControllerList;//[Offset: 0x2098, Size: 80]
	AIPawnPoolItem[] AILivingPawnForPool;//[Offset: 0x20e8, Size: 16]
	bool bEnablePacketSimulationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f8, Size: 1]
	int MinPacketSimulationLag;//[Offset: 0x20fc, Size: 4]
	float CaculateConnectionsAvgLagTimer;//[Offset: 0x2100, Size: 4]
	int ConnectionsAvgLag;//[Offset: 0x2104, Size: 4]
	float CaculateConnectionsAvgLagTime;//[Offset: 0x2108, Size: 4]
	FString[] ReasonsToSend;//[Offset: 0x2110, Size: 16]
	bool bAIDropBulletInClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2120, Size: 1]
	bool bDropAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2121, Size: 1]
	bool bOnlyDropMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2122, Size: 1]
	float DistanceCullFactor;//[Offset: 0x2124, Size: 4]
	float CheckDestoryActorTime;//[Offset: 0x2128, Size: 4]
	bool bInvincibleIgnorePoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212c, Size: 1]
	float RemainReadyStateTimeForceSpawnMLAI;//[Offset: 0x2130, Size: 4]
	Vector2D TimerSpawnMLAITime;//[Offset: 0x2134, Size: 8]
	void UseRoomCustomCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x32c337c
	void UseFixedCircleParams(CircleMgrComponent* CircleMgrComp, out const RoomCustomParams RoomCustomParams);// 0x32c3238
	void UnregisterFromGroup(STExtraPlayerController* InController);// 0x32c31b4
	void StopAllFakePlayerAIBehaviorTree();// 0x32c31a0
	void StatisticsVehicleDamage(float Damage, int DamageTypeId, Actor* DamageCauser);// 0x32c30a4
	bool SpawnMLAIWithPlayerKeyRet(uint32 PlayerKey, uint32 Level);// 0x32c2fdc
	void SpawnAI(int Num);// 0x32c2f60
	bool ShouldDisableRoomCircleConfig();// 0x32c2f20
	void SetStateLeftTime(int leftTime);// 0x32c2e9c
	void SetGameEndReportData();// 0x32c2e80
	void SetCharacterCustomEnd(UAECharacter* Character);// 0x32c2e04
	void SetAITypeCache(uint32 PlayerKey, byte AIType);// 0x32c2d4c
	void RevisePlayerTombBoxDropWrapperList(STExtraBaseCharacter* Character, out PickUpItemData[] OutItemDataList, STExtraBaseCharacter* DamageCauser, int InstanceIDCnt);// 0x32c2bdc
	void RestartPlayer(Controller* NewPlayer);// 0x32c2b58
	void ResetGameMode();// 0x32c2b3c
	void RemoveUnuseComponent(SubSystemConfig InSubSystemConfig);// 0x32c2a88
	bool RegisterSpawnedWingman(int InGroupIndex);// 0x32c29f0
	bool RegisterSpawnedVehicle(int InGroupIndex);// 0x32c2958
	int RegisterInGroupByPlayerKey(uint32 InPlayerKey);// 0x32c28cc
	int RegisterInGroup(STExtraPlayerController* InController);// 0x32c2838
	void RegisterComponentInternal(enum InSubSystemId, ActorComponent* NewComp, bool bAddToRoot);// 0x32c2734
	void RefreshNetworkObject(Actor* Actor, Vector Loction);// 0x32c2674
	void OnVehicleKill(int DamageTypeId, Actor* DamageCauser);// 0x32c25b4
	void OnReportNetworkData();// 0x32c2598
	void OnPlayerControlDestroyEnd(uint32 PlayerKey);// 0x32c2514
	void OnGameModeStateChange();// 0x32c24f8
	void OnGameEnterReady();// 0x32c24dc
	void OnGameEnterFinish();// 0x32c24c0
	void OnGameEnterFight();// 0x32c24a4
	void OnGameEnterActive();// 0x32c2488
	void NotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x32c2380
	bool IsVisualFieldFeatureSupported();// 0x32c2348
	bool IsSubAIMode();// 0x32c2310
	bool IsRevivalGameMode(STExtraPlayerState* PlayerState);// 0x32c2278
	bool IsPlayerCanSelfRevival(STExtraPlayerState* PlayerState);// 0x32c21e0
	bool IsFeatureSupported(enum SubSystemType);// 0x32c2150
	bool IsCanJump(PlayerController* PC);// 0x32c20b8
	void InitlializeRespawnItemConfig();// 0x32c20a4
	void InitialGameModeState();// 0x32c2090
	void HandleGameEnd();// 0x32c2074
	void GotoReadyState();// 0x32c2060
	void GotoFinishedState();// 0x32c2044
	void GotoFightingState();// 0x32c2028
	void GotoActiveState();// 0x32c2014
	int GetMonsterCount();// 0x32c1fe0
	class Object GetGlobalOverrideClass(class Object InComponentClass);// 0x32c1f54
	STExtraBaseCharacter* GetFirstAlivePlayerCharacter();// 0x32c1f18
	byte GetDefaultAIType(uint32 PlayerKey);// 0x32c1e8c
	int GetCurWeatherPhaseIndex();// 0x32c1e50
	GameModeState* GetCurrentState();// 0x32c1e1c
	GameModeParam GetCurPlaneRouteData();// 0x32c1d38
	FName GetCurGameModeState();// 0x32c1d1c
	AIWorldVolume* GetAIWorldVolume();// 0x32c1ce8
	AIWorldSoundManagerComponent* GetAIWorldSoundManagerComponent();// 0x32c1cb4
	byte GetAITypeCache(uint32 PlayerKey, bool bDeleteIfGet);// 0x32c1be4
	void GenerateRespawnItemsForAllPlayers();// 0x32c1bd0
	PlayerController* FindPlayerControllerByUId(uint64 UId);// 0x32c1b3c
	FakePlayerAIController* FindAIControllerWithPlayerKey(uint32 PlayerKey);// 0x32c1ab0
	void ExecuteCVarConfig();// 0x32c1a9c
	void CreateGameModeComponents();// 0x32c1a80
	ActorComponent* CreateAndRegisterComponent(SubSystemConfig InSubSystemConfig);// 0x32c19bc
	void ClearGroupsInReady(out const GameModeStateChangedParams InParams);// 0x32c1930
	Actor* ChoosePlayerStartByTeamId(int TeamID);// 0x32c189c
	bool CheckNoHumanExist();// 0x32c185c
	bool CheckMatchGoalAchieved();// 0x32c181c
	void CheckInitGameTriggerEnv();// 0x32c1808
	bool CheckGameEnd();// 0x32c17c8
	void ChangeStateGM(FName TargetGameModeState);// 0x32c174c
	bool CanCharacterCircleTakePain(STExtraCharacter* Character);// 0x32c16b4
	void CalculateGameTerminatorInfo(Controller* Killer, Controller* VictimPlayer);// 0x32c15f8
	void CaculateConnectionsAvgLag(float DeltaTime);// 0x32c157c
	void BPSpawnAI(int Num);// 0x32c1500

--------------------------------
Class: GameModeParms
	SubSystemConfig SSC_DeferredExitGame;//[Offset: 0x0, Size: 48]
	SubSystemConfig SSC_RecallTeammate;//[Offset: 0x30, Size: 48]
	SubSystemConfig SSC_RescueHelicopter;//[Offset: 0x60, Size: 48]
	SubSystemConfig SSC_HeavyWeapon;//[Offset: 0x90, Size: 48]
	SubSystemConfig SSC_TDMHardPoint;//[Offset: 0xc0, Size: 48]
	SubSystemConfig SSC_VisualField;//[Offset: 0xf0, Size: 48]
	SubSystemConfig SSC_WorldActorFlag;//[Offset: 0x120, Size: 48]
	SubSystemConfig SSC_SuperCold;//[Offset: 0x150, Size: 48]
	SubSystemConfig SSC_ARWeaponManager;//[Offset: 0x180, Size: 48]

--------------------------------
Class: SubSystemConfig
	enum SubSystemId;//[Offset: 0x0, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum ConstructType;//[Offset: 0x2, Size: 1]
	class Object* SubSystemClass;//[Offset: 0x8, Size: 8]
	DynamicCompConfig DCC_PlayerController;//[Offset: 0x10, Size: 16]
	DynamicCompConfig DCC_PlayerPawn;//[Offset: 0x20, Size: 16]

--------------------------------
Class: DynamicCompConfig
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	class Object* DynamicCompClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bAutoResetOccupiedMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	float ResetOccupiedMarkTime;//[Offset: 0x3fc, Size: 4]
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	int PlayerBornPointID;//[Offset: 0x404, Size: 4]
	bool CheckEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 1]
	int CampID;//[Offset: 0x40c, Size: 4]
	int TeamID;//[Offset: 0x410, Size: 4]
	bool IsEverUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x414, Size: 1]
	void SetMarkOccupied();// 0x3619ff0
	bool IsMarkOccupied();// 0x3619fb8

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x3f0, Size: 8]

--------------------------------
Class: BornPlayerStartData
	int BornPointID;//[Offset: 0x0, Size: 4]
	STExtraPlayerStart*[] PlayerStarts;//[Offset: 0x8, Size: 16]

--------------------------------
Class: GamemodeAIDataAsset.DataAsset.Object
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x30, Size: 16]
	float RandomStartJumpTime;//[Offset: 0x40, Size: 4]
	float RandomEndJumpTime;//[Offset: 0x44, Size: 4]
	float JumpRadius;//[Offset: 0x48, Size: 4]
	float JumpHeight;//[Offset: 0x4c, Size: 4]
	float RandomAccelerateStart;//[Offset: 0x50, Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x54, Size: 4]
	float OpenParachuteHeight;//[Offset: 0x58, Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x5c, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x60, Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x64, Size: 4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x68, Size: 4]
	float WhiteCircleRaduisCanPrne;//[Offset: 0x6c, Size: 4]
	float WhiteCircleRaduisMedicine;//[Offset: 0x70, Size: 4]
	float StopdeliverTime;//[Offset: 0x74, Size: 4]
	float NoCirlceRadius;//[Offset: 0x78, Size: 4]
	float TraceHeight;//[Offset: 0x7c, Size: 4]
	float RangeMin;//[Offset: 0x80, Size: 4]
	float RangeMax;//[Offset: 0x84, Size: 4]
	float OriginCheckSquare;//[Offset: 0x88, Size: 4]
	float DestCheckSquare;//[Offset: 0x8c, Size: 4]
	int HouseCheckTimes;//[Offset: 0x90, Size: 4]
	Vector2D FlyToCenterOfCircle;//[Offset: 0x94, Size: 8]
	float FlyToCircleRadius;//[Offset: 0x9c, Size: 4]
	float FlyToCircleOutRadius;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: AIEquipSpawnGroupDataBase
	float RightTime;//[Offset: 0x0, Size: 4]
	AIEquipSpawnGroup[] AIEquipSpawnGroupList;//[Offset: 0x8, Size: 16]
	AIEquipSpawnItem[] AIMustPickUpItemList;//[Offset: 0x18, Size: 16]

--------------------------------
Class: AIEquipSpawnGroup
	AIEquipSpawnItem[] Item;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AIEquipSpawnItem
	enum itemType;//[Offset: 0x0, Size: 1]
	int ItemSpecificID;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	int MaxCount;//[Offset: 0xc, Size: 4]
	Vector2D ExtraConfigValue;//[Offset: 0x10, Size: 8]

--------------------------------
Class: CrowdManagerComponent.ActorComponent.Object
	float TimeHorizon;//[Offset: 0x110, Size: 4]
	float AvoidanceWeight;//[Offset: 0x114, Size: 4]
	float CohesionWeight;//[Offset: 0x118, Size: 4]
	float AlignmentWeight;//[Offset: 0x11c, Size: 4]
	float ArriveWeight;//[Offset: 0x120, Size: 4]
	float PushedWeight;//[Offset: 0x124, Size: 4]
	float SeparationWeight;//[Offset: 0x128, Size: 4]
	bool bPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	bool bSingleTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 1]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 1]
	bool bOpenAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f, Size: 1]
	float DragDistanceWhenStuck;//[Offset: 0x130, Size: 4]
	float DetermineAgentStuckTime;//[Offset: 0x134, Size: 4]
	float DetermineAgentStuckDistSq;//[Offset: 0x138, Size: 4]
	<Actor*,int> actor2AgentIndex;//[Offset: 0x958, Size: 80]
	void SetQueryInterfaceBlueprint(AIWorldVolume* query);// 0x3322d44
	void RemoveCrowdAgentBlueprint(Actor* Owner);// 0x3322cc8
	void MoveToPositionBlueprint(Actor* Agent, out const Vector Position, float stopRadius);// 0x3322bbc
	void AddCrowdAgentBlueprint(Actor* Owner, float AgentRadius, float SegmentRadius, float Height, float MaxSpeed, float MaxForce, float queryNeighborRadius, float queryBoundaryRadius);// 0x33229a8

--------------------------------
Class: AIActingComponent.LuaInstancedActorComponent.ActorComponent.Object
	FString AIActingLuaConfig;//[Offset: 0x190, Size: 16]
	FString DefaultLuaFilePath;//[Offset: 0x1a0, Size: 16]
	int WillKilledBotNum;//[Offset: 0x1b0, Size: 4]
	int PlayersOnSquare;//[Offset: 0x1b4, Size: 4]
	int OriginalTotalAINum;//[Offset: 0x1b8, Size: 4]
	AIWayPointActor*[] WayPointActorList;//[Offset: 0x1d0, Size: 16]
	bool bUseCacheWayPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	AIActingCandidateData[] CandidateAIList;//[Offset: 0x1e8, Size: 16]
	bool bCheckTeleportLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	float AverageRating;//[Offset: 0x2c4, Size: 4]
	int MaxActiveAI;//[Offset: 0x2c8, Size: 4]
	int ActiveAI_n;//[Offset: 0x2cc, Size: 4]
	int ActiveAI_m;//[Offset: 0x2d0, Size: 4]
	float AISpawnCircleOriginOffset;//[Offset: 0x2d4, Size: 4]
	float NoWhiteCirclesRadius;//[Offset: 0x2d8, Size: 4]
	float SelectActionPeriod;//[Offset: 0x2dc, Size: 4]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x2e0, Size: 4]
	int TryFindSpawnAILocNum;//[Offset: 0x2e4, Size: 4]
	AIActingItem[] AIActingItemList;//[Offset: 0x2e8, Size: 16]
	int SimulateKillMinIntervalNum;//[Offset: 0x34c, Size: 4]
	AIBeginAttackEachOther[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x350, Size: 16]
	float MinKilledFreqScale;//[Offset: 0x360, Size: 4]
	float MaxKilledFreqScale;//[Offset: 0x364, Size: 4]
	bool bEnableClassicDeliveryAct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	bool bEnableHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	int FullFeedLimit;//[Offset: 0x36c, Size: 4]
	DeliveryRatingConfig[] DeliveryWaveInterval;//[Offset: 0x370, Size: 16]
	float DeliveryBeginTime;//[Offset: 0x380, Size: 4]
	float DeliveryFreq;//[Offset: 0x384, Size: 4]
	int DeliveryAINumEachPeriod;//[Offset: 0x388, Size: 4]
	float MinimumWarmScore;//[Offset: 0x38c, Size: 4]
	float SpecialAIHpCondition;//[Offset: 0x390, Size: 4]
	float SpecialAICircleDistanceScale;//[Offset: 0x394, Size: 4]
	AIDeliveryAreaLimit[] AIDeliveryAreaLimit;//[Offset: 0x398, Size: 16]
	DeliveryCondition[] DeliveryChecks;//[Offset: 0x3a8, Size: 16]
	float TeammateDistanceThresholdSqr;//[Offset: 0x3b8, Size: 4]
	float EnemyDistanceThresholdSqr;//[Offset: 0x3bc, Size: 4]
	float DeliveryCoolDown;//[Offset: 0x3c0, Size: 4]
	SpecialAIDeliveryNumContainer[] SpAINumWitmTeammateCfg;//[Offset: 0x3c8, Size: 16]
	FString HotValuePrefix;//[Offset: 0x3d8, Size: 16]
	HotValueAttenuation HotValueAttenuation;//[Offset: 0x3e8, Size: 12]
	HotValueScale HotValueScale;//[Offset: 0x3f4, Size: 12]
	float DeliveryHotValueThreshold;//[Offset: 0x400, Size: 4]
	float HotValueUpdateBeginTime;//[Offset: 0x404, Size: 4]
	float HotValueUpdateDeltaTime;//[Offset: 0x408, Size: 4]
	bool bDebugHotValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	Vector2D HotValueLocationOffset;//[Offset: 0x418, Size: 8]
	AIRatingDamage[] AIRatingDamageConfig;//[Offset: 0x440, Size: 16]
	AIAttackAIRatingDamage[] AIAttackAIRatingDamage;//[Offset: 0x450, Size: 16]
	DeliveryPlayerConfig[] AIDeliveryPlayerConfig;//[Offset: 0x460, Size: 16]
	AIAttackAnimalRatingDamage[] AIAttackAnimalRatingDamage;//[Offset: 0x470, Size: 16]
	int MaxMoveRequestExecutePerFrame;//[Offset: 0x480, Size: 4]
	int MaxQueuingMoveRequests;//[Offset: 0x484, Size: 4]
	int MaxClearTroubleRequestExecutePerFrame;//[Offset: 0x488, Size: 4]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x490, Size: 8]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x498, Size: 8]
	STExtraPlayerCharacter*[] CachedCandidatePlayers;//[Offset: 0x4a0, Size: 16]
	FakePlayerAIController*[] CachedCandidateAICs;//[Offset: 0x520, Size: 16]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x570, Size: 4]
	int AIAttackAnimalRatingDamageIndex;//[Offset: 0x574, Size: 4]
	bool IsCheckVisibilityReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	bool bCheckTargetLocationDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x599, Size: 1]
	float TargetLocationDistanceThreshold;//[Offset: 0x59c, Size: 4]
	float MaxAILocationTraceHeightZ;//[Offset: 0x5a0, Size: 4]
	AIActingBPAssit* m_BPAssit;//[Offset: 0x5b8, Size: 8]
	FString AIActingBPAssitClassPath;//[Offset: 0x5c0, Size: 16]
	Actor*[] WaterSwimActors;//[Offset: 0x5d0, Size: 16]
	bool bEnableAIStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	delegate CustomDeliveryActDelegate;//[Offset: 0x5e8, Size: 16]
	uint16[] AIStrategyRatingConfig;//[Offset: 0x638, Size: 16]
	void UpdateCachedCandidates();// 0x3230964
	void SimulateKilledFakeAI(out const AIActingCandidateData Killer, out const AIActingCandidateData Killed, int WeapID, out int InWillKilled, byte SpecialDamageType);// 0x323070c
	void SetAIControllerDeleverTarget(FakePlayerAIController* FeedPlayerAIC, STExtraPlayerCharacter* FeedPlayer);// 0x3230658
	void OnNotifyAIDropInfo(int NewAI, out const DSAIDropInfo Info);// 0x3230558
	void GMOnBehaviorTreeLoaded(AIController* InAIController);// 0x32304dc
	void GMModidyAIEquipSpawnGroupData(out AIEquipSpawnGroupDataBase[] OutGroupData);// 0x3230438
	float GetNoWhiteCirclesRadius();// 0x323041c
	float GetHotValueByRowCol(const int InRow, const int InCol);// 0x3230358
	float GetHotValue(const Vector InLocation);// 0x32302cc
	int GetCurrentActing();// 0x3230298
	void CollectAndReportAIStrategyInfo();// 0x3230284
	void BroadFinishLastBreathFunction(FString Killer, FString Killed, int WeaponId, FString KillerNation, FString KilledNation);// 0x322fe7c
	bool AdjustAIAttackAnimalRatingDamage(AnimalAIController* AIC);// 0x322fdec

--------------------------------
Class: AIActingCandidateData
	FakePlayerAIController* FakePlayerAIController;//[Offset: 0x28, Size: 8]

--------------------------------
Class: FakePlayerAIController.BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0xd58, Size: 8]
	delegate OnEnterJumping;//[Offset: 0xd60, Size: 16]
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0xd80, Size: 8]
	int PlayerTeamId;//[Offset: 0xd88, Size: 4]
	uint32 PlayerKey;//[Offset: 0xd8c, Size: 4]
	FString PlayerName;//[Offset: 0xd90, Size: 16]
	byte AIType;//[Offset: 0xda0, Size: 1]
	int resID;//[Offset: 0xda4, Size: 4]
	bool bForceRecordKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda8, Size: 1]
	float TeleportRandomAngle;//[Offset: 0xdac, Size: 4]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	FString DropItemCfgTableName;//[Offset: 0xdb8, Size: 16]
	STExtraBaseCharacter* ControlledCharacter;//[Offset: 0xdc8, Size: 8]
	bool IsOpenPawnMoveOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd1, Size: 1]
	int GetResId();// 0x3387e94
	STExtraPlayerCharacter* GetDeliverTarget();// 0x3387e60
	void ForceDropItems(int itemType);// 0x3387de4

--------------------------------
Class: BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	delegate OnCustomSpawnItemDelegate;//[Offset: 0x6d0, Size: 16]
	float CheckPeriod;//[Offset: 0x6e0, Size: 4]
	float RandomDeviation;//[Offset: 0x6e4, Size: 4]
	float ProtectCountdownTime;//[Offset: 0x6e8, Size: 4]
	float SpawnEquipDelayTime;//[Offset: 0x6ec, Size: 4]
	float SpawnEquipFreezeRadius;//[Offset: 0x6f0, Size: 4]
	Vector2D ProtectShootRadius;//[Offset: 0x6f4, Size: 8]
	float TurnVelocity;//[Offset: 0x6fc, Size: 4]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x700, Size: 8]
	<enum,enum> WeatherToAttackDist;//[Offset: 0x708, Size: 80]
	bool bSyncViewRotationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 1]
	bool bAimOffsetView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x759, Size: 1]
	byte AIActionType;//[Offset: 0xb18, Size: 1]
	byte FakePlayerBornType;//[Offset: 0xb19, Size: 1]
	BackpackComponent* BackpackComponent;//[Offset: 0xb20, Size: 8]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0xb28, Size: 48]
	AIShootMissInfo AIShootMissInfo;//[Offset: 0xb58, Size: 24]
	AIConditionHearingComponent* AIConditionHearingComponent;//[Offset: 0xb70, Size: 8]
	AIParachuteJumpComponent* AIParachuteComp;//[Offset: 0xb78, Size: 8]
	AIHoleUpComponent* AIHoleUpComponent;//[Offset: 0xb80, Size: 8]
	AIBuildingComponent* AIBuildingComponent;//[Offset: 0xb88, Size: 8]
	FString BPClassOverrideTag;//[Offset: 0xba0, Size: 16]
	Actor* Plane;//[Offset: 0xbb0, Size: 8]
	int FlightNo;//[Offset: 0xbb8, Size: 4]
	int DefaultAIFeatureConfigID;//[Offset: 0xbbc, Size: 4]
	AIFeatureInfo AIFeatureInfo;//[Offset: 0xbc0, Size: 320]
	bool IsMLAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 1]
	void UpdateAIMissShootInfo(float CurrentTime, Vector2D MissRange, float MissOnPurposeCD);// 0x32b1c78
	void SetGlobalAverageRating(float RatingValue);// 0x32b1bfc
	void Respawn();// 0x32b1be0
	bool IsAvailableBackpacItemType(ItemDefineID DefineID);// 0x32b1b38
	void InitAIFeatureInfo(int InID);// 0x32b1ab4
	bool InitAI(int InFeatureID);// 0x32b1a1c
	float GetRatingDamageScale(STExtraPlayerController* PlayerController);// 0x32b1990
	float GetRatingDamageFiringAccuRadius(STExtraPlayerController* PlayerController);// 0x32b1904
	float GetGlobalAverageRating();// 0x32b18d0
	Pawn* GetCurEnemy();// 0x32b1894
	void CustomSpawnItemDelegate__DelegateSignature(BaseAIController* AIController);// 0x4033584
	void ChangeAIActionType(byte InAIActionType);// 0x32b1810
	void AddItemForAIWithFullCheck(AIEquipSpawnItem[] DataSet, AIEquipSpawnItem[] AIMustPickUpItemList);// 0x32b15f0
	void AddItemForAI(int ItemId, int Count, bool bDropOnDead, bool bRollOnDead);// 0x32b14a4

--------------------------------
Class: BasicAIController.AIController.Controller.Actor.Object
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x4d8, Size: 8]
	BlackboardComponent* BlackboardComp;//[Offset: 0x4e0, Size: 8]
	SpawnerBase* TeamZoneSpawner;//[Offset: 0x4e8, Size: 8]
	SpawnerBase* CurSpawner;//[Offset: 0x4f0, Size: 8]
	bool bAsyncLoadBehaviorTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	enum AIAttackType;//[Offset: 0x4f9, Size: 1]
	BehaviorTree*[] BehaviorTreePath;//[Offset: 0x500, Size: 16]
	float ActorLocationTetherDistance;//[Offset: 0x510, Size: 4]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x518, Size: 8]
	FString AIFeatureInfoTableName;//[Offset: 0x520, Size: 16]
	FString AIWeaponRangeTableName;//[Offset: 0x530, Size: 16]
	int HitRateConfigNum;//[Offset: 0x540, Size: 4]
	int AIFeatureID;//[Offset: 0x544, Size: 4]
	AITargetInViewOffset AITargetInViewOffset;//[Offset: 0x548, Size: 56]
	delegate OnBehaviorTreeLoaded;//[Offset: 0x5e0, Size: 16]
	AIShootingPoseOffsetInfo shootingPoseOffsetInfo;//[Offset: 0x5f0, Size: 112]
	bool InterpControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 1]
	enum AICharacterRotateInterpType;//[Offset: 0x661, Size: 1]
	float RotationSpeedOfInterpControlRotation;//[Offset: 0x664, Size: 4]
	bool UseAIFeatureInfo();// 0x32bd628
	void OnAIEnterDarkArea(bool bInEnter, Actor* DarkArea, bool bAtLeastInOne);// 0x32bd514
	void InitAIFeatureInfo(int InID);// 0x32bd490
	bool InitAI(int InFeatureID);// 0x32bd3f8
	Pawn*[] GetTeammates();// 0x32bd354
	int GetTeammateCount();// 0x32bd320
	int GetCurrentOrder();// 0x32bd2ec
	Pawn* GetCurEnemy();// 0x32bd2b0
	BlackboardComponent* GetBlackboardComponent();// 0x32bd294
	enum GetAIAttackType();// 0x32bd278

--------------------------------
Class: AIControllerCachedData
	STExtraBaseCharacter* ControlledPawn;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AIShootMissInfo
	float MissMaxRangeTime;//[Offset: 0x0, Size: 4]
	float MissMinRangeTime;//[Offset: 0x4, Size: 4]
	float MissCDTime;//[Offset: 0x8, Size: 4]
	float MissResetTime;//[Offset: 0xc, Size: 4]
	float MissResetConfig;//[Offset: 0x10, Size: 4]
	bool bCanMissShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	bool bPathDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool bUpdatePathOnMovePlatform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	float maxCheckDis;//[Offset: 0x318, Size: 4]
	float maxCheckDisTime;//[Offset: 0x31c, Size: 4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	float PlayerHalfHeight;//[Offset: 0x328, Size: 4]
	float PlayerNewHalfHeight;//[Offset: 0x32c, Size: 4]
	float MaxTransferDis;//[Offset: 0x330, Size: 4]

--------------------------------
Class: SpawnerBase.Actor.Object
	UnitTransformGenerator* TransformGenerator;//[Offset: 0x428, Size: 8]
	UnitSpeciesGenerator* SpeciesGenerator;//[Offset: 0x430, Size: 8]
	FString LuaFilePath;//[Offset: 0x438, Size: 16]
	Pawn*[] AliveBots;//[Offset: 0x448, Size: 16]
	SpawnerInfo SpawnerInfo;//[Offset: 0x458, Size: 64]
	void Stop();// 0x3502240
	Actor* SpawnUnit();// 0x3502204
	void Run();// 0x35021e8
	void RemoveAliveBot(Pawn* BotPawn);// 0x350216c
	GameLevelManagerComponent* GetGameLevelManager();// 0x3502138
	Pawn*[] GetAliveBots();// 0x3502094
	void AddAliveBot(Pawn* BotPawn);// 0x3502018

--------------------------------
Class: UnitTransformGenerator.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 16]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	SpawnerBase* GetSpawner();// 0x36eee18
	Transform Generate();// 0x36eedbc

--------------------------------
Class: UnitSpeciesGenerator.Object
	FString LuaFilePath;//[Offset: 0x88, Size: 16]
	bool bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	FString SpeciesConfigLuaPath;//[Offset: 0xa0, Size: 16]
	void PostConfig(Actor* Actor);// 0x36ee938
	SpawnerBase* GetSpawner();// 0x36ee904

--------------------------------
Class: SpawnerInfo
	Guid SpawnerID;//[Offset: 0x0, Size: 16]
	int ConfigId;//[Offset: 0x10, Size: 4]
	FString State;//[Offset: 0x18, Size: 16]
	bool bAutoSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	int TeamID;//[Offset: 0x2c, Size: 4]
	FString OwnerZone;//[Offset: 0x30, Size: 16]

--------------------------------
Class: GameLevelManagerComponent.ActorComponent.Object
	delegate OnAppendEliteGroup;//[Offset: 0x110, Size: 16]
	delegate OnRemoveEliteGroup;//[Offset: 0x120, Size: 16]
	int EliteWarningItemIconID;//[Offset: 0x130, Size: 4]
	<int,int> EliteWarningItemInstanceIDMap;//[Offset: 0x138, Size: 80]
	GameLevelDesc[] CurActiveGameLevelList;//[Offset: 0x188, Size: 16]
	LevelData[] CurActiveGameLevelDataList;//[Offset: 0x198, Size: 16]
	int TotalAliveMonsterNum;//[Offset: 0x1a8, Size: 4]
	int BornLevelMonsterNum;//[Offset: 0x1ac, Size: 4]
	int BornShitMonsterNum;//[Offset: 0x1b0, Size: 4]
	<FString,SingleLevelObjArray> LevelObjs;//[Offset: 0x1b8, Size: 80]
	AliveMonsterNum[] AliveMonsterNumList;//[Offset: 0x208, Size: 16]
	GameLevelDesc CurCompletedGameLevel;//[Offset: 0x218, Size: 24]
	float LevelBeginTime;//[Offset: 0x230, Size: 4]
	float LevelEndTime;//[Offset: 0x234, Size: 4]
	int GM_Diffcult;//[Offset: 0x238, Size: 4]
	bool GM_UnLoadLevelData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	bool GM_UnLoadDynamicLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	float NavTickInterval;//[Offset: 0x240, Size: 4]
	LevelData[] LevelDataList;//[Offset: 0x248, Size: 16]
	LevelRelifePointInfo[] LevelRelifePointList;//[Offset: 0x260, Size: 16]
	FString MonsterTableName;//[Offset: 0x270, Size: 16]
	FString MonsterBPTableName;//[Offset: 0x280, Size: 16]
	FString MonsterSpecialStateTableName;//[Offset: 0x290, Size: 16]
	FString DecoratorTableName;//[Offset: 0x2a0, Size: 16]
	FString MonsterDropTableName;//[Offset: 0x2b0, Size: 16]
	int RelifePosOffsetZ;//[Offset: 0x2c0, Size: 4]
	Actor* SpawnPickup(int ID, out const Transform Transform, const int ContentNum);// 0x339817c
	Actor* SpawnMonster(int ID, out const Transform Transform, out const MonsterParams Params);// 0x3397fc8
	void RemoveRelifePoint(out GameLevelDesc LevelDesc);// 0x3397f04
	void RegisterGameEvent();// 0x3397ef0
	void OnRep_CurGameLevelChanged();// 0x3397edc
	void OnMonsterWaveEnd(out GameLevelDesc LevelDesc, int WaveID);// 0x3397dd0
	void OnGameStart();// 0x3397dbc
	void OnGameEnd();// 0x3397da8
	void OnBotDied(Actor* Actor, Actor* Killer);// 0x3397cf4
	void OnBotBorn(Actor* Actor);// 0x3397c78
	void OnActorUniqueIdRemove(uint32 SId);// 0x3397bfc
	void OnActorUniqueIdAdd(Actor* Actor, uint32 SId);// 0x3397b44
	void OnActorSpawn(Actor* Actor);// 0x3397ac8
	void OnActorDespawn(Actor* Actor);// 0x3397a4c
	bool KillUnitBySingleId(int SingleId, bool ForbidenReborn);// 0x3397978
	bool KillUnitBySelf(Actor* TActor);// 0x33978e8
	bool KillUnit(byte BotCat, int BotType, bool ForbidenReborn);// 0x33977d8
	bool KillCategoryUnit(byte BotCat, bool ForbidenReborn);// 0x3397704
	void InitUnit(Actor* TActor, byte Category);// 0x339764c
	void InitRelifePoint(out GameLevelDesc LevelDesc, RelifePoint[] PVERelifePoints);// 0x339746c
	void InitLuaLevelActors();// 0x3397458
	void InitLevelAddObjs(out LevelData LevelData);// 0x339737c
	void Init();// 0x3397368
	void HandleGameLevelEnd(out GameLevelDesc LevelDesc);// 0x33972a4
	void HandleEnterLevel(out GameLevelDesc InLevelDesc, Actor* OffsetActor);// 0x3397198
	Actor* GetUnit(byte Category, int TypeId);// 0x33970d0
	bool GetRelifeTrans(out const Vector NearVector, out Transform RelifeTrans);// 0x3396fcc
	LevelData[] GetNearPosLevelList(int GetNum, int RandomNum, int ChapterType, Vector NearPos);// 0x3396dbc
	bool GetNearPosLevel(Vector NearPos, int ChapterType, LevelData[] AvoidLevelList, out LevelData OutLevelData);// 0x3396a9c
	LevelData GetLoadedLevelData(out GameLevelDesc LevelDesc);// 0x33969a8
	int GetAliveMonsterNum(byte SourceType);// 0x339691c
	LevelData GetActiveLevelDataByLevelDesc(out GameLevelDesc LevelDesc);// 0x3396828
	void EndLevelAddObjs(out LevelData LevelData);// 0x339674c
	void ChangeAliveMonsterNumList(byte SourceType, int Addition);// 0x3396694
	void BroadRemoveEliteGroup(int LevelId, Vector pos);// 0x33965d4
	void BroadAppendEliteGroup(int LevelId, Vector pos);// 0x3396514
	void AdjustPosByOffsetActor(out LevelData LevelData, Transform OffsetTrans);// 0x33963c8
	void ActiveRelifePoint(out GameLevelDesc LevelDesc, int ID, bool ActivePoint);// 0x3396278

--------------------------------
Class: GameLevelDesc
	int ChapterID;//[Offset: 0x0, Size: 4]
	int LevelId;//[Offset: 0x4, Size: 4]
	FString Desc;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LevelData
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 24]
	FString[] TargetClassPaths;//[Offset: 0x18, Size: 16]
	FString LeveDirectorFilePath;//[Offset: 0x28, Size: 16]
	byte EndCondType;//[Offset: 0x38, Size: 1]
	FString EndCondPar;//[Offset: 0x40, Size: 16]
	bool IsLastLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int DiffcultPerc;//[Offset: 0x54, Size: 4]
	Vector[] TaskPointLocations;//[Offset: 0x58, Size: 16]
	RelifePoint[] PVERelifePointsInfo;//[Offset: 0x68, Size: 16]
	PVECircle[] PVECircleInfo;//[Offset: 0x78, Size: 16]
	MonsterWave[] MonsterWaveCfg;//[Offset: 0x88, Size: 16]
	Vector pos;//[Offset: 0x98, Size: 12]
	LevelObjets[] LevelAddObjs;//[Offset: 0xa8, Size: 16]

--------------------------------
Class: RelifePoint
	int ID;//[Offset: 0x0, Size: 4]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]

--------------------------------
Class: PVECircle
	int CircleID;//[Offset: 0x0, Size: 4]
	Vector2D targetPos;//[Offset: 0x4, Size: 8]
	float Radius;//[Offset: 0xc, Size: 4]
	float MoveTime;//[Offset: 0x10, Size: 4]
	float Pain;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MonsterWave
	float WaveDelayTime;//[Offset: 0x0, Size: 4]
	MonsterGroup[] MonsterGroupList;//[Offset: 0x8, Size: 16]
	FString Desc;//[Offset: 0x18, Size: 16]
	byte EndCondType;//[Offset: 0x28, Size: 1]
	int EndCondPar;//[Offset: 0x2c, Size: 4]
	int ID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: MonsterGroup
	FString Desc;//[Offset: 0x0, Size: 16]
	byte ChooseGroupSpotType;//[Offset: 0x10, Size: 1]
	int NearPlayTeamIdx;//[Offset: 0x14, Size: 4]
	ZMonsterSpotGroup*[] SpotGroupChooseList;//[Offset: 0x18, Size: 16]
	MonsterSpotGroup[] MonsterSpotGroupChooseList;//[Offset: 0x28, Size: 16]
	MonsterGeneratePlan[] PlanList;//[Offset: 0x38, Size: 16]
	int ID;//[Offset: 0x48, Size: 4]

--------------------------------
Class: ZMonsterSpotGroup.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x2d0, Size: 16]
	ZMonsterSpot*[] SpotList;//[Offset: 0x2e0, Size: 16]

--------------------------------
Class: ZMonsterSpot.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	FString Desc;//[Offset: 0x2d0, Size: 16]
	byte MonsterSpotType;//[Offset: 0x2e0, Size: 1]
	ZMonsterRoadPoint*[] RoadPointList;//[Offset: 0x2e8, Size: 16]
	byte SpotRadius;//[Offset: 0x2f8, Size: 1]

--------------------------------
Class: ZSpotSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ZMonsterRoadPoint.ZSpotSceneComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x2cc, Size: 4]
	int Radius;//[Offset: 0x2d0, Size: 4]

--------------------------------
Class: MonsterSpotGroup
	FString Desc;//[Offset: 0x0, Size: 16]
	Vector pos;//[Offset: 0x10, Size: 12]
	MonsterSpot[] SpotList;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MonsterSpot
	FString Desc;//[Offset: 0x0, Size: 16]
	byte MonsterSpotType;//[Offset: 0x10, Size: 1]
	Vector pos;//[Offset: 0x14, Size: 12]
	RoadPointInfo[] RoadPointList;//[Offset: 0x20, Size: 16]
	byte SpotRadius;//[Offset: 0x30, Size: 1]

--------------------------------
Class: MonsterGeneratePlan
	FString Desc;//[Offset: 0x0, Size: 16]
	int PlanWeight;//[Offset: 0x10, Size: 4]
	MonsterGenerateCfg[] PlanDetail;//[Offset: 0x18, Size: 16]
	int ID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: MonsterGenerateCfg
	int MonsterID;//[Offset: 0x0, Size: 4]
	FString Desc;//[Offset: 0x8, Size: 16]
	byte SpotType;//[Offset: 0x18, Size: 1]
	int MonsterNum;//[Offset: 0x1c, Size: 4]
	float RandomGenerateDelayTime;//[Offset: 0x20, Size: 4]
	int ReBornTimes;//[Offset: 0x24, Size: 4]
	int ReBornDelay;//[Offset: 0x28, Size: 4]
	float GenerateDelayTime;//[Offset: 0x2c, Size: 4]
	int ID;//[Offset: 0x30, Size: 4]

--------------------------------
Class: LevelObjets
	class Object* Objects;//[Offset: 0x0, Size: 8]
	Transform Trans;//[Offset: 0x10, Size: 48]

--------------------------------
Class: SingleLevelObjArray
	Actor*[] LevelObjs;//[Offset: 0x0, Size: 16]

--------------------------------
Class: AliveMonsterNum
	int Num;//[Offset: 0x0, Size: 4]
	byte SourceType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LevelRelifePointInfo
	GameLevelDesc LevelDesc;//[Offset: 0x0, Size: 24]
	RelifePointInfo[] RelifePointList;//[Offset: 0x18, Size: 16]

--------------------------------
Class: RelifePointInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform RelifeTrans;//[Offset: 0x10, Size: 48]
	bool IsActivePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: MonsterParams

--------------------------------
Class: OnlyActorCompManagerComponent.ActorComponent.Object
	<FString,OnlyActorComponent*> CacheComponents;//[Offset: 0x110, Size: 80]
	OnlyActorComponent*[] CacheUpdateComponents;//[Offset: 0x160, Size: 16]

--------------------------------
Class: OnlyActorComponent.ActorComponent.Object
	byte bCanEverUpdate;//[Offset: 0x110, Size: 1]

--------------------------------
Class: AITargetInViewOffset
	Vector[] Offset;//[Offset: 0x0, Size: 16]
	Vector[] CrouchOffset;//[Offset: 0x10, Size: 16]
	Vector TargetLoc;//[Offset: 0x20, Size: 12]
	int CurrentOffsetIndex;//[Offset: 0x2c, Size: 4]
	bool bTargetInViewDueToOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	enum TargetPawnState;//[Offset: 0x31, Size: 1]

--------------------------------
Class: AIShootingPoseOffsetInfo
	AIShootingPoseOffsetDetailInfo[] ShootingPoseShootPointOffsetArray;//[Offset: 0x0, Size: 16]
	float CrouchToStandHeightOffset;//[Offset: 0x10, Size: 4]
	float ProneToStandHeightOffset;//[Offset: 0x14, Size: 4]
	<enum,Vector> ShootingPoseShootPointOffsetMap;//[Offset: 0x20, Size: 80]

--------------------------------
Class: AIShootingPoseOffsetDetailInfo
	enum shootingPose;//[Offset: 0x0, Size: 1]
	Vector offsetInfo;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AIConditionHearingComponent.ActorComponent.Object
	SoundShieldForAI* CurrentSoundShield;//[Offset: 0x110, Size: 8]
	bool CanHearingInBox(Actor* TargetActor, Actor* SourceActor);// 0x3231b54

--------------------------------
Class: SoundShieldForAI.Actor.Object
	Actor*[] PlayerPawns;//[Offset: 0x3c8, Size: 16]
	Actor*[] AIPawns;//[Offset: 0x3d8, Size: 16]
	int MaxCacheNum;//[Offset: 0x3e8, Size: 4]
	void OnPlayerPawnsOverlap(Actor* InActor, bool bEnter);// 0x3501af0
	void OnAIPawnsOverlap(Actor* InActor, bool bEnter);// 0x3501a30
	bool InSameSoundShield(Actor* InAIPawn, Actor* InPlayerPawn);// 0x3501960

--------------------------------
Class: AIParachuteJumpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	Vector FocusTargetPos;//[Offset: 0x120, Size: 12]
	float JumpTime;//[Offset: 0x12c, Size: 4]
	bool bUseSpecificInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	bool bOpenParachuteNotClearFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
	float TargetDistanceThresholdForInput;//[Offset: 0x134, Size: 4]
	float MoveForwardInputValue;//[Offset: 0x138, Size: 4]
	float MoveRightInputValue;//[Offset: 0x13c, Size: 4]

--------------------------------
Class: AIAbilityComponent.OnlyActorComponent.ActorComponent.Object

--------------------------------
Class: AIHoleUpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	float OccludeBuildingActorByRemoveTime;//[Offset: 0x160, Size: 4]
	float OccludeBuildingActorInvalidDis;//[Offset: 0x164, Size: 4]
	float InvalidOccludeBuildingPosAgainCheckCD;//[Offset: 0x168, Size: 4]
	float OccludePosInvalidDis;//[Offset: 0x16c, Size: 4]

--------------------------------
Class: AIBuildingComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	<int,int> CanBuildActorNums;//[Offset: 0x140, Size: 80]
	float TotalCD;//[Offset: 0x190, Size: 4]
	float SoloCD;//[Offset: 0x194, Size: 4]

--------------------------------
Class: AIFeatureInfo
	float HP;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]
	float TakeDamageScale;//[Offset: 0x8, Size: 4]
	int DropID;//[Offset: 0xc, Size: 4]
	float[] HitRates;//[Offset: 0x10, Size: 16]
	<int,float> ThrownUsingProbability;//[Offset: 0x20, Size: 80]
	<float,float> EnemyHpHitRateMap;//[Offset: 0x70, Size: 80]
	<float,float> EnemyHpDamageRateMap;//[Offset: 0xc0, Size: 80]
	bool bNeedNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bHasDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	Vector2D MissOnPurposeTimeRange;//[Offset: 0x114, Size: 8]
	Vector2D OutViewMissOnPurposeTimeRange;//[Offset: 0x11c, Size: 8]
	float MissOnPurposeCD;//[Offset: 0x124, Size: 4]
	float MissOnPurposeResetTime;//[Offset: 0x128, Size: 4]
	float MissOnPurposeHitRate;//[Offset: 0x12c, Size: 4]
	float NearDeathTargetStopFireTime;//[Offset: 0x130, Size: 4]
	float NearDeathTargetFixedHitRate;//[Offset: 0x134, Size: 4]
	bool bDoMissOnPurposeWhenNearDeathToNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	float NearDeathTargetFixedDamageRate;//[Offset: 0x13c, Size: 4]

--------------------------------
Class: AIActingItem
	float StartSeconds;//[Offset: 0x0, Size: 4]
	float EndSeconds;//[Offset: 0x4, Size: 4]
	float DeadPercent;//[Offset: 0x8, Size: 4]
	int PlayerNumScale;//[Offset: 0xc, Size: 4]
	bool IsFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int[] WeaponIdList;//[Offset: 0x18, Size: 16]
	int FinalRestBotNum;//[Offset: 0x28, Size: 4]

--------------------------------
Class: AIBeginAttackEachOther
	float BeginAttackEachOtherTime;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DeliveryRatingConfig
	float DeliveryInterval;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIDeliveryAreaLimit
	Vector TopLeftVec;//[Offset: 0x0, Size: 12]
	Vector BottomRightVec;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DeliveryCondition
	DeliveryConditionCheck* CheckCnd;//[Offset: 0x0, Size: 8]

--------------------------------
Class: DeliveryConditionCheck.Object
	STExtraBaseCharacter* TargetPawn;//[Offset: 0x28, Size: 8]
	bool CheckDeliveryForBP(STExtraBaseCharacter* InTargerPawn);// 0x3340bfc
	bool CheckDelivery(STExtraBaseCharacter* InTargetPawn);// 0x3340b64

--------------------------------
Class: SpecialAIDeliveryNumContainer
	int TeammateNum;//[Offset: 0x0, Size: 4]
	SpecialAIDeliveryNum[] DeliverNumCfg;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SpecialAIDeliveryNum
	int DeliveryNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: HotValueAttenuation
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]

--------------------------------
Class: HotValueScale
	float Corner;//[Offset: 0x0, Size: 4]
	float Center;//[Offset: 0x4, Size: 4]
	float UpDown;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float SpecialRatingDamageScale;//[Offset: 0x4, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x8, Size: 4]
	float SpecialFiringAccuracyRadius;//[Offset: 0xc, Size: 4]
	int AIFeedLimit;//[Offset: 0x10, Size: 4]
	float SectionRightValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AIAttackAIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DeliveryPlayerConfig
	DeliveryItem[] DeliveryItem;//[Offset: 0x0, Size: 16]
	float RightRatingSection;//[Offset: 0x10, Size: 4]

--------------------------------
Class: DeliveryItem
	int percent;//[Offset: 0x0, Size: 4]
	int DeliveryNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIAttackAnimalRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AIActingBPAssit.Object
	bool IsSmokeGrenadeActive(Actor* pSmokeGrenade);// 0x4033584
	bool IsGrenadeHasBeenThrowedOut(Actor* pGrenade);// 0x4033584
	float GetRealTimeSeconds();// 0x322ea0c

--------------------------------
Class: AnimalAIController.BasicAIController.AIController.Controller.Actor.Object
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0x6d0, Size: 8]
	float TurnVelocity;//[Offset: 0x6d8, Size: 4]
	float SetAirDropTargetInterval;//[Offset: 0x6dc, Size: 4]
	float IgnoreMoveCollisionTimeWhenBlocked;//[Offset: 0x6e0, Size: 4]
	float IgnoreMoveCollisionSetInterval;//[Offset: 0x6e4, Size: 4]
	float DragOnGroundCheckInterval;//[Offset: 0x6e8, Size: 4]
	float DragOnGroundMaxOverGroundHeight;//[Offset: 0x6ec, Size: 4]
	float DragOnGroundMaxRayLen;//[Offset: 0x6f0, Size: 4]
	float DragOnGroundMaxFloorThickness;//[Offset: 0x6f4, Size: 4]
	float DragOnGroundMaxSubsidenceDepth;//[Offset: 0x6f8, Size: 4]
	float DragOnGroundNavRandomRadius;//[Offset: 0x6fc, Size: 4]
	bool EnableUpdateRotatition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	Box[] FindMovePointLimitArea;//[Offset: 0x748, Size: 16]
	TickControlComponent* TickControlComp;//[Offset: 0x758, Size: 8]
	void SetMoveTargetLoc(out const Vector TargetLoc);// 0x3250f48
	void SetCaughtOwner(Actor* CaughtOwner);// 0x3250ec4
	void RunBehaviorTreeWithIndex(int TreeIndex);// 0x3250e40
	void OnAirDropLandGroup(Actor* AirDropBoxActor, bool bIsInWater);// 0x3250d80

--------------------------------
Class: ItemsBoxConfigDataAsset.DataAsset.Object
	DataTable* DataBase;//[Offset: 0x30, Size: 8]
	FString TablePath;//[Offset: 0x38, Size: 16]
	ItemsBoxConfigDataAssetConfigGroup[] AirDropBoxGroupConfigs;//[Offset: 0x48, Size: 16]
	ItemsBoxConfigDataAssetConfigGroup[] SuperAirDropBoxGroupConfigs;//[Offset: 0x58, Size: 16]
	ItemsBoxConfigDataAssetConfigGroup[] TreasureBoxGroupConfigs;//[Offset: 0x68, Size: 16]
	ItemsBoxConfigDataAssetConfigGroup[] UAVAirDropBoxGroupConfigs;//[Offset: 0x78, Size: 16]
	AirDropBoxGenerateWrapperItemData[] GetUAVAirDropBoxGenerateDataList(int GroupIndex);// 0x33f1b0c
	AirDropBoxGenerateWrapperItemData[] GetTreasureBoxGenerateDataList(FString GroupName);// 0x33f1970
	AirDropBoxGenerateWrapperItemData[] GetTargetItemsDataFromTableByCategoryFilter(FString CategoryFilter);// 0x33f17d4
	AirDropBoxGenerateWrapperItemData[] GetSuperAirDropBoxGenerateDataList();// 0x33f1730
	AirDropBoxGenerateWrapperItemData[] GetAirDropBoxGenerateDataList();// 0x33f168c

--------------------------------
Class: ItemsBoxConfigDataAssetConfigGroup
	FString GroupName;//[Offset: 0x0, Size: 16]
	ItemsBoxConfigDataAssetConfigItem[] ConfigItems;//[Offset: 0x10, Size: 16]

--------------------------------
Class: ItemsBoxConfigDataAssetConfigItem
	float ProbabilityPercent;//[Offset: 0x0, Size: 4]
	FString CategoryFilter;//[Offset: 0x8, Size: 16]

--------------------------------
Class: GameModeParam
	float Radius0;//[Offset: 0x0, Size: 4]
	float Radius1;//[Offset: 0x4, Size: 4]
	float Radius3;//[Offset: 0x8, Size: 4]
	bool bUsingPolygon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float Radius2;//[Offset: 0x10, Size: 4]
	Vector2D[] PolygonPoints;//[Offset: 0x18, Size: 16]
	float BlueCircleRadius;//[Offset: 0x28, Size: 4]
	Vector MapCenter;//[Offset: 0x2c, Size: 12]
	float PlaneSpeed;//[Offset: 0x38, Size: 4]
	float PlaneHeight;//[Offset: 0x3c, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x40, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x44, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x48, Size: 4]
	bool bCrossCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float CrossCenterRadius;//[Offset: 0x50, Size: 4]
	float FixedJumpPointRate;//[Offset: 0x54, Size: 4]

--------------------------------
Class: GameModeDataAsset.DataAsset.Object
	float[] Probabilities;//[Offset: 0x30, Size: 16]
	GameModeParam[] GameModeParams;//[Offset: 0x40, Size: 16]

--------------------------------
Class: MonsterProbeComponent.GameModeProbeComponent.ActorComponent.Object
	int TimeToSpawnPawn;//[Offset: 0x110, Size: 4]
	SpawnGroupItemInfo[] SpawnGroupInfoList;//[Offset: 0x118, Size: 16]
	<int,SpawnTableData> PawnTableData;//[Offset: 0x128, Size: 80]
	void InitialItemTable();// 0x341f920

--------------------------------
Class: GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: SpawnGroupItemInfo
	int PawnGroupID;//[Offset: 0x0, Size: 4]
	int PawnID;//[Offset: 0x4, Size: 4]
	int PawnPercent;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpawnTableData
	int PawnID;//[Offset: 0x0, Size: 4]
	FString PathName;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AIWorldSoundManagerComponent.ActorComponent.Object
	<enum,SoundConfig> SoundConfig;//[Offset: 0x110, Size: 80]
	enum[] HearSoundCharacterTypes;//[Offset: 0x160, Size: 16]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x170, Size: 8]
	void ProduceSoundInPos(enum soundType, out const Vector pos, Actor* SourceActor);// 0x324faa4
	void OnProjectileExplode(Actor* Projectile);// 0x324fa28

--------------------------------
Class: SoundConfig
	float TransDist;//[Offset: 0x0, Size: 4]
	bool bSetBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName[] BlackboardNameList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SeasonStatueBase.Actor.Object
	void SetStatueBaseInfo(out const StatueBaseParam Param, out const SeasonStatueData[] StatueInfo);// 0x34ca640

--------------------------------
Class: StatueBaseParam
	FString MatPath;//[Offset: 0x0, Size: 16]
	FString TeamFlag;//[Offset: 0x10, Size: 16]
	FString TeamName;//[Offset: 0x20, Size: 16]

--------------------------------
Class: GameModeState.Object
	float StateTime;//[Offset: 0x38, Size: 4]
	BattleRoyaleGameMode* OwningGameMode;//[Offset: 0x40, Size: 8]
	GameStateBase* OwningGameState;//[Offset: 0x48, Size: 8]
	void SetLeftTime(int InLeftTime);// 0x33ab1e8
	void GotoNextState();// 0x33ab1cc
	int64 GetLeftTime();// 0x33ab198

--------------------------------
Class: EventReportComponent.ActorComponent.Object
	<byte,bool> EnabledCollectedEventDataEventIds;//[Offset: 0x110, Size: 80]
	UAEGameMode* GameMode;//[Offset: 0x160, Size: 8]
	<int,CollectedEvent_TabRes> CollectedEventTableMap;//[Offset: 0x168, Size: 80]

--------------------------------
Class: CollectedEvent_TabRes
	int EventId;//[Offset: 0x0, Size: 4]
	bool bWeSeeNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: AIProbeComponent.GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: WorldLevelProbeComponent.GameModeProbeComponent.ActorComponent.Object
	class Actor[] IgnoreClassesNeverRemove;//[Offset: 0x110, Size: 16]
	bool IsIgnoreLastCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	void OutSetWorldAlwaysVisible(int SetLoadType);// 0x375fa10
	void OutSetLevelVisibleInfo(Vector[] Center, float[] VisibleRadius);// 0x375f7fc

--------------------------------
Class: AIGroupManagerComponent.ActorComponent.Object
	AnimalGroupRespawnConfig[] AnimalGroupRespawnConfig;//[Offset: 0x110, Size: 16]
	AIActingComponent* AIActingComp;//[Offset: 0x1c0, Size: 8]

--------------------------------
Class: AnimalGroupRespawnConfig
	enum AnimalType;//[Offset: 0x0, Size: 1]
	AnimalGroupRespawnNumProbability[] AnimalGroupRespawnNumProbability;//[Offset: 0x8, Size: 16]
	float NoBlueCircleRadius;//[Offset: 0x18, Size: 4]
	float CheckPlayerRadius;//[Offset: 0x1c, Size: 4]
	float EndRespawnTime;//[Offset: 0x20, Size: 4]
	int TryFindSpawnLocNum;//[Offset: 0x24, Size: 4]
	FString[] ValidTraceActorIncludeName;//[Offset: 0x28, Size: 16]
	Vector AnimalGenerateOffset;//[Offset: 0x38, Size: 12]
	class STAnimalCharacter* AnimalCharacterClass;//[Offset: 0x48, Size: 40]

--------------------------------
Class: AnimalGroupRespawnNumProbability
	uint32 AnimalNum;//[Offset: 0x0, Size: 4]
	int Weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STAnimalCharacter.STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	AnimalStateMutual[] AnimalStateMutuals;//[Offset: 0x1168, Size: 16]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0x1180, Size: 8]
	InterpMovementComponent* InterpMovement;//[Offset: 0x1188, Size: 8]
	WidgetComponent* AnimalInfoWidget;//[Offset: 0x1190, Size: 8]
	Vector RelativeLocation;//[Offset: 0x1198, Size: 12]
	class UserWidget* WidgetClass;//[Offset: 0x11a8, Size: 8]
	bool bUseMediumRegionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b0, Size: 1]
	AnimalAnimListComponent* _AnimListComponent;//[Offset: 0x11b8, Size: 8]
	STAnimalAnimInstance* _AnimInstance;//[Offset: 0x11c0, Size: 8]
	ProduceDropItemComponent* ProduceDropItemComponent;//[Offset: 0x11c8, Size: 8]
	int AnimalGroupID;//[Offset: 0x11d0, Size: 4]
	enum AnimalType;//[Offset: 0x11e2, Size: 1]
	<enum,float> AnimalStateSpeeds;//[Offset: 0x11e8, Size: 80]
	float HearRadius;//[Offset: 0x1238, Size: 4]
	SkeletalMesh*[] RandomMeshs;//[Offset: 0x1240, Size: 16]
	MaterialInterface*[] RandomMaterials;//[Offset: 0x1250, Size: 16]
	delegate CustomObjectEvent;//[Offset: 0x1260, Size: 16]
	ParticleSystem* FootPrintRes;//[Offset: 0x1270, Size: 8]
	ParticleSystemComponent* FootPrintParticleSys;//[Offset: 0x1278, Size: 8]
	FName AttachedSocket;//[Offset: 0x1280, Size: 8]
	float MovementTickInterval;//[Offset: 0x1288, Size: 4]
	void ShowFootPrintEffect(bool IsEnabled);// 0x350cd38
	void SetExtendData(FString Key, int Value);// 0x350cbc0
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x350caf4
	WeatherDetailStatus GetCurrentWeatherStatus();// 0x350cabc
	void DisappearOnDeath();// 0x350caa0
	void ClearOnDeath(Controller* EventInstigater, int DamageType);// 0x350c9e0
	void BeforeDestroyed();// 0x350c9c4

--------------------------------
Class: STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x1078, Size: 4]
	float MinTimeLockTarget;//[Offset: 0x107c, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x1080, Size: 4]
	float SensedRadius;//[Offset: 0x1084, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0x1088, Size: 4]
	float HeardRadius;//[Offset: 0x108c, Size: 4]
	float DelayHideDuration;//[Offset: 0x1090, Size: 4]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1094, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1095, Size: 1]
	Vector HurtDir;//[Offset: 0x1098, Size: 12]
	float HurtDistance;//[Offset: 0x10a4, Size: 4]
	float HurtResetDefaultTime;//[Offset: 0x10a8, Size: 4]
	StateMutual[] StateMutuals;//[Offset: 0x10b8, Size: 16]
	delegate StateEnterEvent;//[Offset: 0x10c8, Size: 16]
	delegate StateLeaveEvent;//[Offset: 0x10d8, Size: 16]
	delegate OnDeath;//[Offset: 0x1100, Size: 16]
	SimpleDamageRepData SimpleDamageRepData;//[Offset: 0x1110, Size: 40]
	int[] randomIndexes;//[Offset: 0x1138, Size: 16]
	SimpleAnimListBaseComponent* AnimListComponent;//[Offset: 0x1148, Size: 8]
	STExtraSimpleAnimInstanceBase* AnimInstance;//[Offset: 0x1150, Size: 8]
	byte NetRelevantType;//[Offset: 0x1158, Size: 1]
	void SetNetRelevantType(byte InType);// 0x3639688
	void OnRep_SimpleDamageData();// 0x3639674
	void DisappearOnDeath();// 0x3639658
	void CurrentStatesRemove(int State);// 0x36395d4
	void CurrentStatesAdd(int State);// 0x3639550
	void ClearOnDeath(Controller* EventInstigater, int DamageType);// 0x3639490
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x363924c
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3638fd4
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3638d90
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3638b4c
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x36388f4
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x36386b0
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x363846c
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x363821c
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x3637fa0
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4033584
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x4033584
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x3637e50

--------------------------------
Class: AnimalStateMutual
	enum state1;//[Offset: 0x0, Size: 1]
	enum state2;//[Offset: 0x1, Size: 1]

--------------------------------
Class: StateMutual
	int state1;//[Offset: 0x0, Size: 4]
	int state2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimpleDamageRepData
	float Damage;//[Offset: 0x0, Size: 4]
	float CurrentHeath;//[Offset: 0x4, Size: 4]
	bool IsFatalHealthCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	Pawn* DamageInstigatorPawn;//[Offset: 0x10, Size: 8]
	Pawn* DamageReceiver;//[Offset: 0x18, Size: 8]
	int NetCounter;//[Offset: 0x20, Size: 4]

--------------------------------
Class: InterpMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxMoveSpeed;//[Offset: 0x190, Size: 4]
	bool bUseDirectionAdjustVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x194, Size: 1]
	float ScalePower;//[Offset: 0x198, Size: 4]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 1]
	float AvoidanceWeight;//[Offset: 0x1a0, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1a4, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1a8, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1ac, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1b0, Size: 4]
	bool bHasRequestedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x1b8, Size: 12]
	Character* CharacterOwner;//[Offset: 0x1c8, Size: 8]
	int AvoidanceUID;//[Offset: 0x1e0, Size: 4]

--------------------------------
Class: SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimDataPair[] AnimDataPairs;//[Offset: 0x208, Size: 16]
	CurveFloat* hitPoseAndDistanceCurve;//[Offset: 0x218, Size: 8]
	<int,float> moveAnimSpeed;//[Offset: 0x220, Size: 80]
	float PlayMoveDeathMinimumDist;//[Offset: 0x270, Size: 4]
	delegate OnAnimLoadedFinished;//[Offset: 0x278, Size: 16]
	void SortAnimations();// 0x34defcc
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x34def48
	void OnAsyncLoadingFinished(AsyncLoadAnimParams loadAnimParams);// 0x34ded0c
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x34dec4c

--------------------------------
Class: AnimDataPair
	int PoseTypeID;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AsyncLoadAnimParams

--------------------------------
Class: STExtraSimpleAnimInstanceBase.AnimInstance.Object
	STExtraSimpleCharacterBase* OwnerCharacter;//[Offset: 0x3c8, Size: 8]
	FString OwnerClassPath;//[Offset: 0x3e0, Size: 16]
	bool EnableAdjustFloorNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	Rotator AdjustFloorRot;//[Offset: 0x404, Size: 12]
	float AdjustFloorDelta;//[Offset: 0x410, Size: 4]
	void ResetAnimState();// 0x362e3f0
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsHeadShotDamage);// 0x362e1d0
	void OnLeaveState(int State);// 0x362e14c
	void OnEnterState(int State);// 0x362e0c8
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x362de84
	void CacheAnimState(float DeltaSeconds);// 0x362de00
	void CacheAnimDataList(bool ForceRefreshVar);// 0x362dd74

--------------------------------
Class: AnimalAnimListComponent.SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimalAnimData[] AnimalAnimDatas;//[Offset: 0x2a0, Size: 16]
	AnimalMoveAnimSpeed[] AnimalMoveAnimSpeeds;//[Offset: 0x2b0, Size: 16]

--------------------------------
Class: AnimalAnimData
	enum PoseType;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: AnimalMoveAnimSpeed
	enum PoseType;//[Offset: 0x0, Size: 4]
	float Speed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STAnimalAnimInstance.STExtraSimpleAnimInstanceBase.AnimInstance.Object
	bool b_Hit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	bool b_Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x419, Size: 1]
	bool b_Trot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41a, Size: 1]
	bool b_Running;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41b, Size: 1]
	float f_MoveRate;//[Offset: 0x41c, Size: 4]
	Vector v_HitVector;//[Offset: 0x420, Size: 12]
	bool b_IsFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	AnimSequence* A_Idle;//[Offset: 0x430, Size: 8]
	AnimMontage* A_Idle_Arder;//[Offset: 0x438, Size: 8]
	AnimSequence* A_MoveAnim_Walk;//[Offset: 0x440, Size: 8]
	AnimSequence* A_MoveAnim_Trot;//[Offset: 0x448, Size: 8]
	AnimSequence* A_MoveAnim_Run;//[Offset: 0x450, Size: 8]
	BlendSpace* A_HitAnim;//[Offset: 0x458, Size: 8]
	AnimMontage* A_DeadAnim;//[Offset: 0x460, Size: 8]
	AnimMontage* A_FearAnim;//[Offset: 0x468, Size: 8]
	AnimMontage* A_CuteAnim;//[Offset: 0x470, Size: 8]
	void ResetAnimState();// 0x350c174
	void OnPawnDeadEvent(STExtraSimpleCharacterBase* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, bool IsPointDamage);// 0x350bf54
	void OnLeaveState(int State);// 0x350bed0
	void OnEnterState(int State);// 0x350be4c
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x350bc08
	void CacheAnimState(float DeltaSeconds);// 0x350bb84
	void CacheAnimDataList(bool ForceRefreshVar);// 0x350baf8

--------------------------------
Class: AnimalTeleportComponent.ActorComponent.Object
	bool bDeliverToInDoorPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	AnimalDeliverRatingConfig[] ChickDeliverConfig;//[Offset: 0x118, Size: 16]
	AnimalDeliverRatingConfig[] DeerDeliverConfig;//[Offset: 0x128, Size: 16]
	AnimalDeliverRatingConfig[] GoblinDeliverConfig;//[Offset: 0x138, Size: 16]
	AnimalDeliverRatingConfig[] IceDeliverConfig;//[Offset: 0x148, Size: 16]
	AnimalDeliverAreaLimit[] DeliveryAreaLimit;//[Offset: 0x158, Size: 16]
	AIActingComponent* AIActingComp;//[Offset: 0x168, Size: 8]
	AIGroupManagerComponent* AIGroupMgrComp;//[Offset: 0x170, Size: 8]
	AnimalDeliverConfiguration* GoblinDeliverConfiguration;//[Offset: 0x178, Size: 8]
	AnimalDeliverConfiguration* IceDeliverConfiguration;//[Offset: 0x180, Size: 8]
	<STExtraPlayerCharacter*> DeliveredGoblinPlayers;//[Offset: 0x188, Size: 80]
	<STExtraPlayerCharacter*> DeliveredIcePlayers;//[Offset: 0x1d8, Size: 80]
	<enum,int> DeleverCountPerWave;//[Offset: 0x370, Size: 80]

--------------------------------
Class: AnimalDeliverRatingConfig
	float RightRatingSection;//[Offset: 0x0, Size: 4]
	uint32 DeliverGroupNumPerWave;//[Offset: 0x4, Size: 4]
	float DeliverBeginTime;//[Offset: 0x8, Size: 4]
	float DeliveryWaveInterval;//[Offset: 0xc, Size: 4]
	float DeliverEndTime;//[Offset: 0x10, Size: 4]
	uint32 FullFeedLimit;//[Offset: 0x14, Size: 4]
	float DeliverFreqInterval;//[Offset: 0x18, Size: 4]
	int DeliverNumEachFreq;//[Offset: 0x1c, Size: 4]
	<int,int> DeliverCountByPlayerNum;//[Offset: 0x20, Size: 80]

--------------------------------
Class: AnimalDeliverAreaLimit
	Vector TopLeft;//[Offset: 0x0, Size: 12]
	Vector BottomRight;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AnimalDeliverConfiguration.Object
	AnimalDeliverStrategy*[] TeamDeliverStrategies;//[Offset: 0x28, Size: 16]
	AnimalDeliverStrategy*[] IndividualDeliverStrategies;//[Offset: 0x38, Size: 16]

--------------------------------
Class: AnimalDeliverStrategy.Object
	byte Priority;//[Offset: 0x28, Size: 1]
	enum SortStrategy;//[Offset: 0x80, Size: 1]
	enum SelectStrategy;//[Offset: 0x81, Size: 1]

--------------------------------
Class: PlaneComponent.ActorComponent.Object
	int ClassicFlightNo;//[Offset: 0x110, Size: 4]
	<int,PlaneData> PlaneDataMap;//[Offset: 0x118, Size: 80]
	class Pawn* PlaneClass;//[Offset: 0x168, Size: 8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool bEnableClassic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	bool bSyncRouteAfterFirst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 1]
	PlayerController*[] CachedTotalPlayer;//[Offset: 0x178, Size: 16]
	AIController*[] CachedTotalAI;//[Offset: 0x188, Size: 16]
	int FlightTimes;//[Offset: 0x198, Size: 4]
	int NotifyEndFlightDelayTime;//[Offset: 0x19c, Size: 4]
	int CustomFlightTimes;//[Offset: 0x1a8, Size: 4]
	void StartFlight(int FlightNo);// 0x346f388
	void SetPlaneClassPath(FString PlaneClassPath);// 0x346f2e0
	void SetFlight(int FlightNo, out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x346f0b0
	int SetCustomFlight(out Vector StartLoc, out Vector TargetLoc, out Vector2D CanJumpLoc, out Vector2D ForceJumpLoc, float PlaneSpeed, float PlaneHeight);// 0x346eeac
	void NotifyEndFlight();// 0x346ee98
	bool AddPlayerToFlight(PlayerController* PC, int FlightNo);// 0x346edcc

--------------------------------
Class: PlaneData
	int FlightNo;//[Offset: 0x0, Size: 4]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Actor* ThePlane;//[Offset: 0x8, Size: 8]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Vector PlaneVelocity;//[Offset: 0x14, Size: 12]
	Vector PlaneStartLoc;//[Offset: 0x20, Size: 12]
	Vector PlaneEndLoc;//[Offset: 0x2c, Size: 12]
	Vector2D CanJumpLoc;//[Offset: 0x38, Size: 8]
	Vector2D ForceJumpLoc;//[Offset: 0x40, Size: 8]
	float PlaneHeight;//[Offset: 0x48, Size: 4]
	int TotalPlayerNum;//[Offset: 0x4c, Size: 4]
	PlayerController*[] TotalPlayers;//[Offset: 0x50, Size: 16]
	PlayerController*[] CurPlayers;//[Offset: 0x60, Size: 16]
	int TotalAINum;//[Offset: 0x70, Size: 4]
	AIController*[] TotalAIs;//[Offset: 0x78, Size: 16]
	int CurAINum;//[Offset: 0x88, Size: 4]
	float FixedJumpPointRate;//[Offset: 0x8c, Size: 4]
	bool bCanFixedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]

--------------------------------
Class: PlayerRespawnComponent.ActorComponent.Object
	bool bUseWeaponScheme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	float DefaultPlayerRespawnTime;//[Offset: 0x114, Size: 4]
	float DefaultRespawnInvincibleTime;//[Offset: 0x118, Size: 4]
	enum RespawnPointType;//[Offset: 0x11c, Size: 1]
	bool RespawnKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d, Size: 1]
	int[] RespawnIgnoreKeepItemTypes;//[Offset: 0x120, Size: 16]
	int[] RespawnIgnoreKeepItemIds;//[Offset: 0x130, Size: 16]
	int[] RespawnNeedReplaceWeaponIds;//[Offset: 0x140, Size: 16]
	<uint32,ReplaceWeaponDataMap> RespawnReplaceWeaponMap;//[Offset: 0x150, Size: 80]
	<uint32,RespawnIgnoreItemType> PlayerRespawnIgnoreItemTypes;//[Offset: 0x1a0, Size: 80]
	RespawnKeepAllItemData CustomRespawnItemData;//[Offset: 0x1f0, Size: 32]
	int[] DefaultWeaponList;//[Offset: 0x210, Size: 16]
	float bRestoreDataDelay;//[Offset: 0x220, Size: 4]
	bool bRestoreDataDelayOnRespawnAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	bool bReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225, Size: 1]
	delegate OnGlobalRespawnedDelegate;//[Offset: 0x228, Size: 16]
	BattleRoyaleGameModeBase* OwnerGameMode;//[Offset: 0x378, Size: 8]
	void SetRespawnInvincibleTime(float DefaultRespawnInvincibleTimeIn);// 0x3481afc
	void RespawnAllPlayer();// 0x3481ae8
	void RemovePlayerRespawnTimer(uint32 PlayerKey, bool bAI);// 0x3481a28
	void PlayerDelayAddItem(uint32 PlayerKey, int ItemId);// 0x3481974
	void OnCharacterStartFire(STExtraWeapon* _, STExtraBaseCharacter* Character);// 0x34818c0
	bool IsContainPlayerTimer(uint32 PlayerKey);// 0x3481830
	void HandlePlayerDisuseItem(uint32 PlayerKey, ItemDefineID DefineID);// 0x3481764
	void HandleCacheWeapon(uint32 PlayerKey, STExtraWeapon* Weapon);// 0x34816ac
	int GetRespawnWeaponBulletNum(out const RespawnKeepAllItemData RespawnKeepAllItemData, int SlotType, int SpecificID);// 0x3481560
	bool GetPlayerRespawnKeepAllItemData(uint32 PlayerKey, bool bAI, out RespawnKeepAllItemData OutRespawnKeepAllItemData, bool bKeepBullet);// 0x34813b8
	float GetDefaultPlayerRespawnTime();// 0x3481384
	void GenerateRespawnKeepItems(uint32 PlayerKey, bool bAI, out const RespawnKeepAllItemData RespawnKeepAllItemData, bool bForceKeepItems);// 0x34811f0
	void DealWithDelayAddItem(uint32 PlayerKey, bool bAddAll, bool bClearAll);// 0x34810e4
	void ClearDelayAddItems(uint32 PlayerKey);// 0x3481068
	void ChangeWeaponSchemeIndex(int InIndex);// 0x3480fe4
	void AddPlayerRespawnIgnoreKeepItemType(uint32 PlayerKey, bool IsAdd, int itemType);// 0x3480ee0

--------------------------------
Class: ReplaceWeaponDataMap
	<byte,ReplaceWeaponData> ReplaceWeaponDataMap;//[Offset: 0x0, Size: 80]

--------------------------------
Class: ReplaceWeaponData
	int WeaponId;//[Offset: 0x0, Size: 4]
	BattleItemData WeaponItemData;//[Offset: 0x8, Size: 184]
	BattleItemData[] WeaponAssociateItemDataList;//[Offset: 0xc0, Size: 16]

--------------------------------
Class: RespawnIgnoreItemType

--------------------------------
Class: RespawnKeepAllItemData
	RespawnKeepItemData[] ItemDatas;//[Offset: 0x0, Size: 16]
	RespawnKeepWeaponData[] WeaponDatas;//[Offset: 0x10, Size: 16]

--------------------------------
Class: RespawnKeepItemData
	int ItemTypeID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RespawnKeepWeaponData.RespawnKeepItemData
	byte WeaponSlot;//[Offset: 0x20, Size: 1]
	RespawnKeepItemData[] AttachmentDatas;//[Offset: 0x28, Size: 16]
	int ClipBulletNum;//[Offset: 0x38, Size: 4]

--------------------------------
Class: RespawnItemConfig.DataAsset.Object
	RespawnItemMajorGroup[] MajorGroupList;//[Offset: 0x30, Size: 16]

--------------------------------
Class: RespawnItemMajorGroup
	int RandomTimes;//[Offset: 0x0, Size: 4]
	RespawnItemMinorGroup[] MinorGroupList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: RespawnItemMinorGroup
	int RandomWeight;//[Offset: 0x0, Size: 4]
	RespawnItem[] ItemList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: RespawnItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ShowVehicleComponent.ActorComponent.Object
	class Actor* VehicleSpotClass;//[Offset: 0x110, Size: 8]
	float DropHeightOffset;//[Offset: 0x118, Size: 4]
	float LeftTimeToDestroyVehicles;//[Offset: 0x11c, Size: 4]
	float TimerHzToDestroyVehicles;//[Offset: 0x120, Size: 4]
	float LeftTimeToDestroyWingman;//[Offset: 0x124, Size: 4]
	float TimerHzToDestroyWingman;//[Offset: 0x128, Size: 4]
	Actor*[] VehicleSpotActors;//[Offset: 0x130, Size: 16]
	<uint32,Actor*> VehicleContainers;//[Offset: 0x160, Size: 80]
	Actor*[] WingmanList;//[Offset: 0x1b8, Size: 16]
	void ShowWingmanFor(uint32 InPlayerKey, FString InWingmanClassPath, out const Transform InWingmanSpawnTransform);// 0x34de244
	void ShowVehicleFor(uint32 InPlayerKey, FString InVehiclePath, FString InVehicleContainerPath, int InAvatarID);// 0x34de0bc
	void OnGameModeStateChanged(out const GameModeStateChangedParams InParams);// 0x34de030
	void DestroyWingman();// 0x34de01c
	void DestroyVehicleFor(uint32 InPlayerKey);// 0x34ddfa0

--------------------------------
Class: PlaneTypes
	int SeasonIdx;//[Offset: 0x0, Size: 4]
	FString PlaneClassFullPath;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ItemAttach
	int BaseItemID;//[Offset: 0x0, Size: 4]
	AddItemInfo[] AttachItemList;//[Offset: 0x8, Size: 16]

--------------------------------
Class: AddItemInfo
	int AddItemID;//[Offset: 0x0, Size: 4]
	int AddItemNum;//[Offset: 0x4, Size: 4]
	bool TotalNumLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: RespawnItemConfigInst
	int RandomWeight;//[Offset: 0x0, Size: 4]
	class RespawnItemConfig* RespawnItemConfigClass;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FakePlayerCustomComponent.ActorComponent.Object
	FString tableName;//[Offset: 0x110, Size: 16]
	FString FakePlayerCampNameTableName;//[Offset: 0x120, Size: 16]
	FString FakePlayerRandomNameTableName;//[Offset: 0x130, Size: 16]
	<int,FakePlayerCustomRow> RowMap;//[Offset: 0x140, Size: 80]
	<int,FString> FakePlayerCampNameMap;//[Offset: 0x190, Size: 80]
	FString[] FakePlayerRandomNamePrefixArray;//[Offset: 0x1e0, Size: 16]
	FString[] FakePlayerRandomNameArray;//[Offset: 0x1f0, Size: 16]
	void InitRowDataMap();// 0x338a1cc
	void InitAIParam(int resID, out GameModeAIPlayerParams OutParam);// 0x338a0d8
	FString GetControllerPath(int resID);// 0x3389fe4

--------------------------------
Class: FakePlayerCustomRow
	int ID;//[Offset: 0x0, Size: 4]
	FString ControllerPath;//[Offset: 0x8, Size: 16]
	FString Name;//[Offset: 0x18, Size: 16]
	int gender;//[Offset: 0x28, Size: 4]
	FString ItemStr;//[Offset: 0x30, Size: 16]
	GameModePlayerItem[] PlayerItems;//[Offset: 0x40, Size: 16]
	int IsUseRandomName;//[Offset: 0x50, Size: 4]

--------------------------------
Class: DSTickRateOptimize
	float TickFrequency;//[Offset: 0x0, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x4, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x8, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GroupPlayers
	uint32[] Players;//[Offset: 0x0, Size: 16]

--------------------------------
Class: PVSNetRelevantHelper.Object
	float MaxVoiceSyncDissquaredDeathMatch;//[Offset: 0xd4, Size: 4]
	float MaxVoiceSyncDissquaredBR;//[Offset: 0xd8, Size: 4]
	float MaxVoiceSyncDissquared;//[Offset: 0xdc, Size: 4]
	float MinJudgeDisquared;//[Offset: 0xec, Size: 4]
	float MinSprintFootVoiceNeedVelocitySquared;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: AIControllerList

--------------------------------
Class: AIPawnPoolItem
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x0, Size: 8]

--------------------------------
Class: RoomCustomParams
	int CircleSpeedMultiplicator;//[Offset: 0x0, Size: 4]
	bool bAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bShowSkull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool bAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bGunRemoveBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int BlueCircleDamageMultiplicator;//[Offset: 0xc, Size: 4]
	bool bUseFirstWhiteCircleDelayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bUseFirstSafeZoneAppearTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bUseFirstWhiteCircleRadiusMultiplicator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	int FirstWhiteCircleDelayTime;//[Offset: 0x14, Size: 4]
	int FirstSafeZoneAppearTime;//[Offset: 0x18, Size: 4]
	int FirstWhiteCircleRadiusMultiplicator;//[Offset: 0x1c, Size: 4]
	bool EnableRedZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	CustomCircleParams[] CustomCircleParamsList;//[Offset: 0x28, Size: 16]
	bool bFuzzyInformation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: CustomCircleParams
	int Stage;//[Offset: 0x0, Size: 4]
	int DelayTime;//[Offset: 0x4, Size: 4]
	int SafeZoneAppeartime;//[Offset: 0x8, Size: 4]
	int LastTime;//[Offset: 0xc, Size: 4]
	int CircleDamage;//[Offset: 0x10, Size: 4]
	int BlueCircleRadius;//[Offset: 0x14, Size: 4]
	int WhiteCircleRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BP_PlayerCameraManager_C.STPlayerCameraManager.PlayerCameraManager.Actor.Object

--------------------------------
Class: STPlayerCameraManager.PlayerCameraManager.Actor.Object
	bool InVehicleFPPViewPitchLimitMinPositiveDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c84, Size: 1]
	bool InVehicleFPPViewPitchLimitMaxDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c85, Size: 1]
	float InVehicleFPPViewPitchLimitMin;//[Offset: 0x1c88, Size: 4]
	float InVehicleFPPViewPitchLimitMax;//[Offset: 0x1c8c, Size: 4]
	float InVehicleFPPViewYawLimit;//[Offset: 0x1c90, Size: 4]
	float InVehicleNarrowSeatGrenadesYawLimit;//[Offset: 0x1c94, Size: 4]
	float FPPYawLimitInZipline;//[Offset: 0x1c98, Size: 4]

--------------------------------
Class: BP_BattleRoyaleHUD_C.SurviveHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x708, Size: 8]
	bool IsValidDamageNumber(Actor* DamageCauser, int DamageTypeId, bool CallFunc_IsValid_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue2, byte CallFunc_GetWeaponTypeNew_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int CallFunc_Array_Find_ReturnValue2, bool CallFunc_GreaterEqual_IntInt_ReturnValue2);// 0x4033584
	LinearColor GetPlayerNameColorByTeamID(int TeamID, Color CallFunc_GetPlayerNameColorByTeamID_PlayerNameColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x4033584
	LinearColor GetColorByTeamID(int TeamID, Color CallFunc_GetPlayerColorByTeamID_PlayerColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x4033584
	void UserConstructionScript();// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void HitFeedBackChanged(bool BoolValue);// 0x4033584
	void OBSHitFeedbackChanged(bool BoolValue);// 0x4033584
	void ExecuteUbergraph_BP_BattleRoyaleHUD(int EntryPoint, bool K2Node_CustomEvent_BoolValue, delegate K2Node_CreateDelegate_OutputDelegate, SettingSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool K2Node_CustomEvent_BoolValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x710, Size: 8]
	int[] DamageNumberDamageTypes;//[Offset: 0x718, Size: 16]
	byte[] InvalidDamageNumberWeaponTypes;//[Offset: 0x728, Size: 16]

--------------------------------
Class: BP_PaintDecalDetectLine1_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3c8, Size: 8]
	void UpdateDetectLine(Actor* CallFunc_GetParentActor_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, MaterialInterface* CallFunc_GetMaterial_ReturnValue, enum CallFunc_IsValidPaintDecalTarget_OutvalidationType, Vector CallFunc_IsValidPaintDecalTarget_OutStart, Vector CallFunc_IsValidPaintDecalTarget_OutEnd, bool CallFunc_IsValidPaintDecalTarget_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue2);// 0x4033584
	void UserConstructionScript();// 0x4033584
	void ReceiveTick(float DeltaSeconds);// 0x4033584
	void StopDetecting();// 0x4033584
	void StartDetecting();// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void ExecuteUbergraph_BP_PaintDecalDetectLine1(int EntryPoint, float K2Node_Event_DeltaSeconds, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x4033584
	StaticMeshComponent* StaticMesh;//[Offset: 0x3d0, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3d8, Size: 8]
	Vector CachePos;//[Offset: 0x3e0, Size: 12]

--------------------------------
Class: BP_PlayerState_C.STExtraPlayerState.UAEPlayerState.LuaPlayerState.PlayerState.Info.Actor.Object
	void UserConstructionScript();// 0x4033584
	BP_PlayerStateStoreComponent_C* BP_PlayerStateStoreComponent;//[Offset: 0x1788, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x1790, Size: 8]

--------------------------------
Class: BP_PlayerStateStoreComponent_C.LuaActorComponent.ActorComponent.Object
	void RPC_Server_BuyGoodsNew(FString StrProperty);// 0x699d714
	void OnRep_DesignatedStorePlayerBuyGoodsList();// 0x4033584
	BuyGoodsInfo[] DesignatedStorePlayerBuyGoodsList;//[Offset: 0x1d8, Size: 16]

--------------------------------
Class: BuyGoodsInfo
	int BuyGoodsItemID;//[Offset: 0x0, Size: 4]
	int BuyGoodsItemCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BP_GameState_NewbieGame_C.SurviveGameState_C.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object

--------------------------------
Class: SurviveGameState_C.STExtraGameStateBase.UAEGameState.LuaGameState.GameState.GameStateBase.Info.Actor.Object
	void GetHasAR(out bool bHasAR);// 0x4033584
	void UserConstructionScript();// 0x4033584
	AirAttackComponent* AirAttack;//[Offset: 0x1288, Size: 8]
	ReviveBattleUIComponent* ReviveBattleUI;//[Offset: 0x1290, Size: 8]
	BP_GameStateStoreComponent_C* BP_GameStateStoreComponent;//[Offset: 0x1298, Size: 8]
	GameLevelManagerComponent* GameLevelManager;//[Offset: 0x12a0, Size: 8]
	AirAttackCS* AirAttackCS;//[Offset: 0x12a8, Size: 8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x12b0, Size: 8]

--------------------------------
Class: AirAttackComponent.TimerRegistComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x1d0, Size: 16]
	Vector MapOriginal;//[Offset: 0x1e0, Size: 12]
	float MapRadius;//[Offset: 0x1ec, Size: 4]
	float FlightHeight;//[Offset: 0x1f0, Size: 4]
	float SeaLevelHeight;//[Offset: 0x1f4, Size: 4]
	float DelayTime;//[Offset: 0x1f8, Size: 4]
	int WaveCount;//[Offset: 0x1fc, Size: 4]
	enum DefaultAirAttackGenerateType;//[Offset: 0x200, Size: 1]
	enum[] AirAttackGenerateTypeList;//[Offset: 0x208, Size: 16]
	bool bAirAttackUseModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	CurveFloat* AttackAreaSizeModifierCurve;//[Offset: 0x220, Size: 8]
	CurveFloat* BombCountModifierCurve;//[Offset: 0x228, Size: 8]
	int WaveInternal;//[Offset: 0x230, Size: 4]
	AirAttackCfg AirAttackConfig;//[Offset: 0x234, Size: 24]
	float BombBaseDamage;//[Offset: 0x24c, Size: 4]
	float BombMinDamage;//[Offset: 0x250, Size: 4]
	float BroadcastClientDistance;//[Offset: 0x254, Size: 4]
	AirAttackOrder AirAttackOrder;//[Offset: 0x258, Size: 72]
	Vector AirAttackArea;//[Offset: 0x2a0, Size: 12]
	byte AirAttackStatus;//[Offset: 0x2ac, Size: 1]
	float AirAttackDummyTime;//[Offset: 0x2b0, Size: 4]
	AirAttackCS* AirAttackCS;//[Offset: 0x2b8, Size: 8]
	void RPC_NetMulticast_BroadcastAirAttackOrder(byte AttackMsg, int waveIndex, AirAttackOrder airAttackOrderSrc, Vector AirAttackAreaSrc);// 0x323d2d0
	bool ReviseAirAttackLocation(out const Vector AirAttackLocation);// 0x323d22c
	Vector GetAirAttackArea();// 0x323d1f4
	void DisableAirAttack();// 0x323d1e0
	void DelayDisableAirAttack(float TimerSeconds);// 0x323d164
	void BroadcastAirAttackOver();// 0x323d150

--------------------------------
Class: AirAttackCfg
	float EscapeTime;//[Offset: 0x0, Size: 4]
	float AttackLastingTime;//[Offset: 0x4, Size: 4]
	float AttackAreaRadius;//[Offset: 0x8, Size: 4]
	float OuterRadius;//[Offset: 0xc, Size: 4]
	int TotalBombs;//[Offset: 0x10, Size: 4]
	int BombsRadius;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AirAttackCS.TimerRegistComponent.ActorComponent.Object
	class STExtraExplosionEffect* ExplosionEffectTemplate;//[Offset: 0x168, Size: 8]
	float VisibleDistance;//[Offset: 0x170, Size: 4]
	float DelayDamageAndBomb;//[Offset: 0x174, Size: 4]
	bool bHaveFlyingAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	float AheadOfTime;//[Offset: 0x180, Size: 4]
	class Actor* FlyingMissileClass;//[Offset: 0x188, Size: 8]
	int ActorPoolInitialSize;//[Offset: 0x190, Size: 4]
	Actor*[] MissileActorList;//[Offset: 0x198, Size: 16]
	AirAttackOrder AirAttackOrder;//[Offset: 0x1a8, Size: 72]
	Vector AirAttackArea;//[Offset: 0x1f0, Size: 12]
	void OnAirAttack(byte airattacktype, int waveIndex, out const AirAttackOrder InAirAttackOrder, out const Vector InAirAttackArea);// 0x323dce8
	void LaunchMissile(int Index);// 0x323dc6c
	void DoBombHarmAtLocation(out Vector bombLocation, const float BombBaseDamage, const float BombMinDamage);// 0x323db64
	void ClientFlyingMissile(int Index);// 0x323dae8
	void AirAttackThrowBomb(int Index);// 0x323da6c

--------------------------------
Class: ReviveBattleUIComponent.ActorComponent.Object
	FString LuaFilePath;//[Offset: 0x178, Size: 16]
	Vector[] ReviveTowerLocation;//[Offset: 0x188, Size: 16]
	bool bHasReviveTower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	void OnRep_ReviveTowerLocation();// 0x699d714

--------------------------------
Class: BP_GameStateStoreComponent_C.LuaActorComponent.ActorComponent.Object
	void RPC_Server_BuyGoodsNew(FString StrProperty);// 0x699d714
	BattleGoodsInfo[] BattleGoodsList;//[Offset: 0x1d8, Size: 16]
	BattleGoodsInfo[] DesignatedStorePatchGoodsList;//[Offset: 0x1e8, Size: 16]
	BuyGoodsInfo[] DesignatedStoreBattleBuyGoodsList;//[Offset: 0x1f8, Size: 16]

--------------------------------
Class: BattleGoodsInfo
	int GoodID;//[Offset: 0x0, Size: 4]
	FString ItemId;//[Offset: 0x8, Size: 16]
	int BattleLimitCount;//[Offset: 0x18, Size: 4]
	int StoreLimitCount;//[Offset: 0x1c, Size: 4]
	int PlayerLimitCount;//[Offset: 0x20, Size: 4]
	int TimeLimit;//[Offset: 0x24, Size: 4]
	int itemType;//[Offset: 0x28, Size: 4]
	int ItemOrder;//[Offset: 0x2c, Size: 4]
	int ItemCountPerBuy;//[Offset: 0x30, Size: 4]
	int price;//[Offset: 0x34, Size: 4]

--------------------------------
Class: MyLandscape.Actor.Object
	RuntimeMeshComponent* Mesh;//[Offset: 0x3c8, Size: 8]
	MyLandscapeGeometry* LandscapeGeometry;//[Offset: 0x3d0, Size: 8]
	Material* LandscapeMat;//[Offset: 0x3d8, Size: 8]
	StaticMeshComponent* HighQualityMesh;//[Offset: 0x460, Size: 8]
	LandscapeGeometry_ExtendData* LandscapeGeometry_ExtendData;//[Offset: 0x468, Size: 8]
	bool AutoLoadLandscapeMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	FString AutoLoadGeometryPath;//[Offset: 0x478, Size: 16]
	FString AutoLoadMaterialPath;//[Offset: 0x488, Size: 16]
	StaticMeshComponent* HighLODMesh;//[Offset: 0x498, Size: 8]
	bool EditorLoadLandscapeMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	float HideHighLODOfZ;//[Offset: 0x4a4, Size: 4]
	float ChangeLongerDistanceOfZ;//[Offset: 0x4a8, Size: 4]
	float ChangeLongerDistanceScale;//[Offset: 0x4ac, Size: 4]
	<FString> ChangeLongerDistanceLevels;//[Offset: 0x4b0, Size: 80]
	<StaticMeshActor*> HighMeshActorsOnFly;//[Offset: 0x500, Size: 80]
	Actor* ViewTarget;//[Offset: 0x558, Size: 8]
	RuntimeMeshComponent* GetMeshComp();// 0x3436bfc
	void GameEventReconnect();// 0x3436be8
	void GameEventJump();// 0x3436bd4
	void GameEventFlying();// 0x3436bc0
	void GameEventFighting();// 0x3436bac
	void GameEventAvatarDisplay();// 0x3436b98
	void AddHighMeshActorsOnFly(StaticMeshActor* Actor);// 0x3436b1c
	void AboutToSwitchViewTargetPlayer();// 0x3436b08

--------------------------------
Class: MyLandscapeGeometry.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x30, Size: 16]
	Vector[] Normals;//[Offset: 0x40, Size: 16]
	Vector2D[] UV;//[Offset: 0x50, Size: 16]
	int[] Indices;//[Offset: 0x60, Size: 16]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x70, Size: 80]
	int ComponentIndexCount;//[Offset: 0xc0, Size: 4]
	int ComponentVertexCount;//[Offset: 0xc4, Size: 4]
	<FString,SubLevelComponentMapValue> SubLevelComponentMap;//[Offset: 0xc8, Size: 80]
	StaticMesh* HighQualityMesh;//[Offset: 0x118, Size: 40]
	float HighQualityMeshDestroyHight;//[Offset: 0x140, Size: 4]

--------------------------------
Class: SubLevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 16]
	int[] IndexOffsetArray;//[Offset: 0x10, Size: 16]
	int[] VertexOffsetIndex;//[Offset: 0x20, Size: 16]
	int[] BorderIndex1;//[Offset: 0x30, Size: 16]
	int[] BorderIndex2;//[Offset: 0x40, Size: 16]
	int[] BorderIndex3;//[Offset: 0x50, Size: 16]
	int[] BorderIndex4;//[Offset: 0x60, Size: 16]
	int[] UnderBorderIndex1;//[Offset: 0x70, Size: 16]
	int[] UnderBorderIndex2;//[Offset: 0x80, Size: 16]
	int[] UnderBorderIndex3;//[Offset: 0x90, Size: 16]
	int[] UnderBorderIndex4;//[Offset: 0xa0, Size: 16]
	int[] BorderIndicesBuffer1;//[Offset: 0xb0, Size: 16]
	int[] BorderIndicesBuffer2;//[Offset: 0xc0, Size: 16]
	int[] BorderIndicesBuffer3;//[Offset: 0xd0, Size: 16]
	int[] BorderIndicesBuffer4;//[Offset: 0xe0, Size: 16]
	FString Sibling1Name;//[Offset: 0xf0, Size: 16]
	FString Sibling2Name;//[Offset: 0x100, Size: 16]
	FString Sibling3Name;//[Offset: 0x110, Size: 16]
	FString Sibling4Name;//[Offset: 0x120, Size: 16]
	int Sibling1Idx;//[Offset: 0x130, Size: 4]
	int Sibling2Idx;//[Offset: 0x134, Size: 4]
	int Sibling3Idx;//[Offset: 0x138, Size: 4]
	int Sibling4Idx;//[Offset: 0x13c, Size: 4]

--------------------------------
Class: LandscapeGeometry_ExtendData.DataAsset.Object
	<IntPoint,int> ComponentVertexIndexOffset;//[Offset: 0x30, Size: 80]

--------------------------------
Class: TssHookEx.Actor.Object

--------------------------------
Class: BP_ObjectPoolManager_AllMode_C.AObjectPoolManager.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x500, Size: 8]

--------------------------------
Class: Skill_Punch_Fist_bp_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	bool TriggerFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	enum PawnState;//[Offset: 0x6d1, Size: 1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d2, Size: 1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d3, Size: 1]
	int CastFailTipsID;//[Offset: 0x6d4, Size: 4]
	bool IgnoreCanBePlayedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	bool IgnoreConnectionCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d9, Size: 1]
	bool InteractiveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6da, Size: 1]
	float CancelLockDuration;//[Offset: 0x6dc, Size: 4]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x36a1b64
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int CoolDownIndex);// 0x36a1aa4
	void DelayLeaveStateForMelee(UTSkillManagerComponent* SkillManagerComponent);// 0x36a1a28

--------------------------------
Class: UAEBaseSkill.UTSkill.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x6c0, Size: 16]
	bool OnEvent(UTSkillManagerComponent* Comp, byte TheEventType, int PhaseIndex);// 0x369c9c0

--------------------------------
Class: Skill_Melee_Cowbar_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Melee_Machete_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Melee_Pan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Melee_Sickle_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_AdrenalineSyringe_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Bandage_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_EnergyDrink_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_FirstAidKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_GasCan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_MedKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Painkiller_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_RapidAidbox_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Grenade_Frag_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Grenade_Molotov_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Grenade_PoisonApple_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Grenade_Smoke_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Grenade_SnowBall_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Grenade_Stun_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Grenade_Smoke_BP_2_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_ProjSpikeTrap_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_ChangeWear_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_IceDrink_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_ParachuteLand_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Anubis_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Grenade_Sticky_Bomb_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_FinishInteractAtOnce_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Build_Shield_New_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_CarryBack_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_PutDown_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Template_Grenade_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_FishEyeInteraction_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_MiniTv_Hello_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Build_MVPStatue_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Template_TransformBack_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Template_Loading_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Empty_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Template_Transform_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_IceSwordInteraction_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_EmergencyCall_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void CheckAllowedLastPlacingTime(out bool bResult, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_FTrunc_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetCurCircleIndex_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x4033584
	void CheckAllowedStartPlacingTime(out bool bResult, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, int CallFunc_FTrunc_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetCurCircleIndex_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x4033584
	void CheckOther(out bool bResult, int ___int_Array_Index_Variable, int ___int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UTSkillManagerComponent* CallFunc_GetSpecificSkillManager_ReturnValue, EmergencyCallActor*[] CallFunc_GetAllActorsOfClass_OutActors, Actor* CallFunc_GetOwner_ReturnValue, EmergencyCallActor* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue2, float CallFunc_Dist_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_FloatFloat_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x4033584
	void CanPlace(out bool bResult, Vector PlaceLocation, bool bCheckResult, float TraceRadius, float TraceAlpha, Vector TraceEndLoc, Vector TraceStartLoc, float MinRadius, float MaxRadius, Vector EndCheckLoc, Vector StartCheckLoc, int ___int_Array_Index_Variable, UAEBlackboardKeySelector K2Node_MakeStruct_UAEBlackboardKeySelector, Actor*[] ___object_Variable, int ___int_Variable, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool ___bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, byte[] K2Node_MakeArray_Array, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, byte[] K2Node_MakeArray_Array2, UAEBlackboard* CallFunc_GetSpecificBlackboard_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, UTSkillManagerComponent* CallFunc_GetSpecificSkillManager_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, PrimitiveComponent* CallFunc_GetMovementBase_ReturnValue, float CallFunc_GetScaledCapsuleHalfHeight_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Actor*[] ___object_Variable2, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, int ___int_Loop_Counter_Variable, PrimitiveComponent*[] CallFunc_SphereOverlapComponents_OutComponents, bool CallFunc_SphereOverlapComponents_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, PrimitiveComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess2, float CallFunc_Lerp_ReturnValue, Vector CallFunc_VLerp_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, int CallFunc_FTrunc_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, float CallFunc_Divide_FloatFloat_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_DegTan_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue4, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue5, Vector CallFunc_Add_VectorVector_ReturnValue6);// 0x4033584
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]
	float StartCheckDist;//[Offset: 0x700, Size: 4]
	float StartCheckHeight;//[Offset: 0x704, Size: 4]
	float TraceDistance;//[Offset: 0x708, Size: 4]
	Vector TaceExtern;//[Offset: 0x70c, Size: 12]
	Vector2D CircleIndexRange;//[Offset: 0x718, Size: 8]

--------------------------------
Class: EmergencyCallActor.UAERegionActor.LuaActor.Actor.Object
	SplineComponent* SplineComponent;//[Offset: 0x4a0, Size: 8]
	STExtraBaseCharacter*[] InteractingCharacters;//[Offset: 0x4a8, Size: 16]
	enum[] DisablePawnStates;//[Offset: 0x4b8, Size: 16]
	float ConnectPlayerRange;//[Offset: 0x4c8, Size: 4]
	SkeletalMesh* BagMesh;//[Offset: 0x4d0, Size: 8]
	AkAudioEvent* ConnectAkEvent;//[Offset: 0x4d8, Size: 8]
	AkAudioEvent* DisconnectAkEvent;//[Offset: 0x4e0, Size: 8]
	float CheckCollisionRadius;//[Offset: 0x4e8, Size: 4]
	float CheckCollisionDelayTime;//[Offset: 0x4ec, Size: 4]
	float ForceGCTime;//[Offset: 0x4f0, Size: 4]
	bool bHadGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	enum CurStateType;//[Offset: 0x4f5, Size: 1]
	delegate OnEmergencyCallStateTypeChange;//[Offset: 0x4f8, Size: 16]
	float ServerEnterStateTime;//[Offset: 0x508, Size: 4]
	float FirstStateUpdateTime;//[Offset: 0x50c, Size: 4]
	float FlyingStateUpdateTime;//[Offset: 0x510, Size: 4]
	CurveFloat* BalloonHeightCurve;//[Offset: 0x518, Size: 8]
	float BalloonHeightCurveEndTime;//[Offset: 0x520, Size: 4]
	CurveVector* FlyingOffsetCurve;//[Offset: 0x528, Size: 8]
	FName[] RopeTopBones;//[Offset: 0x530, Size: 16]
	FName[] RopeBottomBones;//[Offset: 0x540, Size: 16]
	FName[] BagRingsName;//[Offset: 0x550, Size: 16]
	StaticMesh* RopeMesh;//[Offset: 0x560, Size: 8]
	FName RopeStartSocket;//[Offset: 0x568, Size: 8]
	FName RopeEndSocket;//[Offset: 0x570, Size: 8]
	float RopeLengthPerPiece;//[Offset: 0x578, Size: 4]
	AirplaneCharacter* AirPlane;//[Offset: 0x580, Size: 8]
	class Pawn* PlaneClass;//[Offset: 0x588, Size: 8]
	float ExtensionCordLength;//[Offset: 0x590, Size: 4]
	float CircleModeJumpRadiusPercent;//[Offset: 0x594, Size: 4]
	float PlaneSpeed;//[Offset: 0x598, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x59c, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x5a0, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x5a4, Size: 4]
	SkeletalMeshComponent* ParabagSkeletalMeshComp;//[Offset: 0x5a8, Size: 8]
	SkeletalMeshComponent* BalloonSkeletalMeshComp;//[Offset: 0x5b0, Size: 8]
	SplineMeshComponent*[] SplineMeshComponents;//[Offset: 0x5b8, Size: 16]
	SkeletalMeshComponent*[] BagSkeletalMeshComps;//[Offset: 0x5c8, Size: 16]
	bool WheatherCancelConnect(STExtraBaseCharacter* TargetCharcter);// 0x3359f7c
	void UpdateSubBag();// 0x3359f60
	void UpdateRope(float DeltaTime);// 0x3359edc
	void UpdateFunction(float DeltaTime);// 0x3359e58
	void UpdateFlyingOffset(float DeltaTime);// 0x3359dd4
	void UpdateEmergencyCallBag(STExtraBaseCharacter* ConnectedCharacter, int SeatIdx, bool bAdd);// 0x3359cd8
	void UpdateBoneVisible();// 0x3359cbc
	void UpdateBalloonLoc(float DeltaTime, bool bForceFinished);// 0x3359bf4
	void RemoveConnectedCharacter(STExtraBaseCharacter* ConnectedCharacter);// 0x3359b78
	void OnRep_InteractingCharacters();// 0x3359b64
	void OnRep_CurStateType(enum OldState);// 0x3359ae8
	void OnCameraModeChange(byte CameraMode);// 0x3359a6c
	void OnAvatarEquippedSucc(enum SlotType, bool IsEquipped, int InItemID);// 0x3359968
	void HideSubBag(bool bNeedHidden, int Index, bool bApplyAll);// 0x4033584
	void HideAllBackpack();// 0x3359954
	float GetCurrentStateTime();// 0x3359920
	AirplaneData GenerateAirplaneData(float AirPlaneHeight);// 0x33597d4
	void DestroyRope();// 0x33597c0
	void CheckCollision(float DeltaTime);// 0x335973c
	void CheckAirplaneLoc();// 0x3359720
	void ChangeState(enum NewState);// 0x33596a4
	void CallAirPlane(AirplaneData PlaneData);// 0x335950c
	void BreakAwayAll();// 0x4033584
	void AddConnectedCharacter(STExtraBaseCharacter* ConnectedCharacter);// 0x3359490

--------------------------------
Class: AirplaneCharacter.Character.Pawn.Actor.Object
	FString LuaFilePath;//[Offset: 0x860, Size: 16]
	LuaNetSerialization LuaNetSerialization;//[Offset: 0x870, Size: 80]
	AirplaneData MyFlyingData;//[Offset: 0x8c0, Size: 120]
	delegate OnReachForceJumpRatioDelegate;//[Offset: 0x938, Size: 16]
	bool bOnlyVisibleToTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x948, Size: 1]
	bool bStopAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x949, Size: 1]
	bool bForceControllerRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94a, Size: 1]
	bool bEnableShowJumpPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94b, Size: 1]
	void SetStopAllowed(bool InStop);// 0x32488c0
	void SetOwnFlyingData(AirplaneData InFlyingData);// 0x3248728
	void SetOnlyVisibleToTeam(bool bFlag);// 0x32486a4
	bool IsStopAllowed();// 0x324866c
	bool IsShowJumpPanelEnable();// 0x3248634
	void EnableShowJumpPanel(bool bEnable);// 0x32485b0
	void CheckAirplanePos(float DeltaTime);// 0x3248534

--------------------------------
Class: AirplaneData
	float PlaneHeight;//[Offset: 0x0, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x4, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x8, Size: 4]
	float CloseParachuteHeight;//[Offset: 0xc, Size: 4]
	Vector DestinationCenter;//[Offset: 0x10, Size: 12]
	Vector PlaneVelocity;//[Offset: 0x1c, Size: 12]
	Vector PlaneStartLoc;//[Offset: 0x28, Size: 12]
	Vector PlaneEndLoc;//[Offset: 0x34, Size: 12]
	Vector2D CanJumpLoc;//[Offset: 0x40, Size: 8]
	Vector2D ForceJumpLoc;//[Offset: 0x48, Size: 8]
	int TotalPlayerNum;//[Offset: 0x50, Size: 4]
	PlayerController*[] TotalPlayers;//[Offset: 0x58, Size: 16]
	PlayerController*[] CurPlayers;//[Offset: 0x68, Size: 16]

--------------------------------
Class: Skill_Zipline_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_TreeInteraction_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_UseBike_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: Skill_Build_Redpacket_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x4033584
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6f8, Size: 8]

--------------------------------
Class: BP_PlayerRifleBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	void UserConstructionScript();// 0x4033584
	StaticMeshComponent* BulletMesh;//[Offset: 0x6f0, Size: 8]

--------------------------------
Class: BP_PlayerShotgunBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	void UserConstructionScript();// 0x4033584
	StaticMeshComponent* BulletMesh;//[Offset: 0x6f0, Size: 8]

--------------------------------
Class: BP_PlayerSniperBullet_C.STExtraShootWeaponBulletBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6f0, Size: 8]
	void ActiveBulletParticle();// 0x4033584
	void UserConstructionScript();// 0x4033584
	void ReceiveBeginPlay();// 0x4033584
	void ResetParticle();// 0x4033584
	void DelayAction();// 0x4033584
	void ExecuteUbergraph_BP_PlayerSniperBullet(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x4033584
	ParticleSystemComponent* P_Sniper_bullet_01;//[Offset: 0x6f8, Size: 8]
	StaticMeshComponent* BulletMesh;//[Offset: 0x700, Size: 8]
	float EffectFxDelayShowTime;//[Offset: 0x708, Size: 4]
	TimerHandle DelayParticleTimer;//[Offset: 0x710, Size: 8]

--------------------------------
Class: BP_MiniTvInteraction_C.LuaActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x490, Size: 8]
	void SetActorRotate(int rotateZ, Character* CallFunc_GetPlayerCharacter_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, Vector CallFunc_GetActorScale3D_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue2, Rotator CallFunc_MakeRotator_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, HitResult CallFunc_K2_SetActorTransform_SweepHitResult, bool CallFunc_K2_SetActorTransform_ReturnValue);// 0x4033584
	void UserConstructionScript();// 0x4033584
	void ReceiveTick(float DeltaSeconds);// 0x4033584
	void ExecuteUbergraph_BP_MiniTvInteraction(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x4033584
	InteractiveComponent_C* InteractiveComponent;//[Offset: 0x498, Size: 8]
	BoxComponent* Box;//[Offset: 0x4a0, Size: 8]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x4a8, Size: 8]
	WidgetComponent* Widget_Tips;//[Offset: 0x4b0, Size: 8]
	CapsuleComponent* Capsule;//[Offset: 0x4b8, Size: 8]
	WidgetComponent* Widget;//[Offset: 0x4c0, Size: 8]
	bool isInteractiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	Character* MyCharacter;//[Offset: 0x4d0, Size: 8]
	int ActorRoatate;//[Offset: 0x4d8, Size: 4]

--------------------------------
Class: InteractiveComponent_C.InteractiveComponentBase.LuaActorComponent.ActorComponent.Object
	Object* BtnImage;//[Offset: 0x4b0, Size: 8]
	int TextId;//[Offset: 0x4b8, Size: 4]

--------------------------------
